error generating code: error formatting Go code // Package jellyseerrclient provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package jellyseerrclient

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"encoding/xml"
	"errors"
	"fmt"
	"gopkg.in/yaml.v2"
	"io"
	"os"
	"mime"
	"mime/multipart"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
	strictiris "github.com/oapi-codegen/runtime/strictmiddleware/iris"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/labstack/echo/v4"
	"github.com/gin-gonic/gin"
	"github.com/gofiber/fiber/v2"
	"github.com/kataras/iris/v12"
	"github.com/kataras/iris/v12/core/router"
	"github.com/gorilla/mux"
)

const (
ApiKeyScopes = "apiKey.Scopes"
CookieAuthScopes = "cookieAuth.Scopes"

)




// Defines values for JobInterval.
const (

  Fixed JobInterval = "fixed"
  Long JobInterval = "long"
  Short JobInterval = "short"
)

// Defines values for JobType.
const (

  Command JobType = "command"
  Process JobType = "process"
)

// Defines values for RelatedVideoSite.
const (

  YouTube RelatedVideoSite = "YouTube"
)

// Defines values for RelatedVideoType.
const (

  BehindTheScenes RelatedVideoType = "Behind the Scenes"
  Bloopers RelatedVideoType = "Bloopers"
  Clip RelatedVideoType = "Clip"
  Featurette RelatedVideoType = "Featurette"
  OpeningCredits RelatedVideoType = "Opening Credits"
  Teaser RelatedVideoType = "Teaser"
  Trailer RelatedVideoType = "Trailer"
)

// Defines values for GetIssueParamsSort.
const (

  GetIssueParamsSortAdded GetIssueParamsSort = "added"
  GetIssueParamsSortModified GetIssueParamsSort = "modified"
)

// Defines values for GetIssueParamsFilter.
const (

  GetIssueParamsFilterAll GetIssueParamsFilter = "all"
  GetIssueParamsFilterOpen GetIssueParamsFilter = "open"
  GetIssueParamsFilterResolved GetIssueParamsFilter = "resolved"
)

// Defines values for PostIssueIssueIdStatusParamsStatus.
const (

  PostIssueIssueIdStatusParamsStatusOpen PostIssueIssueIdStatusParamsStatus = "open"
  PostIssueIssueIdStatusParamsStatusResolved PostIssueIssueIdStatusParamsStatus = "resolved"
)

// Defines values for GetMediaParamsFilter.
const (

  GetMediaParamsFilterAll GetMediaParamsFilter = "all"
  GetMediaParamsFilterAllavailable GetMediaParamsFilter = "allavailable"
  GetMediaParamsFilterAvailable GetMediaParamsFilter = "available"
  GetMediaParamsFilterPartial GetMediaParamsFilter = "partial"
  GetMediaParamsFilterPending GetMediaParamsFilter = "pending"
  GetMediaParamsFilterProcessing GetMediaParamsFilter = "processing"
)

// Defines values for GetMediaParamsSort.
const (

  GetMediaParamsSortAdded GetMediaParamsSort = "added"
  GetMediaParamsSortMediaAdded GetMediaParamsSort = "mediaAdded"
  GetMediaParamsSortModified GetMediaParamsSort = "modified"
)

// Defines values for PostMediaMediaIdStatusParamsStatus.
const (

  PostMediaMediaIdStatusParamsStatusAvailable PostMediaMediaIdStatusParamsStatus = "available"
  PostMediaMediaIdStatusParamsStatusPartial PostMediaMediaIdStatusParamsStatus = "partial"
  PostMediaMediaIdStatusParamsStatusPending PostMediaMediaIdStatusParamsStatus = "pending"
  PostMediaMediaIdStatusParamsStatusProcessing PostMediaMediaIdStatusParamsStatus = "processing"
  PostMediaMediaIdStatusParamsStatusUnknown PostMediaMediaIdStatusParamsStatus = "unknown"
)

// Defines values for GetRequestParamsFilter.
const (

  GetRequestParamsFilterAll GetRequestParamsFilter = "all"
  GetRequestParamsFilterApproved GetRequestParamsFilter = "approved"
  GetRequestParamsFilterAvailable GetRequestParamsFilter = "available"
  GetRequestParamsFilterFailed GetRequestParamsFilter = "failed"
  GetRequestParamsFilterPending GetRequestParamsFilter = "pending"
  GetRequestParamsFilterProcessing GetRequestParamsFilter = "processing"
  GetRequestParamsFilterUnavailable GetRequestParamsFilter = "unavailable"
)

// Defines values for GetRequestParamsSort.
const (

  Added GetRequestParamsSort = "added"
  Modified GetRequestParamsSort = "modified"
)

// Defines values for PostRequestJSONBodyMediaType.
const (

  PostRequestJSONBodyMediaTypeMovie PostRequestJSONBodyMediaType = "movie"
  PostRequestJSONBodyMediaTypeTv PostRequestJSONBodyMediaType = "tv"
)

// Defines values for PostRequestJSONBodySeasons1.
const (

  PostRequestJSONBodySeasons1All PostRequestJSONBodySeasons1 = "all"
)

// Defines values for PutRequestRequestIdJSONBodyMediaType.
const (

  PutRequestRequestIdJSONBodyMediaTypeMovie PutRequestRequestIdJSONBodyMediaType = "movie"
  PutRequestRequestIdJSONBodyMediaTypeTv PutRequestRequestIdJSONBodyMediaType = "tv"
)

// Defines values for PostRequestRequestIdStatusParamsStatus.
const (

  Approve PostRequestRequestIdStatusParamsStatus = "approve"
  Decline PostRequestRequestIdStatusParamsStatus = "decline"
)

// Defines values for GetSettingsLogsParamsFilter.
const (

  Debug GetSettingsLogsParamsFilter = "debug"
  Error GetSettingsLogsParamsFilter = "error"
  Info GetSettingsLogsParamsFilter = "info"
  Warn GetSettingsLogsParamsFilter = "warn"
)

// Defines values for GetUserParamsSort.
const (

  Created GetUserParamsSort = "created"
  Displayname GetUserParamsSort = "displayname"
  Requests GetUserParamsSort = "requests"
  Updated GetUserParamsSort = "updated"
)


// Cast defines model for Cast.
type Cast  struct {
    CastId *float32`json:"castId,omitempty"`
    Character *string`json:"character,omitempty"`
    CreditId *string`json:"creditId,omitempty"`
    Gender *float32`json:"gender,omitempty"`
    Id *float32`json:"id,omitempty"`
    Name *string`json:"name,omitempty"`
    Order *float32`json:"order,omitempty"`
    ProfilePath *string`json:"profilePath"`
}

// Collection defines model for Collection.
type Collection  struct {
    BackdropPath *string`json:"backdropPath,omitempty"`
    Id *float32`json:"id,omitempty"`
    Name *string`json:"name,omitempty"`
    Overview *string`json:"overview,omitempty"`
    Parts *[]MovieResult`json:"parts,omitempty"`
    PosterPath *string`json:"posterPath,omitempty"`
}

// Company defines model for Company.
type Company  struct {
    Id *float32`json:"id,omitempty"`
    LogoPath *string`json:"logo_path"`
    Name *string`json:"name,omitempty"`
}

// CreditCast defines model for CreditCast.
type CreditCast  struct {
    Adult *bool`json:"adult,omitempty"`
    BackdropPath *string`json:"backdropPath,omitempty"`
    Character *string`json:"character,omitempty"`
    CreditId *string`json:"creditId,omitempty"`
    EpisodeCount *float32`json:"episodeCount,omitempty"`
    FirstAirDate *string`json:"firstAirDate,omitempty"`
    GenreIds *[]float32`json:"genreIds,omitempty"`
    Id *float32`json:"id,omitempty"`
    MediaInfo *MediaInfo`json:"mediaInfo,omitempty"`
    MediaType *string`json:"mediaType,omitempty"`
    Name *string`json:"name,omitempty"`
    OriginCountry *[]string`json:"originCountry,omitempty"`
    OriginalLanguage *string`json:"originalLanguage,omitempty"`
    OriginalName *string`json:"originalName,omitempty"`
    OriginalTitle *string`json:"originalTitle,omitempty"`
    Overview *string`json:"overview,omitempty"`
    Popularity *float32`json:"popularity,omitempty"`
    PosterPath *string`json:"posterPath,omitempty"`
    ReleaseDate *string`json:"releaseDate,omitempty"`
    Title *string`json:"title,omitempty"`
    Video *bool`json:"video,omitempty"`
    VoteAverage *float32`json:"voteAverage,omitempty"`
    VoteCount *float32`json:"voteCount,omitempty"`
}

// CreditCrew defines model for CreditCrew.
type CreditCrew  struct {
    Adult *bool`json:"adult,omitempty"`
    BackdropPath *string`json:"backdropPath,omitempty"`
    CreditId *string`json:"creditId,omitempty"`
    Department *string`json:"department,omitempty"`
    EpisodeCount *float32`json:"episodeCount,omitempty"`
    FirstAirDate *string`json:"firstAirDate,omitempty"`
    GenreIds *[]float32`json:"genreIds,omitempty"`
    Id *float32`json:"id,omitempty"`
    Job *string`json:"job,omitempty"`
    MediaInfo *MediaInfo`json:"mediaInfo,omitempty"`
    MediaType *string`json:"mediaType,omitempty"`
    Name *string`json:"name,omitempty"`
    OriginCountry *[]string`json:"originCountry,omitempty"`
    OriginalLanguage *string`json:"originalLanguage,omitempty"`
    OriginalName *string`json:"originalName,omitempty"`
    OriginalTitle *string`json:"originalTitle,omitempty"`
    Overview *string`json:"overview,omitempty"`
    Popularity *float32`json:"popularity,omitempty"`
    PosterPath *string`json:"posterPath,omitempty"`
    ReleaseDate *string`json:"releaseDate,omitempty"`
    Title *string`json:"title,omitempty"`
    Video *bool`json:"video,omitempty"`
    VoteAverage *float32`json:"voteAverage,omitempty"`
    VoteCount *float32`json:"voteCount,omitempty"`
}

// Crew defines model for Crew.
type Crew  struct {
    CreditId *string`json:"creditId,omitempty"`
    Department *string`json:"department,omitempty"`
    Gender *float32`json:"gender,omitempty"`
    Id *float32`json:"id,omitempty"`
    Job *string`json:"job,omitempty"`
    Name *string`json:"name,omitempty"`
    ProfilePath *string`json:"profilePath"`
}

// DiscordSettings defines model for DiscordSettings.
type DiscordSettings  struct {
    Enabled *bool`json:"enabled,omitempty"`
    Options *struct {
    BotAvatarUrl *string`json:"botAvatarUrl,omitempty"`
    BotUsername *string`json:"botUsername,omitempty"`
    EnableMentions *bool`json:"enableMentions,omitempty"`
    WebhookUrl *string`json:"webhookUrl,omitempty"`
}`json:"options,omitempty"`
    Types *float32`json:"types,omitempty"`
}

// DiscoverSlider defines model for DiscoverSlider.
type DiscoverSlider  struct {
    Data *string`json:"data"`
    Enabled bool`json:"enabled"`
    Id *float32`json:"id,omitempty"`
    IsBuiltIn *bool`json:"isBuiltIn,omitempty"`
    Title *string`json:"title"`
    Type float32`json:"type"`
}

// Episode defines model for Episode.
type Episode  struct {
    AirDate *string`json:"airDate"`
    EpisodeNumber *float32`json:"episodeNumber,omitempty"`
    Id *float32`json:"id,omitempty"`
    Name *string`json:"name,omitempty"`
    Overview *string`json:"overview,omitempty"`
    ProductionCode *string`json:"productionCode,omitempty"`
    SeasonNumber *float32`json:"seasonNumber,omitempty"`
    ShowId *float32`json:"showId,omitempty"`
    StillPath *string`json:"stillPath"`
    VoteAverage *float32`json:"voteAverage,omitempty"`
    VoteCount *float32`json:"voteCount,omitempty"`
}

// ExternalIds defines model for ExternalIds.
type ExternalIds  struct {
    FacebookId *string`json:"facebookId"`
    FreebaseId *string`json:"freebaseId"`
    FreebaseMid *string`json:"freebaseMid"`
    ImdbId *string`json:"imdbId"`
    InstagramId *string`json:"instagramId"`
    TvdbId *float32`json:"tvdbId"`
    TvrageId *float32`json:"tvrageId"`
    TwitterId *string`json:"twitterId"`
}

// Genre defines model for Genre.
type Genre  struct {
    Id *float32`json:"id,omitempty"`
    Name *string`json:"name,omitempty"`
}

// GotifySettings defines model for GotifySettings.
type GotifySettings  struct {
    Enabled *bool`json:"enabled,omitempty"`
    Options *struct {
    Token *string`json:"token,omitempty"`
    Url *string`json:"url,omitempty"`
}`json:"options,omitempty"`
    Types *float32`json:"types,omitempty"`
}

// Issue defines model for Issue.
type Issue  struct {
    Comments *[]IssueComment`json:"comments,omitempty"`
    CreatedBy *User`json:"createdBy,omitempty"`
    Id *float32`json:"id,omitempty"`
    IssueType *float32`json:"issueType,omitempty"`
    Media *MediaInfo`json:"media,omitempty"`
    ModifiedBy *User`json:"modifiedBy,omitempty"`
}

// IssueComment defines model for IssueComment.
type IssueComment  struct {
    Id *float32`json:"id,omitempty"`
    Message *string`json:"message,omitempty"`
    User *User`json:"user,omitempty"`
}

// JellyfinLibrary defines model for JellyfinLibrary.
type JellyfinLibrary  struct {
    Enabled bool`json:"enabled"`
    Id string`json:"id"`
    Name string`json:"name"`
}

// JellyfinSettings defines model for JellyfinSettings.
type JellyfinSettings  struct {
    AdminPass *string`json:"adminPass,omitempty"`
    AdminUser *string`json:"adminUser,omitempty"`
    ExternalHostname *string`json:"externalHostname,omitempty"`
    Hostname *string`json:"hostname,omitempty"`
    JellyfinForgotPasswordUrl *string`json:"jellyfinForgotPasswordUrl,omitempty"`
    Libraries *[]JellyfinLibrary`json:"libraries,omitempty"`
    Name *string`json:"name,omitempty"`
    ServerID *string`json:"serverID,omitempty"`
}

// Job defines model for Job.
type Job  struct {
    Id *string`json:"id,omitempty"`
    Interval *JobInterval`json:"interval,omitempty"`
    Name *string`json:"name,omitempty"`
    NextExecutionTime *string`json:"nextExecutionTime,omitempty"`
    Running *bool`json:"running,omitempty"`
    Type *JobType`json:"type,omitempty"`
}

// JobInterval defines model for Job.Interval.
type JobInterval  string

// JobType defines model for Job.Type.
type JobType  string

// Keyword defines model for Keyword.
type Keyword  struct {
    Id *float32`json:"id,omitempty"`
    Name *string`json:"name,omitempty"`
}

// LunaSeaSettings defines model for LunaSeaSettings.
type LunaSeaSettings  struct {
    Enabled *bool`json:"enabled,omitempty"`
    Options *struct {
    ProfileName *string`json:"profileName,omitempty"`
    WebhookUrl *string`json:"webhookUrl,omitempty"`
}`json:"options,omitempty"`
    Types *float32`json:"types,omitempty"`
}

// MainSettings defines model for MainSettings.
type MainSettings  struct {
    ApiKey *string`json:"apiKey,omitempty"`
    AppLanguage *string`json:"appLanguage,omitempty"`
    ApplicationTitle *string`json:"applicationTitle,omitempty"`
    ApplicationUrl *string`json:"applicationUrl,omitempty"`
    CsrfProtection *bool`json:"csrfProtection,omitempty"`
    DefaultPermissions *float32`json:"defaultPermissions,omitempty"`
    HideAvailable *bool`json:"hideAvailable,omitempty"`
    LocalLogin *bool`json:"localLogin,omitempty"`
    MediaServerType *float32`json:"mediaServerType,omitempty"`
    NewPlexLogin *bool`json:"newPlexLogin,omitempty"`
    PartialRequestsEnabled *bool`json:"partialRequestsEnabled,omitempty"`
    TrustProxy *bool`json:"trustProxy,omitempty"`
}

// MediaInfo defines model for MediaInfo.
type MediaInfo  struct {
    CreatedAt *string`json:"createdAt,omitempty"`
    Id *float32`json:"id,omitempty"`
    Requests *[]MediaRequest`json:"requests,omitempty"`

// Status Availability of the media. 1 = `UNKNOWN`, 2 = `PENDING`, 3 = `PROCESSING`, 4 = `PARTIALLY_AVAILABLE`, 5 = `AVAILABLE`
    Status *float32`json:"status,omitempty"`
    TmdbId *float32`json:"tmdbId,omitempty"`
    TvdbId *float32`json:"tvdbId"`
    UpdatedAt *string`json:"updatedAt,omitempty"`
}

// MediaRequest defines model for MediaRequest.
type MediaRequest  struct {
    CreatedAt *string`json:"createdAt,omitempty"`
    Id *float32`json:"id,omitempty"`
    Is4k *bool`json:"is4k,omitempty"`
    Media *MediaInfo`json:"media,omitempty"`
    ModifiedBy *MediaRequest_ModifiedBy`json:"modifiedBy,omitempty"`
    ProfileId *float32`json:"profileId,omitempty"`
    RequestedBy *User`json:"requestedBy,omitempty"`
    RootFolder *string`json:"rootFolder,omitempty"`
    ServerId *float32`json:"serverId,omitempty"`

// Status Status of the request. 1 = PENDING APPROVAL, 2 = APPROVED, 3 = DECLINED
    Status *float32`json:"status,omitempty"`
    UpdatedAt *string`json:"updatedAt,omitempty"`
}

// MediaRequestModifiedBy1 defines model for .
type MediaRequestModifiedBy1 = string

// MediaRequest_ModifiedBy defines model for MediaRequest.ModifiedBy.
type MediaRequest_ModifiedBy  struct {
union json.RawMessage
}

// MovieDetails defines model for MovieDetails.
type MovieDetails  struct {
    Adult *bool`json:"adult,omitempty"`
    BackdropPath *string`json:"backdropPath,omitempty"`
    Budget *float32`json:"budget,omitempty"`
    Collection *struct {
    BackdropPath *string`json:"backdropPath,omitempty"`
    Id *float32`json:"id,omitempty"`
    Name *string`json:"name,omitempty"`
    PosterPath *string`json:"posterPath,omitempty"`
}`json:"collection,omitempty"`
    Credits *struct {
    Cast *[]Cast`json:"cast,omitempty"`
    Crew *[]Crew`json:"crew,omitempty"`
}`json:"credits,omitempty"`
    ExternalIds *ExternalIds`json:"externalIds,omitempty"`
    Genres *[]Genre`json:"genres,omitempty"`
    Homepage *string`json:"homepage,omitempty"`
    Id *float32`json:"id,omitempty"`
    ImdbId *string`json:"imdbId,omitempty"`
    MediaInfo *MediaInfo`json:"mediaInfo,omitempty"`
    OriginalLanguage *string`json:"originalLanguage,omitempty"`
    OriginalTitle *string`json:"originalTitle,omitempty"`
    Overview *string`json:"overview,omitempty"`
    Popularity *float32`json:"popularity,omitempty"`
    PosterPath *string`json:"posterPath,omitempty"`
    ProductionCompanies *[]ProductionCompany`json:"productionCompanies,omitempty"`
    ProductionCountries *[]struct {
    Iso31661 *string`json:"iso_3166_1,omitempty"`
    Name *string`json:"name,omitempty"`
}`json:"productionCountries,omitempty"`
    RelatedVideos *[]RelatedVideo`json:"relatedVideos,omitempty"`
    ReleaseDate *string`json:"releaseDate,omitempty"`
    Releases *struct {
    Results *[]struct {
    Iso31661 *string`json:"iso_3166_1,omitempty"`
    Rating *string`json:"rating"`
    ReleaseDates *[]struct {
    Certification *string`json:"certification,omitempty"`
    Iso6391 *string`json:"iso_639_1"`
    Note *string`json:"note"`
    ReleaseDate *string`json:"release_date,omitempty"`
    Type *float32`json:"type,omitempty"`
}`json:"release_dates,omitempty"`
}`json:"results,omitempty"`
}`json:"releases,omitempty"`
    Revenue *float32`json:"revenue"`
    Runtime *float32`json:"runtime,omitempty"`
    SpokenLanguages *[]SpokenLanguage`json:"spokenLanguages,omitempty"`
    Status *string`json:"status,omitempty"`
    Tagline *string`json:"tagline,omitempty"`
    Title *string`json:"title,omitempty"`
    Video *bool`json:"video,omitempty"`
    VoteAverage *float32`json:"voteAverage,omitempty"`
    VoteCount *float32`json:"voteCount,omitempty"`
    WatchProviders *[]WatchProviders`json:"watchProviders,omitempty"`
}

// MovieResult defines model for MovieResult.
type MovieResult  struct {
    Adult *bool`json:"adult,omitempty"`
    BackdropPath *string`json:"backdropPath,omitempty"`
    GenreIds *[]float32`json:"genreIds,omitempty"`
    Id float32`json:"id"`
    MediaInfo *MediaInfo`json:"mediaInfo,omitempty"`
    MediaType string`json:"mediaType"`
    OriginalLanguage *string`json:"originalLanguage,omitempty"`
    OriginalTitle *string`json:"originalTitle,omitempty"`
    Overview *string`json:"overview,omitempty"`
    Popularity *float32`json:"popularity,omitempty"`
    PosterPath *string`json:"posterPath,omitempty"`
    ReleaseDate *string`json:"releaseDate,omitempty"`
    Title string`json:"title"`
    Video *bool`json:"video,omitempty"`
    VoteAverage *float32`json:"voteAverage,omitempty"`
    VoteCount *float32`json:"voteCount,omitempty"`
}

// Network defines model for Network.
type Network  struct {
    Id *float32`json:"id,omitempty"`
    LogoPath *string`json:"logoPath"`
    Name *string`json:"name,omitempty"`
    OriginCountry *string`json:"originCountry,omitempty"`
}

// NotificationAgentTypes defines model for NotificationAgentTypes.
type NotificationAgentTypes  struct {
    Discord *float32`json:"discord,omitempty"`
    Email *float32`json:"email,omitempty"`
    Pushbullet *float32`json:"pushbullet,omitempty"`
    Pushover *float32`json:"pushover,omitempty"`
    Slack *float32`json:"slack,omitempty"`
    Telegram *float32`json:"telegram,omitempty"`
    Webhook *float32`json:"webhook,omitempty"`
    Webpush *float32`json:"webpush,omitempty"`
}

// NotificationEmailSettings defines model for NotificationEmailSettings.
type NotificationEmailSettings  struct {
    Enabled *bool`json:"enabled,omitempty"`
    Options *struct {
    AllowSelfSigned *bool`json:"allowSelfSigned,omitempty"`
    AuthPass *string`json:"authPass"`
    AuthUser *string`json:"authUser"`
    EmailFrom *string`json:"emailFrom,omitempty"`
    IgnoreTls *bool`json:"ignoreTls,omitempty"`
    RequireTls *bool`json:"requireTls,omitempty"`
    Secure *bool`json:"secure,omitempty"`
    SenderName *string`json:"senderName,omitempty"`
    SmtpHost *string`json:"smtpHost,omitempty"`
    SmtpPort *float32`json:"smtpPort,omitempty"`
}`json:"options,omitempty"`
    Types *float32`json:"types,omitempty"`
}

// PageInfo defines model for PageInfo.
type PageInfo  struct {
    Page *float32`json:"page,omitempty"`
    Pages *float32`json:"pages,omitempty"`
    Results *float32`json:"results,omitempty"`
}

// PersonDetails defines model for PersonDetails.
type PersonDetails  struct {
    Adult *bool`json:"adult,omitempty"`
    AlsoKnownAs *[]string`json:"alsoKnownAs,omitempty"`
    Biography *string`json:"biography,omitempty"`
    Deathday *string`json:"deathday,omitempty"`
    Gender *string`json:"gender,omitempty"`
    Homepage *string`json:"homepage,omitempty"`
    Id *float32`json:"id,omitempty"`
    ImdbId *string`json:"imdbId,omitempty"`
    KnownForDepartment *string`json:"knownForDepartment,omitempty"`
    Name *string`json:"name,omitempty"`
    PlaceOfBirth *string`json:"placeOfBirth,omitempty"`
    Popularity *string`json:"popularity,omitempty"`
    ProfilePath *string`json:"profilePath,omitempty"`
}

// PersonResult defines model for PersonResult.
type PersonResult  struct {
    Adult *bool`json:"adult,omitempty"`
    Id *float32`json:"id,omitempty"`
    KnownFor *[]PersonResult_KnownFor_Item`json:"knownFor,omitempty"`
    MediaType *string`json:"mediaType,omitempty"`
    ProfilePath *string`json:"profilePath,omitempty"`
}

// PersonResult_KnownFor_Item defines model for PersonResult.knownFor.Item.
type PersonResult_KnownFor_Item  struct {
union json.RawMessage
}

// PlexConnection defines model for PlexConnection.
type PlexConnection  struct {
    Address string`json:"address"`
    Local bool`json:"local"`
    Message *string`json:"message,omitempty"`
    Port float32`json:"port"`
    Protocol string`json:"protocol"`
    Status *float32`json:"status,omitempty"`
    Uri string`json:"uri"`
}

// PlexDevice defines model for PlexDevice.
type PlexDevice  struct {
    AccessToken *string`json:"accessToken,omitempty"`
    ClientIdentifier string`json:"clientIdentifier"`
    Connection []PlexConnection`json:"connection"`
    CreatedAt string`json:"createdAt"`
    Device string`json:"device"`
    DnsRebindingProtection *bool`json:"dnsRebindingProtection,omitempty"`
    Home *bool`json:"home,omitempty"`
    HttpsRequired *bool`json:"httpsRequired,omitempty"`
    LastSeenAt string`json:"lastSeenAt"`
    Name string`json:"name"`
    NatLoopbackSupported *bool`json:"natLoopbackSupported,omitempty"`
    Owned bool`json:"owned"`
    OwnerID *string`json:"ownerID,omitempty"`
    Platform string`json:"platform"`
    PlatformVersion *string`json:"platformVersion,omitempty"`
    Presence *bool`json:"presence,omitempty"`
    Product string`json:"product"`
    ProductVersion string`json:"productVersion"`
    Provides []string`json:"provides"`
    PublicAddress *string`json:"publicAddress,omitempty"`
    PublicAddressMatches *bool`json:"publicAddressMatches,omitempty"`
    Relay *bool`json:"relay,omitempty"`
    SourceTitle *string`json:"sourceTitle,omitempty"`
    Synced *bool`json:"synced,omitempty"`
}

// PlexLibrary defines model for PlexLibrary.
type PlexLibrary  struct {
    Enabled bool`json:"enabled"`
    Id string`json:"id"`
    Name string`json:"name"`
}

// PlexSettings defines model for PlexSettings.
type PlexSettings  struct {
    Ip string`json:"ip"`
    Libraries *[]PlexLibrary`json:"libraries,omitempty"`
    MachineId *string`json:"machineId,omitempty"`
    Name *string`json:"name,omitempty"`
    Port float32`json:"port"`
    UseSsl *bool`json:"useSsl"`
    WebAppUrl *string`json:"webAppUrl"`
}

// ProductionCompany defines model for ProductionCompany.
type ProductionCompany  struct {
    Id *float32`json:"id,omitempty"`
    LogoPath *string`json:"logoPath"`
    Name *string`json:"name,omitempty"`
    OriginCountry *string`json:"originCountry,omitempty"`
}

// PublicSettings defines model for PublicSettings.
type PublicSettings  struct {
    Initialized *bool`json:"initialized,omitempty"`
}

// PushbulletSettings defines model for PushbulletSettings.
type PushbulletSettings  struct {
    Enabled *bool`json:"enabled,omitempty"`
    Options *struct {
    AccessToken *string`json:"accessToken,omitempty"`
    ChannelTag *string`json:"channelTag"`
}`json:"options,omitempty"`
    Types *float32`json:"types,omitempty"`
}

// PushoverSettings defines model for PushoverSettings.
type PushoverSettings  struct {
    Enabled *bool`json:"enabled,omitempty"`
    Options *struct {
    AccessToken *string`json:"accessToken,omitempty"`
    Sound *string`json:"sound,omitempty"`
    UserToken *string`json:"userToken,omitempty"`
}`json:"options,omitempty"`
    Types *float32`json:"types,omitempty"`
}

// RadarrSettings defines model for RadarrSettings.
type RadarrSettings  struct {
    ActiveDirectory string`json:"activeDirectory"`
    ActiveProfileId float32`json:"activeProfileId"`
    ActiveProfileName string`json:"activeProfileName"`
    ApiKey string`json:"apiKey"`
    BaseUrl *string`json:"baseUrl,omitempty"`
    ExternalUrl *string`json:"externalUrl,omitempty"`
    Hostname string`json:"hostname"`
    Id *float32`json:"id,omitempty"`
    Is4k bool`json:"is4k"`
    IsDefault bool`json:"isDefault"`
    MinimumAvailability string`json:"minimumAvailability"`
    Name string`json:"name"`
    Port float32`json:"port"`
    PreventSearch *bool`json:"preventSearch,omitempty"`
    SyncEnabled *bool`json:"syncEnabled,omitempty"`
    UseSsl bool`json:"useSsl"`
}

// RelatedVideo defines model for RelatedVideo.
type RelatedVideo  struct {
    Key *string`json:"key,omitempty"`
    Name *string`json:"name,omitempty"`
    Site *RelatedVideoSite`json:"site,omitempty"`
    Size *float32`json:"size,omitempty"`
    Type *RelatedVideoType`json:"type,omitempty"`
    Url *string`json:"url,omitempty"`
}

// RelatedVideoSite defines model for RelatedVideo.Site.
type RelatedVideoSite  string

// RelatedVideoType defines model for RelatedVideo.Type.
type RelatedVideoType  string

// Season defines model for Season.
type Season  struct {
    AirDate *string`json:"airDate"`
    EpisodeCount *float32`json:"episodeCount,omitempty"`
    Episodes *[]Episode`json:"episodes,omitempty"`
    Id *float32`json:"id,omitempty"`
    Name *string`json:"name,omitempty"`
    Overview *string`json:"overview,omitempty"`
    PosterPath *string`json:"posterPath,omitempty"`
    SeasonNumber *float32`json:"seasonNumber,omitempty"`
}

// ServiceProfile defines model for ServiceProfile.
type ServiceProfile  struct {
    Id *float32`json:"id,omitempty"`
    Name *string`json:"name,omitempty"`
}

// SlackSettings defines model for SlackSettings.
type SlackSettings  struct {
    Enabled *bool`json:"enabled,omitempty"`
    Options *struct {
    WebhookUrl *string`json:"webhookUrl,omitempty"`
}`json:"options,omitempty"`
    Types *float32`json:"types,omitempty"`
}

// SonarrSeries defines model for SonarrSeries.
type SonarrSeries  struct {
    AddOptions *[]struct {
    IgnoreEpisodesWithFiles *bool`json:"ignoreEpisodesWithFiles"`
    IgnoreEpisodesWithoutFiles *bool`json:"ignoreEpisodesWithoutFiles"`
    SearchForMissingEpisodes *bool`json:"searchForMissingEpisodes"`
}`json:"addOptions,omitempty"`
    Added *string`json:"added,omitempty"`
    AirTime *string`json:"airTime,omitempty"`
    Certification *string`json:"certification,omitempty"`
    CleanTitle *string`json:"cleanTitle,omitempty"`
    FirstAired *string`json:"firstAired,omitempty"`
    Genres *[]string`json:"genres,omitempty"`
    Id *float32`json:"id"`
    Images *[]struct {
    CoverType *string`json:"coverType,omitempty"`
    Url *string`json:"url,omitempty"`
}`json:"images,omitempty"`
    ImdbId *string`json:"imdbId,omitempty"`
    LanguageProfileId *float32`json:"languageProfileId,omitempty"`
    LastInfoSync *string`json:"lastInfoSync"`
    Monitored *bool`json:"monitored,omitempty"`
    Network *string`json:"network,omitempty"`
    Overview *string`json:"overview,omitempty"`
    Path *string`json:"path,omitempty"`
    ProfileId *float32`json:"profileId,omitempty"`
    QualityProfileId *float32`json:"qualityProfileId,omitempty"`
    Ratings *[]struct {
    Value *float32`json:"value,omitempty"`
    Votes *float32`json:"votes,omitempty"`
}`json:"ratings,omitempty"`
    RemotePoster *string`json:"remotePoster,omitempty"`
    RootFolderPath *string`json:"rootFolderPath"`
    Runtime *float32`json:"runtime,omitempty"`
    SeasonCount *float32`json:"seasonCount,omitempty"`
    SeasonFolder *bool`json:"seasonFolder,omitempty"`
    Seasons *[]struct {
    Monitored *bool`json:"monitored,omitempty"`
    SeasonNumber *float32`json:"seasonNumber,omitempty"`
}`json:"seasons,omitempty"`
    SeriesType *string`json:"seriesType,omitempty"`
    SortTitle *string`json:"sortTitle,omitempty"`
    Status *string`json:"status,omitempty"`
    Tags *[]string`json:"tags,omitempty"`
    Title *string`json:"title,omitempty"`
    TitleSlug *string`json:"titleSlug,omitempty"`
    TvMazeId *float32`json:"tvMazeId,omitempty"`
    TvRageId *float32`json:"tvRageId,omitempty"`
    TvdbId *float32`json:"tvdbId,omitempty"`
    UseSceneNumbering *bool`json:"useSceneNumbering,omitempty"`
    Year *float32`json:"year,omitempty"`
}

// SonarrSettings defines model for SonarrSettings.
type SonarrSettings  struct {
    ActiveAnimeDirectory *string`json:"activeAnimeDirectory"`
    ActiveAnimeLanguageProfileId *float32`json:"activeAnimeLanguageProfileId"`
    ActiveAnimeProfileId *float32`json:"activeAnimeProfileId"`
    ActiveAnimeProfileName *string`json:"activeAnimeProfileName"`
    ActiveDirectory string`json:"activeDirectory"`
    ActiveLanguageProfileId *float32`json:"activeLanguageProfileId,omitempty"`
    ActiveProfileId float32`json:"activeProfileId"`
    ActiveProfileName string`json:"activeProfileName"`
    ApiKey string`json:"apiKey"`
    BaseUrl *string`json:"baseUrl,omitempty"`
    EnableSeasonFolders bool`json:"enableSeasonFolders"`
    ExternalUrl *string`json:"externalUrl,omitempty"`
    Hostname string`json:"hostname"`
    Id *float32`json:"id,omitempty"`
    Is4k bool`json:"is4k"`
    IsDefault bool`json:"isDefault"`
    Name string`json:"name"`
    Port float32`json:"port"`
    PreventSearch *bool`json:"preventSearch,omitempty"`
    SyncEnabled *bool`json:"syncEnabled,omitempty"`
    UseSsl bool`json:"useSsl"`
}

// SpokenLanguage defines model for SpokenLanguage.
type SpokenLanguage  struct {
    EnglishName *string`json:"englishName"`
    Iso6391 *string`json:"iso_639_1,omitempty"`
    Name *string`json:"name,omitempty"`
}

// TautulliSettings defines model for TautulliSettings.
type TautulliSettings  struct {
    ApiKey *string`json:"apiKey"`
    ExternalUrl *string`json:"externalUrl"`
    Hostname *string`json:"hostname"`
    Port *float32`json:"port"`
    UseSsl *bool`json:"useSsl"`
}

// TelegramSettings defines model for TelegramSettings.
type TelegramSettings  struct {
    Enabled *bool`json:"enabled,omitempty"`
    Options *struct {
    BotAPI *string`json:"botAPI,omitempty"`
    BotUsername *string`json:"botUsername,omitempty"`
    ChatId *string`json:"chatId,omitempty"`
    SendSilently *bool`json:"sendSilently,omitempty"`
}`json:"options,omitempty"`
    Types *float32`json:"types,omitempty"`
}

// TvDetails defines model for TvDetails.
type TvDetails  struct {
    BackdropPath *string`json:"backdropPath,omitempty"`
    ContentRatings *struct {
    Results *[]struct {
    Iso31661 *string`json:"iso_3166_1,omitempty"`
    Rating *string`json:"rating,omitempty"`
}`json:"results,omitempty"`
}`json:"contentRatings,omitempty"`
    CreatedBy *[]struct {
    Gender *float32`json:"gender,omitempty"`
    Id *float32`json:"id,omitempty"`
    Name *string`json:"name,omitempty"`
    ProfilePath *string`json:"profilePath"`
}`json:"createdBy,omitempty"`
    Credits *struct {
    Cast *[]Cast`json:"cast,omitempty"`
    Crew *[]Crew`json:"crew,omitempty"`
}`json:"credits,omitempty"`
    EpisodeRunTime *[]float32`json:"episodeRunTime,omitempty"`
    ExternalIds *ExternalIds`json:"externalIds,omitempty"`
    FirstAirDate *string`json:"firstAirDate,omitempty"`
    Genres *[]Genre`json:"genres,omitempty"`
    Homepage *string`json:"homepage,omitempty"`
    Id *float32`json:"id,omitempty"`
    InProduction *bool`json:"inProduction,omitempty"`
    Keywords *[]Keyword`json:"keywords,omitempty"`
    Languages *[]string`json:"languages,omitempty"`
    LastAirDate *string`json:"lastAirDate,omitempty"`
    LastEpisodeToAir *Episode`json:"lastEpisodeToAir,omitempty"`
    MediaInfo *MediaInfo`json:"mediaInfo,omitempty"`
    Name *string`json:"name,omitempty"`
    Networks *[]ProductionCompany`json:"networks,omitempty"`
    NextEpisodeToAir *Episode`json:"nextEpisodeToAir,omitempty"`
    NumberOfEpisodes *float32`json:"numberOfEpisodes,omitempty"`
    NumberOfSeason *float32`json:"numberOfSeason,omitempty"`
    OriginCountry *[]string`json:"originCountry,omitempty"`
    OriginalLanguage *string`json:"originalLanguage,omitempty"`
    OriginalName *string`json:"originalName,omitempty"`
    Overview *string`json:"overview,omitempty"`
    Popularity *float32`json:"popularity,omitempty"`
    PosterPath *string`json:"posterPath,omitempty"`
    ProductionCompanies *[]ProductionCompany`json:"productionCompanies,omitempty"`
    ProductionCountries *[]struct {
    Iso31661 *string`json:"iso_3166_1,omitempty"`
    Name *string`json:"name,omitempty"`
}`json:"productionCountries,omitempty"`
    Seasons *[]Season`json:"seasons,omitempty"`
    SpokenLanguages *[]SpokenLanguage`json:"spokenLanguages,omitempty"`
    Status *string`json:"status,omitempty"`
    Tagline *string`json:"tagline,omitempty"`
    Type *string`json:"type,omitempty"`
    VoteAverage *float32`json:"voteAverage,omitempty"`
    VoteCount *float32`json:"voteCount,omitempty"`
    WatchProviders *[]WatchProviders`json:"watchProviders,omitempty"`
}

// TvResult defines model for TvResult.
type TvResult  struct {
    BackdropPath *string`json:"backdropPath,omitempty"`
    FirstAirDate *string`json:"firstAirDate,omitempty"`
    GenreIds *[]float32`json:"genreIds,omitempty"`
    Id *float32`json:"id,omitempty"`
    MediaInfo *MediaInfo`json:"mediaInfo,omitempty"`
    MediaType *string`json:"mediaType,omitempty"`
    Name *string`json:"name,omitempty"`
    OriginCountry *[]string`json:"originCountry,omitempty"`
    OriginalLanguage *string`json:"originalLanguage,omitempty"`
    OriginalName *string`json:"originalName,omitempty"`
    Overview *string`json:"overview,omitempty"`
    Popularity *float32`json:"popularity,omitempty"`
    PosterPath *string`json:"posterPath,omitempty"`
    VoteAverage *float32`json:"voteAverage,omitempty"`
    VoteCount *float32`json:"voteCount,omitempty"`
}

// User defines model for User.
type User  struct {
    Avatar *string`json:"avatar,omitempty"`
    CreatedAt *string`json:"createdAt,omitempty"`
    Email *string`json:"email,omitempty"`
    Id *int`json:"id,omitempty"`
    JellyfinAuthToken *string`json:"jellyfinAuthToken,omitempty"`
    Permissions *float32`json:"permissions,omitempty"`
    PlexToken *string`json:"plexToken,omitempty"`
    PlexUsername *string`json:"plexUsername,omitempty"`
    RequestCount *float32`json:"requestCount,omitempty"`
    UpdatedAt *string`json:"updatedAt,omitempty"`
    UserType *int`json:"userType,omitempty"`
    Username *string`json:"username,omitempty"`
}

// UserSettingsNotifications defines model for UserSettingsNotifications.
type UserSettingsNotifications  struct {
    DiscordEnabled *bool`json:"discordEnabled,omitempty"`
    DiscordEnabledTypes *float32`json:"discordEnabledTypes"`
    DiscordId *string`json:"discordId"`
    EmailEnabled *bool`json:"emailEnabled,omitempty"`
    NotificationTypes *NotificationAgentTypes`json:"notificationTypes,omitempty"`
    PgpKey *string`json:"pgpKey"`
    PushbulletAccessToken *string`json:"pushbulletAccessToken"`
    PushoverApplicationToken *string`json:"pushoverApplicationToken"`
    PushoverSound *string`json:"pushoverSound"`
    PushoverUserKey *string`json:"pushoverUserKey"`
    TelegramBotUsername *string`json:"telegramBotUsername"`
    TelegramChatId *string`json:"telegramChatId"`
    TelegramEnabled *bool`json:"telegramEnabled,omitempty"`
    TelegramSendSilently *bool`json:"telegramSendSilently"`
}

// WatchProviderDetails defines model for WatchProviderDetails.
type WatchProviderDetails  struct {
    DisplayPriority *float32`json:"displayPriority,omitempty"`
    Id *float32`json:"id,omitempty"`
    LogoPath *string`json:"logoPath,omitempty"`
    Name *string`json:"name,omitempty"`
}

// WatchProviderRegion defines model for WatchProviderRegion.
type WatchProviderRegion  struct {
    EnglishName *string`json:"english_name,omitempty"`
    Iso31661 *string`json:"iso_3166_1,omitempty"`
    NativeName *string`json:"native_name,omitempty"`
}

// WatchProviders defines model for WatchProviders.
type WatchProviders = []struct {
    Buy *[]WatchProviderDetails`json:"buy,omitempty"`
    Flatrate *interface{}`json:"flatrate,omitempty"`
    Iso31661 *string`json:"iso_3166_1,omitempty"`
    Link *string`json:"link,omitempty"`
}

// Watchlist defines model for Watchlist.
type Watchlist  struct {
    CreatedAt *string`json:"createdAt,omitempty"`
    Id *int`json:"id,omitempty"`
    Media *MediaInfo`json:"media,omitempty"`
    RatingKey *string`json:"ratingKey,omitempty"`
    RequestedBy *User`json:"requestedBy,omitempty"`
    Title *string`json:"title,omitempty"`
    TmdbId *float32`json:"tmdbId,omitempty"`
    Type *string`json:"type,omitempty"`
    UpdatedAt *string`json:"updatedAt,omitempty"`
}

// WebPushSettings defines model for WebPushSettings.
type WebPushSettings  struct {
    Enabled *bool`json:"enabled,omitempty"`
    Types *float32`json:"types,omitempty"`
}

// WebhookSettings defines model for WebhookSettings.
type WebhookSettings  struct {
    Enabled *bool`json:"enabled,omitempty"`
    Options *struct {
    AuthHeader *string`json:"authHeader,omitempty"`
    JsonPayload *string`json:"jsonPayload,omitempty"`
    WebhookUrl *string`json:"webhookUrl,omitempty"`
}`json:"options,omitempty"`
    Types *float32`json:"types,omitempty"`
}



// PostAuthJellyfinJSONBody defines parameters for PostAuthJellyfin.
type PostAuthJellyfinJSONBody  struct {
    Email *string`json:"email,omitempty"`
    Hostname *string`json:"hostname,omitempty"`
    Password string`json:"password"`
    Username string`json:"username"`
}



// PostAuthLocalJSONBody defines parameters for PostAuthLocal.
type PostAuthLocalJSONBody  struct {
    Email string`json:"email"`
    Password string`json:"password"`
}







// PostAuthPlexJSONBody defines parameters for PostAuthPlex.
type PostAuthPlexJSONBody  struct {
    AuthToken string`json:"authToken"`
}



// PostAuthResetPasswordJSONBody defines parameters for PostAuthResetPassword.
type PostAuthResetPasswordJSONBody  struct {
    Email string`json:"email"`
}



// PostAuthResetPasswordGuidJSONBody defines parameters for PostAuthResetPasswordGuid.
type PostAuthResetPasswordGuidJSONBody  struct {
    Password string`json:"password"`
}





// GetCollectionCollectionIdParams defines parameters for GetCollectionCollectionId.
type GetCollectionCollectionIdParams  struct {
    Language *string`form:"language,omitempty" json:"language,omitempty"`
}



// GetDiscoverGenresliderMovieParams defines parameters for GetDiscoverGenresliderMovie.
type GetDiscoverGenresliderMovieParams  struct {
    Language *string`form:"language,omitempty" json:"language,omitempty"`
}



// GetDiscoverGenresliderTvParams defines parameters for GetDiscoverGenresliderTv.
type GetDiscoverGenresliderTvParams  struct {
    Language *string`form:"language,omitempty" json:"language,omitempty"`
}



// GetDiscoverKeywordKeywordIdMoviesParams defines parameters for GetDiscoverKeywordKeywordIdMovies.
type GetDiscoverKeywordKeywordIdMoviesParams  struct {
    Page *float32`form:"page,omitempty" json:"page,omitempty"`
    Language *string`form:"language,omitempty" json:"language,omitempty"`
}



// GetDiscoverMoviesParams defines parameters for GetDiscoverMovies.
type GetDiscoverMoviesParams  struct {
    Page *float32`form:"page,omitempty" json:"page,omitempty"`
    Language *string`form:"language,omitempty" json:"language,omitempty"`
    Genre *string`form:"genre,omitempty" json:"genre,omitempty"`
    Studio *float32`form:"studio,omitempty" json:"studio,omitempty"`
    Keywords *string`form:"keywords,omitempty" json:"keywords,omitempty"`
    SortBy *string`form:"sortBy,omitempty" json:"sortBy,omitempty"`
    PrimaryReleaseDateGte *string`form:"primaryReleaseDateGte,omitempty" json:"primaryReleaseDateGte,omitempty"`
    PrimaryReleaseDateLte *string`form:"primaryReleaseDateLte,omitempty" json:"primaryReleaseDateLte,omitempty"`
    WithRuntimeGte *float32`form:"withRuntimeGte,omitempty" json:"withRuntimeGte,omitempty"`
    WithRuntimeLte *float32`form:"withRuntimeLte,omitempty" json:"withRuntimeLte,omitempty"`
    VoteAverageGte *float32`form:"voteAverageGte,omitempty" json:"voteAverageGte,omitempty"`
    VoteAverageLte *float32`form:"voteAverageLte,omitempty" json:"voteAverageLte,omitempty"`
    VoteCountGte *float32`form:"voteCountGte,omitempty" json:"voteCountGte,omitempty"`
    VoteCountLte *float32`form:"voteCountLte,omitempty" json:"voteCountLte,omitempty"`
    WatchRegion *string`form:"watchRegion,omitempty" json:"watchRegion,omitempty"`
    WatchProviders *string`form:"watchProviders,omitempty" json:"watchProviders,omitempty"`
}



// GetDiscoverMoviesGenreGenreIdParams defines parameters for GetDiscoverMoviesGenreGenreId.
type GetDiscoverMoviesGenreGenreIdParams  struct {
    Page *float32`form:"page,omitempty" json:"page,omitempty"`
    Language *string`form:"language,omitempty" json:"language,omitempty"`
}



// GetDiscoverMoviesLanguageLanguageParams defines parameters for GetDiscoverMoviesLanguageLanguage.
type GetDiscoverMoviesLanguageLanguageParams  struct {
    Page *float32`form:"page,omitempty" json:"page,omitempty"`
    Language *string`form:"language,omitempty" json:"language,omitempty"`
}



// GetDiscoverMoviesStudioStudioIdParams defines parameters for GetDiscoverMoviesStudioStudioId.
type GetDiscoverMoviesStudioStudioIdParams  struct {
    Page *float32`form:"page,omitempty" json:"page,omitempty"`
    Language *string`form:"language,omitempty" json:"language,omitempty"`
}



// GetDiscoverMoviesUpcomingParams defines parameters for GetDiscoverMoviesUpcoming.
type GetDiscoverMoviesUpcomingParams  struct {
    Page *float32`form:"page,omitempty" json:"page,omitempty"`
    Language *string`form:"language,omitempty" json:"language,omitempty"`
}



// GetDiscoverTrendingParams defines parameters for GetDiscoverTrending.
type GetDiscoverTrendingParams  struct {
    Page *float32`form:"page,omitempty" json:"page,omitempty"`
    Language *string`form:"language,omitempty" json:"language,omitempty"`
}



// GetDiscoverTvParams defines parameters for GetDiscoverTv.
type GetDiscoverTvParams  struct {
    Page *float32`form:"page,omitempty" json:"page,omitempty"`
    Language *string`form:"language,omitempty" json:"language,omitempty"`
    Genre *string`form:"genre,omitempty" json:"genre,omitempty"`
    Network *float32`form:"network,omitempty" json:"network,omitempty"`
    Keywords *string`form:"keywords,omitempty" json:"keywords,omitempty"`
    SortBy *string`form:"sortBy,omitempty" json:"sortBy,omitempty"`
    FirstAirDateGte *string`form:"firstAirDateGte,omitempty" json:"firstAirDateGte,omitempty"`
    FirstAirDateLte *string`form:"firstAirDateLte,omitempty" json:"firstAirDateLte,omitempty"`
    WithRuntimeGte *float32`form:"withRuntimeGte,omitempty" json:"withRuntimeGte,omitempty"`
    WithRuntimeLte *float32`form:"withRuntimeLte,omitempty" json:"withRuntimeLte,omitempty"`
    VoteAverageGte *float32`form:"voteAverageGte,omitempty" json:"voteAverageGte,omitempty"`
    VoteAverageLte *float32`form:"voteAverageLte,omitempty" json:"voteAverageLte,omitempty"`
    VoteCountGte *float32`form:"voteCountGte,omitempty" json:"voteCountGte,omitempty"`
    VoteCountLte *float32`form:"voteCountLte,omitempty" json:"voteCountLte,omitempty"`
    WatchRegion *string`form:"watchRegion,omitempty" json:"watchRegion,omitempty"`
    WatchProviders *string`form:"watchProviders,omitempty" json:"watchProviders,omitempty"`
}



// GetDiscoverTvGenreGenreIdParams defines parameters for GetDiscoverTvGenreGenreId.
type GetDiscoverTvGenreGenreIdParams  struct {
    Page *float32`form:"page,omitempty" json:"page,omitempty"`
    Language *string`form:"language,omitempty" json:"language,omitempty"`
}



// GetDiscoverTvLanguageLanguageParams defines parameters for GetDiscoverTvLanguageLanguage.
type GetDiscoverTvLanguageLanguageParams  struct {
    Page *float32`form:"page,omitempty" json:"page,omitempty"`
    Language *string`form:"language,omitempty" json:"language,omitempty"`
}



// GetDiscoverTvNetworkNetworkIdParams defines parameters for GetDiscoverTvNetworkNetworkId.
type GetDiscoverTvNetworkNetworkIdParams  struct {
    Page *float32`form:"page,omitempty" json:"page,omitempty"`
    Language *string`form:"language,omitempty" json:"language,omitempty"`
}



// GetDiscoverTvUpcomingParams defines parameters for GetDiscoverTvUpcoming.
type GetDiscoverTvUpcomingParams  struct {
    Page *float32`form:"page,omitempty" json:"page,omitempty"`
    Language *string`form:"language,omitempty" json:"language,omitempty"`
}



// GetDiscoverWatchlistParams defines parameters for GetDiscoverWatchlist.
type GetDiscoverWatchlistParams  struct {
    Page *float32`form:"page,omitempty" json:"page,omitempty"`
}



// GetGenresMovieParams defines parameters for GetGenresMovie.
type GetGenresMovieParams  struct {
    Language *string`form:"language,omitempty" json:"language,omitempty"`
}



// GetGenresTvParams defines parameters for GetGenresTv.
type GetGenresTvParams  struct {
    Language *string`form:"language,omitempty" json:"language,omitempty"`
}



// GetIssueParams defines parameters for GetIssue.
type GetIssueParams  struct {
    Take *float32`form:"take,omitempty" json:"take,omitempty"`
    Skip *float32`form:"skip,omitempty" json:"skip,omitempty"`
    Sort *GetIssueParamsSort`form:"sort,omitempty" json:"sort,omitempty"`
    Filter *GetIssueParamsFilter`form:"filter,omitempty" json:"filter,omitempty"`
    RequestedBy *float32`form:"requestedBy,omitempty" json:"requestedBy,omitempty"`
}

// GetIssueParamsSort defines parameters for GetIssue.
type GetIssueParamsSort  string

// GetIssueParamsFilter defines parameters for GetIssue.
type GetIssueParamsFilter  string



// PostIssueJSONBody defines parameters for PostIssue.
type PostIssueJSONBody  struct {
    IssueType *float32`json:"issueType,omitempty"`
    MediaId *float32`json:"mediaId,omitempty"`
    Message *string`json:"message,omitempty"`
}









// PostIssueIssueIdCommentJSONBody defines parameters for PostIssueIssueIdComment.
type PostIssueIssueIdCommentJSONBody  struct {
    Message string`json:"message"`
}



// PostIssueIssueIdStatusParamsStatus defines parameters for PostIssueIssueIdStatus.
type PostIssueIssueIdStatusParamsStatus  string







// PutIssueCommentCommentIdJSONBody defines parameters for PutIssueCommentCommentId.
type PutIssueCommentCommentIdJSONBody  struct {
    Message *string`json:"message,omitempty"`
}







// GetMediaParams defines parameters for GetMedia.
type GetMediaParams  struct {
    Take *float32`form:"take,omitempty" json:"take,omitempty"`
    Skip *float32`form:"skip,omitempty" json:"skip,omitempty"`
    Filter *GetMediaParamsFilter`form:"filter,omitempty" json:"filter,omitempty"`
    Sort *GetMediaParamsSort`form:"sort,omitempty" json:"sort,omitempty"`
}

// GetMediaParamsFilter defines parameters for GetMedia.
type GetMediaParamsFilter  string

// GetMediaParamsSort defines parameters for GetMedia.
type GetMediaParamsSort  string









// PostMediaMediaIdStatusJSONBody defines parameters for PostMediaMediaIdStatus.
type PostMediaMediaIdStatusJSONBody  struct {
    Is4k *bool`json:"is4k,omitempty"`
}

// PostMediaMediaIdStatusParamsStatus defines parameters for PostMediaMediaIdStatus.
type PostMediaMediaIdStatusParamsStatus  string



// GetMovieMovieIdParams defines parameters for GetMovieMovieId.
type GetMovieMovieIdParams  struct {
    Language *string`form:"language,omitempty" json:"language,omitempty"`
}







// GetMovieMovieIdRecommendationsParams defines parameters for GetMovieMovieIdRecommendations.
type GetMovieMovieIdRecommendationsParams  struct {
    Page *float32`form:"page,omitempty" json:"page,omitempty"`
    Language *string`form:"language,omitempty" json:"language,omitempty"`
}



// GetMovieMovieIdSimilarParams defines parameters for GetMovieMovieIdSimilar.
type GetMovieMovieIdSimilarParams  struct {
    Page *float32`form:"page,omitempty" json:"page,omitempty"`
    Language *string`form:"language,omitempty" json:"language,omitempty"`
}





// GetPersonPersonIdParams defines parameters for GetPersonPersonId.
type GetPersonPersonIdParams  struct {
    Language *string`form:"language,omitempty" json:"language,omitempty"`
}



// GetPersonPersonIdCombinedCreditsParams defines parameters for GetPersonPersonIdCombinedCredits.
type GetPersonPersonIdCombinedCreditsParams  struct {
    Language *string`form:"language,omitempty" json:"language,omitempty"`
}





// GetRequestParams defines parameters for GetRequest.
type GetRequestParams  struct {
    Take *float32`form:"take,omitempty" json:"take,omitempty"`
    Skip *float32`form:"skip,omitempty" json:"skip,omitempty"`
    Filter *GetRequestParamsFilter`form:"filter,omitempty" json:"filter,omitempty"`
    Sort *GetRequestParamsSort`form:"sort,omitempty" json:"sort,omitempty"`
    RequestedBy *float32`form:"requestedBy,omitempty" json:"requestedBy,omitempty"`
}

// GetRequestParamsFilter defines parameters for GetRequest.
type GetRequestParamsFilter  string

// GetRequestParamsSort defines parameters for GetRequest.
type GetRequestParamsSort  string



// PostRequestJSONBody defines parameters for PostRequest.
type PostRequestJSONBody  struct {
    Is4k *bool`json:"is4k,omitempty"`
    LanguageProfileId *float32`json:"languageProfileId,omitempty"`
    MediaId float32`json:"mediaId"`
    MediaType PostRequestJSONBodyMediaType`json:"mediaType"`
    ProfileId *float32`json:"profileId,omitempty"`
    RootFolder *string`json:"rootFolder,omitempty"`
    Seasons *PostRequestJSONBody_Seasons`json:"seasons,omitempty"`
    ServerId *float32`json:"serverId,omitempty"`
    TvdbId *float32`json:"tvdbId,omitempty"`
    UserId *float32`json:"userId"`
}

// PostRequestJSONBodyMediaType defines parameters for PostRequest.
type PostRequestJSONBodyMediaType  string

// PostRequestJSONBodySeasons0 defines parameters for PostRequest.
type PostRequestJSONBodySeasons0 = []float32

// PostRequestJSONBodySeasons1 defines parameters for PostRequest.
type PostRequestJSONBodySeasons1  string

// PostRequestJSONBody_Seasons defines parameters for PostRequest.
type PostRequestJSONBody_Seasons  struct {
union json.RawMessage
}









// PutRequestRequestIdJSONBody defines parameters for PutRequestRequestId.
type PutRequestRequestIdJSONBody  struct {
    Is4k *bool`json:"is4k,omitempty"`
    LanguageProfileId *float32`json:"languageProfileId,omitempty"`
    MediaType PutRequestRequestIdJSONBodyMediaType`json:"mediaType"`
    ProfileId *float32`json:"profileId,omitempty"`
    RootFolder *string`json:"rootFolder,omitempty"`
    Seasons *[]float32`json:"seasons,omitempty"`
    ServerId *float32`json:"serverId,omitempty"`
    UserId *float32`json:"userId"`
}

// PutRequestRequestIdJSONBodyMediaType defines parameters for PutRequestRequestId.
type PutRequestRequestIdJSONBodyMediaType  string





// PostRequestRequestIdStatusParamsStatus defines parameters for PostRequestRequestIdStatus.
type PostRequestRequestIdStatusParamsStatus  string



// GetSearchParams defines parameters for GetSearch.
type GetSearchParams  struct {
    Query string`form:"query" json:"query"`
    Page *float32`form:"page,omitempty" json:"page,omitempty"`
    Language *string`form:"language,omitempty" json:"language,omitempty"`
}



// GetSearchCompanyParams defines parameters for GetSearchCompany.
type GetSearchCompanyParams  struct {
    Query string`form:"query" json:"query"`
    Page *float32`form:"page,omitempty" json:"page,omitempty"`
}



// GetSearchKeywordParams defines parameters for GetSearchKeyword.
type GetSearchKeywordParams  struct {
    Query string`form:"query" json:"query"`
    Page *float32`form:"page,omitempty" json:"page,omitempty"`
}





















// PostSettingsDiscoverJSONBody defines parameters for PostSettingsDiscover.
type PostSettingsDiscoverJSONBody = []DiscoverSlider



// PostSettingsDiscoverAddJSONBody defines parameters for PostSettingsDiscoverAdd.
type PostSettingsDiscoverAddJSONBody  struct {
    Data *string`json:"data,omitempty"`
    Title *string`json:"title,omitempty"`
    Type *float32`json:"type,omitempty"`
}







// PutSettingsDiscoverSliderIdJSONBody defines parameters for PutSettingsDiscoverSliderId.
type PutSettingsDiscoverSliderIdJSONBody  struct {
    Data *string`json:"data,omitempty"`
    Title *string`json:"title,omitempty"`
    Type *float32`json:"type,omitempty"`
}









// GetSettingsJellyfinLibraryParams defines parameters for GetSettingsJellyfinLibrary.
type GetSettingsJellyfinLibraryParams  struct {
// Sync Syncs the current libraries with the current Jellyfin server
    Sync *string`form:"sync,omitempty" json:"sync,omitempty"`

// Enable Comma separated list of libraries to enable. Any libraries not passed will be disabled!
    Enable *string`form:"enable,omitempty" json:"enable,omitempty"`
}





// PostSettingsJellyfinSyncJSONBody defines parameters for PostSettingsJellyfinSync.
type PostSettingsJellyfinSyncJSONBody  struct {
    Cancel *bool`json:"cancel,omitempty"`
    Start *bool`json:"start,omitempty"`
}











// PostSettingsJobsJobIdScheduleJSONBody defines parameters for PostSettingsJobsJobIdSchedule.
type PostSettingsJobsJobIdScheduleJSONBody  struct {
    Schedule *string`json:"schedule,omitempty"`
}



// GetSettingsLogsParams defines parameters for GetSettingsLogs.
type GetSettingsLogsParams  struct {
    Take *float32`form:"take,omitempty" json:"take,omitempty"`
    Skip *float32`form:"skip,omitempty" json:"skip,omitempty"`
    Filter *GetSettingsLogsParamsFilter`form:"filter,omitempty" json:"filter,omitempty"`
    Search *string`form:"search,omitempty" json:"search,omitempty"`
}

// GetSettingsLogsParamsFilter defines parameters for GetSettingsLogs.
type GetSettingsLogsParamsFilter  string











































// GetSettingsNotificationsPushoverSoundsParams defines parameters for GetSettingsNotificationsPushoverSounds.
type GetSettingsNotificationsPushoverSoundsParams  struct {
    Token string`form:"token" json:"token"`
}



































// GetSettingsPlexLibraryParams defines parameters for GetSettingsPlexLibrary.
type GetSettingsPlexLibraryParams  struct {
// Sync Syncs the current libraries with the current Plex server
    Sync *string`form:"sync,omitempty" json:"sync,omitempty"`

// Enable Comma separated list of libraries to enable. Any libraries not passed will be disabled!
    Enable *string`form:"enable,omitempty" json:"enable,omitempty"`
}





// PostSettingsPlexSyncJSONBody defines parameters for PostSettingsPlexSync.
type PostSettingsPlexSyncJSONBody  struct {
    Cancel *bool`json:"cancel,omitempty"`
    Start *bool`json:"start,omitempty"`
}











// PostSettingsRadarrTestJSONBody defines parameters for PostSettingsRadarrTest.
type PostSettingsRadarrTestJSONBody  struct {
    ApiKey string`json:"apiKey"`
    BaseUrl *string`json:"baseUrl,omitempty"`
    Hostname string`json:"hostname"`
    Port float32`json:"port"`
    UseSsl bool`json:"useSsl"`
}













// PostSettingsSonarrTestJSONBody defines parameters for PostSettingsSonarrTest.
type PostSettingsSonarrTestJSONBody  struct {
    ApiKey string`json:"apiKey"`
    BaseUrl *string`json:"baseUrl,omitempty"`
    Hostname string`json:"hostname"`
    Port float32`json:"port"`
    UseSsl bool`json:"useSsl"`
}

















// GetTvTvIdParams defines parameters for GetTvTvId.
type GetTvTvIdParams  struct {
    Language *string`form:"language,omitempty" json:"language,omitempty"`
}





// GetTvTvIdRecommendationsParams defines parameters for GetTvTvIdRecommendations.
type GetTvTvIdRecommendationsParams  struct {
    Page *float32`form:"page,omitempty" json:"page,omitempty"`
    Language *string`form:"language,omitempty" json:"language,omitempty"`
}



// GetTvTvIdSeasonSeasonIdParams defines parameters for GetTvTvIdSeasonSeasonId.
type GetTvTvIdSeasonSeasonIdParams  struct {
    Language *string`form:"language,omitempty" json:"language,omitempty"`
}



// GetTvTvIdSimilarParams defines parameters for GetTvTvIdSimilar.
type GetTvTvIdSimilarParams  struct {
    Page *float32`form:"page,omitempty" json:"page,omitempty"`
    Language *string`form:"language,omitempty" json:"language,omitempty"`
}



// GetUserParams defines parameters for GetUser.
type GetUserParams  struct {
    Take *float32`form:"take,omitempty" json:"take,omitempty"`
    Skip *float32`form:"skip,omitempty" json:"skip,omitempty"`
    Sort *GetUserParamsSort`form:"sort,omitempty" json:"sort,omitempty"`
}

// GetUserParamsSort defines parameters for GetUser.
type GetUserParamsSort  string



// PostUserJSONBody defines parameters for PostUser.
type PostUserJSONBody  struct {
    Email *string`json:"email,omitempty"`
    Permissions *float32`json:"permissions,omitempty"`
    Username *string`json:"username,omitempty"`
}



// PutUserJSONBody defines parameters for PutUser.
type PutUserJSONBody  struct {
    Ids *[]int`json:"ids,omitempty"`
    Permissions *int`json:"permissions,omitempty"`
}



// PostUserImportFromJellyfinJSONBody defines parameters for PostUserImportFromJellyfin.
type PostUserImportFromJellyfinJSONBody  struct {
    JellyfinIds *[]string`json:"jellyfinIds,omitempty"`
}



// PostUserImportFromPlexJSONBody defines parameters for PostUserImportFromPlex.
type PostUserImportFromPlexJSONBody  struct {
    PlexIds *[]string`json:"plexIds,omitempty"`
}



// PostUserRegisterPushSubscriptionJSONBody defines parameters for PostUserRegisterPushSubscription.
type PostUserRegisterPushSubscriptionJSONBody  struct {
    Auth string`json:"auth"`
    Endpoint string`json:"endpoint"`
    P256dh string`json:"p256dh"`
}











// GetUserUserIdRequestsParams defines parameters for GetUserUserIdRequests.
type GetUserUserIdRequestsParams  struct {
    Take *float32`form:"take,omitempty" json:"take,omitempty"`
    Skip *float32`form:"skip,omitempty" json:"skip,omitempty"`
}





// PostUserUserIdSettingsMainJSONBody defines parameters for PostUserUserIdSettingsMain.
type PostUserUserIdSettingsMainJSONBody  struct {
    Username *string`json:"username"`
}









// PostUserUserIdSettingsPasswordJSONBody defines parameters for PostUserUserIdSettingsPassword.
type PostUserUserIdSettingsPasswordJSONBody  struct {
    CurrentPassword *string`json:"currentPassword"`
    NewPassword string`json:"newPassword"`
}





// PostUserUserIdSettingsPermissionsJSONBody defines parameters for PostUserUserIdSettingsPermissions.
type PostUserUserIdSettingsPermissionsJSONBody  struct {
    Permissions float32`json:"permissions"`
}





// GetUserUserIdWatchlistParams defines parameters for GetUserUserIdWatchlist.
type GetUserUserIdWatchlistParams  struct {
    Page *float32`form:"page,omitempty" json:"page,omitempty"`
}







// GetWatchprovidersMoviesParams defines parameters for GetWatchprovidersMovies.
type GetWatchprovidersMoviesParams  struct {
    WatchRegion string`form:"watchRegion" json:"watchRegion"`
}





// GetWatchprovidersTvParams defines parameters for GetWatchprovidersTv.
type GetWatchprovidersTvParams  struct {
    WatchRegion string`form:"watchRegion" json:"watchRegion"`
}






// PostAuthJellyfinJSONRequestBody defines body for PostAuthJellyfin for application/json ContentType.
type PostAuthJellyfinJSONRequestBody  PostAuthJellyfinJSONBody






// PostAuthLocalJSONRequestBody defines body for PostAuthLocal for application/json ContentType.
type PostAuthLocalJSONRequestBody  PostAuthLocalJSONBody










// PostAuthPlexJSONRequestBody defines body for PostAuthPlex for application/json ContentType.
type PostAuthPlexJSONRequestBody  PostAuthPlexJSONBody






// PostAuthResetPasswordJSONRequestBody defines body for PostAuthResetPassword for application/json ContentType.
type PostAuthResetPasswordJSONRequestBody  PostAuthResetPasswordJSONBody






// PostAuthResetPasswordGuidJSONRequestBody defines body for PostAuthResetPasswordGuid for application/json ContentType.
type PostAuthResetPasswordGuidJSONRequestBody  PostAuthResetPasswordGuidJSONBody














































// PostIssueJSONRequestBody defines body for PostIssue for application/json ContentType.
type PostIssueJSONRequestBody  PostIssueJSONBody












// PostIssueIssueIdCommentJSONRequestBody defines body for PostIssueIssueIdComment for application/json ContentType.
type PostIssueIssueIdCommentJSONRequestBody  PostIssueIssueIdCommentJSONBody












// PutIssueCommentCommentIdJSONRequestBody defines body for PutIssueCommentCommentId for application/json ContentType.
type PutIssueCommentCommentIdJSONRequestBody  PutIssueCommentCommentIdJSONBody


















// PostMediaMediaIdStatusJSONRequestBody defines body for PostMediaMediaIdStatus for application/json ContentType.
type PostMediaMediaIdStatusJSONRequestBody  PostMediaMediaIdStatusJSONBody


























// PostRequestJSONRequestBody defines body for PostRequest for application/json ContentType.
type PostRequestJSONRequestBody  PostRequestJSONBody












// PutRequestRequestIdJSONRequestBody defines body for PutRequestRequestId for application/json ContentType.
type PutRequestRequestIdJSONRequestBody  PutRequestRequestIdJSONBody


































// PostSettingsDiscoverJSONRequestBody defines body for PostSettingsDiscover for application/json ContentType.
type PostSettingsDiscoverJSONRequestBody = PostSettingsDiscoverJSONBody






// PostSettingsDiscoverAddJSONRequestBody defines body for PostSettingsDiscoverAdd for application/json ContentType.
type PostSettingsDiscoverAddJSONRequestBody  PostSettingsDiscoverAddJSONBody










// PutSettingsDiscoverSliderIdJSONRequestBody defines body for PutSettingsDiscoverSliderId for application/json ContentType.
type PutSettingsDiscoverSliderIdJSONRequestBody  PutSettingsDiscoverSliderIdJSONBody










// PostSettingsJellyfinJSONRequestBody defines body for PostSettingsJellyfin for application/json ContentType.
type PostSettingsJellyfinJSONRequestBody = JellyfinSettings










// PostSettingsJellyfinSyncJSONRequestBody defines body for PostSettingsJellyfinSync for application/json ContentType.
type PostSettingsJellyfinSyncJSONRequestBody  PostSettingsJellyfinSyncJSONBody














// PostSettingsJobsJobIdScheduleJSONRequestBody defines body for PostSettingsJobsJobIdSchedule for application/json ContentType.
type PostSettingsJobsJobIdScheduleJSONRequestBody  PostSettingsJobsJobIdScheduleJSONBody










// PostSettingsMainJSONRequestBody defines body for PostSettingsMain for application/json ContentType.
type PostSettingsMainJSONRequestBody = MainSettings










// PostSettingsNotificationsDiscordJSONRequestBody defines body for PostSettingsNotificationsDiscord for application/json ContentType.
type PostSettingsNotificationsDiscordJSONRequestBody = DiscordSettings






// PostSettingsNotificationsDiscordTestJSONRequestBody defines body for PostSettingsNotificationsDiscordTest for application/json ContentType.
type PostSettingsNotificationsDiscordTestJSONRequestBody = DiscordSettings








// PostSettingsNotificationsEmailJSONRequestBody defines body for PostSettingsNotificationsEmail for application/json ContentType.
type PostSettingsNotificationsEmailJSONRequestBody = NotificationEmailSettings






// PostSettingsNotificationsEmailTestJSONRequestBody defines body for PostSettingsNotificationsEmailTest for application/json ContentType.
type PostSettingsNotificationsEmailTestJSONRequestBody = NotificationEmailSettings








// PostSettingsNotificationsGotifyJSONRequestBody defines body for PostSettingsNotificationsGotify for application/json ContentType.
type PostSettingsNotificationsGotifyJSONRequestBody = GotifySettings






// PostSettingsNotificationsGotifyTestJSONRequestBody defines body for PostSettingsNotificationsGotifyTest for application/json ContentType.
type PostSettingsNotificationsGotifyTestJSONRequestBody = GotifySettings








// PostSettingsNotificationsLunaseaJSONRequestBody defines body for PostSettingsNotificationsLunasea for application/json ContentType.
type PostSettingsNotificationsLunaseaJSONRequestBody = LunaSeaSettings






// PostSettingsNotificationsLunaseaTestJSONRequestBody defines body for PostSettingsNotificationsLunaseaTest for application/json ContentType.
type PostSettingsNotificationsLunaseaTestJSONRequestBody = LunaSeaSettings








// PostSettingsNotificationsPushbulletJSONRequestBody defines body for PostSettingsNotificationsPushbullet for application/json ContentType.
type PostSettingsNotificationsPushbulletJSONRequestBody = PushbulletSettings






// PostSettingsNotificationsPushbulletTestJSONRequestBody defines body for PostSettingsNotificationsPushbulletTest for application/json ContentType.
type PostSettingsNotificationsPushbulletTestJSONRequestBody = PushbulletSettings








// PostSettingsNotificationsPushoverJSONRequestBody defines body for PostSettingsNotificationsPushover for application/json ContentType.
type PostSettingsNotificationsPushoverJSONRequestBody = PushoverSettings








// PostSettingsNotificationsPushoverTestJSONRequestBody defines body for PostSettingsNotificationsPushoverTest for application/json ContentType.
type PostSettingsNotificationsPushoverTestJSONRequestBody = PushoverSettings








// PostSettingsNotificationsSlackJSONRequestBody defines body for PostSettingsNotificationsSlack for application/json ContentType.
type PostSettingsNotificationsSlackJSONRequestBody = SlackSettings






// PostSettingsNotificationsSlackTestJSONRequestBody defines body for PostSettingsNotificationsSlackTest for application/json ContentType.
type PostSettingsNotificationsSlackTestJSONRequestBody = SlackSettings








// PostSettingsNotificationsTelegramJSONRequestBody defines body for PostSettingsNotificationsTelegram for application/json ContentType.
type PostSettingsNotificationsTelegramJSONRequestBody = TelegramSettings






// PostSettingsNotificationsTelegramTestJSONRequestBody defines body for PostSettingsNotificationsTelegramTest for application/json ContentType.
type PostSettingsNotificationsTelegramTestJSONRequestBody = TelegramSettings








// PostSettingsNotificationsWebhookJSONRequestBody defines body for PostSettingsNotificationsWebhook for application/json ContentType.
type PostSettingsNotificationsWebhookJSONRequestBody = WebhookSettings






// PostSettingsNotificationsWebhookTestJSONRequestBody defines body for PostSettingsNotificationsWebhookTest for application/json ContentType.
type PostSettingsNotificationsWebhookTestJSONRequestBody = WebhookSettings








// PostSettingsNotificationsWebpushJSONRequestBody defines body for PostSettingsNotificationsWebpush for application/json ContentType.
type PostSettingsNotificationsWebpushJSONRequestBody = WebPushSettings






// PostSettingsNotificationsWebpushTestJSONRequestBody defines body for PostSettingsNotificationsWebpushTest for application/json ContentType.
type PostSettingsNotificationsWebpushTestJSONRequestBody = WebPushSettings








// PostSettingsPlexJSONRequestBody defines body for PostSettingsPlex for application/json ContentType.
type PostSettingsPlexJSONRequestBody = PlexSettings












// PostSettingsPlexSyncJSONRequestBody defines body for PostSettingsPlexSync for application/json ContentType.
type PostSettingsPlexSyncJSONRequestBody  PostSettingsPlexSyncJSONBody












// PostSettingsRadarrJSONRequestBody defines body for PostSettingsRadarr for application/json ContentType.
type PostSettingsRadarrJSONRequestBody = RadarrSettings






// PostSettingsRadarrTestJSONRequestBody defines body for PostSettingsRadarrTest for application/json ContentType.
type PostSettingsRadarrTestJSONRequestBody  PostSettingsRadarrTestJSONBody








// PutSettingsRadarrRadarrIdJSONRequestBody defines body for PutSettingsRadarrRadarrId for application/json ContentType.
type PutSettingsRadarrRadarrIdJSONRequestBody = RadarrSettings










// PostSettingsSonarrJSONRequestBody defines body for PostSettingsSonarr for application/json ContentType.
type PostSettingsSonarrJSONRequestBody = SonarrSettings






// PostSettingsSonarrTestJSONRequestBody defines body for PostSettingsSonarrTest for application/json ContentType.
type PostSettingsSonarrTestJSONRequestBody  PostSettingsSonarrTestJSONBody








// PutSettingsSonarrSonarrIdJSONRequestBody defines body for PutSettingsSonarrSonarrId for application/json ContentType.
type PutSettingsSonarrSonarrIdJSONRequestBody = SonarrSettings








// PostSettingsTautulliJSONRequestBody defines body for PostSettingsTautulli for application/json ContentType.
type PostSettingsTautulliJSONRequestBody = TautulliSettings
























// PostUserJSONRequestBody defines body for PostUser for application/json ContentType.
type PostUserJSONRequestBody  PostUserJSONBody






// PutUserJSONRequestBody defines body for PutUser for application/json ContentType.
type PutUserJSONRequestBody  PutUserJSONBody






// PostUserImportFromJellyfinJSONRequestBody defines body for PostUserImportFromJellyfin for application/json ContentType.
type PostUserImportFromJellyfinJSONRequestBody  PostUserImportFromJellyfinJSONBody






// PostUserImportFromPlexJSONRequestBody defines body for PostUserImportFromPlex for application/json ContentType.
type PostUserImportFromPlexJSONRequestBody  PostUserImportFromPlexJSONBody






// PostUserRegisterPushSubscriptionJSONRequestBody defines body for PostUserRegisterPushSubscription for application/json ContentType.
type PostUserRegisterPushSubscriptionJSONRequestBody  PostUserRegisterPushSubscriptionJSONBody










// PutUserUserIdJSONRequestBody defines body for PutUserUserId for application/json ContentType.
type PutUserUserIdJSONRequestBody = User












// PostUserUserIdSettingsMainJSONRequestBody defines body for PostUserUserIdSettingsMain for application/json ContentType.
type PostUserUserIdSettingsMainJSONRequestBody  PostUserUserIdSettingsMainJSONBody








// PostUserUserIdSettingsNotificationsJSONRequestBody defines body for PostUserUserIdSettingsNotifications for application/json ContentType.
type PostUserUserIdSettingsNotificationsJSONRequestBody = UserSettingsNotifications








// PostUserUserIdSettingsPasswordJSONRequestBody defines body for PostUserUserIdSettingsPassword for application/json ContentType.
type PostUserUserIdSettingsPasswordJSONRequestBody  PostUserUserIdSettingsPasswordJSONBody








// PostUserUserIdSettingsPermissionsJSONRequestBody defines body for PostUserUserIdSettingsPermissions for application/json ContentType.
type PostUserUserIdSettingsPermissionsJSONRequestBody  PostUserUserIdSettingsPermissionsJSONBody










// PostWatchlistJSONRequestBody defines body for PostWatchlist for application/json ContentType.
type PostWatchlistJSONRequestBody = Watchlist













    
    
        // AsUser returns the union data inside the MediaRequest_ModifiedBy as a User
        func (t MediaRequest_ModifiedBy) AsUser() (User, error) {
            var body User
            err := json.Unmarshal(t.union, &body)
            return body, err
        }

        // FromUser overwrites any union data inside the MediaRequest_ModifiedBy as the provided User
        func (t *MediaRequest_ModifiedBy) FromUser (v User) error {
            b, err := json.Marshal(v)
            t.union = b
            return err
        }

        // MergeUser performs a merge with any union data inside the MediaRequest_ModifiedBy, using the provided User
        func (t *MediaRequest_ModifiedBy) MergeUser (v User) error {
            b, err := json.Marshal(v)
            if err != nil {
              return err
            }

            merged, err := runtime.JSONMerge(t.union, b)
            t.union = merged
            return err
        }
    
        // AsMediaRequestModifiedBy1 returns the union data inside the MediaRequest_ModifiedBy as a MediaRequestModifiedBy1
        func (t MediaRequest_ModifiedBy) AsMediaRequestModifiedBy1() (MediaRequestModifiedBy1, error) {
            var body MediaRequestModifiedBy1
            err := json.Unmarshal(t.union, &body)
            return body, err
        }

        // FromMediaRequestModifiedBy1 overwrites any union data inside the MediaRequest_ModifiedBy as the provided MediaRequestModifiedBy1
        func (t *MediaRequest_ModifiedBy) FromMediaRequestModifiedBy1 (v MediaRequestModifiedBy1) error {
            b, err := json.Marshal(v)
            t.union = b
            return err
        }

        // MergeMediaRequestModifiedBy1 performs a merge with any union data inside the MediaRequest_ModifiedBy, using the provided MediaRequestModifiedBy1
        func (t *MediaRequest_ModifiedBy) MergeMediaRequestModifiedBy1 (v MediaRequestModifiedBy1) error {
            b, err := json.Marshal(v)
            if err != nil {
              return err
            }

            merged, err := runtime.JSONMerge(t.union, b)
            t.union = merged
            return err
        }
    

    

    

    func (t MediaRequest_ModifiedBy) MarshalJSON() ([]byte, error) {
        b, err := t.union.MarshalJSON()
        return b, err
    }

    func (t *MediaRequest_ModifiedBy) UnmarshalJSON(b []byte) error {
        err := t.union.UnmarshalJSON(b)
        return err
    }
    

    
    
        // AsMovieResult returns the union data inside the PersonResult_KnownFor_Item as a MovieResult
        func (t PersonResult_KnownFor_Item) AsMovieResult() (MovieResult, error) {
            var body MovieResult
            err := json.Unmarshal(t.union, &body)
            return body, err
        }

        // FromMovieResult overwrites any union data inside the PersonResult_KnownFor_Item as the provided MovieResult
        func (t *PersonResult_KnownFor_Item) FromMovieResult (v MovieResult) error {
            b, err := json.Marshal(v)
            t.union = b
            return err
        }

        // MergeMovieResult performs a merge with any union data inside the PersonResult_KnownFor_Item, using the provided MovieResult
        func (t *PersonResult_KnownFor_Item) MergeMovieResult (v MovieResult) error {
            b, err := json.Marshal(v)
            if err != nil {
              return err
            }

            merged, err := runtime.JSONMerge(t.union, b)
            t.union = merged
            return err
        }
    
        // AsTvResult returns the union data inside the PersonResult_KnownFor_Item as a TvResult
        func (t PersonResult_KnownFor_Item) AsTvResult() (TvResult, error) {
            var body TvResult
            err := json.Unmarshal(t.union, &body)
            return body, err
        }

        // FromTvResult overwrites any union data inside the PersonResult_KnownFor_Item as the provided TvResult
        func (t *PersonResult_KnownFor_Item) FromTvResult (v TvResult) error {
            b, err := json.Marshal(v)
            t.union = b
            return err
        }

        // MergeTvResult performs a merge with any union data inside the PersonResult_KnownFor_Item, using the provided TvResult
        func (t *PersonResult_KnownFor_Item) MergeTvResult (v TvResult) error {
            b, err := json.Marshal(v)
            if err != nil {
              return err
            }

            merged, err := runtime.JSONMerge(t.union, b)
            t.union = merged
            return err
        }
    

    

    

    func (t PersonResult_KnownFor_Item) MarshalJSON() ([]byte, error) {
        b, err := t.union.MarshalJSON()
        return b, err
    }

    func (t *PersonResult_KnownFor_Item) UnmarshalJSON(b []byte) error {
        err := t.union.UnmarshalJSON(b)
        return err
    }
    

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
    // create a client with sane default values
    client := Client{
        Server: server,
    }
    // mutate client and add all optional params
    for _, o := range opts {
        if err := o(&client); err != nil {
            return nil, err
        }
    }
    // ensure the server URL always has a trailing slash
    if !strings.HasSuffix(client.Server, "/") {
        client.Server += "/"
    }
    // create httpClient, if not already present
    if client.Client == nil {
        client.Client = &http.Client{}
    }
    return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
// PostAuthJellyfinWithBody request with any body
    PostAuthJellyfinWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    PostAuthJellyfin(ctx context.Context, body PostAuthJellyfinJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
// PostAuthLocalWithBody request with any body
    PostAuthLocalWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    PostAuthLocal(ctx context.Context, body PostAuthLocalJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
// PostAuthLogout request
    PostAuthLogout(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error)

// GetAuthMe request
    GetAuthMe(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error)

// PostAuthPlexWithBody request with any body
    PostAuthPlexWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    PostAuthPlex(ctx context.Context, body PostAuthPlexJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
// PostAuthResetPasswordWithBody request with any body
    PostAuthResetPasswordWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    PostAuthResetPassword(ctx context.Context, body PostAuthResetPasswordJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
// PostAuthResetPasswordGuidWithBody request with any body
    PostAuthResetPasswordGuidWithBody(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    PostAuthResetPasswordGuid(ctx context.Context, guid string, body PostAuthResetPasswordGuidJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
// GetBackdrops request
    GetBackdrops(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error)

// GetCollectionCollectionId request
    GetCollectionCollectionId(ctx context.Context, collectionId float32, params *GetCollectionCollectionIdParams, reqEditors... RequestEditorFn) (*http.Response, error)

// GetDiscoverGenresliderMovie request
    GetDiscoverGenresliderMovie(ctx context.Context, params *GetDiscoverGenresliderMovieParams, reqEditors... RequestEditorFn) (*http.Response, error)

// GetDiscoverGenresliderTv request
    GetDiscoverGenresliderTv(ctx context.Context, params *GetDiscoverGenresliderTvParams, reqEditors... RequestEditorFn) (*http.Response, error)

// GetDiscoverKeywordKeywordIdMovies request
    GetDiscoverKeywordKeywordIdMovies(ctx context.Context, keywordId float32, params *GetDiscoverKeywordKeywordIdMoviesParams, reqEditors... RequestEditorFn) (*http.Response, error)

// GetDiscoverMovies request
    GetDiscoverMovies(ctx context.Context, params *GetDiscoverMoviesParams, reqEditors... RequestEditorFn) (*http.Response, error)

// GetDiscoverMoviesGenreGenreId request
    GetDiscoverMoviesGenreGenreId(ctx context.Context, genreId string, params *GetDiscoverMoviesGenreGenreIdParams, reqEditors... RequestEditorFn) (*http.Response, error)

// GetDiscoverMoviesLanguageLanguage request
    GetDiscoverMoviesLanguageLanguage(ctx context.Context, language string, params *GetDiscoverMoviesLanguageLanguageParams, reqEditors... RequestEditorFn) (*http.Response, error)

// GetDiscoverMoviesStudioStudioId request
    GetDiscoverMoviesStudioStudioId(ctx context.Context, studioId string, params *GetDiscoverMoviesStudioStudioIdParams, reqEditors... RequestEditorFn) (*http.Response, error)

// GetDiscoverMoviesUpcoming request
    GetDiscoverMoviesUpcoming(ctx context.Context, params *GetDiscoverMoviesUpcomingParams, reqEditors... RequestEditorFn) (*http.Response, error)

// GetDiscoverTrending request
    GetDiscoverTrending(ctx context.Context, params *GetDiscoverTrendingParams, reqEditors... RequestEditorFn) (*http.Response, error)

// GetDiscoverTv request
    GetDiscoverTv(ctx context.Context, params *GetDiscoverTvParams, reqEditors... RequestEditorFn) (*http.Response, error)

// GetDiscoverTvGenreGenreId request
    GetDiscoverTvGenreGenreId(ctx context.Context, genreId string, params *GetDiscoverTvGenreGenreIdParams, reqEditors... RequestEditorFn) (*http.Response, error)

// GetDiscoverTvLanguageLanguage request
    GetDiscoverTvLanguageLanguage(ctx context.Context, language string, params *GetDiscoverTvLanguageLanguageParams, reqEditors... RequestEditorFn) (*http.Response, error)

// GetDiscoverTvNetworkNetworkId request
    GetDiscoverTvNetworkNetworkId(ctx context.Context, networkId string, params *GetDiscoverTvNetworkNetworkIdParams, reqEditors... RequestEditorFn) (*http.Response, error)

// GetDiscoverTvUpcoming request
    GetDiscoverTvUpcoming(ctx context.Context, params *GetDiscoverTvUpcomingParams, reqEditors... RequestEditorFn) (*http.Response, error)

// GetDiscoverWatchlist request
    GetDiscoverWatchlist(ctx context.Context, params *GetDiscoverWatchlistParams, reqEditors... RequestEditorFn) (*http.Response, error)

// GetGenresMovie request
    GetGenresMovie(ctx context.Context, params *GetGenresMovieParams, reqEditors... RequestEditorFn) (*http.Response, error)

// GetGenresTv request
    GetGenresTv(ctx context.Context, params *GetGenresTvParams, reqEditors... RequestEditorFn) (*http.Response, error)

// GetIssue request
    GetIssue(ctx context.Context, params *GetIssueParams, reqEditors... RequestEditorFn) (*http.Response, error)

// PostIssueWithBody request with any body
    PostIssueWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    PostIssue(ctx context.Context, body PostIssueJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
// GetIssueCount request
    GetIssueCount(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error)

// DeleteIssueIssueId request
    DeleteIssueIssueId(ctx context.Context, issueId string, reqEditors... RequestEditorFn) (*http.Response, error)

// GetIssueIssueId request
    GetIssueIssueId(ctx context.Context, issueId float32, reqEditors... RequestEditorFn) (*http.Response, error)

// PostIssueIssueIdCommentWithBody request with any body
    PostIssueIssueIdCommentWithBody(ctx context.Context, issueId float32, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    PostIssueIssueIdComment(ctx context.Context, issueId float32, body PostIssueIssueIdCommentJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
// PostIssueIssueIdStatus request
    PostIssueIssueIdStatus(ctx context.Context, issueId string, status PostIssueIssueIdStatusParamsStatus, reqEditors... RequestEditorFn) (*http.Response, error)

// DeleteIssueCommentCommentId request
    DeleteIssueCommentCommentId(ctx context.Context, commentId string, reqEditors... RequestEditorFn) (*http.Response, error)

// GetIssueCommentCommentId request
    GetIssueCommentCommentId(ctx context.Context, commentId string, reqEditors... RequestEditorFn) (*http.Response, error)

// PutIssueCommentCommentIdWithBody request with any body
    PutIssueCommentCommentIdWithBody(ctx context.Context, commentId string, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    PutIssueCommentCommentId(ctx context.Context, commentId string, body PutIssueCommentCommentIdJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
// GetKeywordKeywordId request
    GetKeywordKeywordId(ctx context.Context, keywordId float32, reqEditors... RequestEditorFn) (*http.Response, error)

// GetLanguages request
    GetLanguages(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error)

// GetMedia request
    GetMedia(ctx context.Context, params *GetMediaParams, reqEditors... RequestEditorFn) (*http.Response, error)

// DeleteMediaMediaId request
    DeleteMediaMediaId(ctx context.Context, mediaId string, reqEditors... RequestEditorFn) (*http.Response, error)

// DeleteMediaMediaIdFile request
    DeleteMediaMediaIdFile(ctx context.Context, mediaId string, reqEditors... RequestEditorFn) (*http.Response, error)

// GetMediaMediaIdWatchData request
    GetMediaMediaIdWatchData(ctx context.Context, mediaId string, reqEditors... RequestEditorFn) (*http.Response, error)

// PostMediaMediaIdStatusWithBody request with any body
    PostMediaMediaIdStatusWithBody(ctx context.Context, mediaId string, status PostMediaMediaIdStatusParamsStatus, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    PostMediaMediaIdStatus(ctx context.Context, mediaId string, status PostMediaMediaIdStatusParamsStatus, body PostMediaMediaIdStatusJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
// GetMovieMovieId request
    GetMovieMovieId(ctx context.Context, movieId float32, params *GetMovieMovieIdParams, reqEditors... RequestEditorFn) (*http.Response, error)

// GetMovieMovieIdRatings request
    GetMovieMovieIdRatings(ctx context.Context, movieId float32, reqEditors... RequestEditorFn) (*http.Response, error)

// GetMovieMovieIdRatingscombined request
    GetMovieMovieIdRatingscombined(ctx context.Context, movieId float32, reqEditors... RequestEditorFn) (*http.Response, error)

// GetMovieMovieIdRecommendations request
    GetMovieMovieIdRecommendations(ctx context.Context, movieId float32, params *GetMovieMovieIdRecommendationsParams, reqEditors... RequestEditorFn) (*http.Response, error)

// GetMovieMovieIdSimilar request
    GetMovieMovieIdSimilar(ctx context.Context, movieId float32, params *GetMovieMovieIdSimilarParams, reqEditors... RequestEditorFn) (*http.Response, error)

// GetNetworkNetworkId request
    GetNetworkNetworkId(ctx context.Context, networkId float32, reqEditors... RequestEditorFn) (*http.Response, error)

// GetPersonPersonId request
    GetPersonPersonId(ctx context.Context, personId float32, params *GetPersonPersonIdParams, reqEditors... RequestEditorFn) (*http.Response, error)

// GetPersonPersonIdCombinedCredits request
    GetPersonPersonIdCombinedCredits(ctx context.Context, personId float32, params *GetPersonPersonIdCombinedCreditsParams, reqEditors... RequestEditorFn) (*http.Response, error)

// GetRegions request
    GetRegions(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error)

// GetRequest request
    GetRequest(ctx context.Context, params *GetRequestParams, reqEditors... RequestEditorFn) (*http.Response, error)

// PostRequestWithBody request with any body
    PostRequestWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    PostRequest(ctx context.Context, body PostRequestJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
// GetRequestCount request
    GetRequestCount(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error)

// DeleteRequestRequestId request
    DeleteRequestRequestId(ctx context.Context, requestId string, reqEditors... RequestEditorFn) (*http.Response, error)

// GetRequestRequestId request
    GetRequestRequestId(ctx context.Context, requestId string, reqEditors... RequestEditorFn) (*http.Response, error)

// PutRequestRequestIdWithBody request with any body
    PutRequestRequestIdWithBody(ctx context.Context, requestId string, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    PutRequestRequestId(ctx context.Context, requestId string, body PutRequestRequestIdJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
// PostRequestRequestIdRetry request
    PostRequestRequestIdRetry(ctx context.Context, requestId string, reqEditors... RequestEditorFn) (*http.Response, error)

// PostRequestRequestIdStatus request
    PostRequestRequestIdStatus(ctx context.Context, requestId string, status PostRequestRequestIdStatusParamsStatus, reqEditors... RequestEditorFn) (*http.Response, error)

// GetSearch request
    GetSearch(ctx context.Context, params *GetSearchParams, reqEditors... RequestEditorFn) (*http.Response, error)

// GetSearchCompany request
    GetSearchCompany(ctx context.Context, params *GetSearchCompanyParams, reqEditors... RequestEditorFn) (*http.Response, error)

// GetSearchKeyword request
    GetSearchKeyword(ctx context.Context, params *GetSearchKeywordParams, reqEditors... RequestEditorFn) (*http.Response, error)

// GetServiceRadarr request
    GetServiceRadarr(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error)

// GetServiceRadarrRadarrId request
    GetServiceRadarrRadarrId(ctx context.Context, radarrId float32, reqEditors... RequestEditorFn) (*http.Response, error)

// GetServiceSonarr request
    GetServiceSonarr(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error)

// GetServiceSonarrLookupTmdbId request
    GetServiceSonarrLookupTmdbId(ctx context.Context, tmdbId float32, reqEditors... RequestEditorFn) (*http.Response, error)

// GetServiceSonarrSonarrId request
    GetServiceSonarrSonarrId(ctx context.Context, sonarrId float32, reqEditors... RequestEditorFn) (*http.Response, error)

// GetSettingsAbout request
    GetSettingsAbout(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error)

// GetSettingsCache request
    GetSettingsCache(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error)

// PostSettingsCacheCacheIdFlush request
    PostSettingsCacheCacheIdFlush(ctx context.Context, cacheId string, reqEditors... RequestEditorFn) (*http.Response, error)

// GetSettingsDiscover request
    GetSettingsDiscover(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error)

// PostSettingsDiscoverWithBody request with any body
    PostSettingsDiscoverWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    PostSettingsDiscover(ctx context.Context, body PostSettingsDiscoverJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
// PostSettingsDiscoverAddWithBody request with any body
    PostSettingsDiscoverAddWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    PostSettingsDiscoverAdd(ctx context.Context, body PostSettingsDiscoverAddJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
// GetSettingsDiscoverReset request
    GetSettingsDiscoverReset(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error)

// DeleteSettingsDiscoverSliderId request
    DeleteSettingsDiscoverSliderId(ctx context.Context, sliderId float32, reqEditors... RequestEditorFn) (*http.Response, error)

// PutSettingsDiscoverSliderIdWithBody request with any body
    PutSettingsDiscoverSliderIdWithBody(ctx context.Context, sliderId float32, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    PutSettingsDiscoverSliderId(ctx context.Context, sliderId float32, body PutSettingsDiscoverSliderIdJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
// PostSettingsInitialize request
    PostSettingsInitialize(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error)

// GetSettingsJellyfin request
    GetSettingsJellyfin(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error)

// PostSettingsJellyfinWithBody request with any body
    PostSettingsJellyfinWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    PostSettingsJellyfin(ctx context.Context, body PostSettingsJellyfinJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
// GetSettingsJellyfinLibrary request
    GetSettingsJellyfinLibrary(ctx context.Context, params *GetSettingsJellyfinLibraryParams, reqEditors... RequestEditorFn) (*http.Response, error)

// GetSettingsJellyfinSync request
    GetSettingsJellyfinSync(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error)

// PostSettingsJellyfinSyncWithBody request with any body
    PostSettingsJellyfinSyncWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    PostSettingsJellyfinSync(ctx context.Context, body PostSettingsJellyfinSyncJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
// GetSettingsJellyfinUsers request
    GetSettingsJellyfinUsers(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error)

// GetSettingsJobs request
    GetSettingsJobs(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error)

// PostSettingsJobsJobIdCancel request
    PostSettingsJobsJobIdCancel(ctx context.Context, jobId string, reqEditors... RequestEditorFn) (*http.Response, error)

// PostSettingsJobsJobIdRun request
    PostSettingsJobsJobIdRun(ctx context.Context, jobId string, reqEditors... RequestEditorFn) (*http.Response, error)

// PostSettingsJobsJobIdScheduleWithBody request with any body
    PostSettingsJobsJobIdScheduleWithBody(ctx context.Context, jobId string, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    PostSettingsJobsJobIdSchedule(ctx context.Context, jobId string, body PostSettingsJobsJobIdScheduleJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
// GetSettingsLogs request
    GetSettingsLogs(ctx context.Context, params *GetSettingsLogsParams, reqEditors... RequestEditorFn) (*http.Response, error)

// GetSettingsMain request
    GetSettingsMain(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error)

// PostSettingsMainWithBody request with any body
    PostSettingsMainWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    PostSettingsMain(ctx context.Context, body PostSettingsMainJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
// PostSettingsMainRegenerate request
    PostSettingsMainRegenerate(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error)

// GetSettingsNotificationsDiscord request
    GetSettingsNotificationsDiscord(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error)

// PostSettingsNotificationsDiscordWithBody request with any body
    PostSettingsNotificationsDiscordWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    PostSettingsNotificationsDiscord(ctx context.Context, body PostSettingsNotificationsDiscordJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
// PostSettingsNotificationsDiscordTestWithBody request with any body
    PostSettingsNotificationsDiscordTestWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    PostSettingsNotificationsDiscordTest(ctx context.Context, body PostSettingsNotificationsDiscordTestJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
// GetSettingsNotificationsEmail request
    GetSettingsNotificationsEmail(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error)

// PostSettingsNotificationsEmailWithBody request with any body
    PostSettingsNotificationsEmailWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    PostSettingsNotificationsEmail(ctx context.Context, body PostSettingsNotificationsEmailJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
// PostSettingsNotificationsEmailTestWithBody request with any body
    PostSettingsNotificationsEmailTestWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    PostSettingsNotificationsEmailTest(ctx context.Context, body PostSettingsNotificationsEmailTestJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
// GetSettingsNotificationsGotify request
    GetSettingsNotificationsGotify(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error)

// PostSettingsNotificationsGotifyWithBody request with any body
    PostSettingsNotificationsGotifyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    PostSettingsNotificationsGotify(ctx context.Context, body PostSettingsNotificationsGotifyJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
// PostSettingsNotificationsGotifyTestWithBody request with any body
    PostSettingsNotificationsGotifyTestWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    PostSettingsNotificationsGotifyTest(ctx context.Context, body PostSettingsNotificationsGotifyTestJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
// GetSettingsNotificationsLunasea request
    GetSettingsNotificationsLunasea(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error)

// PostSettingsNotificationsLunaseaWithBody request with any body
    PostSettingsNotificationsLunaseaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    PostSettingsNotificationsLunasea(ctx context.Context, body PostSettingsNotificationsLunaseaJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
// PostSettingsNotificationsLunaseaTestWithBody request with any body
    PostSettingsNotificationsLunaseaTestWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    PostSettingsNotificationsLunaseaTest(ctx context.Context, body PostSettingsNotificationsLunaseaTestJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
// GetSettingsNotificationsPushbullet request
    GetSettingsNotificationsPushbullet(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error)

// PostSettingsNotificationsPushbulletWithBody request with any body
    PostSettingsNotificationsPushbulletWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    PostSettingsNotificationsPushbullet(ctx context.Context, body PostSettingsNotificationsPushbulletJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
// PostSettingsNotificationsPushbulletTestWithBody request with any body
    PostSettingsNotificationsPushbulletTestWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    PostSettingsNotificationsPushbulletTest(ctx context.Context, body PostSettingsNotificationsPushbulletTestJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
// GetSettingsNotificationsPushover request
    GetSettingsNotificationsPushover(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error)

// PostSettingsNotificationsPushoverWithBody request with any body
    PostSettingsNotificationsPushoverWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    PostSettingsNotificationsPushover(ctx context.Context, body PostSettingsNotificationsPushoverJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
// GetSettingsNotificationsPushoverSounds request
    GetSettingsNotificationsPushoverSounds(ctx context.Context, params *GetSettingsNotificationsPushoverSoundsParams, reqEditors... RequestEditorFn) (*http.Response, error)

// PostSettingsNotificationsPushoverTestWithBody request with any body
    PostSettingsNotificationsPushoverTestWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    PostSettingsNotificationsPushoverTest(ctx context.Context, body PostSettingsNotificationsPushoverTestJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
// GetSettingsNotificationsSlack request
    GetSettingsNotificationsSlack(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error)

// PostSettingsNotificationsSlackWithBody request with any body
    PostSettingsNotificationsSlackWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    PostSettingsNotificationsSlack(ctx context.Context, body PostSettingsNotificationsSlackJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
// PostSettingsNotificationsSlackTestWithBody request with any body
    PostSettingsNotificationsSlackTestWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    PostSettingsNotificationsSlackTest(ctx context.Context, body PostSettingsNotificationsSlackTestJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
// GetSettingsNotificationsTelegram request
    GetSettingsNotificationsTelegram(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error)

// PostSettingsNotificationsTelegramWithBody request with any body
    PostSettingsNotificationsTelegramWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    PostSettingsNotificationsTelegram(ctx context.Context, body PostSettingsNotificationsTelegramJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
// PostSettingsNotificationsTelegramTestWithBody request with any body
    PostSettingsNotificationsTelegramTestWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    PostSettingsNotificationsTelegramTest(ctx context.Context, body PostSettingsNotificationsTelegramTestJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
// GetSettingsNotificationsWebhook request
    GetSettingsNotificationsWebhook(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error)

// PostSettingsNotificationsWebhookWithBody request with any body
    PostSettingsNotificationsWebhookWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    PostSettingsNotificationsWebhook(ctx context.Context, body PostSettingsNotificationsWebhookJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
// PostSettingsNotificationsWebhookTestWithBody request with any body
    PostSettingsNotificationsWebhookTestWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    PostSettingsNotificationsWebhookTest(ctx context.Context, body PostSettingsNotificationsWebhookTestJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
// GetSettingsNotificationsWebpush request
    GetSettingsNotificationsWebpush(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error)

// PostSettingsNotificationsWebpushWithBody request with any body
    PostSettingsNotificationsWebpushWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    PostSettingsNotificationsWebpush(ctx context.Context, body PostSettingsNotificationsWebpushJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
// PostSettingsNotificationsWebpushTestWithBody request with any body
    PostSettingsNotificationsWebpushTestWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    PostSettingsNotificationsWebpushTest(ctx context.Context, body PostSettingsNotificationsWebpushTestJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
// GetSettingsPlex request
    GetSettingsPlex(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error)

// PostSettingsPlexWithBody request with any body
    PostSettingsPlexWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    PostSettingsPlex(ctx context.Context, body PostSettingsPlexJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
// GetSettingsPlexDevicesServers request
    GetSettingsPlexDevicesServers(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error)

// GetSettingsPlexLibrary request
    GetSettingsPlexLibrary(ctx context.Context, params *GetSettingsPlexLibraryParams, reqEditors... RequestEditorFn) (*http.Response, error)

// GetSettingsPlexSync request
    GetSettingsPlexSync(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error)

// PostSettingsPlexSyncWithBody request with any body
    PostSettingsPlexSyncWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    PostSettingsPlexSync(ctx context.Context, body PostSettingsPlexSyncJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
// GetSettingsPlexUsers request
    GetSettingsPlexUsers(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error)

// GetSettingsPublic request
    GetSettingsPublic(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error)

// GetSettingsRadarr request
    GetSettingsRadarr(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error)

// PostSettingsRadarrWithBody request with any body
    PostSettingsRadarrWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    PostSettingsRadarr(ctx context.Context, body PostSettingsRadarrJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
// PostSettingsRadarrTestWithBody request with any body
    PostSettingsRadarrTestWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    PostSettingsRadarrTest(ctx context.Context, body PostSettingsRadarrTestJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
// DeleteSettingsRadarrRadarrId request
    DeleteSettingsRadarrRadarrId(ctx context.Context, radarrId int, reqEditors... RequestEditorFn) (*http.Response, error)

// PutSettingsRadarrRadarrIdWithBody request with any body
    PutSettingsRadarrRadarrIdWithBody(ctx context.Context, radarrId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    PutSettingsRadarrRadarrId(ctx context.Context, radarrId int, body PutSettingsRadarrRadarrIdJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
// GetSettingsRadarrRadarrIdProfiles request
    GetSettingsRadarrRadarrIdProfiles(ctx context.Context, radarrId int, reqEditors... RequestEditorFn) (*http.Response, error)

// GetSettingsSonarr request
    GetSettingsSonarr(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error)

// PostSettingsSonarrWithBody request with any body
    PostSettingsSonarrWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    PostSettingsSonarr(ctx context.Context, body PostSettingsSonarrJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
// PostSettingsSonarrTestWithBody request with any body
    PostSettingsSonarrTestWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    PostSettingsSonarrTest(ctx context.Context, body PostSettingsSonarrTestJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
// DeleteSettingsSonarrSonarrId request
    DeleteSettingsSonarrSonarrId(ctx context.Context, sonarrId int, reqEditors... RequestEditorFn) (*http.Response, error)

// PutSettingsSonarrSonarrIdWithBody request with any body
    PutSettingsSonarrSonarrIdWithBody(ctx context.Context, sonarrId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    PutSettingsSonarrSonarrId(ctx context.Context, sonarrId int, body PutSettingsSonarrSonarrIdJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
// GetSettingsTautulli request
    GetSettingsTautulli(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error)

// PostSettingsTautulliWithBody request with any body
    PostSettingsTautulliWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    PostSettingsTautulli(ctx context.Context, body PostSettingsTautulliJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
// GetStatus request
    GetStatus(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error)

// GetStatusAppdata request
    GetStatusAppdata(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error)

// GetStudioStudioId request
    GetStudioStudioId(ctx context.Context, studioId float32, reqEditors... RequestEditorFn) (*http.Response, error)

// GetTvTvId request
    GetTvTvId(ctx context.Context, tvId float32, params *GetTvTvIdParams, reqEditors... RequestEditorFn) (*http.Response, error)

// GetTvTvIdRatings request
    GetTvTvIdRatings(ctx context.Context, tvId float32, reqEditors... RequestEditorFn) (*http.Response, error)

// GetTvTvIdRecommendations request
    GetTvTvIdRecommendations(ctx context.Context, tvId float32, params *GetTvTvIdRecommendationsParams, reqEditors... RequestEditorFn) (*http.Response, error)

// GetTvTvIdSeasonSeasonId request
    GetTvTvIdSeasonSeasonId(ctx context.Context, tvId float32, seasonId float32, params *GetTvTvIdSeasonSeasonIdParams, reqEditors... RequestEditorFn) (*http.Response, error)

// GetTvTvIdSimilar request
    GetTvTvIdSimilar(ctx context.Context, tvId float32, params *GetTvTvIdSimilarParams, reqEditors... RequestEditorFn) (*http.Response, error)

// GetUser request
    GetUser(ctx context.Context, params *GetUserParams, reqEditors... RequestEditorFn) (*http.Response, error)

// PostUserWithBody request with any body
    PostUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    PostUser(ctx context.Context, body PostUserJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
// PutUserWithBody request with any body
    PutUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    PutUser(ctx context.Context, body PutUserJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
// PostUserImportFromJellyfinWithBody request with any body
    PostUserImportFromJellyfinWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    PostUserImportFromJellyfin(ctx context.Context, body PostUserImportFromJellyfinJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
// PostUserImportFromPlexWithBody request with any body
    PostUserImportFromPlexWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    PostUserImportFromPlex(ctx context.Context, body PostUserImportFromPlexJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
// PostUserRegisterPushSubscriptionWithBody request with any body
    PostUserRegisterPushSubscriptionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    PostUserRegisterPushSubscription(ctx context.Context, body PostUserRegisterPushSubscriptionJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
// DeleteUserUserId request
    DeleteUserUserId(ctx context.Context, userId float32, reqEditors... RequestEditorFn) (*http.Response, error)

// GetUserUserId request
    GetUserUserId(ctx context.Context, userId float32, reqEditors... RequestEditorFn) (*http.Response, error)

// PutUserUserIdWithBody request with any body
    PutUserUserIdWithBody(ctx context.Context, userId float32, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    PutUserUserId(ctx context.Context, userId float32, body PutUserUserIdJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
// GetUserUserIdQuota request
    GetUserUserIdQuota(ctx context.Context, userId float32, reqEditors... RequestEditorFn) (*http.Response, error)

// GetUserUserIdRequests request
    GetUserUserIdRequests(ctx context.Context, userId float32, params *GetUserUserIdRequestsParams, reqEditors... RequestEditorFn) (*http.Response, error)

// GetUserUserIdSettingsMain request
    GetUserUserIdSettingsMain(ctx context.Context, userId float32, reqEditors... RequestEditorFn) (*http.Response, error)

// PostUserUserIdSettingsMainWithBody request with any body
    PostUserUserIdSettingsMainWithBody(ctx context.Context, userId float32, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    PostUserUserIdSettingsMain(ctx context.Context, userId float32, body PostUserUserIdSettingsMainJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
// GetUserUserIdSettingsNotifications request
    GetUserUserIdSettingsNotifications(ctx context.Context, userId float32, reqEditors... RequestEditorFn) (*http.Response, error)

// PostUserUserIdSettingsNotificationsWithBody request with any body
    PostUserUserIdSettingsNotificationsWithBody(ctx context.Context, userId float32, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    PostUserUserIdSettingsNotifications(ctx context.Context, userId float32, body PostUserUserIdSettingsNotificationsJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
// GetUserUserIdSettingsPassword request
    GetUserUserIdSettingsPassword(ctx context.Context, userId float32, reqEditors... RequestEditorFn) (*http.Response, error)

// PostUserUserIdSettingsPasswordWithBody request with any body
    PostUserUserIdSettingsPasswordWithBody(ctx context.Context, userId float32, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    PostUserUserIdSettingsPassword(ctx context.Context, userId float32, body PostUserUserIdSettingsPasswordJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
// GetUserUserIdSettingsPermissions request
    GetUserUserIdSettingsPermissions(ctx context.Context, userId float32, reqEditors... RequestEditorFn) (*http.Response, error)

// PostUserUserIdSettingsPermissionsWithBody request with any body
    PostUserUserIdSettingsPermissionsWithBody(ctx context.Context, userId float32, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    PostUserUserIdSettingsPermissions(ctx context.Context, userId float32, body PostUserUserIdSettingsPermissionsJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
// GetUserUserIdWatchData request
    GetUserUserIdWatchData(ctx context.Context, userId float32, reqEditors... RequestEditorFn) (*http.Response, error)

// GetUserUserIdWatchlist request
    GetUserUserIdWatchlist(ctx context.Context, userId float32, params *GetUserUserIdWatchlistParams, reqEditors... RequestEditorFn) (*http.Response, error)

// PostWatchlistWithBody request with any body
    PostWatchlistWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error)

    PostWatchlist(ctx context.Context, body PostWatchlistJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error)
    
// DeleteWatchlistTmdbId request
    DeleteWatchlistTmdbId(ctx context.Context, tmdbId string, reqEditors... RequestEditorFn) (*http.Response, error)

// GetWatchprovidersMovies request
    GetWatchprovidersMovies(ctx context.Context, params *GetWatchprovidersMoviesParams, reqEditors... RequestEditorFn) (*http.Response, error)

// GetWatchprovidersRegions request
    GetWatchprovidersRegions(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error)

// GetWatchprovidersTv request
    GetWatchprovidersTv(ctx context.Context, params *GetWatchprovidersTvParams, reqEditors... RequestEditorFn) (*http.Response, error)


}



func (c *Client) PostAuthJellyfinWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostAuthJellyfinRequestWithBody(c.Server, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostAuthJellyfin(ctx context.Context, body PostAuthJellyfinJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostAuthJellyfinRequest(c.Server, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostAuthLocalWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostAuthLocalRequestWithBody(c.Server, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostAuthLocal(ctx context.Context, body PostAuthLocalJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostAuthLocalRequest(c.Server, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostAuthLogout(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostAuthLogoutRequest(c.Server)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetAuthMe(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetAuthMeRequest(c.Server)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostAuthPlexWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostAuthPlexRequestWithBody(c.Server, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostAuthPlex(ctx context.Context, body PostAuthPlexJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostAuthPlexRequest(c.Server, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostAuthResetPasswordWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostAuthResetPasswordRequestWithBody(c.Server, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostAuthResetPassword(ctx context.Context, body PostAuthResetPasswordJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostAuthResetPasswordRequest(c.Server, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostAuthResetPasswordGuidWithBody(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostAuthResetPasswordGuidRequestWithBody(c.Server, guid, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostAuthResetPasswordGuid(ctx context.Context, guid string, body PostAuthResetPasswordGuidJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostAuthResetPasswordGuidRequest(c.Server, guid, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetBackdrops(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetBackdropsRequest(c.Server)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetCollectionCollectionId(ctx context.Context, collectionId float32, params *GetCollectionCollectionIdParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetCollectionCollectionIdRequest(c.Server, collectionId, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetDiscoverGenresliderMovie(ctx context.Context, params *GetDiscoverGenresliderMovieParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetDiscoverGenresliderMovieRequest(c.Server, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetDiscoverGenresliderTv(ctx context.Context, params *GetDiscoverGenresliderTvParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetDiscoverGenresliderTvRequest(c.Server, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetDiscoverKeywordKeywordIdMovies(ctx context.Context, keywordId float32, params *GetDiscoverKeywordKeywordIdMoviesParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetDiscoverKeywordKeywordIdMoviesRequest(c.Server, keywordId, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetDiscoverMovies(ctx context.Context, params *GetDiscoverMoviesParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetDiscoverMoviesRequest(c.Server, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetDiscoverMoviesGenreGenreId(ctx context.Context, genreId string, params *GetDiscoverMoviesGenreGenreIdParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetDiscoverMoviesGenreGenreIdRequest(c.Server, genreId, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetDiscoverMoviesLanguageLanguage(ctx context.Context, language string, params *GetDiscoverMoviesLanguageLanguageParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetDiscoverMoviesLanguageLanguageRequest(c.Server, language, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetDiscoverMoviesStudioStudioId(ctx context.Context, studioId string, params *GetDiscoverMoviesStudioStudioIdParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetDiscoverMoviesStudioStudioIdRequest(c.Server, studioId, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetDiscoverMoviesUpcoming(ctx context.Context, params *GetDiscoverMoviesUpcomingParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetDiscoverMoviesUpcomingRequest(c.Server, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetDiscoverTrending(ctx context.Context, params *GetDiscoverTrendingParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetDiscoverTrendingRequest(c.Server, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetDiscoverTv(ctx context.Context, params *GetDiscoverTvParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetDiscoverTvRequest(c.Server, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetDiscoverTvGenreGenreId(ctx context.Context, genreId string, params *GetDiscoverTvGenreGenreIdParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetDiscoverTvGenreGenreIdRequest(c.Server, genreId, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetDiscoverTvLanguageLanguage(ctx context.Context, language string, params *GetDiscoverTvLanguageLanguageParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetDiscoverTvLanguageLanguageRequest(c.Server, language, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetDiscoverTvNetworkNetworkId(ctx context.Context, networkId string, params *GetDiscoverTvNetworkNetworkIdParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetDiscoverTvNetworkNetworkIdRequest(c.Server, networkId, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetDiscoverTvUpcoming(ctx context.Context, params *GetDiscoverTvUpcomingParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetDiscoverTvUpcomingRequest(c.Server, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetDiscoverWatchlist(ctx context.Context, params *GetDiscoverWatchlistParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetDiscoverWatchlistRequest(c.Server, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetGenresMovie(ctx context.Context, params *GetGenresMovieParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetGenresMovieRequest(c.Server, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetGenresTv(ctx context.Context, params *GetGenresTvParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetGenresTvRequest(c.Server, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetIssue(ctx context.Context, params *GetIssueParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetIssueRequest(c.Server, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostIssueWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostIssueRequestWithBody(c.Server, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostIssue(ctx context.Context, body PostIssueJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostIssueRequest(c.Server, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetIssueCount(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetIssueCountRequest(c.Server)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) DeleteIssueIssueId(ctx context.Context, issueId string, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewDeleteIssueIssueIdRequest(c.Server, issueId)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetIssueIssueId(ctx context.Context, issueId float32, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetIssueIssueIdRequest(c.Server, issueId)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostIssueIssueIdCommentWithBody(ctx context.Context, issueId float32, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostIssueIssueIdCommentRequestWithBody(c.Server, issueId, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostIssueIssueIdComment(ctx context.Context, issueId float32, body PostIssueIssueIdCommentJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostIssueIssueIdCommentRequest(c.Server, issueId, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostIssueIssueIdStatus(ctx context.Context, issueId string, status PostIssueIssueIdStatusParamsStatus, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostIssueIssueIdStatusRequest(c.Server, issueId, status)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) DeleteIssueCommentCommentId(ctx context.Context, commentId string, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewDeleteIssueCommentCommentIdRequest(c.Server, commentId)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetIssueCommentCommentId(ctx context.Context, commentId string, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetIssueCommentCommentIdRequest(c.Server, commentId)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PutIssueCommentCommentIdWithBody(ctx context.Context, commentId string, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPutIssueCommentCommentIdRequestWithBody(c.Server, commentId, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PutIssueCommentCommentId(ctx context.Context, commentId string, body PutIssueCommentCommentIdJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPutIssueCommentCommentIdRequest(c.Server, commentId, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetKeywordKeywordId(ctx context.Context, keywordId float32, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetKeywordKeywordIdRequest(c.Server, keywordId)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetLanguages(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetLanguagesRequest(c.Server)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetMedia(ctx context.Context, params *GetMediaParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetMediaRequest(c.Server, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) DeleteMediaMediaId(ctx context.Context, mediaId string, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewDeleteMediaMediaIdRequest(c.Server, mediaId)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) DeleteMediaMediaIdFile(ctx context.Context, mediaId string, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewDeleteMediaMediaIdFileRequest(c.Server, mediaId)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetMediaMediaIdWatchData(ctx context.Context, mediaId string, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetMediaMediaIdWatchDataRequest(c.Server, mediaId)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostMediaMediaIdStatusWithBody(ctx context.Context, mediaId string, status PostMediaMediaIdStatusParamsStatus, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostMediaMediaIdStatusRequestWithBody(c.Server, mediaId, status, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostMediaMediaIdStatus(ctx context.Context, mediaId string, status PostMediaMediaIdStatusParamsStatus, body PostMediaMediaIdStatusJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostMediaMediaIdStatusRequest(c.Server, mediaId, status, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetMovieMovieId(ctx context.Context, movieId float32, params *GetMovieMovieIdParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetMovieMovieIdRequest(c.Server, movieId, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetMovieMovieIdRatings(ctx context.Context, movieId float32, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetMovieMovieIdRatingsRequest(c.Server, movieId)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetMovieMovieIdRatingscombined(ctx context.Context, movieId float32, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetMovieMovieIdRatingscombinedRequest(c.Server, movieId)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetMovieMovieIdRecommendations(ctx context.Context, movieId float32, params *GetMovieMovieIdRecommendationsParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetMovieMovieIdRecommendationsRequest(c.Server, movieId, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetMovieMovieIdSimilar(ctx context.Context, movieId float32, params *GetMovieMovieIdSimilarParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetMovieMovieIdSimilarRequest(c.Server, movieId, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetNetworkNetworkId(ctx context.Context, networkId float32, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetNetworkNetworkIdRequest(c.Server, networkId)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetPersonPersonId(ctx context.Context, personId float32, params *GetPersonPersonIdParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetPersonPersonIdRequest(c.Server, personId, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetPersonPersonIdCombinedCredits(ctx context.Context, personId float32, params *GetPersonPersonIdCombinedCreditsParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetPersonPersonIdCombinedCreditsRequest(c.Server, personId, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetRegions(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetRegionsRequest(c.Server)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetRequest(ctx context.Context, params *GetRequestParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetRequestRequest(c.Server, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostRequestWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostRequestRequestWithBody(c.Server, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostRequest(ctx context.Context, body PostRequestJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostRequestRequest(c.Server, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetRequestCount(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetRequestCountRequest(c.Server)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) DeleteRequestRequestId(ctx context.Context, requestId string, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewDeleteRequestRequestIdRequest(c.Server, requestId)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetRequestRequestId(ctx context.Context, requestId string, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetRequestRequestIdRequest(c.Server, requestId)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PutRequestRequestIdWithBody(ctx context.Context, requestId string, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPutRequestRequestIdRequestWithBody(c.Server, requestId, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PutRequestRequestId(ctx context.Context, requestId string, body PutRequestRequestIdJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPutRequestRequestIdRequest(c.Server, requestId, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostRequestRequestIdRetry(ctx context.Context, requestId string, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostRequestRequestIdRetryRequest(c.Server, requestId)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostRequestRequestIdStatus(ctx context.Context, requestId string, status PostRequestRequestIdStatusParamsStatus, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostRequestRequestIdStatusRequest(c.Server, requestId, status)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetSearch(ctx context.Context, params *GetSearchParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetSearchRequest(c.Server, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetSearchCompany(ctx context.Context, params *GetSearchCompanyParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetSearchCompanyRequest(c.Server, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetSearchKeyword(ctx context.Context, params *GetSearchKeywordParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetSearchKeywordRequest(c.Server, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetServiceRadarr(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetServiceRadarrRequest(c.Server)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetServiceRadarrRadarrId(ctx context.Context, radarrId float32, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetServiceRadarrRadarrIdRequest(c.Server, radarrId)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetServiceSonarr(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetServiceSonarrRequest(c.Server)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetServiceSonarrLookupTmdbId(ctx context.Context, tmdbId float32, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetServiceSonarrLookupTmdbIdRequest(c.Server, tmdbId)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetServiceSonarrSonarrId(ctx context.Context, sonarrId float32, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetServiceSonarrSonarrIdRequest(c.Server, sonarrId)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetSettingsAbout(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetSettingsAboutRequest(c.Server)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetSettingsCache(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetSettingsCacheRequest(c.Server)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostSettingsCacheCacheIdFlush(ctx context.Context, cacheId string, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostSettingsCacheCacheIdFlushRequest(c.Server, cacheId)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetSettingsDiscover(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetSettingsDiscoverRequest(c.Server)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostSettingsDiscoverWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostSettingsDiscoverRequestWithBody(c.Server, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostSettingsDiscover(ctx context.Context, body PostSettingsDiscoverJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostSettingsDiscoverRequest(c.Server, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostSettingsDiscoverAddWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostSettingsDiscoverAddRequestWithBody(c.Server, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostSettingsDiscoverAdd(ctx context.Context, body PostSettingsDiscoverAddJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostSettingsDiscoverAddRequest(c.Server, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetSettingsDiscoverReset(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetSettingsDiscoverResetRequest(c.Server)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) DeleteSettingsDiscoverSliderId(ctx context.Context, sliderId float32, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewDeleteSettingsDiscoverSliderIdRequest(c.Server, sliderId)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PutSettingsDiscoverSliderIdWithBody(ctx context.Context, sliderId float32, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPutSettingsDiscoverSliderIdRequestWithBody(c.Server, sliderId, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PutSettingsDiscoverSliderId(ctx context.Context, sliderId float32, body PutSettingsDiscoverSliderIdJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPutSettingsDiscoverSliderIdRequest(c.Server, sliderId, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostSettingsInitialize(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostSettingsInitializeRequest(c.Server)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetSettingsJellyfin(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetSettingsJellyfinRequest(c.Server)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostSettingsJellyfinWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostSettingsJellyfinRequestWithBody(c.Server, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostSettingsJellyfin(ctx context.Context, body PostSettingsJellyfinJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostSettingsJellyfinRequest(c.Server, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetSettingsJellyfinLibrary(ctx context.Context, params *GetSettingsJellyfinLibraryParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetSettingsJellyfinLibraryRequest(c.Server, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetSettingsJellyfinSync(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetSettingsJellyfinSyncRequest(c.Server)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostSettingsJellyfinSyncWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostSettingsJellyfinSyncRequestWithBody(c.Server, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostSettingsJellyfinSync(ctx context.Context, body PostSettingsJellyfinSyncJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostSettingsJellyfinSyncRequest(c.Server, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetSettingsJellyfinUsers(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetSettingsJellyfinUsersRequest(c.Server)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetSettingsJobs(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetSettingsJobsRequest(c.Server)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostSettingsJobsJobIdCancel(ctx context.Context, jobId string, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostSettingsJobsJobIdCancelRequest(c.Server, jobId)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostSettingsJobsJobIdRun(ctx context.Context, jobId string, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostSettingsJobsJobIdRunRequest(c.Server, jobId)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostSettingsJobsJobIdScheduleWithBody(ctx context.Context, jobId string, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostSettingsJobsJobIdScheduleRequestWithBody(c.Server, jobId, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostSettingsJobsJobIdSchedule(ctx context.Context, jobId string, body PostSettingsJobsJobIdScheduleJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostSettingsJobsJobIdScheduleRequest(c.Server, jobId, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetSettingsLogs(ctx context.Context, params *GetSettingsLogsParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetSettingsLogsRequest(c.Server, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetSettingsMain(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetSettingsMainRequest(c.Server)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostSettingsMainWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostSettingsMainRequestWithBody(c.Server, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostSettingsMain(ctx context.Context, body PostSettingsMainJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostSettingsMainRequest(c.Server, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostSettingsMainRegenerate(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostSettingsMainRegenerateRequest(c.Server)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetSettingsNotificationsDiscord(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetSettingsNotificationsDiscordRequest(c.Server)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostSettingsNotificationsDiscordWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostSettingsNotificationsDiscordRequestWithBody(c.Server, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostSettingsNotificationsDiscord(ctx context.Context, body PostSettingsNotificationsDiscordJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostSettingsNotificationsDiscordRequest(c.Server, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostSettingsNotificationsDiscordTestWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostSettingsNotificationsDiscordTestRequestWithBody(c.Server, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostSettingsNotificationsDiscordTest(ctx context.Context, body PostSettingsNotificationsDiscordTestJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostSettingsNotificationsDiscordTestRequest(c.Server, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetSettingsNotificationsEmail(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetSettingsNotificationsEmailRequest(c.Server)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostSettingsNotificationsEmailWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostSettingsNotificationsEmailRequestWithBody(c.Server, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostSettingsNotificationsEmail(ctx context.Context, body PostSettingsNotificationsEmailJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostSettingsNotificationsEmailRequest(c.Server, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostSettingsNotificationsEmailTestWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostSettingsNotificationsEmailTestRequestWithBody(c.Server, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostSettingsNotificationsEmailTest(ctx context.Context, body PostSettingsNotificationsEmailTestJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostSettingsNotificationsEmailTestRequest(c.Server, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetSettingsNotificationsGotify(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetSettingsNotificationsGotifyRequest(c.Server)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostSettingsNotificationsGotifyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostSettingsNotificationsGotifyRequestWithBody(c.Server, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostSettingsNotificationsGotify(ctx context.Context, body PostSettingsNotificationsGotifyJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostSettingsNotificationsGotifyRequest(c.Server, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostSettingsNotificationsGotifyTestWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostSettingsNotificationsGotifyTestRequestWithBody(c.Server, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostSettingsNotificationsGotifyTest(ctx context.Context, body PostSettingsNotificationsGotifyTestJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostSettingsNotificationsGotifyTestRequest(c.Server, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetSettingsNotificationsLunasea(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetSettingsNotificationsLunaseaRequest(c.Server)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostSettingsNotificationsLunaseaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostSettingsNotificationsLunaseaRequestWithBody(c.Server, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostSettingsNotificationsLunasea(ctx context.Context, body PostSettingsNotificationsLunaseaJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostSettingsNotificationsLunaseaRequest(c.Server, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostSettingsNotificationsLunaseaTestWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostSettingsNotificationsLunaseaTestRequestWithBody(c.Server, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostSettingsNotificationsLunaseaTest(ctx context.Context, body PostSettingsNotificationsLunaseaTestJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostSettingsNotificationsLunaseaTestRequest(c.Server, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetSettingsNotificationsPushbullet(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetSettingsNotificationsPushbulletRequest(c.Server)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostSettingsNotificationsPushbulletWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostSettingsNotificationsPushbulletRequestWithBody(c.Server, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostSettingsNotificationsPushbullet(ctx context.Context, body PostSettingsNotificationsPushbulletJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostSettingsNotificationsPushbulletRequest(c.Server, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostSettingsNotificationsPushbulletTestWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostSettingsNotificationsPushbulletTestRequestWithBody(c.Server, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostSettingsNotificationsPushbulletTest(ctx context.Context, body PostSettingsNotificationsPushbulletTestJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostSettingsNotificationsPushbulletTestRequest(c.Server, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetSettingsNotificationsPushover(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetSettingsNotificationsPushoverRequest(c.Server)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostSettingsNotificationsPushoverWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostSettingsNotificationsPushoverRequestWithBody(c.Server, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostSettingsNotificationsPushover(ctx context.Context, body PostSettingsNotificationsPushoverJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostSettingsNotificationsPushoverRequest(c.Server, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetSettingsNotificationsPushoverSounds(ctx context.Context, params *GetSettingsNotificationsPushoverSoundsParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetSettingsNotificationsPushoverSoundsRequest(c.Server, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostSettingsNotificationsPushoverTestWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostSettingsNotificationsPushoverTestRequestWithBody(c.Server, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostSettingsNotificationsPushoverTest(ctx context.Context, body PostSettingsNotificationsPushoverTestJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostSettingsNotificationsPushoverTestRequest(c.Server, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetSettingsNotificationsSlack(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetSettingsNotificationsSlackRequest(c.Server)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostSettingsNotificationsSlackWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostSettingsNotificationsSlackRequestWithBody(c.Server, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostSettingsNotificationsSlack(ctx context.Context, body PostSettingsNotificationsSlackJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostSettingsNotificationsSlackRequest(c.Server, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostSettingsNotificationsSlackTestWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostSettingsNotificationsSlackTestRequestWithBody(c.Server, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostSettingsNotificationsSlackTest(ctx context.Context, body PostSettingsNotificationsSlackTestJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostSettingsNotificationsSlackTestRequest(c.Server, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetSettingsNotificationsTelegram(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetSettingsNotificationsTelegramRequest(c.Server)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostSettingsNotificationsTelegramWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostSettingsNotificationsTelegramRequestWithBody(c.Server, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostSettingsNotificationsTelegram(ctx context.Context, body PostSettingsNotificationsTelegramJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostSettingsNotificationsTelegramRequest(c.Server, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostSettingsNotificationsTelegramTestWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostSettingsNotificationsTelegramTestRequestWithBody(c.Server, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostSettingsNotificationsTelegramTest(ctx context.Context, body PostSettingsNotificationsTelegramTestJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostSettingsNotificationsTelegramTestRequest(c.Server, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetSettingsNotificationsWebhook(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetSettingsNotificationsWebhookRequest(c.Server)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostSettingsNotificationsWebhookWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostSettingsNotificationsWebhookRequestWithBody(c.Server, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostSettingsNotificationsWebhook(ctx context.Context, body PostSettingsNotificationsWebhookJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostSettingsNotificationsWebhookRequest(c.Server, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostSettingsNotificationsWebhookTestWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostSettingsNotificationsWebhookTestRequestWithBody(c.Server, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostSettingsNotificationsWebhookTest(ctx context.Context, body PostSettingsNotificationsWebhookTestJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostSettingsNotificationsWebhookTestRequest(c.Server, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetSettingsNotificationsWebpush(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetSettingsNotificationsWebpushRequest(c.Server)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostSettingsNotificationsWebpushWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostSettingsNotificationsWebpushRequestWithBody(c.Server, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostSettingsNotificationsWebpush(ctx context.Context, body PostSettingsNotificationsWebpushJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostSettingsNotificationsWebpushRequest(c.Server, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostSettingsNotificationsWebpushTestWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostSettingsNotificationsWebpushTestRequestWithBody(c.Server, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostSettingsNotificationsWebpushTest(ctx context.Context, body PostSettingsNotificationsWebpushTestJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostSettingsNotificationsWebpushTestRequest(c.Server, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetSettingsPlex(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetSettingsPlexRequest(c.Server)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostSettingsPlexWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostSettingsPlexRequestWithBody(c.Server, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostSettingsPlex(ctx context.Context, body PostSettingsPlexJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostSettingsPlexRequest(c.Server, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetSettingsPlexDevicesServers(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetSettingsPlexDevicesServersRequest(c.Server)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetSettingsPlexLibrary(ctx context.Context, params *GetSettingsPlexLibraryParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetSettingsPlexLibraryRequest(c.Server, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetSettingsPlexSync(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetSettingsPlexSyncRequest(c.Server)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostSettingsPlexSyncWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostSettingsPlexSyncRequestWithBody(c.Server, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostSettingsPlexSync(ctx context.Context, body PostSettingsPlexSyncJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostSettingsPlexSyncRequest(c.Server, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetSettingsPlexUsers(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetSettingsPlexUsersRequest(c.Server)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetSettingsPublic(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetSettingsPublicRequest(c.Server)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetSettingsRadarr(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetSettingsRadarrRequest(c.Server)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostSettingsRadarrWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostSettingsRadarrRequestWithBody(c.Server, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostSettingsRadarr(ctx context.Context, body PostSettingsRadarrJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostSettingsRadarrRequest(c.Server, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostSettingsRadarrTestWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostSettingsRadarrTestRequestWithBody(c.Server, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostSettingsRadarrTest(ctx context.Context, body PostSettingsRadarrTestJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostSettingsRadarrTestRequest(c.Server, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) DeleteSettingsRadarrRadarrId(ctx context.Context, radarrId int, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewDeleteSettingsRadarrRadarrIdRequest(c.Server, radarrId)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PutSettingsRadarrRadarrIdWithBody(ctx context.Context, radarrId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPutSettingsRadarrRadarrIdRequestWithBody(c.Server, radarrId, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PutSettingsRadarrRadarrId(ctx context.Context, radarrId int, body PutSettingsRadarrRadarrIdJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPutSettingsRadarrRadarrIdRequest(c.Server, radarrId, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetSettingsRadarrRadarrIdProfiles(ctx context.Context, radarrId int, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetSettingsRadarrRadarrIdProfilesRequest(c.Server, radarrId)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetSettingsSonarr(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetSettingsSonarrRequest(c.Server)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostSettingsSonarrWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostSettingsSonarrRequestWithBody(c.Server, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostSettingsSonarr(ctx context.Context, body PostSettingsSonarrJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostSettingsSonarrRequest(c.Server, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostSettingsSonarrTestWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostSettingsSonarrTestRequestWithBody(c.Server, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostSettingsSonarrTest(ctx context.Context, body PostSettingsSonarrTestJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostSettingsSonarrTestRequest(c.Server, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) DeleteSettingsSonarrSonarrId(ctx context.Context, sonarrId int, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewDeleteSettingsSonarrSonarrIdRequest(c.Server, sonarrId)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PutSettingsSonarrSonarrIdWithBody(ctx context.Context, sonarrId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPutSettingsSonarrSonarrIdRequestWithBody(c.Server, sonarrId, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PutSettingsSonarrSonarrId(ctx context.Context, sonarrId int, body PutSettingsSonarrSonarrIdJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPutSettingsSonarrSonarrIdRequest(c.Server, sonarrId, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetSettingsTautulli(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetSettingsTautulliRequest(c.Server)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostSettingsTautulliWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostSettingsTautulliRequestWithBody(c.Server, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostSettingsTautulli(ctx context.Context, body PostSettingsTautulliJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostSettingsTautulliRequest(c.Server, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetStatus(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetStatusRequest(c.Server)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetStatusAppdata(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetStatusAppdataRequest(c.Server)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetStudioStudioId(ctx context.Context, studioId float32, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetStudioStudioIdRequest(c.Server, studioId)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetTvTvId(ctx context.Context, tvId float32, params *GetTvTvIdParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetTvTvIdRequest(c.Server, tvId, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetTvTvIdRatings(ctx context.Context, tvId float32, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetTvTvIdRatingsRequest(c.Server, tvId)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetTvTvIdRecommendations(ctx context.Context, tvId float32, params *GetTvTvIdRecommendationsParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetTvTvIdRecommendationsRequest(c.Server, tvId, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetTvTvIdSeasonSeasonId(ctx context.Context, tvId float32, seasonId float32, params *GetTvTvIdSeasonSeasonIdParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetTvTvIdSeasonSeasonIdRequest(c.Server, tvId, seasonId, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetTvTvIdSimilar(ctx context.Context, tvId float32, params *GetTvTvIdSimilarParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetTvTvIdSimilarRequest(c.Server, tvId, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetUser(ctx context.Context, params *GetUserParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetUserRequest(c.Server, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostUserRequestWithBody(c.Server, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostUser(ctx context.Context, body PostUserJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostUserRequest(c.Server, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PutUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPutUserRequestWithBody(c.Server, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PutUser(ctx context.Context, body PutUserJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPutUserRequest(c.Server, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostUserImportFromJellyfinWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostUserImportFromJellyfinRequestWithBody(c.Server, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostUserImportFromJellyfin(ctx context.Context, body PostUserImportFromJellyfinJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostUserImportFromJellyfinRequest(c.Server, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostUserImportFromPlexWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostUserImportFromPlexRequestWithBody(c.Server, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostUserImportFromPlex(ctx context.Context, body PostUserImportFromPlexJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostUserImportFromPlexRequest(c.Server, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostUserRegisterPushSubscriptionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostUserRegisterPushSubscriptionRequestWithBody(c.Server, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostUserRegisterPushSubscription(ctx context.Context, body PostUserRegisterPushSubscriptionJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostUserRegisterPushSubscriptionRequest(c.Server, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) DeleteUserUserId(ctx context.Context, userId float32, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewDeleteUserUserIdRequest(c.Server, userId)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetUserUserId(ctx context.Context, userId float32, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetUserUserIdRequest(c.Server, userId)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PutUserUserIdWithBody(ctx context.Context, userId float32, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPutUserUserIdRequestWithBody(c.Server, userId, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PutUserUserId(ctx context.Context, userId float32, body PutUserUserIdJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPutUserUserIdRequest(c.Server, userId, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetUserUserIdQuota(ctx context.Context, userId float32, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetUserUserIdQuotaRequest(c.Server, userId)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetUserUserIdRequests(ctx context.Context, userId float32, params *GetUserUserIdRequestsParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetUserUserIdRequestsRequest(c.Server, userId, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetUserUserIdSettingsMain(ctx context.Context, userId float32, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetUserUserIdSettingsMainRequest(c.Server, userId)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostUserUserIdSettingsMainWithBody(ctx context.Context, userId float32, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostUserUserIdSettingsMainRequestWithBody(c.Server, userId, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostUserUserIdSettingsMain(ctx context.Context, userId float32, body PostUserUserIdSettingsMainJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostUserUserIdSettingsMainRequest(c.Server, userId, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetUserUserIdSettingsNotifications(ctx context.Context, userId float32, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetUserUserIdSettingsNotificationsRequest(c.Server, userId)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostUserUserIdSettingsNotificationsWithBody(ctx context.Context, userId float32, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostUserUserIdSettingsNotificationsRequestWithBody(c.Server, userId, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostUserUserIdSettingsNotifications(ctx context.Context, userId float32, body PostUserUserIdSettingsNotificationsJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostUserUserIdSettingsNotificationsRequest(c.Server, userId, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetUserUserIdSettingsPassword(ctx context.Context, userId float32, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetUserUserIdSettingsPasswordRequest(c.Server, userId)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostUserUserIdSettingsPasswordWithBody(ctx context.Context, userId float32, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostUserUserIdSettingsPasswordRequestWithBody(c.Server, userId, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostUserUserIdSettingsPassword(ctx context.Context, userId float32, body PostUserUserIdSettingsPasswordJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostUserUserIdSettingsPasswordRequest(c.Server, userId, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetUserUserIdSettingsPermissions(ctx context.Context, userId float32, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetUserUserIdSettingsPermissionsRequest(c.Server, userId)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostUserUserIdSettingsPermissionsWithBody(ctx context.Context, userId float32, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostUserUserIdSettingsPermissionsRequestWithBody(c.Server, userId, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostUserUserIdSettingsPermissions(ctx context.Context, userId float32, body PostUserUserIdSettingsPermissionsJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostUserUserIdSettingsPermissionsRequest(c.Server, userId, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetUserUserIdWatchData(ctx context.Context, userId float32, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetUserUserIdWatchDataRequest(c.Server, userId)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetUserUserIdWatchlist(ctx context.Context, userId float32, params *GetUserUserIdWatchlistParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetUserUserIdWatchlistRequest(c.Server, userId, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostWatchlistWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostWatchlistRequestWithBody(c.Server, contentType, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) PostWatchlist(ctx context.Context, body PostWatchlistJSONRequestBody, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewPostWatchlistRequest(c.Server, body)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) DeleteWatchlistTmdbId(ctx context.Context, tmdbId string, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewDeleteWatchlistTmdbIdRequest(c.Server, tmdbId)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetWatchprovidersMovies(ctx context.Context, params *GetWatchprovidersMoviesParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetWatchprovidersMoviesRequest(c.Server, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetWatchprovidersRegions(ctx context.Context, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetWatchprovidersRegionsRequest(c.Server)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}


func (c *Client) GetWatchprovidersTv(ctx context.Context, params *GetWatchprovidersTvParams, reqEditors... RequestEditorFn) (*http.Response, error) {
    req, err := NewGetWatchprovidersTvRequest(c.Server, params)
    if err != nil {
        return nil, err
    }
    req = req.WithContext(ctx)
    if err := c.applyEditors(ctx, req, reqEditors); err != nil {
        return nil, err
    }
    return c.Client.Do(req)
}







// NewPostAuthJellyfinRequest calls the generic PostAuthJellyfin builder with application/json body
func NewPostAuthJellyfinRequest(server string, body PostAuthJellyfinJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewPostAuthJellyfinRequestWithBody(server, "application/json", bodyReader)
}


// NewPostAuthJellyfinRequestWithBody generates requests for PostAuthJellyfin with any type of body
func NewPostAuthJellyfinRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/auth/jellyfin")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}



// NewPostAuthLocalRequest calls the generic PostAuthLocal builder with application/json body
func NewPostAuthLocalRequest(server string, body PostAuthLocalJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewPostAuthLocalRequestWithBody(server, "application/json", bodyReader)
}


// NewPostAuthLocalRequestWithBody generates requests for PostAuthLocal with any type of body
func NewPostAuthLocalRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/auth/local")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}




// NewPostAuthLogoutRequest generates requests for PostAuthLogout
func NewPostAuthLogoutRequest(server string) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/auth/logout")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewGetAuthMeRequest generates requests for GetAuthMe
func NewGetAuthMeRequest(server string) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/auth/me")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewPostAuthPlexRequest calls the generic PostAuthPlex builder with application/json body
func NewPostAuthPlexRequest(server string, body PostAuthPlexJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewPostAuthPlexRequestWithBody(server, "application/json", bodyReader)
}


// NewPostAuthPlexRequestWithBody generates requests for PostAuthPlex with any type of body
func NewPostAuthPlexRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/auth/plex")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}



// NewPostAuthResetPasswordRequest calls the generic PostAuthResetPassword builder with application/json body
func NewPostAuthResetPasswordRequest(server string, body PostAuthResetPasswordJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewPostAuthResetPasswordRequestWithBody(server, "application/json", bodyReader)
}


// NewPostAuthResetPasswordRequestWithBody generates requests for PostAuthResetPassword with any type of body
func NewPostAuthResetPasswordRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/auth/reset-password")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}



// NewPostAuthResetPasswordGuidRequest calls the generic PostAuthResetPasswordGuid builder with application/json body
func NewPostAuthResetPasswordGuidRequest(server string, guid string, body PostAuthResetPasswordGuidJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewPostAuthResetPasswordGuidRequestWithBody(server, guid, "application/json", bodyReader)
}


// NewPostAuthResetPasswordGuidRequestWithBody generates requests for PostAuthResetPasswordGuid with any type of body
func NewPostAuthResetPasswordGuidRequestWithBody(server string, guid string, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "guid", runtime.ParamLocationPath, guid)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/auth/reset-password/%s", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}




// NewGetBackdropsRequest generates requests for GetBackdrops
func NewGetBackdropsRequest(server string) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/backdrops")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewGetCollectionCollectionIdRequest generates requests for GetCollectionCollectionId
func NewGetCollectionCollectionIdRequest(server string, collectionId float32, params *GetCollectionCollectionIdParams) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "collectionId", runtime.ParamLocationPath, collectionId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/collection/%s", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    if params != nil {
        queryValues := queryURL.Query()
            
             if params.Language != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "language", runtime.ParamLocationQuery, *params.Language); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
        queryURL.RawQuery = queryValues.Encode()
    }

    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewGetDiscoverGenresliderMovieRequest generates requests for GetDiscoverGenresliderMovie
func NewGetDiscoverGenresliderMovieRequest(server string, params *GetDiscoverGenresliderMovieParams) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/discover/genreslider/movie")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    if params != nil {
        queryValues := queryURL.Query()
            
             if params.Language != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "language", runtime.ParamLocationQuery, *params.Language); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
        queryURL.RawQuery = queryValues.Encode()
    }

    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewGetDiscoverGenresliderTvRequest generates requests for GetDiscoverGenresliderTv
func NewGetDiscoverGenresliderTvRequest(server string, params *GetDiscoverGenresliderTvParams) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/discover/genreslider/tv")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    if params != nil {
        queryValues := queryURL.Query()
            
             if params.Language != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "language", runtime.ParamLocationQuery, *params.Language); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
        queryURL.RawQuery = queryValues.Encode()
    }

    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewGetDiscoverKeywordKeywordIdMoviesRequest generates requests for GetDiscoverKeywordKeywordIdMovies
func NewGetDiscoverKeywordKeywordIdMoviesRequest(server string, keywordId float32, params *GetDiscoverKeywordKeywordIdMoviesParams) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "keywordId", runtime.ParamLocationPath, keywordId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/discover/keyword/%s/movies", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    if params != nil {
        queryValues := queryURL.Query()
            
             if params.Page != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Language != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "language", runtime.ParamLocationQuery, *params.Language); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
        queryURL.RawQuery = queryValues.Encode()
    }

    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewGetDiscoverMoviesRequest generates requests for GetDiscoverMovies
func NewGetDiscoverMoviesRequest(server string, params *GetDiscoverMoviesParams) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/discover/movies")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    if params != nil {
        queryValues := queryURL.Query()
            
             if params.Page != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Language != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "language", runtime.ParamLocationQuery, *params.Language); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Genre != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "genre", runtime.ParamLocationQuery, *params.Genre); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Studio != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "studio", runtime.ParamLocationQuery, *params.Studio); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Keywords != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "keywords", runtime.ParamLocationQuery, *params.Keywords); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.SortBy != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortBy", runtime.ParamLocationQuery, *params.SortBy); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.PrimaryReleaseDateGte != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "primaryReleaseDateGte", runtime.ParamLocationQuery, *params.PrimaryReleaseDateGte); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.PrimaryReleaseDateLte != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "primaryReleaseDateLte", runtime.ParamLocationQuery, *params.PrimaryReleaseDateLte); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.WithRuntimeGte != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "withRuntimeGte", runtime.ParamLocationQuery, *params.WithRuntimeGte); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.WithRuntimeLte != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "withRuntimeLte", runtime.ParamLocationQuery, *params.WithRuntimeLte); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.VoteAverageGte != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "voteAverageGte", runtime.ParamLocationQuery, *params.VoteAverageGte); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.VoteAverageLte != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "voteAverageLte", runtime.ParamLocationQuery, *params.VoteAverageLte); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.VoteCountGte != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "voteCountGte", runtime.ParamLocationQuery, *params.VoteCountGte); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.VoteCountLte != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "voteCountLte", runtime.ParamLocationQuery, *params.VoteCountLte); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.WatchRegion != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "watchRegion", runtime.ParamLocationQuery, *params.WatchRegion); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.WatchProviders != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "watchProviders", runtime.ParamLocationQuery, *params.WatchProviders); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
        queryURL.RawQuery = queryValues.Encode()
    }

    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewGetDiscoverMoviesGenreGenreIdRequest generates requests for GetDiscoverMoviesGenreGenreId
func NewGetDiscoverMoviesGenreGenreIdRequest(server string, genreId string, params *GetDiscoverMoviesGenreGenreIdParams) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "genreId", runtime.ParamLocationPath, genreId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/discover/movies/genre/%s", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    if params != nil {
        queryValues := queryURL.Query()
            
             if params.Page != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Language != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "language", runtime.ParamLocationQuery, *params.Language); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
        queryURL.RawQuery = queryValues.Encode()
    }

    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewGetDiscoverMoviesLanguageLanguageRequest generates requests for GetDiscoverMoviesLanguageLanguage
func NewGetDiscoverMoviesLanguageLanguageRequest(server string, language string, params *GetDiscoverMoviesLanguageLanguageParams) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "language", runtime.ParamLocationPath, language)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/discover/movies/language/%s", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    if params != nil {
        queryValues := queryURL.Query()
            
             if params.Page != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Language != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "language", runtime.ParamLocationQuery, *params.Language); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
        queryURL.RawQuery = queryValues.Encode()
    }

    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewGetDiscoverMoviesStudioStudioIdRequest generates requests for GetDiscoverMoviesStudioStudioId
func NewGetDiscoverMoviesStudioStudioIdRequest(server string, studioId string, params *GetDiscoverMoviesStudioStudioIdParams) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "studioId", runtime.ParamLocationPath, studioId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/discover/movies/studio/%s", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    if params != nil {
        queryValues := queryURL.Query()
            
             if params.Page != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Language != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "language", runtime.ParamLocationQuery, *params.Language); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
        queryURL.RawQuery = queryValues.Encode()
    }

    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewGetDiscoverMoviesUpcomingRequest generates requests for GetDiscoverMoviesUpcoming
func NewGetDiscoverMoviesUpcomingRequest(server string, params *GetDiscoverMoviesUpcomingParams) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/discover/movies/upcoming")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    if params != nil {
        queryValues := queryURL.Query()
            
             if params.Page != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Language != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "language", runtime.ParamLocationQuery, *params.Language); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
        queryURL.RawQuery = queryValues.Encode()
    }

    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewGetDiscoverTrendingRequest generates requests for GetDiscoverTrending
func NewGetDiscoverTrendingRequest(server string, params *GetDiscoverTrendingParams) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/discover/trending")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    if params != nil {
        queryValues := queryURL.Query()
            
             if params.Page != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Language != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "language", runtime.ParamLocationQuery, *params.Language); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
        queryURL.RawQuery = queryValues.Encode()
    }

    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewGetDiscoverTvRequest generates requests for GetDiscoverTv
func NewGetDiscoverTvRequest(server string, params *GetDiscoverTvParams) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/discover/tv")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    if params != nil {
        queryValues := queryURL.Query()
            
             if params.Page != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Language != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "language", runtime.ParamLocationQuery, *params.Language); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Genre != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "genre", runtime.ParamLocationQuery, *params.Genre); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Network != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "network", runtime.ParamLocationQuery, *params.Network); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Keywords != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "keywords", runtime.ParamLocationQuery, *params.Keywords); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.SortBy != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortBy", runtime.ParamLocationQuery, *params.SortBy); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.FirstAirDateGte != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "firstAirDateGte", runtime.ParamLocationQuery, *params.FirstAirDateGte); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.FirstAirDateLte != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "firstAirDateLte", runtime.ParamLocationQuery, *params.FirstAirDateLte); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.WithRuntimeGte != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "withRuntimeGte", runtime.ParamLocationQuery, *params.WithRuntimeGte); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.WithRuntimeLte != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "withRuntimeLte", runtime.ParamLocationQuery, *params.WithRuntimeLte); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.VoteAverageGte != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "voteAverageGte", runtime.ParamLocationQuery, *params.VoteAverageGte); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.VoteAverageLte != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "voteAverageLte", runtime.ParamLocationQuery, *params.VoteAverageLte); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.VoteCountGte != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "voteCountGte", runtime.ParamLocationQuery, *params.VoteCountGte); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.VoteCountLte != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "voteCountLte", runtime.ParamLocationQuery, *params.VoteCountLte); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.WatchRegion != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "watchRegion", runtime.ParamLocationQuery, *params.WatchRegion); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.WatchProviders != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "watchProviders", runtime.ParamLocationQuery, *params.WatchProviders); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
        queryURL.RawQuery = queryValues.Encode()
    }

    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewGetDiscoverTvGenreGenreIdRequest generates requests for GetDiscoverTvGenreGenreId
func NewGetDiscoverTvGenreGenreIdRequest(server string, genreId string, params *GetDiscoverTvGenreGenreIdParams) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "genreId", runtime.ParamLocationPath, genreId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/discover/tv/genre/%s", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    if params != nil {
        queryValues := queryURL.Query()
            
             if params.Page != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Language != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "language", runtime.ParamLocationQuery, *params.Language); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
        queryURL.RawQuery = queryValues.Encode()
    }

    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewGetDiscoverTvLanguageLanguageRequest generates requests for GetDiscoverTvLanguageLanguage
func NewGetDiscoverTvLanguageLanguageRequest(server string, language string, params *GetDiscoverTvLanguageLanguageParams) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "language", runtime.ParamLocationPath, language)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/discover/tv/language/%s", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    if params != nil {
        queryValues := queryURL.Query()
            
             if params.Page != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Language != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "language", runtime.ParamLocationQuery, *params.Language); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
        queryURL.RawQuery = queryValues.Encode()
    }

    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewGetDiscoverTvNetworkNetworkIdRequest generates requests for GetDiscoverTvNetworkNetworkId
func NewGetDiscoverTvNetworkNetworkIdRequest(server string, networkId string, params *GetDiscoverTvNetworkNetworkIdParams) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "networkId", runtime.ParamLocationPath, networkId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/discover/tv/network/%s", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    if params != nil {
        queryValues := queryURL.Query()
            
             if params.Page != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Language != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "language", runtime.ParamLocationQuery, *params.Language); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
        queryURL.RawQuery = queryValues.Encode()
    }

    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewGetDiscoverTvUpcomingRequest generates requests for GetDiscoverTvUpcoming
func NewGetDiscoverTvUpcomingRequest(server string, params *GetDiscoverTvUpcomingParams) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/discover/tv/upcoming")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    if params != nil {
        queryValues := queryURL.Query()
            
             if params.Page != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Language != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "language", runtime.ParamLocationQuery, *params.Language); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
        queryURL.RawQuery = queryValues.Encode()
    }

    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewGetDiscoverWatchlistRequest generates requests for GetDiscoverWatchlist
func NewGetDiscoverWatchlistRequest(server string, params *GetDiscoverWatchlistParams) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/discover/watchlist")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    if params != nil {
        queryValues := queryURL.Query()
            
             if params.Page != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
        queryURL.RawQuery = queryValues.Encode()
    }

    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewGetGenresMovieRequest generates requests for GetGenresMovie
func NewGetGenresMovieRequest(server string, params *GetGenresMovieParams) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/genres/movie")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    if params != nil {
        queryValues := queryURL.Query()
            
             if params.Language != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "language", runtime.ParamLocationQuery, *params.Language); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
        queryURL.RawQuery = queryValues.Encode()
    }

    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewGetGenresTvRequest generates requests for GetGenresTv
func NewGetGenresTvRequest(server string, params *GetGenresTvParams) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/genres/tv")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    if params != nil {
        queryValues := queryURL.Query()
            
             if params.Language != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "language", runtime.ParamLocationQuery, *params.Language); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
        queryURL.RawQuery = queryValues.Encode()
    }

    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewGetIssueRequest generates requests for GetIssue
func NewGetIssueRequest(server string, params *GetIssueParams) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/issue")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    if params != nil {
        queryValues := queryURL.Query()
            
             if params.Take != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "take", runtime.ParamLocationQuery, *params.Take); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Skip != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "skip", runtime.ParamLocationQuery, *params.Skip); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Sort != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Filter != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.RequestedBy != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "requestedBy", runtime.ParamLocationQuery, *params.RequestedBy); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
        queryURL.RawQuery = queryValues.Encode()
    }

    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewPostIssueRequest calls the generic PostIssue builder with application/json body
func NewPostIssueRequest(server string, body PostIssueJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewPostIssueRequestWithBody(server, "application/json", bodyReader)
}


// NewPostIssueRequestWithBody generates requests for PostIssue with any type of body
func NewPostIssueRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/issue")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}




// NewGetIssueCountRequest generates requests for GetIssueCount
func NewGetIssueCountRequest(server string) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/issue/count")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewDeleteIssueIssueIdRequest generates requests for DeleteIssueIssueId
func NewDeleteIssueIssueIdRequest(server string, issueId string) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "issueId", runtime.ParamLocationPath, issueId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/issue/%s", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("DELETE", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewGetIssueIssueIdRequest generates requests for GetIssueIssueId
func NewGetIssueIssueIdRequest(server string, issueId float32) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "issueId", runtime.ParamLocationPath, issueId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/issue/%s", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewPostIssueIssueIdCommentRequest calls the generic PostIssueIssueIdComment builder with application/json body
func NewPostIssueIssueIdCommentRequest(server string, issueId float32, body PostIssueIssueIdCommentJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewPostIssueIssueIdCommentRequestWithBody(server, issueId, "application/json", bodyReader)
}


// NewPostIssueIssueIdCommentRequestWithBody generates requests for PostIssueIssueIdComment with any type of body
func NewPostIssueIssueIdCommentRequestWithBody(server string, issueId float32, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "issueId", runtime.ParamLocationPath, issueId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/issue/%s/comment", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}




// NewPostIssueIssueIdStatusRequest generates requests for PostIssueIssueIdStatus
func NewPostIssueIssueIdStatusRequest(server string, issueId string, status PostIssueIssueIdStatusParamsStatus) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "issueId", runtime.ParamLocationPath, issueId)
    if err != nil {
        return nil, err
    }
    

    var pathParam1 string
    
    
    
    pathParam1, err = runtime.StyleParamWithLocation("simple", false, "status", runtime.ParamLocationPath, status)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/issue/%s/%s", pathParam0, pathParam1)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewDeleteIssueCommentCommentIdRequest generates requests for DeleteIssueCommentCommentId
func NewDeleteIssueCommentCommentIdRequest(server string, commentId string) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "commentId", runtime.ParamLocationPath, commentId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/issueComment/%s", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("DELETE", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewGetIssueCommentCommentIdRequest generates requests for GetIssueCommentCommentId
func NewGetIssueCommentCommentIdRequest(server string, commentId string) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "commentId", runtime.ParamLocationPath, commentId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/issueComment/%s", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewPutIssueCommentCommentIdRequest calls the generic PutIssueCommentCommentId builder with application/json body
func NewPutIssueCommentCommentIdRequest(server string, commentId string, body PutIssueCommentCommentIdJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewPutIssueCommentCommentIdRequestWithBody(server, commentId, "application/json", bodyReader)
}


// NewPutIssueCommentCommentIdRequestWithBody generates requests for PutIssueCommentCommentId with any type of body
func NewPutIssueCommentCommentIdRequestWithBody(server string, commentId string, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "commentId", runtime.ParamLocationPath, commentId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/issueComment/%s", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("PUT", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}




// NewGetKeywordKeywordIdRequest generates requests for GetKeywordKeywordId
func NewGetKeywordKeywordIdRequest(server string, keywordId float32) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "keywordId", runtime.ParamLocationPath, keywordId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/keyword/%s", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewGetLanguagesRequest generates requests for GetLanguages
func NewGetLanguagesRequest(server string) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/languages")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewGetMediaRequest generates requests for GetMedia
func NewGetMediaRequest(server string, params *GetMediaParams) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/media")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    if params != nil {
        queryValues := queryURL.Query()
            
             if params.Take != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "take", runtime.ParamLocationQuery, *params.Take); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Skip != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "skip", runtime.ParamLocationQuery, *params.Skip); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Filter != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Sort != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
        queryURL.RawQuery = queryValues.Encode()
    }

    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewDeleteMediaMediaIdRequest generates requests for DeleteMediaMediaId
func NewDeleteMediaMediaIdRequest(server string, mediaId string) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "mediaId", runtime.ParamLocationPath, mediaId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/media/%s", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("DELETE", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewDeleteMediaMediaIdFileRequest generates requests for DeleteMediaMediaIdFile
func NewDeleteMediaMediaIdFileRequest(server string, mediaId string) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "mediaId", runtime.ParamLocationPath, mediaId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/media/%s/file", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("DELETE", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewGetMediaMediaIdWatchDataRequest generates requests for GetMediaMediaIdWatchData
func NewGetMediaMediaIdWatchDataRequest(server string, mediaId string) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "mediaId", runtime.ParamLocationPath, mediaId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/media/%s/watch_data", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewPostMediaMediaIdStatusRequest calls the generic PostMediaMediaIdStatus builder with application/json body
func NewPostMediaMediaIdStatusRequest(server string, mediaId string, status PostMediaMediaIdStatusParamsStatus, body PostMediaMediaIdStatusJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewPostMediaMediaIdStatusRequestWithBody(server, mediaId, status, "application/json", bodyReader)
}


// NewPostMediaMediaIdStatusRequestWithBody generates requests for PostMediaMediaIdStatus with any type of body
func NewPostMediaMediaIdStatusRequestWithBody(server string, mediaId string, status PostMediaMediaIdStatusParamsStatus, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "mediaId", runtime.ParamLocationPath, mediaId)
    if err != nil {
        return nil, err
    }
    

    var pathParam1 string
    
    
    
    pathParam1, err = runtime.StyleParamWithLocation("simple", false, "status", runtime.ParamLocationPath, status)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/media/%s/%s", pathParam0, pathParam1)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}




// NewGetMovieMovieIdRequest generates requests for GetMovieMovieId
func NewGetMovieMovieIdRequest(server string, movieId float32, params *GetMovieMovieIdParams) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "movieId", runtime.ParamLocationPath, movieId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/movie/%s", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    if params != nil {
        queryValues := queryURL.Query()
            
             if params.Language != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "language", runtime.ParamLocationQuery, *params.Language); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
        queryURL.RawQuery = queryValues.Encode()
    }

    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewGetMovieMovieIdRatingsRequest generates requests for GetMovieMovieIdRatings
func NewGetMovieMovieIdRatingsRequest(server string, movieId float32) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "movieId", runtime.ParamLocationPath, movieId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/movie/%s/ratings", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewGetMovieMovieIdRatingscombinedRequest generates requests for GetMovieMovieIdRatingscombined
func NewGetMovieMovieIdRatingscombinedRequest(server string, movieId float32) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "movieId", runtime.ParamLocationPath, movieId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/movie/%s/ratingscombined", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewGetMovieMovieIdRecommendationsRequest generates requests for GetMovieMovieIdRecommendations
func NewGetMovieMovieIdRecommendationsRequest(server string, movieId float32, params *GetMovieMovieIdRecommendationsParams) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "movieId", runtime.ParamLocationPath, movieId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/movie/%s/recommendations", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    if params != nil {
        queryValues := queryURL.Query()
            
             if params.Page != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Language != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "language", runtime.ParamLocationQuery, *params.Language); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
        queryURL.RawQuery = queryValues.Encode()
    }

    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewGetMovieMovieIdSimilarRequest generates requests for GetMovieMovieIdSimilar
func NewGetMovieMovieIdSimilarRequest(server string, movieId float32, params *GetMovieMovieIdSimilarParams) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "movieId", runtime.ParamLocationPath, movieId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/movie/%s/similar", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    if params != nil {
        queryValues := queryURL.Query()
            
             if params.Page != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Language != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "language", runtime.ParamLocationQuery, *params.Language); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
        queryURL.RawQuery = queryValues.Encode()
    }

    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewGetNetworkNetworkIdRequest generates requests for GetNetworkNetworkId
func NewGetNetworkNetworkIdRequest(server string, networkId float32) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "networkId", runtime.ParamLocationPath, networkId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/network/%s", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewGetPersonPersonIdRequest generates requests for GetPersonPersonId
func NewGetPersonPersonIdRequest(server string, personId float32, params *GetPersonPersonIdParams) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "personId", runtime.ParamLocationPath, personId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/person/%s", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    if params != nil {
        queryValues := queryURL.Query()
            
             if params.Language != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "language", runtime.ParamLocationQuery, *params.Language); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
        queryURL.RawQuery = queryValues.Encode()
    }

    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewGetPersonPersonIdCombinedCreditsRequest generates requests for GetPersonPersonIdCombinedCredits
func NewGetPersonPersonIdCombinedCreditsRequest(server string, personId float32, params *GetPersonPersonIdCombinedCreditsParams) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "personId", runtime.ParamLocationPath, personId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/person/%s/combined_credits", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    if params != nil {
        queryValues := queryURL.Query()
            
             if params.Language != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "language", runtime.ParamLocationQuery, *params.Language); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
        queryURL.RawQuery = queryValues.Encode()
    }

    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewGetRegionsRequest generates requests for GetRegions
func NewGetRegionsRequest(server string) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/regions")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewGetRequestRequest generates requests for GetRequest
func NewGetRequestRequest(server string, params *GetRequestParams) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/request")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    if params != nil {
        queryValues := queryURL.Query()
            
             if params.Take != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "take", runtime.ParamLocationQuery, *params.Take); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Skip != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "skip", runtime.ParamLocationQuery, *params.Skip); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Filter != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Sort != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.RequestedBy != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "requestedBy", runtime.ParamLocationQuery, *params.RequestedBy); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
        queryURL.RawQuery = queryValues.Encode()
    }

    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewPostRequestRequest calls the generic PostRequest builder with application/json body
func NewPostRequestRequest(server string, body PostRequestJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewPostRequestRequestWithBody(server, "application/json", bodyReader)
}


// NewPostRequestRequestWithBody generates requests for PostRequest with any type of body
func NewPostRequestRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/request")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}




// NewGetRequestCountRequest generates requests for GetRequestCount
func NewGetRequestCountRequest(server string) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/request/count")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewDeleteRequestRequestIdRequest generates requests for DeleteRequestRequestId
func NewDeleteRequestRequestIdRequest(server string, requestId string) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "requestId", runtime.ParamLocationPath, requestId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/request/%s", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("DELETE", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewGetRequestRequestIdRequest generates requests for GetRequestRequestId
func NewGetRequestRequestIdRequest(server string, requestId string) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "requestId", runtime.ParamLocationPath, requestId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/request/%s", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewPutRequestRequestIdRequest calls the generic PutRequestRequestId builder with application/json body
func NewPutRequestRequestIdRequest(server string, requestId string, body PutRequestRequestIdJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewPutRequestRequestIdRequestWithBody(server, requestId, "application/json", bodyReader)
}


// NewPutRequestRequestIdRequestWithBody generates requests for PutRequestRequestId with any type of body
func NewPutRequestRequestIdRequestWithBody(server string, requestId string, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "requestId", runtime.ParamLocationPath, requestId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/request/%s", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("PUT", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}




// NewPostRequestRequestIdRetryRequest generates requests for PostRequestRequestIdRetry
func NewPostRequestRequestIdRetryRequest(server string, requestId string) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "requestId", runtime.ParamLocationPath, requestId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/request/%s/retry", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewPostRequestRequestIdStatusRequest generates requests for PostRequestRequestIdStatus
func NewPostRequestRequestIdStatusRequest(server string, requestId string, status PostRequestRequestIdStatusParamsStatus) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "requestId", runtime.ParamLocationPath, requestId)
    if err != nil {
        return nil, err
    }
    

    var pathParam1 string
    
    
    
    pathParam1, err = runtime.StyleParamWithLocation("simple", false, "status", runtime.ParamLocationPath, status)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/request/%s/%s", pathParam0, pathParam1)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewGetSearchRequest generates requests for GetSearch
func NewGetSearchRequest(server string, params *GetSearchParams) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/search")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    if params != nil {
        queryValues := queryURL.Query()
            
            
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "query", runtime.ParamLocationQuery, params.Query); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            
        
             if params.Page != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Language != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "language", runtime.ParamLocationQuery, *params.Language); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
        queryURL.RawQuery = queryValues.Encode()
    }

    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewGetSearchCompanyRequest generates requests for GetSearchCompany
func NewGetSearchCompanyRequest(server string, params *GetSearchCompanyParams) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/search/company")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    if params != nil {
        queryValues := queryURL.Query()
            
            
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "query", runtime.ParamLocationQuery, params.Query); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            
        
             if params.Page != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
        queryURL.RawQuery = queryValues.Encode()
    }

    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewGetSearchKeywordRequest generates requests for GetSearchKeyword
func NewGetSearchKeywordRequest(server string, params *GetSearchKeywordParams) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/search/keyword")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    if params != nil {
        queryValues := queryURL.Query()
            
            
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "query", runtime.ParamLocationQuery, params.Query); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            
        
             if params.Page != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
        queryURL.RawQuery = queryValues.Encode()
    }

    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewGetServiceRadarrRequest generates requests for GetServiceRadarr
func NewGetServiceRadarrRequest(server string) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/service/radarr")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewGetServiceRadarrRadarrIdRequest generates requests for GetServiceRadarrRadarrId
func NewGetServiceRadarrRadarrIdRequest(server string, radarrId float32) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "radarrId", runtime.ParamLocationPath, radarrId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/service/radarr/%s", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewGetServiceSonarrRequest generates requests for GetServiceSonarr
func NewGetServiceSonarrRequest(server string) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/service/sonarr")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewGetServiceSonarrLookupTmdbIdRequest generates requests for GetServiceSonarrLookupTmdbId
func NewGetServiceSonarrLookupTmdbIdRequest(server string, tmdbId float32) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tmdbId", runtime.ParamLocationPath, tmdbId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/service/sonarr/lookup/%s", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewGetServiceSonarrSonarrIdRequest generates requests for GetServiceSonarrSonarrId
func NewGetServiceSonarrSonarrIdRequest(server string, sonarrId float32) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "sonarrId", runtime.ParamLocationPath, sonarrId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/service/sonarr/%s", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewGetSettingsAboutRequest generates requests for GetSettingsAbout
func NewGetSettingsAboutRequest(server string) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/settings/about")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewGetSettingsCacheRequest generates requests for GetSettingsCache
func NewGetSettingsCacheRequest(server string) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/settings/cache")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewPostSettingsCacheCacheIdFlushRequest generates requests for PostSettingsCacheCacheIdFlush
func NewPostSettingsCacheCacheIdFlushRequest(server string, cacheId string) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cacheId", runtime.ParamLocationPath, cacheId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/settings/cache/%s/flush", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewGetSettingsDiscoverRequest generates requests for GetSettingsDiscover
func NewGetSettingsDiscoverRequest(server string) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/settings/discover")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewPostSettingsDiscoverRequest calls the generic PostSettingsDiscover builder with application/json body
func NewPostSettingsDiscoverRequest(server string, body PostSettingsDiscoverJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewPostSettingsDiscoverRequestWithBody(server, "application/json", bodyReader)
}


// NewPostSettingsDiscoverRequestWithBody generates requests for PostSettingsDiscover with any type of body
func NewPostSettingsDiscoverRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/settings/discover")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}



// NewPostSettingsDiscoverAddRequest calls the generic PostSettingsDiscoverAdd builder with application/json body
func NewPostSettingsDiscoverAddRequest(server string, body PostSettingsDiscoverAddJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewPostSettingsDiscoverAddRequestWithBody(server, "application/json", bodyReader)
}


// NewPostSettingsDiscoverAddRequestWithBody generates requests for PostSettingsDiscoverAdd with any type of body
func NewPostSettingsDiscoverAddRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/settings/discover/add")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}




// NewGetSettingsDiscoverResetRequest generates requests for GetSettingsDiscoverReset
func NewGetSettingsDiscoverResetRequest(server string) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/settings/discover/reset")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewDeleteSettingsDiscoverSliderIdRequest generates requests for DeleteSettingsDiscoverSliderId
func NewDeleteSettingsDiscoverSliderIdRequest(server string, sliderId float32) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "sliderId", runtime.ParamLocationPath, sliderId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/settings/discover/%s", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("DELETE", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewPutSettingsDiscoverSliderIdRequest calls the generic PutSettingsDiscoverSliderId builder with application/json body
func NewPutSettingsDiscoverSliderIdRequest(server string, sliderId float32, body PutSettingsDiscoverSliderIdJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewPutSettingsDiscoverSliderIdRequestWithBody(server, sliderId, "application/json", bodyReader)
}


// NewPutSettingsDiscoverSliderIdRequestWithBody generates requests for PutSettingsDiscoverSliderId with any type of body
func NewPutSettingsDiscoverSliderIdRequestWithBody(server string, sliderId float32, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "sliderId", runtime.ParamLocationPath, sliderId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/settings/discover/%s", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("PUT", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}




// NewPostSettingsInitializeRequest generates requests for PostSettingsInitialize
func NewPostSettingsInitializeRequest(server string) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/settings/initialize")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewGetSettingsJellyfinRequest generates requests for GetSettingsJellyfin
func NewGetSettingsJellyfinRequest(server string) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/settings/jellyfin")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewPostSettingsJellyfinRequest calls the generic PostSettingsJellyfin builder with application/json body
func NewPostSettingsJellyfinRequest(server string, body PostSettingsJellyfinJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewPostSettingsJellyfinRequestWithBody(server, "application/json", bodyReader)
}


// NewPostSettingsJellyfinRequestWithBody generates requests for PostSettingsJellyfin with any type of body
func NewPostSettingsJellyfinRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/settings/jellyfin")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}




// NewGetSettingsJellyfinLibraryRequest generates requests for GetSettingsJellyfinLibrary
func NewGetSettingsJellyfinLibraryRequest(server string, params *GetSettingsJellyfinLibraryParams) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/settings/jellyfin/library")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    if params != nil {
        queryValues := queryURL.Query()
            
             if params.Sync != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sync", runtime.ParamLocationQuery, *params.Sync); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Enable != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", false, "enable", runtime.ParamLocationQuery, *params.Enable); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
        queryURL.RawQuery = queryValues.Encode()
    }

    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewGetSettingsJellyfinSyncRequest generates requests for GetSettingsJellyfinSync
func NewGetSettingsJellyfinSyncRequest(server string) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/settings/jellyfin/sync")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewPostSettingsJellyfinSyncRequest calls the generic PostSettingsJellyfinSync builder with application/json body
func NewPostSettingsJellyfinSyncRequest(server string, body PostSettingsJellyfinSyncJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewPostSettingsJellyfinSyncRequestWithBody(server, "application/json", bodyReader)
}


// NewPostSettingsJellyfinSyncRequestWithBody generates requests for PostSettingsJellyfinSync with any type of body
func NewPostSettingsJellyfinSyncRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/settings/jellyfin/sync")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}




// NewGetSettingsJellyfinUsersRequest generates requests for GetSettingsJellyfinUsers
func NewGetSettingsJellyfinUsersRequest(server string) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/settings/jellyfin/users")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewGetSettingsJobsRequest generates requests for GetSettingsJobs
func NewGetSettingsJobsRequest(server string) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/settings/jobs")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewPostSettingsJobsJobIdCancelRequest generates requests for PostSettingsJobsJobIdCancel
func NewPostSettingsJobsJobIdCancelRequest(server string, jobId string) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "jobId", runtime.ParamLocationPath, jobId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/settings/jobs/%s/cancel", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewPostSettingsJobsJobIdRunRequest generates requests for PostSettingsJobsJobIdRun
func NewPostSettingsJobsJobIdRunRequest(server string, jobId string) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "jobId", runtime.ParamLocationPath, jobId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/settings/jobs/%s/run", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewPostSettingsJobsJobIdScheduleRequest calls the generic PostSettingsJobsJobIdSchedule builder with application/json body
func NewPostSettingsJobsJobIdScheduleRequest(server string, jobId string, body PostSettingsJobsJobIdScheduleJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewPostSettingsJobsJobIdScheduleRequestWithBody(server, jobId, "application/json", bodyReader)
}


// NewPostSettingsJobsJobIdScheduleRequestWithBody generates requests for PostSettingsJobsJobIdSchedule with any type of body
func NewPostSettingsJobsJobIdScheduleRequestWithBody(server string, jobId string, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "jobId", runtime.ParamLocationPath, jobId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/settings/jobs/%s/schedule", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}




// NewGetSettingsLogsRequest generates requests for GetSettingsLogs
func NewGetSettingsLogsRequest(server string, params *GetSettingsLogsParams) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/settings/logs")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    if params != nil {
        queryValues := queryURL.Query()
            
             if params.Take != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "take", runtime.ParamLocationQuery, *params.Take); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Skip != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "skip", runtime.ParamLocationQuery, *params.Skip); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Filter != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Search != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
        queryURL.RawQuery = queryValues.Encode()
    }

    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewGetSettingsMainRequest generates requests for GetSettingsMain
func NewGetSettingsMainRequest(server string) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/settings/main")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewPostSettingsMainRequest calls the generic PostSettingsMain builder with application/json body
func NewPostSettingsMainRequest(server string, body PostSettingsMainJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewPostSettingsMainRequestWithBody(server, "application/json", bodyReader)
}


// NewPostSettingsMainRequestWithBody generates requests for PostSettingsMain with any type of body
func NewPostSettingsMainRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/settings/main")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}




// NewPostSettingsMainRegenerateRequest generates requests for PostSettingsMainRegenerate
func NewPostSettingsMainRegenerateRequest(server string) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/settings/main/regenerate")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewGetSettingsNotificationsDiscordRequest generates requests for GetSettingsNotificationsDiscord
func NewGetSettingsNotificationsDiscordRequest(server string) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/settings/notifications/discord")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewPostSettingsNotificationsDiscordRequest calls the generic PostSettingsNotificationsDiscord builder with application/json body
func NewPostSettingsNotificationsDiscordRequest(server string, body PostSettingsNotificationsDiscordJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewPostSettingsNotificationsDiscordRequestWithBody(server, "application/json", bodyReader)
}


// NewPostSettingsNotificationsDiscordRequestWithBody generates requests for PostSettingsNotificationsDiscord with any type of body
func NewPostSettingsNotificationsDiscordRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/settings/notifications/discord")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}



// NewPostSettingsNotificationsDiscordTestRequest calls the generic PostSettingsNotificationsDiscordTest builder with application/json body
func NewPostSettingsNotificationsDiscordTestRequest(server string, body PostSettingsNotificationsDiscordTestJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewPostSettingsNotificationsDiscordTestRequestWithBody(server, "application/json", bodyReader)
}


// NewPostSettingsNotificationsDiscordTestRequestWithBody generates requests for PostSettingsNotificationsDiscordTest with any type of body
func NewPostSettingsNotificationsDiscordTestRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/settings/notifications/discord/test")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}




// NewGetSettingsNotificationsEmailRequest generates requests for GetSettingsNotificationsEmail
func NewGetSettingsNotificationsEmailRequest(server string) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/settings/notifications/email")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewPostSettingsNotificationsEmailRequest calls the generic PostSettingsNotificationsEmail builder with application/json body
func NewPostSettingsNotificationsEmailRequest(server string, body PostSettingsNotificationsEmailJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewPostSettingsNotificationsEmailRequestWithBody(server, "application/json", bodyReader)
}


// NewPostSettingsNotificationsEmailRequestWithBody generates requests for PostSettingsNotificationsEmail with any type of body
func NewPostSettingsNotificationsEmailRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/settings/notifications/email")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}



// NewPostSettingsNotificationsEmailTestRequest calls the generic PostSettingsNotificationsEmailTest builder with application/json body
func NewPostSettingsNotificationsEmailTestRequest(server string, body PostSettingsNotificationsEmailTestJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewPostSettingsNotificationsEmailTestRequestWithBody(server, "application/json", bodyReader)
}


// NewPostSettingsNotificationsEmailTestRequestWithBody generates requests for PostSettingsNotificationsEmailTest with any type of body
func NewPostSettingsNotificationsEmailTestRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/settings/notifications/email/test")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}




// NewGetSettingsNotificationsGotifyRequest generates requests for GetSettingsNotificationsGotify
func NewGetSettingsNotificationsGotifyRequest(server string) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/settings/notifications/gotify")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewPostSettingsNotificationsGotifyRequest calls the generic PostSettingsNotificationsGotify builder with application/json body
func NewPostSettingsNotificationsGotifyRequest(server string, body PostSettingsNotificationsGotifyJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewPostSettingsNotificationsGotifyRequestWithBody(server, "application/json", bodyReader)
}


// NewPostSettingsNotificationsGotifyRequestWithBody generates requests for PostSettingsNotificationsGotify with any type of body
func NewPostSettingsNotificationsGotifyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/settings/notifications/gotify")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}



// NewPostSettingsNotificationsGotifyTestRequest calls the generic PostSettingsNotificationsGotifyTest builder with application/json body
func NewPostSettingsNotificationsGotifyTestRequest(server string, body PostSettingsNotificationsGotifyTestJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewPostSettingsNotificationsGotifyTestRequestWithBody(server, "application/json", bodyReader)
}


// NewPostSettingsNotificationsGotifyTestRequestWithBody generates requests for PostSettingsNotificationsGotifyTest with any type of body
func NewPostSettingsNotificationsGotifyTestRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/settings/notifications/gotify/test")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}




// NewGetSettingsNotificationsLunaseaRequest generates requests for GetSettingsNotificationsLunasea
func NewGetSettingsNotificationsLunaseaRequest(server string) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/settings/notifications/lunasea")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewPostSettingsNotificationsLunaseaRequest calls the generic PostSettingsNotificationsLunasea builder with application/json body
func NewPostSettingsNotificationsLunaseaRequest(server string, body PostSettingsNotificationsLunaseaJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewPostSettingsNotificationsLunaseaRequestWithBody(server, "application/json", bodyReader)
}


// NewPostSettingsNotificationsLunaseaRequestWithBody generates requests for PostSettingsNotificationsLunasea with any type of body
func NewPostSettingsNotificationsLunaseaRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/settings/notifications/lunasea")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}



// NewPostSettingsNotificationsLunaseaTestRequest calls the generic PostSettingsNotificationsLunaseaTest builder with application/json body
func NewPostSettingsNotificationsLunaseaTestRequest(server string, body PostSettingsNotificationsLunaseaTestJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewPostSettingsNotificationsLunaseaTestRequestWithBody(server, "application/json", bodyReader)
}


// NewPostSettingsNotificationsLunaseaTestRequestWithBody generates requests for PostSettingsNotificationsLunaseaTest with any type of body
func NewPostSettingsNotificationsLunaseaTestRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/settings/notifications/lunasea/test")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}




// NewGetSettingsNotificationsPushbulletRequest generates requests for GetSettingsNotificationsPushbullet
func NewGetSettingsNotificationsPushbulletRequest(server string) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/settings/notifications/pushbullet")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewPostSettingsNotificationsPushbulletRequest calls the generic PostSettingsNotificationsPushbullet builder with application/json body
func NewPostSettingsNotificationsPushbulletRequest(server string, body PostSettingsNotificationsPushbulletJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewPostSettingsNotificationsPushbulletRequestWithBody(server, "application/json", bodyReader)
}


// NewPostSettingsNotificationsPushbulletRequestWithBody generates requests for PostSettingsNotificationsPushbullet with any type of body
func NewPostSettingsNotificationsPushbulletRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/settings/notifications/pushbullet")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}



// NewPostSettingsNotificationsPushbulletTestRequest calls the generic PostSettingsNotificationsPushbulletTest builder with application/json body
func NewPostSettingsNotificationsPushbulletTestRequest(server string, body PostSettingsNotificationsPushbulletTestJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewPostSettingsNotificationsPushbulletTestRequestWithBody(server, "application/json", bodyReader)
}


// NewPostSettingsNotificationsPushbulletTestRequestWithBody generates requests for PostSettingsNotificationsPushbulletTest with any type of body
func NewPostSettingsNotificationsPushbulletTestRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/settings/notifications/pushbullet/test")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}




// NewGetSettingsNotificationsPushoverRequest generates requests for GetSettingsNotificationsPushover
func NewGetSettingsNotificationsPushoverRequest(server string) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/settings/notifications/pushover")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewPostSettingsNotificationsPushoverRequest calls the generic PostSettingsNotificationsPushover builder with application/json body
func NewPostSettingsNotificationsPushoverRequest(server string, body PostSettingsNotificationsPushoverJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewPostSettingsNotificationsPushoverRequestWithBody(server, "application/json", bodyReader)
}


// NewPostSettingsNotificationsPushoverRequestWithBody generates requests for PostSettingsNotificationsPushover with any type of body
func NewPostSettingsNotificationsPushoverRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/settings/notifications/pushover")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}




// NewGetSettingsNotificationsPushoverSoundsRequest generates requests for GetSettingsNotificationsPushoverSounds
func NewGetSettingsNotificationsPushoverSoundsRequest(server string, params *GetSettingsNotificationsPushoverSoundsParams) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/settings/notifications/pushover/sounds")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    if params != nil {
        queryValues := queryURL.Query()
            
            
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "token", runtime.ParamLocationQuery, params.Token); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            
        
        queryURL.RawQuery = queryValues.Encode()
    }

    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewPostSettingsNotificationsPushoverTestRequest calls the generic PostSettingsNotificationsPushoverTest builder with application/json body
func NewPostSettingsNotificationsPushoverTestRequest(server string, body PostSettingsNotificationsPushoverTestJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewPostSettingsNotificationsPushoverTestRequestWithBody(server, "application/json", bodyReader)
}


// NewPostSettingsNotificationsPushoverTestRequestWithBody generates requests for PostSettingsNotificationsPushoverTest with any type of body
func NewPostSettingsNotificationsPushoverTestRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/settings/notifications/pushover/test")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}




// NewGetSettingsNotificationsSlackRequest generates requests for GetSettingsNotificationsSlack
func NewGetSettingsNotificationsSlackRequest(server string) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/settings/notifications/slack")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewPostSettingsNotificationsSlackRequest calls the generic PostSettingsNotificationsSlack builder with application/json body
func NewPostSettingsNotificationsSlackRequest(server string, body PostSettingsNotificationsSlackJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewPostSettingsNotificationsSlackRequestWithBody(server, "application/json", bodyReader)
}


// NewPostSettingsNotificationsSlackRequestWithBody generates requests for PostSettingsNotificationsSlack with any type of body
func NewPostSettingsNotificationsSlackRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/settings/notifications/slack")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}



// NewPostSettingsNotificationsSlackTestRequest calls the generic PostSettingsNotificationsSlackTest builder with application/json body
func NewPostSettingsNotificationsSlackTestRequest(server string, body PostSettingsNotificationsSlackTestJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewPostSettingsNotificationsSlackTestRequestWithBody(server, "application/json", bodyReader)
}


// NewPostSettingsNotificationsSlackTestRequestWithBody generates requests for PostSettingsNotificationsSlackTest with any type of body
func NewPostSettingsNotificationsSlackTestRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/settings/notifications/slack/test")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}




// NewGetSettingsNotificationsTelegramRequest generates requests for GetSettingsNotificationsTelegram
func NewGetSettingsNotificationsTelegramRequest(server string) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/settings/notifications/telegram")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewPostSettingsNotificationsTelegramRequest calls the generic PostSettingsNotificationsTelegram builder with application/json body
func NewPostSettingsNotificationsTelegramRequest(server string, body PostSettingsNotificationsTelegramJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewPostSettingsNotificationsTelegramRequestWithBody(server, "application/json", bodyReader)
}


// NewPostSettingsNotificationsTelegramRequestWithBody generates requests for PostSettingsNotificationsTelegram with any type of body
func NewPostSettingsNotificationsTelegramRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/settings/notifications/telegram")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}



// NewPostSettingsNotificationsTelegramTestRequest calls the generic PostSettingsNotificationsTelegramTest builder with application/json body
func NewPostSettingsNotificationsTelegramTestRequest(server string, body PostSettingsNotificationsTelegramTestJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewPostSettingsNotificationsTelegramTestRequestWithBody(server, "application/json", bodyReader)
}


// NewPostSettingsNotificationsTelegramTestRequestWithBody generates requests for PostSettingsNotificationsTelegramTest with any type of body
func NewPostSettingsNotificationsTelegramTestRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/settings/notifications/telegram/test")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}




// NewGetSettingsNotificationsWebhookRequest generates requests for GetSettingsNotificationsWebhook
func NewGetSettingsNotificationsWebhookRequest(server string) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/settings/notifications/webhook")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewPostSettingsNotificationsWebhookRequest calls the generic PostSettingsNotificationsWebhook builder with application/json body
func NewPostSettingsNotificationsWebhookRequest(server string, body PostSettingsNotificationsWebhookJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewPostSettingsNotificationsWebhookRequestWithBody(server, "application/json", bodyReader)
}


// NewPostSettingsNotificationsWebhookRequestWithBody generates requests for PostSettingsNotificationsWebhook with any type of body
func NewPostSettingsNotificationsWebhookRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/settings/notifications/webhook")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}



// NewPostSettingsNotificationsWebhookTestRequest calls the generic PostSettingsNotificationsWebhookTest builder with application/json body
func NewPostSettingsNotificationsWebhookTestRequest(server string, body PostSettingsNotificationsWebhookTestJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewPostSettingsNotificationsWebhookTestRequestWithBody(server, "application/json", bodyReader)
}


// NewPostSettingsNotificationsWebhookTestRequestWithBody generates requests for PostSettingsNotificationsWebhookTest with any type of body
func NewPostSettingsNotificationsWebhookTestRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/settings/notifications/webhook/test")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}




// NewGetSettingsNotificationsWebpushRequest generates requests for GetSettingsNotificationsWebpush
func NewGetSettingsNotificationsWebpushRequest(server string) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/settings/notifications/webpush")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewPostSettingsNotificationsWebpushRequest calls the generic PostSettingsNotificationsWebpush builder with application/json body
func NewPostSettingsNotificationsWebpushRequest(server string, body PostSettingsNotificationsWebpushJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewPostSettingsNotificationsWebpushRequestWithBody(server, "application/json", bodyReader)
}


// NewPostSettingsNotificationsWebpushRequestWithBody generates requests for PostSettingsNotificationsWebpush with any type of body
func NewPostSettingsNotificationsWebpushRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/settings/notifications/webpush")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}



// NewPostSettingsNotificationsWebpushTestRequest calls the generic PostSettingsNotificationsWebpushTest builder with application/json body
func NewPostSettingsNotificationsWebpushTestRequest(server string, body PostSettingsNotificationsWebpushTestJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewPostSettingsNotificationsWebpushTestRequestWithBody(server, "application/json", bodyReader)
}


// NewPostSettingsNotificationsWebpushTestRequestWithBody generates requests for PostSettingsNotificationsWebpushTest with any type of body
func NewPostSettingsNotificationsWebpushTestRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/settings/notifications/webpush/test")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}




// NewGetSettingsPlexRequest generates requests for GetSettingsPlex
func NewGetSettingsPlexRequest(server string) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/settings/plex")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewPostSettingsPlexRequest calls the generic PostSettingsPlex builder with application/json body
func NewPostSettingsPlexRequest(server string, body PostSettingsPlexJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewPostSettingsPlexRequestWithBody(server, "application/json", bodyReader)
}


// NewPostSettingsPlexRequestWithBody generates requests for PostSettingsPlex with any type of body
func NewPostSettingsPlexRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/settings/plex")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}




// NewGetSettingsPlexDevicesServersRequest generates requests for GetSettingsPlexDevicesServers
func NewGetSettingsPlexDevicesServersRequest(server string) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/settings/plex/devices/servers")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewGetSettingsPlexLibraryRequest generates requests for GetSettingsPlexLibrary
func NewGetSettingsPlexLibraryRequest(server string, params *GetSettingsPlexLibraryParams) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/settings/plex/library")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    if params != nil {
        queryValues := queryURL.Query()
            
             if params.Sync != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sync", runtime.ParamLocationQuery, *params.Sync); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Enable != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", false, "enable", runtime.ParamLocationQuery, *params.Enable); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
        queryURL.RawQuery = queryValues.Encode()
    }

    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewGetSettingsPlexSyncRequest generates requests for GetSettingsPlexSync
func NewGetSettingsPlexSyncRequest(server string) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/settings/plex/sync")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewPostSettingsPlexSyncRequest calls the generic PostSettingsPlexSync builder with application/json body
func NewPostSettingsPlexSyncRequest(server string, body PostSettingsPlexSyncJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewPostSettingsPlexSyncRequestWithBody(server, "application/json", bodyReader)
}


// NewPostSettingsPlexSyncRequestWithBody generates requests for PostSettingsPlexSync with any type of body
func NewPostSettingsPlexSyncRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/settings/plex/sync")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}




// NewGetSettingsPlexUsersRequest generates requests for GetSettingsPlexUsers
func NewGetSettingsPlexUsersRequest(server string) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/settings/plex/users")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewGetSettingsPublicRequest generates requests for GetSettingsPublic
func NewGetSettingsPublicRequest(server string) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/settings/public")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewGetSettingsRadarrRequest generates requests for GetSettingsRadarr
func NewGetSettingsRadarrRequest(server string) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/settings/radarr")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewPostSettingsRadarrRequest calls the generic PostSettingsRadarr builder with application/json body
func NewPostSettingsRadarrRequest(server string, body PostSettingsRadarrJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewPostSettingsRadarrRequestWithBody(server, "application/json", bodyReader)
}


// NewPostSettingsRadarrRequestWithBody generates requests for PostSettingsRadarr with any type of body
func NewPostSettingsRadarrRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/settings/radarr")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}



// NewPostSettingsRadarrTestRequest calls the generic PostSettingsRadarrTest builder with application/json body
func NewPostSettingsRadarrTestRequest(server string, body PostSettingsRadarrTestJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewPostSettingsRadarrTestRequestWithBody(server, "application/json", bodyReader)
}


// NewPostSettingsRadarrTestRequestWithBody generates requests for PostSettingsRadarrTest with any type of body
func NewPostSettingsRadarrTestRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/settings/radarr/test")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}




// NewDeleteSettingsRadarrRadarrIdRequest generates requests for DeleteSettingsRadarrRadarrId
func NewDeleteSettingsRadarrRadarrIdRequest(server string, radarrId int) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "radarrId", runtime.ParamLocationPath, radarrId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/settings/radarr/%s", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("DELETE", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewPutSettingsRadarrRadarrIdRequest calls the generic PutSettingsRadarrRadarrId builder with application/json body
func NewPutSettingsRadarrRadarrIdRequest(server string, radarrId int, body PutSettingsRadarrRadarrIdJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewPutSettingsRadarrRadarrIdRequestWithBody(server, radarrId, "application/json", bodyReader)
}


// NewPutSettingsRadarrRadarrIdRequestWithBody generates requests for PutSettingsRadarrRadarrId with any type of body
func NewPutSettingsRadarrRadarrIdRequestWithBody(server string, radarrId int, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "radarrId", runtime.ParamLocationPath, radarrId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/settings/radarr/%s", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("PUT", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}




// NewGetSettingsRadarrRadarrIdProfilesRequest generates requests for GetSettingsRadarrRadarrIdProfiles
func NewGetSettingsRadarrRadarrIdProfilesRequest(server string, radarrId int) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "radarrId", runtime.ParamLocationPath, radarrId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/settings/radarr/%s/profiles", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewGetSettingsSonarrRequest generates requests for GetSettingsSonarr
func NewGetSettingsSonarrRequest(server string) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/settings/sonarr")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewPostSettingsSonarrRequest calls the generic PostSettingsSonarr builder with application/json body
func NewPostSettingsSonarrRequest(server string, body PostSettingsSonarrJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewPostSettingsSonarrRequestWithBody(server, "application/json", bodyReader)
}


// NewPostSettingsSonarrRequestWithBody generates requests for PostSettingsSonarr with any type of body
func NewPostSettingsSonarrRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/settings/sonarr")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}



// NewPostSettingsSonarrTestRequest calls the generic PostSettingsSonarrTest builder with application/json body
func NewPostSettingsSonarrTestRequest(server string, body PostSettingsSonarrTestJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewPostSettingsSonarrTestRequestWithBody(server, "application/json", bodyReader)
}


// NewPostSettingsSonarrTestRequestWithBody generates requests for PostSettingsSonarrTest with any type of body
func NewPostSettingsSonarrTestRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/settings/sonarr/test")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}




// NewDeleteSettingsSonarrSonarrIdRequest generates requests for DeleteSettingsSonarrSonarrId
func NewDeleteSettingsSonarrSonarrIdRequest(server string, sonarrId int) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "sonarrId", runtime.ParamLocationPath, sonarrId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/settings/sonarr/%s", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("DELETE", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewPutSettingsSonarrSonarrIdRequest calls the generic PutSettingsSonarrSonarrId builder with application/json body
func NewPutSettingsSonarrSonarrIdRequest(server string, sonarrId int, body PutSettingsSonarrSonarrIdJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewPutSettingsSonarrSonarrIdRequestWithBody(server, sonarrId, "application/json", bodyReader)
}


// NewPutSettingsSonarrSonarrIdRequestWithBody generates requests for PutSettingsSonarrSonarrId with any type of body
func NewPutSettingsSonarrSonarrIdRequestWithBody(server string, sonarrId int, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "sonarrId", runtime.ParamLocationPath, sonarrId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/settings/sonarr/%s", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("PUT", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}




// NewGetSettingsTautulliRequest generates requests for GetSettingsTautulli
func NewGetSettingsTautulliRequest(server string) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/settings/tautulli")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewPostSettingsTautulliRequest calls the generic PostSettingsTautulli builder with application/json body
func NewPostSettingsTautulliRequest(server string, body PostSettingsTautulliJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewPostSettingsTautulliRequestWithBody(server, "application/json", bodyReader)
}


// NewPostSettingsTautulliRequestWithBody generates requests for PostSettingsTautulli with any type of body
func NewPostSettingsTautulliRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/settings/tautulli")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}




// NewGetStatusRequest generates requests for GetStatus
func NewGetStatusRequest(server string) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/status")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewGetStatusAppdataRequest generates requests for GetStatusAppdata
func NewGetStatusAppdataRequest(server string) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/status/appdata")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewGetStudioStudioIdRequest generates requests for GetStudioStudioId
func NewGetStudioStudioIdRequest(server string, studioId float32) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "studioId", runtime.ParamLocationPath, studioId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/studio/%s", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewGetTvTvIdRequest generates requests for GetTvTvId
func NewGetTvTvIdRequest(server string, tvId float32, params *GetTvTvIdParams) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tvId", runtime.ParamLocationPath, tvId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/tv/%s", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    if params != nil {
        queryValues := queryURL.Query()
            
             if params.Language != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "language", runtime.ParamLocationQuery, *params.Language); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
        queryURL.RawQuery = queryValues.Encode()
    }

    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewGetTvTvIdRatingsRequest generates requests for GetTvTvIdRatings
func NewGetTvTvIdRatingsRequest(server string, tvId float32) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tvId", runtime.ParamLocationPath, tvId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/tv/%s/ratings", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewGetTvTvIdRecommendationsRequest generates requests for GetTvTvIdRecommendations
func NewGetTvTvIdRecommendationsRequest(server string, tvId float32, params *GetTvTvIdRecommendationsParams) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tvId", runtime.ParamLocationPath, tvId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/tv/%s/recommendations", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    if params != nil {
        queryValues := queryURL.Query()
            
             if params.Page != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Language != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "language", runtime.ParamLocationQuery, *params.Language); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
        queryURL.RawQuery = queryValues.Encode()
    }

    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewGetTvTvIdSeasonSeasonIdRequest generates requests for GetTvTvIdSeasonSeasonId
func NewGetTvTvIdSeasonSeasonIdRequest(server string, tvId float32, seasonId float32, params *GetTvTvIdSeasonSeasonIdParams) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tvId", runtime.ParamLocationPath, tvId)
    if err != nil {
        return nil, err
    }
    

    var pathParam1 string
    
    
    
    pathParam1, err = runtime.StyleParamWithLocation("simple", false, "seasonId", runtime.ParamLocationPath, seasonId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/tv/%s/season/%s", pathParam0, pathParam1)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    if params != nil {
        queryValues := queryURL.Query()
            
             if params.Language != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "language", runtime.ParamLocationQuery, *params.Language); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
        queryURL.RawQuery = queryValues.Encode()
    }

    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewGetTvTvIdSimilarRequest generates requests for GetTvTvIdSimilar
func NewGetTvTvIdSimilarRequest(server string, tvId float32, params *GetTvTvIdSimilarParams) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tvId", runtime.ParamLocationPath, tvId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/tv/%s/similar", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    if params != nil {
        queryValues := queryURL.Query()
            
             if params.Page != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Language != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "language", runtime.ParamLocationQuery, *params.Language); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
        queryURL.RawQuery = queryValues.Encode()
    }

    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewGetUserRequest generates requests for GetUser
func NewGetUserRequest(server string, params *GetUserParams) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/user")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    if params != nil {
        queryValues := queryURL.Query()
            
             if params.Take != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "take", runtime.ParamLocationQuery, *params.Take); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Skip != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "skip", runtime.ParamLocationQuery, *params.Skip); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Sort != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
        queryURL.RawQuery = queryValues.Encode()
    }

    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewPostUserRequest calls the generic PostUser builder with application/json body
func NewPostUserRequest(server string, body PostUserJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewPostUserRequestWithBody(server, "application/json", bodyReader)
}


// NewPostUserRequestWithBody generates requests for PostUser with any type of body
func NewPostUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/user")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}



// NewPutUserRequest calls the generic PutUser builder with application/json body
func NewPutUserRequest(server string, body PutUserJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewPutUserRequestWithBody(server, "application/json", bodyReader)
}


// NewPutUserRequestWithBody generates requests for PutUser with any type of body
func NewPutUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/user")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("PUT", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}



// NewPostUserImportFromJellyfinRequest calls the generic PostUserImportFromJellyfin builder with application/json body
func NewPostUserImportFromJellyfinRequest(server string, body PostUserImportFromJellyfinJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewPostUserImportFromJellyfinRequestWithBody(server, "application/json", bodyReader)
}


// NewPostUserImportFromJellyfinRequestWithBody generates requests for PostUserImportFromJellyfin with any type of body
func NewPostUserImportFromJellyfinRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/user/import-from-jellyfin")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}



// NewPostUserImportFromPlexRequest calls the generic PostUserImportFromPlex builder with application/json body
func NewPostUserImportFromPlexRequest(server string, body PostUserImportFromPlexJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewPostUserImportFromPlexRequestWithBody(server, "application/json", bodyReader)
}


// NewPostUserImportFromPlexRequestWithBody generates requests for PostUserImportFromPlex with any type of body
func NewPostUserImportFromPlexRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/user/import-from-plex")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}



// NewPostUserRegisterPushSubscriptionRequest calls the generic PostUserRegisterPushSubscription builder with application/json body
func NewPostUserRegisterPushSubscriptionRequest(server string, body PostUserRegisterPushSubscriptionJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewPostUserRegisterPushSubscriptionRequestWithBody(server, "application/json", bodyReader)
}


// NewPostUserRegisterPushSubscriptionRequestWithBody generates requests for PostUserRegisterPushSubscription with any type of body
func NewPostUserRegisterPushSubscriptionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/user/registerPushSubscription")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}




// NewDeleteUserUserIdRequest generates requests for DeleteUserUserId
func NewDeleteUserUserIdRequest(server string, userId float32) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/user/%s", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("DELETE", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewGetUserUserIdRequest generates requests for GetUserUserId
func NewGetUserUserIdRequest(server string, userId float32) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/user/%s", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewPutUserUserIdRequest calls the generic PutUserUserId builder with application/json body
func NewPutUserUserIdRequest(server string, userId float32, body PutUserUserIdJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewPutUserUserIdRequestWithBody(server, userId, "application/json", bodyReader)
}


// NewPutUserUserIdRequestWithBody generates requests for PutUserUserId with any type of body
func NewPutUserUserIdRequestWithBody(server string, userId float32, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/user/%s", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("PUT", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}




// NewGetUserUserIdQuotaRequest generates requests for GetUserUserIdQuota
func NewGetUserUserIdQuotaRequest(server string, userId float32) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/user/%s/quota", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewGetUserUserIdRequestsRequest generates requests for GetUserUserIdRequests
func NewGetUserUserIdRequestsRequest(server string, userId float32, params *GetUserUserIdRequestsParams) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/user/%s/requests", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    if params != nil {
        queryValues := queryURL.Query()
            
             if params.Take != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "take", runtime.ParamLocationQuery, *params.Take); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
             if params.Skip != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "skip", runtime.ParamLocationQuery, *params.Skip); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
        queryURL.RawQuery = queryValues.Encode()
    }

    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewGetUserUserIdSettingsMainRequest generates requests for GetUserUserIdSettingsMain
func NewGetUserUserIdSettingsMainRequest(server string, userId float32) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/user/%s/settings/main", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewPostUserUserIdSettingsMainRequest calls the generic PostUserUserIdSettingsMain builder with application/json body
func NewPostUserUserIdSettingsMainRequest(server string, userId float32, body PostUserUserIdSettingsMainJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewPostUserUserIdSettingsMainRequestWithBody(server, userId, "application/json", bodyReader)
}


// NewPostUserUserIdSettingsMainRequestWithBody generates requests for PostUserUserIdSettingsMain with any type of body
func NewPostUserUserIdSettingsMainRequestWithBody(server string, userId float32, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/user/%s/settings/main", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}




// NewGetUserUserIdSettingsNotificationsRequest generates requests for GetUserUserIdSettingsNotifications
func NewGetUserUserIdSettingsNotificationsRequest(server string, userId float32) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/user/%s/settings/notifications", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewPostUserUserIdSettingsNotificationsRequest calls the generic PostUserUserIdSettingsNotifications builder with application/json body
func NewPostUserUserIdSettingsNotificationsRequest(server string, userId float32, body PostUserUserIdSettingsNotificationsJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewPostUserUserIdSettingsNotificationsRequestWithBody(server, userId, "application/json", bodyReader)
}


// NewPostUserUserIdSettingsNotificationsRequestWithBody generates requests for PostUserUserIdSettingsNotifications with any type of body
func NewPostUserUserIdSettingsNotificationsRequestWithBody(server string, userId float32, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/user/%s/settings/notifications", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}




// NewGetUserUserIdSettingsPasswordRequest generates requests for GetUserUserIdSettingsPassword
func NewGetUserUserIdSettingsPasswordRequest(server string, userId float32) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/user/%s/settings/password", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewPostUserUserIdSettingsPasswordRequest calls the generic PostUserUserIdSettingsPassword builder with application/json body
func NewPostUserUserIdSettingsPasswordRequest(server string, userId float32, body PostUserUserIdSettingsPasswordJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewPostUserUserIdSettingsPasswordRequestWithBody(server, userId, "application/json", bodyReader)
}


// NewPostUserUserIdSettingsPasswordRequestWithBody generates requests for PostUserUserIdSettingsPassword with any type of body
func NewPostUserUserIdSettingsPasswordRequestWithBody(server string, userId float32, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/user/%s/settings/password", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}




// NewGetUserUserIdSettingsPermissionsRequest generates requests for GetUserUserIdSettingsPermissions
func NewGetUserUserIdSettingsPermissionsRequest(server string, userId float32) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/user/%s/settings/permissions", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewPostUserUserIdSettingsPermissionsRequest calls the generic PostUserUserIdSettingsPermissions builder with application/json body
func NewPostUserUserIdSettingsPermissionsRequest(server string, userId float32, body PostUserUserIdSettingsPermissionsJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewPostUserUserIdSettingsPermissionsRequestWithBody(server, userId, "application/json", bodyReader)
}


// NewPostUserUserIdSettingsPermissionsRequestWithBody generates requests for PostUserUserIdSettingsPermissions with any type of body
func NewPostUserUserIdSettingsPermissionsRequestWithBody(server string, userId float32, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/user/%s/settings/permissions", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}




// NewGetUserUserIdWatchDataRequest generates requests for GetUserUserIdWatchData
func NewGetUserUserIdWatchDataRequest(server string, userId float32) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/user/%s/watch_data", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewGetUserUserIdWatchlistRequest generates requests for GetUserUserIdWatchlist
func NewGetUserUserIdWatchlistRequest(server string, userId float32, params *GetUserUserIdWatchlistParams) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/user/%s/watchlist", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    if params != nil {
        queryValues := queryURL.Query()
            
             if params.Page != nil { 
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            }
        
        queryURL.RawQuery = queryValues.Encode()
    }

    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



// NewPostWatchlistRequest calls the generic PostWatchlist builder with application/json body
func NewPostWatchlistRequest(server string, body PostWatchlistJSONRequestBody) (*http.Request, error) {
    var bodyReader io.Reader
    buf, err := json.Marshal(body)
        if err != nil {
            return nil, err
        }
        bodyReader = bytes.NewReader(buf)
    return NewPostWatchlistRequestWithBody(server, "application/json", bodyReader)
}


// NewPostWatchlistRequestWithBody generates requests for PostWatchlist with any type of body
func NewPostWatchlistRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/watchlist")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("POST", queryURL.String(), body)
    if err != nil {
        return nil, err
    }

    req.Header.Add("Content-Type", contentType)



    return req, nil
}




// NewDeleteWatchlistTmdbIdRequest generates requests for DeleteWatchlistTmdbId
func NewDeleteWatchlistTmdbIdRequest(server string, tmdbId string) (*http.Request, error) {
    var err error

    var pathParam0 string
    
    
    
    pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tmdbId", runtime.ParamLocationPath, tmdbId)
    if err != nil {
        return nil, err
    }
    

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/watchlist/%s", pathParam0)
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("DELETE", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewGetWatchprovidersMoviesRequest generates requests for GetWatchprovidersMovies
func NewGetWatchprovidersMoviesRequest(server string, params *GetWatchprovidersMoviesParams) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/watchproviders/movies")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    if params != nil {
        queryValues := queryURL.Query()
            
            
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "watchRegion", runtime.ParamLocationQuery, params.WatchRegion); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            
        
        queryURL.RawQuery = queryValues.Encode()
    }

    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewGetWatchprovidersRegionsRequest generates requests for GetWatchprovidersRegions
func NewGetWatchprovidersRegionsRequest(server string) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/watchproviders/regions")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}




// NewGetWatchprovidersTvRequest generates requests for GetWatchprovidersTv
func NewGetWatchprovidersTvRequest(server string, params *GetWatchprovidersTvParams) (*http.Request, error) {
    var err error

    serverURL, err := url.Parse(server)
    if err != nil {
        return nil, err
    }

    operationPath := fmt.Sprintf("/watchproviders/tv")
    if operationPath[0] == '/' {
        operationPath = "." + operationPath
    }

    queryURL, err := serverURL.Parse(operationPath)
    if err != nil {
        return nil, err
    }


    if params != nil {
        queryValues := queryURL.Query()
            
            
            
            
            
            if queryFrag, err := runtime.StyleParamWithLocation("form", true, "watchRegion", runtime.ParamLocationQuery, params.WatchRegion); err != nil {
                return nil, err
            } else if parsed, err := url.ParseQuery(queryFrag); err != nil {
               return nil, err
            } else {
               for k, v := range parsed {
                   for _, v2 := range v {
                       queryValues.Add(k, v2)
                   }
               }
            }
            
            
        
        queryURL.RawQuery = queryValues.Encode()
    }

    req, err := http.NewRequest("GET", queryURL.String(), nil)
    if err != nil {
        return nil, err
    }

    



    return req, nil
}



func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
    for _, r := range c.RequestEditors {
        if err := r(ctx, req); err != nil {
            return err
        }
    }
    for _, r := range additionalEditors {
        if err := r(ctx, req); err != nil {
            return err
        }
    }
    return nil
}
// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
    ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
    client, err := NewClient(server, opts...)
    if err != nil {
        return nil, err
    }
    return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
// PostAuthJellyfinWithBodyWithResponse request with any body
    PostAuthJellyfinWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostAuthJellyfinResponse, error)

    PostAuthJellyfinWithResponse(ctx context.Context, body PostAuthJellyfinJSONRequestBody, reqEditors... RequestEditorFn) (*PostAuthJellyfinResponse, error)
    
// PostAuthLocalWithBodyWithResponse request with any body
    PostAuthLocalWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostAuthLocalResponse, error)

    PostAuthLocalWithResponse(ctx context.Context, body PostAuthLocalJSONRequestBody, reqEditors... RequestEditorFn) (*PostAuthLocalResponse, error)
    
// PostAuthLogoutWithResponse request
    PostAuthLogoutWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*PostAuthLogoutResponse, error)

// GetAuthMeWithResponse request
    GetAuthMeWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*GetAuthMeResponse, error)

// PostAuthPlexWithBodyWithResponse request with any body
    PostAuthPlexWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostAuthPlexResponse, error)

    PostAuthPlexWithResponse(ctx context.Context, body PostAuthPlexJSONRequestBody, reqEditors... RequestEditorFn) (*PostAuthPlexResponse, error)
    
// PostAuthResetPasswordWithBodyWithResponse request with any body
    PostAuthResetPasswordWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostAuthResetPasswordResponse, error)

    PostAuthResetPasswordWithResponse(ctx context.Context, body PostAuthResetPasswordJSONRequestBody, reqEditors... RequestEditorFn) (*PostAuthResetPasswordResponse, error)
    
// PostAuthResetPasswordGuidWithBodyWithResponse request with any body
    PostAuthResetPasswordGuidWithBodyWithResponse(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostAuthResetPasswordGuidResponse, error)

    PostAuthResetPasswordGuidWithResponse(ctx context.Context, guid string, body PostAuthResetPasswordGuidJSONRequestBody, reqEditors... RequestEditorFn) (*PostAuthResetPasswordGuidResponse, error)
    
// GetBackdropsWithResponse request
    GetBackdropsWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*GetBackdropsResponse, error)

// GetCollectionCollectionIdWithResponse request
    GetCollectionCollectionIdWithResponse(ctx context.Context, collectionId float32, params *GetCollectionCollectionIdParams, reqEditors... RequestEditorFn) (*GetCollectionCollectionIdResponse, error)

// GetDiscoverGenresliderMovieWithResponse request
    GetDiscoverGenresliderMovieWithResponse(ctx context.Context, params *GetDiscoverGenresliderMovieParams, reqEditors... RequestEditorFn) (*GetDiscoverGenresliderMovieResponse, error)

// GetDiscoverGenresliderTvWithResponse request
    GetDiscoverGenresliderTvWithResponse(ctx context.Context, params *GetDiscoverGenresliderTvParams, reqEditors... RequestEditorFn) (*GetDiscoverGenresliderTvResponse, error)

// GetDiscoverKeywordKeywordIdMoviesWithResponse request
    GetDiscoverKeywordKeywordIdMoviesWithResponse(ctx context.Context, keywordId float32, params *GetDiscoverKeywordKeywordIdMoviesParams, reqEditors... RequestEditorFn) (*GetDiscoverKeywordKeywordIdMoviesResponse, error)

// GetDiscoverMoviesWithResponse request
    GetDiscoverMoviesWithResponse(ctx context.Context, params *GetDiscoverMoviesParams, reqEditors... RequestEditorFn) (*GetDiscoverMoviesResponse, error)

// GetDiscoverMoviesGenreGenreIdWithResponse request
    GetDiscoverMoviesGenreGenreIdWithResponse(ctx context.Context, genreId string, params *GetDiscoverMoviesGenreGenreIdParams, reqEditors... RequestEditorFn) (*GetDiscoverMoviesGenreGenreIdResponse, error)

// GetDiscoverMoviesLanguageLanguageWithResponse request
    GetDiscoverMoviesLanguageLanguageWithResponse(ctx context.Context, language string, params *GetDiscoverMoviesLanguageLanguageParams, reqEditors... RequestEditorFn) (*GetDiscoverMoviesLanguageLanguageResponse, error)

// GetDiscoverMoviesStudioStudioIdWithResponse request
    GetDiscoverMoviesStudioStudioIdWithResponse(ctx context.Context, studioId string, params *GetDiscoverMoviesStudioStudioIdParams, reqEditors... RequestEditorFn) (*GetDiscoverMoviesStudioStudioIdResponse, error)

// GetDiscoverMoviesUpcomingWithResponse request
    GetDiscoverMoviesUpcomingWithResponse(ctx context.Context, params *GetDiscoverMoviesUpcomingParams, reqEditors... RequestEditorFn) (*GetDiscoverMoviesUpcomingResponse, error)

// GetDiscoverTrendingWithResponse request
    GetDiscoverTrendingWithResponse(ctx context.Context, params *GetDiscoverTrendingParams, reqEditors... RequestEditorFn) (*GetDiscoverTrendingResponse, error)

// GetDiscoverTvWithResponse request
    GetDiscoverTvWithResponse(ctx context.Context, params *GetDiscoverTvParams, reqEditors... RequestEditorFn) (*GetDiscoverTvResponse, error)

// GetDiscoverTvGenreGenreIdWithResponse request
    GetDiscoverTvGenreGenreIdWithResponse(ctx context.Context, genreId string, params *GetDiscoverTvGenreGenreIdParams, reqEditors... RequestEditorFn) (*GetDiscoverTvGenreGenreIdResponse, error)

// GetDiscoverTvLanguageLanguageWithResponse request
    GetDiscoverTvLanguageLanguageWithResponse(ctx context.Context, language string, params *GetDiscoverTvLanguageLanguageParams, reqEditors... RequestEditorFn) (*GetDiscoverTvLanguageLanguageResponse, error)

// GetDiscoverTvNetworkNetworkIdWithResponse request
    GetDiscoverTvNetworkNetworkIdWithResponse(ctx context.Context, networkId string, params *GetDiscoverTvNetworkNetworkIdParams, reqEditors... RequestEditorFn) (*GetDiscoverTvNetworkNetworkIdResponse, error)

// GetDiscoverTvUpcomingWithResponse request
    GetDiscoverTvUpcomingWithResponse(ctx context.Context, params *GetDiscoverTvUpcomingParams, reqEditors... RequestEditorFn) (*GetDiscoverTvUpcomingResponse, error)

// GetDiscoverWatchlistWithResponse request
    GetDiscoverWatchlistWithResponse(ctx context.Context, params *GetDiscoverWatchlistParams, reqEditors... RequestEditorFn) (*GetDiscoverWatchlistResponse, error)

// GetGenresMovieWithResponse request
    GetGenresMovieWithResponse(ctx context.Context, params *GetGenresMovieParams, reqEditors... RequestEditorFn) (*GetGenresMovieResponse, error)

// GetGenresTvWithResponse request
    GetGenresTvWithResponse(ctx context.Context, params *GetGenresTvParams, reqEditors... RequestEditorFn) (*GetGenresTvResponse, error)

// GetIssueWithResponse request
    GetIssueWithResponse(ctx context.Context, params *GetIssueParams, reqEditors... RequestEditorFn) (*GetIssueResponse, error)

// PostIssueWithBodyWithResponse request with any body
    PostIssueWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostIssueResponse, error)

    PostIssueWithResponse(ctx context.Context, body PostIssueJSONRequestBody, reqEditors... RequestEditorFn) (*PostIssueResponse, error)
    
// GetIssueCountWithResponse request
    GetIssueCountWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*GetIssueCountResponse, error)

// DeleteIssueIssueIdWithResponse request
    DeleteIssueIssueIdWithResponse(ctx context.Context, issueId string, reqEditors... RequestEditorFn) (*DeleteIssueIssueIdResponse, error)

// GetIssueIssueIdWithResponse request
    GetIssueIssueIdWithResponse(ctx context.Context, issueId float32, reqEditors... RequestEditorFn) (*GetIssueIssueIdResponse, error)

// PostIssueIssueIdCommentWithBodyWithResponse request with any body
    PostIssueIssueIdCommentWithBodyWithResponse(ctx context.Context, issueId float32, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostIssueIssueIdCommentResponse, error)

    PostIssueIssueIdCommentWithResponse(ctx context.Context, issueId float32, body PostIssueIssueIdCommentJSONRequestBody, reqEditors... RequestEditorFn) (*PostIssueIssueIdCommentResponse, error)
    
// PostIssueIssueIdStatusWithResponse request
    PostIssueIssueIdStatusWithResponse(ctx context.Context, issueId string, status PostIssueIssueIdStatusParamsStatus, reqEditors... RequestEditorFn) (*PostIssueIssueIdStatusResponse, error)

// DeleteIssueCommentCommentIdWithResponse request
    DeleteIssueCommentCommentIdWithResponse(ctx context.Context, commentId string, reqEditors... RequestEditorFn) (*DeleteIssueCommentCommentIdResponse, error)

// GetIssueCommentCommentIdWithResponse request
    GetIssueCommentCommentIdWithResponse(ctx context.Context, commentId string, reqEditors... RequestEditorFn) (*GetIssueCommentCommentIdResponse, error)

// PutIssueCommentCommentIdWithBodyWithResponse request with any body
    PutIssueCommentCommentIdWithBodyWithResponse(ctx context.Context, commentId string, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PutIssueCommentCommentIdResponse, error)

    PutIssueCommentCommentIdWithResponse(ctx context.Context, commentId string, body PutIssueCommentCommentIdJSONRequestBody, reqEditors... RequestEditorFn) (*PutIssueCommentCommentIdResponse, error)
    
// GetKeywordKeywordIdWithResponse request
    GetKeywordKeywordIdWithResponse(ctx context.Context, keywordId float32, reqEditors... RequestEditorFn) (*GetKeywordKeywordIdResponse, error)

// GetLanguagesWithResponse request
    GetLanguagesWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*GetLanguagesResponse, error)

// GetMediaWithResponse request
    GetMediaWithResponse(ctx context.Context, params *GetMediaParams, reqEditors... RequestEditorFn) (*GetMediaResponse, error)

// DeleteMediaMediaIdWithResponse request
    DeleteMediaMediaIdWithResponse(ctx context.Context, mediaId string, reqEditors... RequestEditorFn) (*DeleteMediaMediaIdResponse, error)

// DeleteMediaMediaIdFileWithResponse request
    DeleteMediaMediaIdFileWithResponse(ctx context.Context, mediaId string, reqEditors... RequestEditorFn) (*DeleteMediaMediaIdFileResponse, error)

// GetMediaMediaIdWatchDataWithResponse request
    GetMediaMediaIdWatchDataWithResponse(ctx context.Context, mediaId string, reqEditors... RequestEditorFn) (*GetMediaMediaIdWatchDataResponse, error)

// PostMediaMediaIdStatusWithBodyWithResponse request with any body
    PostMediaMediaIdStatusWithBodyWithResponse(ctx context.Context, mediaId string, status PostMediaMediaIdStatusParamsStatus, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostMediaMediaIdStatusResponse, error)

    PostMediaMediaIdStatusWithResponse(ctx context.Context, mediaId string, status PostMediaMediaIdStatusParamsStatus, body PostMediaMediaIdStatusJSONRequestBody, reqEditors... RequestEditorFn) (*PostMediaMediaIdStatusResponse, error)
    
// GetMovieMovieIdWithResponse request
    GetMovieMovieIdWithResponse(ctx context.Context, movieId float32, params *GetMovieMovieIdParams, reqEditors... RequestEditorFn) (*GetMovieMovieIdResponse, error)

// GetMovieMovieIdRatingsWithResponse request
    GetMovieMovieIdRatingsWithResponse(ctx context.Context, movieId float32, reqEditors... RequestEditorFn) (*GetMovieMovieIdRatingsResponse, error)

// GetMovieMovieIdRatingscombinedWithResponse request
    GetMovieMovieIdRatingscombinedWithResponse(ctx context.Context, movieId float32, reqEditors... RequestEditorFn) (*GetMovieMovieIdRatingscombinedResponse, error)

// GetMovieMovieIdRecommendationsWithResponse request
    GetMovieMovieIdRecommendationsWithResponse(ctx context.Context, movieId float32, params *GetMovieMovieIdRecommendationsParams, reqEditors... RequestEditorFn) (*GetMovieMovieIdRecommendationsResponse, error)

// GetMovieMovieIdSimilarWithResponse request
    GetMovieMovieIdSimilarWithResponse(ctx context.Context, movieId float32, params *GetMovieMovieIdSimilarParams, reqEditors... RequestEditorFn) (*GetMovieMovieIdSimilarResponse, error)

// GetNetworkNetworkIdWithResponse request
    GetNetworkNetworkIdWithResponse(ctx context.Context, networkId float32, reqEditors... RequestEditorFn) (*GetNetworkNetworkIdResponse, error)

// GetPersonPersonIdWithResponse request
    GetPersonPersonIdWithResponse(ctx context.Context, personId float32, params *GetPersonPersonIdParams, reqEditors... RequestEditorFn) (*GetPersonPersonIdResponse, error)

// GetPersonPersonIdCombinedCreditsWithResponse request
    GetPersonPersonIdCombinedCreditsWithResponse(ctx context.Context, personId float32, params *GetPersonPersonIdCombinedCreditsParams, reqEditors... RequestEditorFn) (*GetPersonPersonIdCombinedCreditsResponse, error)

// GetRegionsWithResponse request
    GetRegionsWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*GetRegionsResponse, error)

// GetRequestWithResponse request
    GetRequestWithResponse(ctx context.Context, params *GetRequestParams, reqEditors... RequestEditorFn) (*GetRequestResponse, error)

// PostRequestWithBodyWithResponse request with any body
    PostRequestWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostRequestResponse, error)

    PostRequestWithResponse(ctx context.Context, body PostRequestJSONRequestBody, reqEditors... RequestEditorFn) (*PostRequestResponse, error)
    
// GetRequestCountWithResponse request
    GetRequestCountWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*GetRequestCountResponse, error)

// DeleteRequestRequestIdWithResponse request
    DeleteRequestRequestIdWithResponse(ctx context.Context, requestId string, reqEditors... RequestEditorFn) (*DeleteRequestRequestIdResponse, error)

// GetRequestRequestIdWithResponse request
    GetRequestRequestIdWithResponse(ctx context.Context, requestId string, reqEditors... RequestEditorFn) (*GetRequestRequestIdResponse, error)

// PutRequestRequestIdWithBodyWithResponse request with any body
    PutRequestRequestIdWithBodyWithResponse(ctx context.Context, requestId string, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PutRequestRequestIdResponse, error)

    PutRequestRequestIdWithResponse(ctx context.Context, requestId string, body PutRequestRequestIdJSONRequestBody, reqEditors... RequestEditorFn) (*PutRequestRequestIdResponse, error)
    
// PostRequestRequestIdRetryWithResponse request
    PostRequestRequestIdRetryWithResponse(ctx context.Context, requestId string, reqEditors... RequestEditorFn) (*PostRequestRequestIdRetryResponse, error)

// PostRequestRequestIdStatusWithResponse request
    PostRequestRequestIdStatusWithResponse(ctx context.Context, requestId string, status PostRequestRequestIdStatusParamsStatus, reqEditors... RequestEditorFn) (*PostRequestRequestIdStatusResponse, error)

// GetSearchWithResponse request
    GetSearchWithResponse(ctx context.Context, params *GetSearchParams, reqEditors... RequestEditorFn) (*GetSearchResponse, error)

// GetSearchCompanyWithResponse request
    GetSearchCompanyWithResponse(ctx context.Context, params *GetSearchCompanyParams, reqEditors... RequestEditorFn) (*GetSearchCompanyResponse, error)

// GetSearchKeywordWithResponse request
    GetSearchKeywordWithResponse(ctx context.Context, params *GetSearchKeywordParams, reqEditors... RequestEditorFn) (*GetSearchKeywordResponse, error)

// GetServiceRadarrWithResponse request
    GetServiceRadarrWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*GetServiceRadarrResponse, error)

// GetServiceRadarrRadarrIdWithResponse request
    GetServiceRadarrRadarrIdWithResponse(ctx context.Context, radarrId float32, reqEditors... RequestEditorFn) (*GetServiceRadarrRadarrIdResponse, error)

// GetServiceSonarrWithResponse request
    GetServiceSonarrWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*GetServiceSonarrResponse, error)

// GetServiceSonarrLookupTmdbIdWithResponse request
    GetServiceSonarrLookupTmdbIdWithResponse(ctx context.Context, tmdbId float32, reqEditors... RequestEditorFn) (*GetServiceSonarrLookupTmdbIdResponse, error)

// GetServiceSonarrSonarrIdWithResponse request
    GetServiceSonarrSonarrIdWithResponse(ctx context.Context, sonarrId float32, reqEditors... RequestEditorFn) (*GetServiceSonarrSonarrIdResponse, error)

// GetSettingsAboutWithResponse request
    GetSettingsAboutWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*GetSettingsAboutResponse, error)

// GetSettingsCacheWithResponse request
    GetSettingsCacheWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*GetSettingsCacheResponse, error)

// PostSettingsCacheCacheIdFlushWithResponse request
    PostSettingsCacheCacheIdFlushWithResponse(ctx context.Context, cacheId string, reqEditors... RequestEditorFn) (*PostSettingsCacheCacheIdFlushResponse, error)

// GetSettingsDiscoverWithResponse request
    GetSettingsDiscoverWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*GetSettingsDiscoverResponse, error)

// PostSettingsDiscoverWithBodyWithResponse request with any body
    PostSettingsDiscoverWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostSettingsDiscoverResponse, error)

    PostSettingsDiscoverWithResponse(ctx context.Context, body PostSettingsDiscoverJSONRequestBody, reqEditors... RequestEditorFn) (*PostSettingsDiscoverResponse, error)
    
// PostSettingsDiscoverAddWithBodyWithResponse request with any body
    PostSettingsDiscoverAddWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostSettingsDiscoverAddResponse, error)

    PostSettingsDiscoverAddWithResponse(ctx context.Context, body PostSettingsDiscoverAddJSONRequestBody, reqEditors... RequestEditorFn) (*PostSettingsDiscoverAddResponse, error)
    
// GetSettingsDiscoverResetWithResponse request
    GetSettingsDiscoverResetWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*GetSettingsDiscoverResetResponse, error)

// DeleteSettingsDiscoverSliderIdWithResponse request
    DeleteSettingsDiscoverSliderIdWithResponse(ctx context.Context, sliderId float32, reqEditors... RequestEditorFn) (*DeleteSettingsDiscoverSliderIdResponse, error)

// PutSettingsDiscoverSliderIdWithBodyWithResponse request with any body
    PutSettingsDiscoverSliderIdWithBodyWithResponse(ctx context.Context, sliderId float32, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PutSettingsDiscoverSliderIdResponse, error)

    PutSettingsDiscoverSliderIdWithResponse(ctx context.Context, sliderId float32, body PutSettingsDiscoverSliderIdJSONRequestBody, reqEditors... RequestEditorFn) (*PutSettingsDiscoverSliderIdResponse, error)
    
// PostSettingsInitializeWithResponse request
    PostSettingsInitializeWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*PostSettingsInitializeResponse, error)

// GetSettingsJellyfinWithResponse request
    GetSettingsJellyfinWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*GetSettingsJellyfinResponse, error)

// PostSettingsJellyfinWithBodyWithResponse request with any body
    PostSettingsJellyfinWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostSettingsJellyfinResponse, error)

    PostSettingsJellyfinWithResponse(ctx context.Context, body PostSettingsJellyfinJSONRequestBody, reqEditors... RequestEditorFn) (*PostSettingsJellyfinResponse, error)
    
// GetSettingsJellyfinLibraryWithResponse request
    GetSettingsJellyfinLibraryWithResponse(ctx context.Context, params *GetSettingsJellyfinLibraryParams, reqEditors... RequestEditorFn) (*GetSettingsJellyfinLibraryResponse, error)

// GetSettingsJellyfinSyncWithResponse request
    GetSettingsJellyfinSyncWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*GetSettingsJellyfinSyncResponse, error)

// PostSettingsJellyfinSyncWithBodyWithResponse request with any body
    PostSettingsJellyfinSyncWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostSettingsJellyfinSyncResponse, error)

    PostSettingsJellyfinSyncWithResponse(ctx context.Context, body PostSettingsJellyfinSyncJSONRequestBody, reqEditors... RequestEditorFn) (*PostSettingsJellyfinSyncResponse, error)
    
// GetSettingsJellyfinUsersWithResponse request
    GetSettingsJellyfinUsersWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*GetSettingsJellyfinUsersResponse, error)

// GetSettingsJobsWithResponse request
    GetSettingsJobsWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*GetSettingsJobsResponse, error)

// PostSettingsJobsJobIdCancelWithResponse request
    PostSettingsJobsJobIdCancelWithResponse(ctx context.Context, jobId string, reqEditors... RequestEditorFn) (*PostSettingsJobsJobIdCancelResponse, error)

// PostSettingsJobsJobIdRunWithResponse request
    PostSettingsJobsJobIdRunWithResponse(ctx context.Context, jobId string, reqEditors... RequestEditorFn) (*PostSettingsJobsJobIdRunResponse, error)

// PostSettingsJobsJobIdScheduleWithBodyWithResponse request with any body
    PostSettingsJobsJobIdScheduleWithBodyWithResponse(ctx context.Context, jobId string, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostSettingsJobsJobIdScheduleResponse, error)

    PostSettingsJobsJobIdScheduleWithResponse(ctx context.Context, jobId string, body PostSettingsJobsJobIdScheduleJSONRequestBody, reqEditors... RequestEditorFn) (*PostSettingsJobsJobIdScheduleResponse, error)
    
// GetSettingsLogsWithResponse request
    GetSettingsLogsWithResponse(ctx context.Context, params *GetSettingsLogsParams, reqEditors... RequestEditorFn) (*GetSettingsLogsResponse, error)

// GetSettingsMainWithResponse request
    GetSettingsMainWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*GetSettingsMainResponse, error)

// PostSettingsMainWithBodyWithResponse request with any body
    PostSettingsMainWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostSettingsMainResponse, error)

    PostSettingsMainWithResponse(ctx context.Context, body PostSettingsMainJSONRequestBody, reqEditors... RequestEditorFn) (*PostSettingsMainResponse, error)
    
// PostSettingsMainRegenerateWithResponse request
    PostSettingsMainRegenerateWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*PostSettingsMainRegenerateResponse, error)

// GetSettingsNotificationsDiscordWithResponse request
    GetSettingsNotificationsDiscordWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*GetSettingsNotificationsDiscordResponse, error)

// PostSettingsNotificationsDiscordWithBodyWithResponse request with any body
    PostSettingsNotificationsDiscordWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostSettingsNotificationsDiscordResponse, error)

    PostSettingsNotificationsDiscordWithResponse(ctx context.Context, body PostSettingsNotificationsDiscordJSONRequestBody, reqEditors... RequestEditorFn) (*PostSettingsNotificationsDiscordResponse, error)
    
// PostSettingsNotificationsDiscordTestWithBodyWithResponse request with any body
    PostSettingsNotificationsDiscordTestWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostSettingsNotificationsDiscordTestResponse, error)

    PostSettingsNotificationsDiscordTestWithResponse(ctx context.Context, body PostSettingsNotificationsDiscordTestJSONRequestBody, reqEditors... RequestEditorFn) (*PostSettingsNotificationsDiscordTestResponse, error)
    
// GetSettingsNotificationsEmailWithResponse request
    GetSettingsNotificationsEmailWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*GetSettingsNotificationsEmailResponse, error)

// PostSettingsNotificationsEmailWithBodyWithResponse request with any body
    PostSettingsNotificationsEmailWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostSettingsNotificationsEmailResponse, error)

    PostSettingsNotificationsEmailWithResponse(ctx context.Context, body PostSettingsNotificationsEmailJSONRequestBody, reqEditors... RequestEditorFn) (*PostSettingsNotificationsEmailResponse, error)
    
// PostSettingsNotificationsEmailTestWithBodyWithResponse request with any body
    PostSettingsNotificationsEmailTestWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostSettingsNotificationsEmailTestResponse, error)

    PostSettingsNotificationsEmailTestWithResponse(ctx context.Context, body PostSettingsNotificationsEmailTestJSONRequestBody, reqEditors... RequestEditorFn) (*PostSettingsNotificationsEmailTestResponse, error)
    
// GetSettingsNotificationsGotifyWithResponse request
    GetSettingsNotificationsGotifyWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*GetSettingsNotificationsGotifyResponse, error)

// PostSettingsNotificationsGotifyWithBodyWithResponse request with any body
    PostSettingsNotificationsGotifyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostSettingsNotificationsGotifyResponse, error)

    PostSettingsNotificationsGotifyWithResponse(ctx context.Context, body PostSettingsNotificationsGotifyJSONRequestBody, reqEditors... RequestEditorFn) (*PostSettingsNotificationsGotifyResponse, error)
    
// PostSettingsNotificationsGotifyTestWithBodyWithResponse request with any body
    PostSettingsNotificationsGotifyTestWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostSettingsNotificationsGotifyTestResponse, error)

    PostSettingsNotificationsGotifyTestWithResponse(ctx context.Context, body PostSettingsNotificationsGotifyTestJSONRequestBody, reqEditors... RequestEditorFn) (*PostSettingsNotificationsGotifyTestResponse, error)
    
// GetSettingsNotificationsLunaseaWithResponse request
    GetSettingsNotificationsLunaseaWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*GetSettingsNotificationsLunaseaResponse, error)

// PostSettingsNotificationsLunaseaWithBodyWithResponse request with any body
    PostSettingsNotificationsLunaseaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostSettingsNotificationsLunaseaResponse, error)

    PostSettingsNotificationsLunaseaWithResponse(ctx context.Context, body PostSettingsNotificationsLunaseaJSONRequestBody, reqEditors... RequestEditorFn) (*PostSettingsNotificationsLunaseaResponse, error)
    
// PostSettingsNotificationsLunaseaTestWithBodyWithResponse request with any body
    PostSettingsNotificationsLunaseaTestWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostSettingsNotificationsLunaseaTestResponse, error)

    PostSettingsNotificationsLunaseaTestWithResponse(ctx context.Context, body PostSettingsNotificationsLunaseaTestJSONRequestBody, reqEditors... RequestEditorFn) (*PostSettingsNotificationsLunaseaTestResponse, error)
    
// GetSettingsNotificationsPushbulletWithResponse request
    GetSettingsNotificationsPushbulletWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*GetSettingsNotificationsPushbulletResponse, error)

// PostSettingsNotificationsPushbulletWithBodyWithResponse request with any body
    PostSettingsNotificationsPushbulletWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostSettingsNotificationsPushbulletResponse, error)

    PostSettingsNotificationsPushbulletWithResponse(ctx context.Context, body PostSettingsNotificationsPushbulletJSONRequestBody, reqEditors... RequestEditorFn) (*PostSettingsNotificationsPushbulletResponse, error)
    
// PostSettingsNotificationsPushbulletTestWithBodyWithResponse request with any body
    PostSettingsNotificationsPushbulletTestWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostSettingsNotificationsPushbulletTestResponse, error)

    PostSettingsNotificationsPushbulletTestWithResponse(ctx context.Context, body PostSettingsNotificationsPushbulletTestJSONRequestBody, reqEditors... RequestEditorFn) (*PostSettingsNotificationsPushbulletTestResponse, error)
    
// GetSettingsNotificationsPushoverWithResponse request
    GetSettingsNotificationsPushoverWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*GetSettingsNotificationsPushoverResponse, error)

// PostSettingsNotificationsPushoverWithBodyWithResponse request with any body
    PostSettingsNotificationsPushoverWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostSettingsNotificationsPushoverResponse, error)

    PostSettingsNotificationsPushoverWithResponse(ctx context.Context, body PostSettingsNotificationsPushoverJSONRequestBody, reqEditors... RequestEditorFn) (*PostSettingsNotificationsPushoverResponse, error)
    
// GetSettingsNotificationsPushoverSoundsWithResponse request
    GetSettingsNotificationsPushoverSoundsWithResponse(ctx context.Context, params *GetSettingsNotificationsPushoverSoundsParams, reqEditors... RequestEditorFn) (*GetSettingsNotificationsPushoverSoundsResponse, error)

// PostSettingsNotificationsPushoverTestWithBodyWithResponse request with any body
    PostSettingsNotificationsPushoverTestWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostSettingsNotificationsPushoverTestResponse, error)

    PostSettingsNotificationsPushoverTestWithResponse(ctx context.Context, body PostSettingsNotificationsPushoverTestJSONRequestBody, reqEditors... RequestEditorFn) (*PostSettingsNotificationsPushoverTestResponse, error)
    
// GetSettingsNotificationsSlackWithResponse request
    GetSettingsNotificationsSlackWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*GetSettingsNotificationsSlackResponse, error)

// PostSettingsNotificationsSlackWithBodyWithResponse request with any body
    PostSettingsNotificationsSlackWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostSettingsNotificationsSlackResponse, error)

    PostSettingsNotificationsSlackWithResponse(ctx context.Context, body PostSettingsNotificationsSlackJSONRequestBody, reqEditors... RequestEditorFn) (*PostSettingsNotificationsSlackResponse, error)
    
// PostSettingsNotificationsSlackTestWithBodyWithResponse request with any body
    PostSettingsNotificationsSlackTestWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostSettingsNotificationsSlackTestResponse, error)

    PostSettingsNotificationsSlackTestWithResponse(ctx context.Context, body PostSettingsNotificationsSlackTestJSONRequestBody, reqEditors... RequestEditorFn) (*PostSettingsNotificationsSlackTestResponse, error)
    
// GetSettingsNotificationsTelegramWithResponse request
    GetSettingsNotificationsTelegramWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*GetSettingsNotificationsTelegramResponse, error)

// PostSettingsNotificationsTelegramWithBodyWithResponse request with any body
    PostSettingsNotificationsTelegramWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostSettingsNotificationsTelegramResponse, error)

    PostSettingsNotificationsTelegramWithResponse(ctx context.Context, body PostSettingsNotificationsTelegramJSONRequestBody, reqEditors... RequestEditorFn) (*PostSettingsNotificationsTelegramResponse, error)
    
// PostSettingsNotificationsTelegramTestWithBodyWithResponse request with any body
    PostSettingsNotificationsTelegramTestWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostSettingsNotificationsTelegramTestResponse, error)

    PostSettingsNotificationsTelegramTestWithResponse(ctx context.Context, body PostSettingsNotificationsTelegramTestJSONRequestBody, reqEditors... RequestEditorFn) (*PostSettingsNotificationsTelegramTestResponse, error)
    
// GetSettingsNotificationsWebhookWithResponse request
    GetSettingsNotificationsWebhookWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*GetSettingsNotificationsWebhookResponse, error)

// PostSettingsNotificationsWebhookWithBodyWithResponse request with any body
    PostSettingsNotificationsWebhookWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostSettingsNotificationsWebhookResponse, error)

    PostSettingsNotificationsWebhookWithResponse(ctx context.Context, body PostSettingsNotificationsWebhookJSONRequestBody, reqEditors... RequestEditorFn) (*PostSettingsNotificationsWebhookResponse, error)
    
// PostSettingsNotificationsWebhookTestWithBodyWithResponse request with any body
    PostSettingsNotificationsWebhookTestWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostSettingsNotificationsWebhookTestResponse, error)

    PostSettingsNotificationsWebhookTestWithResponse(ctx context.Context, body PostSettingsNotificationsWebhookTestJSONRequestBody, reqEditors... RequestEditorFn) (*PostSettingsNotificationsWebhookTestResponse, error)
    
// GetSettingsNotificationsWebpushWithResponse request
    GetSettingsNotificationsWebpushWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*GetSettingsNotificationsWebpushResponse, error)

// PostSettingsNotificationsWebpushWithBodyWithResponse request with any body
    PostSettingsNotificationsWebpushWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostSettingsNotificationsWebpushResponse, error)

    PostSettingsNotificationsWebpushWithResponse(ctx context.Context, body PostSettingsNotificationsWebpushJSONRequestBody, reqEditors... RequestEditorFn) (*PostSettingsNotificationsWebpushResponse, error)
    
// PostSettingsNotificationsWebpushTestWithBodyWithResponse request with any body
    PostSettingsNotificationsWebpushTestWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostSettingsNotificationsWebpushTestResponse, error)

    PostSettingsNotificationsWebpushTestWithResponse(ctx context.Context, body PostSettingsNotificationsWebpushTestJSONRequestBody, reqEditors... RequestEditorFn) (*PostSettingsNotificationsWebpushTestResponse, error)
    
// GetSettingsPlexWithResponse request
    GetSettingsPlexWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*GetSettingsPlexResponse, error)

// PostSettingsPlexWithBodyWithResponse request with any body
    PostSettingsPlexWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostSettingsPlexResponse, error)

    PostSettingsPlexWithResponse(ctx context.Context, body PostSettingsPlexJSONRequestBody, reqEditors... RequestEditorFn) (*PostSettingsPlexResponse, error)
    
// GetSettingsPlexDevicesServersWithResponse request
    GetSettingsPlexDevicesServersWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*GetSettingsPlexDevicesServersResponse, error)

// GetSettingsPlexLibraryWithResponse request
    GetSettingsPlexLibraryWithResponse(ctx context.Context, params *GetSettingsPlexLibraryParams, reqEditors... RequestEditorFn) (*GetSettingsPlexLibraryResponse, error)

// GetSettingsPlexSyncWithResponse request
    GetSettingsPlexSyncWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*GetSettingsPlexSyncResponse, error)

// PostSettingsPlexSyncWithBodyWithResponse request with any body
    PostSettingsPlexSyncWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostSettingsPlexSyncResponse, error)

    PostSettingsPlexSyncWithResponse(ctx context.Context, body PostSettingsPlexSyncJSONRequestBody, reqEditors... RequestEditorFn) (*PostSettingsPlexSyncResponse, error)
    
// GetSettingsPlexUsersWithResponse request
    GetSettingsPlexUsersWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*GetSettingsPlexUsersResponse, error)

// GetSettingsPublicWithResponse request
    GetSettingsPublicWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*GetSettingsPublicResponse, error)

// GetSettingsRadarrWithResponse request
    GetSettingsRadarrWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*GetSettingsRadarrResponse, error)

// PostSettingsRadarrWithBodyWithResponse request with any body
    PostSettingsRadarrWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostSettingsRadarrResponse, error)

    PostSettingsRadarrWithResponse(ctx context.Context, body PostSettingsRadarrJSONRequestBody, reqEditors... RequestEditorFn) (*PostSettingsRadarrResponse, error)
    
// PostSettingsRadarrTestWithBodyWithResponse request with any body
    PostSettingsRadarrTestWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostSettingsRadarrTestResponse, error)

    PostSettingsRadarrTestWithResponse(ctx context.Context, body PostSettingsRadarrTestJSONRequestBody, reqEditors... RequestEditorFn) (*PostSettingsRadarrTestResponse, error)
    
// DeleteSettingsRadarrRadarrIdWithResponse request
    DeleteSettingsRadarrRadarrIdWithResponse(ctx context.Context, radarrId int, reqEditors... RequestEditorFn) (*DeleteSettingsRadarrRadarrIdResponse, error)

// PutSettingsRadarrRadarrIdWithBodyWithResponse request with any body
    PutSettingsRadarrRadarrIdWithBodyWithResponse(ctx context.Context, radarrId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PutSettingsRadarrRadarrIdResponse, error)

    PutSettingsRadarrRadarrIdWithResponse(ctx context.Context, radarrId int, body PutSettingsRadarrRadarrIdJSONRequestBody, reqEditors... RequestEditorFn) (*PutSettingsRadarrRadarrIdResponse, error)
    
// GetSettingsRadarrRadarrIdProfilesWithResponse request
    GetSettingsRadarrRadarrIdProfilesWithResponse(ctx context.Context, radarrId int, reqEditors... RequestEditorFn) (*GetSettingsRadarrRadarrIdProfilesResponse, error)

// GetSettingsSonarrWithResponse request
    GetSettingsSonarrWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*GetSettingsSonarrResponse, error)

// PostSettingsSonarrWithBodyWithResponse request with any body
    PostSettingsSonarrWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostSettingsSonarrResponse, error)

    PostSettingsSonarrWithResponse(ctx context.Context, body PostSettingsSonarrJSONRequestBody, reqEditors... RequestEditorFn) (*PostSettingsSonarrResponse, error)
    
// PostSettingsSonarrTestWithBodyWithResponse request with any body
    PostSettingsSonarrTestWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostSettingsSonarrTestResponse, error)

    PostSettingsSonarrTestWithResponse(ctx context.Context, body PostSettingsSonarrTestJSONRequestBody, reqEditors... RequestEditorFn) (*PostSettingsSonarrTestResponse, error)
    
// DeleteSettingsSonarrSonarrIdWithResponse request
    DeleteSettingsSonarrSonarrIdWithResponse(ctx context.Context, sonarrId int, reqEditors... RequestEditorFn) (*DeleteSettingsSonarrSonarrIdResponse, error)

// PutSettingsSonarrSonarrIdWithBodyWithResponse request with any body
    PutSettingsSonarrSonarrIdWithBodyWithResponse(ctx context.Context, sonarrId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PutSettingsSonarrSonarrIdResponse, error)

    PutSettingsSonarrSonarrIdWithResponse(ctx context.Context, sonarrId int, body PutSettingsSonarrSonarrIdJSONRequestBody, reqEditors... RequestEditorFn) (*PutSettingsSonarrSonarrIdResponse, error)
    
// GetSettingsTautulliWithResponse request
    GetSettingsTautulliWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*GetSettingsTautulliResponse, error)

// PostSettingsTautulliWithBodyWithResponse request with any body
    PostSettingsTautulliWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostSettingsTautulliResponse, error)

    PostSettingsTautulliWithResponse(ctx context.Context, body PostSettingsTautulliJSONRequestBody, reqEditors... RequestEditorFn) (*PostSettingsTautulliResponse, error)
    
// GetStatusWithResponse request
    GetStatusWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*GetStatusResponse, error)

// GetStatusAppdataWithResponse request
    GetStatusAppdataWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*GetStatusAppdataResponse, error)

// GetStudioStudioIdWithResponse request
    GetStudioStudioIdWithResponse(ctx context.Context, studioId float32, reqEditors... RequestEditorFn) (*GetStudioStudioIdResponse, error)

// GetTvTvIdWithResponse request
    GetTvTvIdWithResponse(ctx context.Context, tvId float32, params *GetTvTvIdParams, reqEditors... RequestEditorFn) (*GetTvTvIdResponse, error)

// GetTvTvIdRatingsWithResponse request
    GetTvTvIdRatingsWithResponse(ctx context.Context, tvId float32, reqEditors... RequestEditorFn) (*GetTvTvIdRatingsResponse, error)

// GetTvTvIdRecommendationsWithResponse request
    GetTvTvIdRecommendationsWithResponse(ctx context.Context, tvId float32, params *GetTvTvIdRecommendationsParams, reqEditors... RequestEditorFn) (*GetTvTvIdRecommendationsResponse, error)

// GetTvTvIdSeasonSeasonIdWithResponse request
    GetTvTvIdSeasonSeasonIdWithResponse(ctx context.Context, tvId float32, seasonId float32, params *GetTvTvIdSeasonSeasonIdParams, reqEditors... RequestEditorFn) (*GetTvTvIdSeasonSeasonIdResponse, error)

// GetTvTvIdSimilarWithResponse request
    GetTvTvIdSimilarWithResponse(ctx context.Context, tvId float32, params *GetTvTvIdSimilarParams, reqEditors... RequestEditorFn) (*GetTvTvIdSimilarResponse, error)

// GetUserWithResponse request
    GetUserWithResponse(ctx context.Context, params *GetUserParams, reqEditors... RequestEditorFn) (*GetUserResponse, error)

// PostUserWithBodyWithResponse request with any body
    PostUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostUserResponse, error)

    PostUserWithResponse(ctx context.Context, body PostUserJSONRequestBody, reqEditors... RequestEditorFn) (*PostUserResponse, error)
    
// PutUserWithBodyWithResponse request with any body
    PutUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PutUserResponse, error)

    PutUserWithResponse(ctx context.Context, body PutUserJSONRequestBody, reqEditors... RequestEditorFn) (*PutUserResponse, error)
    
// PostUserImportFromJellyfinWithBodyWithResponse request with any body
    PostUserImportFromJellyfinWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostUserImportFromJellyfinResponse, error)

    PostUserImportFromJellyfinWithResponse(ctx context.Context, body PostUserImportFromJellyfinJSONRequestBody, reqEditors... RequestEditorFn) (*PostUserImportFromJellyfinResponse, error)
    
// PostUserImportFromPlexWithBodyWithResponse request with any body
    PostUserImportFromPlexWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostUserImportFromPlexResponse, error)

    PostUserImportFromPlexWithResponse(ctx context.Context, body PostUserImportFromPlexJSONRequestBody, reqEditors... RequestEditorFn) (*PostUserImportFromPlexResponse, error)
    
// PostUserRegisterPushSubscriptionWithBodyWithResponse request with any body
    PostUserRegisterPushSubscriptionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostUserRegisterPushSubscriptionResponse, error)

    PostUserRegisterPushSubscriptionWithResponse(ctx context.Context, body PostUserRegisterPushSubscriptionJSONRequestBody, reqEditors... RequestEditorFn) (*PostUserRegisterPushSubscriptionResponse, error)
    
// DeleteUserUserIdWithResponse request
    DeleteUserUserIdWithResponse(ctx context.Context, userId float32, reqEditors... RequestEditorFn) (*DeleteUserUserIdResponse, error)

// GetUserUserIdWithResponse request
    GetUserUserIdWithResponse(ctx context.Context, userId float32, reqEditors... RequestEditorFn) (*GetUserUserIdResponse, error)

// PutUserUserIdWithBodyWithResponse request with any body
    PutUserUserIdWithBodyWithResponse(ctx context.Context, userId float32, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PutUserUserIdResponse, error)

    PutUserUserIdWithResponse(ctx context.Context, userId float32, body PutUserUserIdJSONRequestBody, reqEditors... RequestEditorFn) (*PutUserUserIdResponse, error)
    
// GetUserUserIdQuotaWithResponse request
    GetUserUserIdQuotaWithResponse(ctx context.Context, userId float32, reqEditors... RequestEditorFn) (*GetUserUserIdQuotaResponse, error)

// GetUserUserIdRequestsWithResponse request
    GetUserUserIdRequestsWithResponse(ctx context.Context, userId float32, params *GetUserUserIdRequestsParams, reqEditors... RequestEditorFn) (*GetUserUserIdRequestsResponse, error)

// GetUserUserIdSettingsMainWithResponse request
    GetUserUserIdSettingsMainWithResponse(ctx context.Context, userId float32, reqEditors... RequestEditorFn) (*GetUserUserIdSettingsMainResponse, error)

// PostUserUserIdSettingsMainWithBodyWithResponse request with any body
    PostUserUserIdSettingsMainWithBodyWithResponse(ctx context.Context, userId float32, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostUserUserIdSettingsMainResponse, error)

    PostUserUserIdSettingsMainWithResponse(ctx context.Context, userId float32, body PostUserUserIdSettingsMainJSONRequestBody, reqEditors... RequestEditorFn) (*PostUserUserIdSettingsMainResponse, error)
    
// GetUserUserIdSettingsNotificationsWithResponse request
    GetUserUserIdSettingsNotificationsWithResponse(ctx context.Context, userId float32, reqEditors... RequestEditorFn) (*GetUserUserIdSettingsNotificationsResponse, error)

// PostUserUserIdSettingsNotificationsWithBodyWithResponse request with any body
    PostUserUserIdSettingsNotificationsWithBodyWithResponse(ctx context.Context, userId float32, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostUserUserIdSettingsNotificationsResponse, error)

    PostUserUserIdSettingsNotificationsWithResponse(ctx context.Context, userId float32, body PostUserUserIdSettingsNotificationsJSONRequestBody, reqEditors... RequestEditorFn) (*PostUserUserIdSettingsNotificationsResponse, error)
    
// GetUserUserIdSettingsPasswordWithResponse request
    GetUserUserIdSettingsPasswordWithResponse(ctx context.Context, userId float32, reqEditors... RequestEditorFn) (*GetUserUserIdSettingsPasswordResponse, error)

// PostUserUserIdSettingsPasswordWithBodyWithResponse request with any body
    PostUserUserIdSettingsPasswordWithBodyWithResponse(ctx context.Context, userId float32, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostUserUserIdSettingsPasswordResponse, error)

    PostUserUserIdSettingsPasswordWithResponse(ctx context.Context, userId float32, body PostUserUserIdSettingsPasswordJSONRequestBody, reqEditors... RequestEditorFn) (*PostUserUserIdSettingsPasswordResponse, error)
    
// GetUserUserIdSettingsPermissionsWithResponse request
    GetUserUserIdSettingsPermissionsWithResponse(ctx context.Context, userId float32, reqEditors... RequestEditorFn) (*GetUserUserIdSettingsPermissionsResponse, error)

// PostUserUserIdSettingsPermissionsWithBodyWithResponse request with any body
    PostUserUserIdSettingsPermissionsWithBodyWithResponse(ctx context.Context, userId float32, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostUserUserIdSettingsPermissionsResponse, error)

    PostUserUserIdSettingsPermissionsWithResponse(ctx context.Context, userId float32, body PostUserUserIdSettingsPermissionsJSONRequestBody, reqEditors... RequestEditorFn) (*PostUserUserIdSettingsPermissionsResponse, error)
    
// GetUserUserIdWatchDataWithResponse request
    GetUserUserIdWatchDataWithResponse(ctx context.Context, userId float32, reqEditors... RequestEditorFn) (*GetUserUserIdWatchDataResponse, error)

// GetUserUserIdWatchlistWithResponse request
    GetUserUserIdWatchlistWithResponse(ctx context.Context, userId float32, params *GetUserUserIdWatchlistParams, reqEditors... RequestEditorFn) (*GetUserUserIdWatchlistResponse, error)

// PostWatchlistWithBodyWithResponse request with any body
    PostWatchlistWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostWatchlistResponse, error)

    PostWatchlistWithResponse(ctx context.Context, body PostWatchlistJSONRequestBody, reqEditors... RequestEditorFn) (*PostWatchlistResponse, error)
    
// DeleteWatchlistTmdbIdWithResponse request
    DeleteWatchlistTmdbIdWithResponse(ctx context.Context, tmdbId string, reqEditors... RequestEditorFn) (*DeleteWatchlistTmdbIdResponse, error)

// GetWatchprovidersMoviesWithResponse request
    GetWatchprovidersMoviesWithResponse(ctx context.Context, params *GetWatchprovidersMoviesParams, reqEditors... RequestEditorFn) (*GetWatchprovidersMoviesResponse, error)

// GetWatchprovidersRegionsWithResponse request
    GetWatchprovidersRegionsWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*GetWatchprovidersRegionsResponse, error)

// GetWatchprovidersTvWithResponse request
    GetWatchprovidersTvWithResponse(ctx context.Context, params *GetWatchprovidersTvParams, reqEditors... RequestEditorFn) (*GetWatchprovidersTvResponse, error)


}


type PostAuthJellyfinResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *User
}

// Status returns HTTPResponse.Status
func (r PostAuthJellyfinResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAuthJellyfinResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type PostAuthLocalResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *User
}

// Status returns HTTPResponse.Status
func (r PostAuthLocalResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAuthLocalResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type PostAuthLogoutResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *struct {
    Status *string`json:"status,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r PostAuthLogoutResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAuthLogoutResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetAuthMeResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *User
}

// Status returns HTTPResponse.Status
func (r GetAuthMeResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAuthMeResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type PostAuthPlexResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *User
}

// Status returns HTTPResponse.Status
func (r PostAuthPlexResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAuthPlexResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type PostAuthResetPasswordResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *struct {
    Status *string`json:"status,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r PostAuthResetPasswordResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAuthResetPasswordResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type PostAuthResetPasswordGuidResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *struct {
    Status *string`json:"status,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r PostAuthResetPasswordGuidResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAuthResetPasswordGuidResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetBackdropsResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *[]string
}

// Status returns HTTPResponse.Status
func (r GetBackdropsResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBackdropsResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetCollectionCollectionIdResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *Collection
}

// Status returns HTTPResponse.Status
func (r GetCollectionCollectionIdResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCollectionCollectionIdResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetDiscoverGenresliderMovieResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *[]struct {
    Backdrops *[]string`json:"backdrops,omitempty"`
    Id *float32`json:"id,omitempty"`
    Name *string`json:"name,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GetDiscoverGenresliderMovieResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDiscoverGenresliderMovieResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetDiscoverGenresliderTvResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *[]struct {
    Backdrops *[]string`json:"backdrops,omitempty"`
    Id *float32`json:"id,omitempty"`
    Name *string`json:"name,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GetDiscoverGenresliderTvResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDiscoverGenresliderTvResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetDiscoverKeywordKeywordIdMoviesResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *struct {
    Page *float32`json:"page,omitempty"`
    Results *[]MovieResult`json:"results,omitempty"`
    TotalPages *float32`json:"totalPages,omitempty"`
    TotalResults *float32`json:"totalResults,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GetDiscoverKeywordKeywordIdMoviesResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDiscoverKeywordKeywordIdMoviesResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetDiscoverMoviesResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *struct {
    Page *float32`json:"page,omitempty"`
    Results *[]MovieResult`json:"results,omitempty"`
    TotalPages *float32`json:"totalPages,omitempty"`
    TotalResults *float32`json:"totalResults,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GetDiscoverMoviesResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDiscoverMoviesResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetDiscoverMoviesGenreGenreIdResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *struct {
    Genre *Genre`json:"genre,omitempty"`
    Page *float32`json:"page,omitempty"`
    Results *[]MovieResult`json:"results,omitempty"`
    TotalPages *float32`json:"totalPages,omitempty"`
    TotalResults *float32`json:"totalResults,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GetDiscoverMoviesGenreGenreIdResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDiscoverMoviesGenreGenreIdResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetDiscoverMoviesLanguageLanguageResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *struct {
    Language *SpokenLanguage`json:"language,omitempty"`
    Page *float32`json:"page,omitempty"`
    Results *[]MovieResult`json:"results,omitempty"`
    TotalPages *float32`json:"totalPages,omitempty"`
    TotalResults *float32`json:"totalResults,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GetDiscoverMoviesLanguageLanguageResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDiscoverMoviesLanguageLanguageResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetDiscoverMoviesStudioStudioIdResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *struct {
    Page *float32`json:"page,omitempty"`
    Results *[]MovieResult`json:"results,omitempty"`
    Studio *ProductionCompany`json:"studio,omitempty"`
    TotalPages *float32`json:"totalPages,omitempty"`
    TotalResults *float32`json:"totalResults,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GetDiscoverMoviesStudioStudioIdResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDiscoverMoviesStudioStudioIdResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetDiscoverMoviesUpcomingResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *struct {
    Page *float32`json:"page,omitempty"`
    Results *[]MovieResult`json:"results,omitempty"`
    TotalPages *float32`json:"totalPages,omitempty"`
    TotalResults *float32`json:"totalResults,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GetDiscoverMoviesUpcomingResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDiscoverMoviesUpcomingResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetDiscoverTrendingResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *struct {
    Page *float32`json:"page,omitempty"`
    Results *[]200_Results_Item`json:"results,omitempty"`
    TotalPages *float32`json:"totalPages,omitempty"`
    TotalResults *float32`json:"totalResults,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GetDiscoverTrendingResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDiscoverTrendingResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetDiscoverTvResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *struct {
    Page *float32`json:"page,omitempty"`
    Results *[]TvResult`json:"results,omitempty"`
    TotalPages *float32`json:"totalPages,omitempty"`
    TotalResults *float32`json:"totalResults,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GetDiscoverTvResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDiscoverTvResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetDiscoverTvGenreGenreIdResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *struct {
    Genre *Genre`json:"genre,omitempty"`
    Page *float32`json:"page,omitempty"`
    Results *[]TvResult`json:"results,omitempty"`
    TotalPages *float32`json:"totalPages,omitempty"`
    TotalResults *float32`json:"totalResults,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GetDiscoverTvGenreGenreIdResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDiscoverTvGenreGenreIdResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetDiscoverTvLanguageLanguageResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *struct {
    Language *SpokenLanguage`json:"language,omitempty"`
    Page *float32`json:"page,omitempty"`
    Results *[]TvResult`json:"results,omitempty"`
    TotalPages *float32`json:"totalPages,omitempty"`
    TotalResults *float32`json:"totalResults,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GetDiscoverTvLanguageLanguageResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDiscoverTvLanguageLanguageResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetDiscoverTvNetworkNetworkIdResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *struct {
    Network *Network`json:"network,omitempty"`
    Page *float32`json:"page,omitempty"`
    Results *[]TvResult`json:"results,omitempty"`
    TotalPages *float32`json:"totalPages,omitempty"`
    TotalResults *float32`json:"totalResults,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GetDiscoverTvNetworkNetworkIdResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDiscoverTvNetworkNetworkIdResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetDiscoverTvUpcomingResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *struct {
    Page *float32`json:"page,omitempty"`
    Results *[]TvResult`json:"results,omitempty"`
    TotalPages *float32`json:"totalPages,omitempty"`
    TotalResults *float32`json:"totalResults,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GetDiscoverTvUpcomingResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDiscoverTvUpcomingResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetDiscoverWatchlistResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *struct {
    Page *float32`json:"page,omitempty"`
    Results *[]struct {
    RatingKey *string`json:"ratingKey,omitempty"`
    Title *string`json:"title,omitempty"`
    TmdbId *float32`json:"tmdbId,omitempty"`
    Type *string`json:"type,omitempty"`
}`json:"results,omitempty"`
    TotalPages *float32`json:"totalPages,omitempty"`
    TotalResults *float32`json:"totalResults,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GetDiscoverWatchlistResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDiscoverWatchlistResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetGenresMovieResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *[]struct {
    Id *float32`json:"id,omitempty"`
    Name *string`json:"name,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GetGenresMovieResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGenresMovieResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetGenresTvResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *[]struct {
    Id *float32`json:"id,omitempty"`
    Name *string`json:"name,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GetGenresTvResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGenresTvResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetIssueResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *struct {
    PageInfo *PageInfo`json:"pageInfo,omitempty"`
    Results *[]Issue`json:"results,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GetIssueResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIssueResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type PostIssueResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON201 *Issue
}

// Status returns HTTPResponse.Status
func (r PostIssueResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostIssueResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetIssueCountResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *struct {
    Audio *float32`json:"audio,omitempty"`
    Closed *float32`json:"closed,omitempty"`
    Open *float32`json:"open,omitempty"`
    Others *float32`json:"others,omitempty"`
    Subtitles *float32`json:"subtitles,omitempty"`
    Total *float32`json:"total,omitempty"`
    Video *float32`json:"video,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GetIssueCountResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIssueCountResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type DeleteIssueIssueIdResponse struct {
    Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIssueIssueIdResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIssueIssueIdResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetIssueIssueIdResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *Issue
}

// Status returns HTTPResponse.Status
func (r GetIssueIssueIdResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIssueIssueIdResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type PostIssueIssueIdCommentResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *Issue
}

// Status returns HTTPResponse.Status
func (r PostIssueIssueIdCommentResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostIssueIssueIdCommentResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type PostIssueIssueIdStatusResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *Issue
}

// Status returns HTTPResponse.Status
func (r PostIssueIssueIdStatusResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostIssueIssueIdStatusResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type DeleteIssueCommentCommentIdResponse struct {
    Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIssueCommentCommentIdResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIssueCommentCommentIdResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetIssueCommentCommentIdResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *IssueComment
}

// Status returns HTTPResponse.Status
func (r GetIssueCommentCommentIdResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIssueCommentCommentIdResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type PutIssueCommentCommentIdResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *IssueComment
}

// Status returns HTTPResponse.Status
func (r PutIssueCommentCommentIdResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutIssueCommentCommentIdResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetKeywordKeywordIdResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *Keyword
}

// Status returns HTTPResponse.Status
func (r GetKeywordKeywordIdResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetKeywordKeywordIdResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetLanguagesResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *[]struct {
    EnglishName *string`json:"english_name,omitempty"`
    Iso6391 *string`json:"iso_639_1,omitempty"`
    Name *string`json:"name,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GetLanguagesResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLanguagesResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetMediaResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *struct {
    PageInfo *PageInfo`json:"pageInfo,omitempty"`
    Results *[]MediaInfo`json:"results,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GetMediaResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMediaResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type DeleteMediaMediaIdResponse struct {
    Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteMediaMediaIdResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteMediaMediaIdResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type DeleteMediaMediaIdFileResponse struct {
    Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteMediaMediaIdFileResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteMediaMediaIdFileResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetMediaMediaIdWatchDataResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *struct {
    Data *struct {
    PlayCount *float32`json:"playCount,omitempty"`
    PlayCount30Days *float32`json:"playCount30Days,omitempty"`
    PlayCount7Days *float32`json:"playCount7Days,omitempty"`
    Users *[]User`json:"users,omitempty"`
}`json:"data,omitempty"`
    Data4k *struct {
    PlayCount *float32`json:"playCount,omitempty"`
    PlayCount30Days *float32`json:"playCount30Days,omitempty"`
    PlayCount7Days *float32`json:"playCount7Days,omitempty"`
    Users *[]User`json:"users,omitempty"`
}`json:"data4k,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GetMediaMediaIdWatchDataResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMediaMediaIdWatchDataResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type PostMediaMediaIdStatusResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *MediaInfo
}

// Status returns HTTPResponse.Status
func (r PostMediaMediaIdStatusResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostMediaMediaIdStatusResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetMovieMovieIdResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *MovieDetails
}

// Status returns HTTPResponse.Status
func (r GetMovieMovieIdResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMovieMovieIdResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetMovieMovieIdRatingsResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *struct {
    AudienceRating *N200AudienceRating`json:"audienceRating,omitempty"`
    AudienceScore *float32`json:"audienceScore,omitempty"`
    CriticsRating *N200CriticsRating`json:"criticsRating,omitempty"`
    CriticsScore *float32`json:"criticsScore,omitempty"`
    Title *string`json:"title,omitempty"`
    Url *string`json:"url,omitempty"`
    Year *float32`json:"year,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GetMovieMovieIdRatingsResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMovieMovieIdRatingsResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetMovieMovieIdRatingscombinedResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *struct {
    Imdb *struct {
    CriticsScore *float32`json:"criticsScore,omitempty"`
    Title *string`json:"title,omitempty"`
    Url *string`json:"url,omitempty"`
}`json:"imdb,omitempty"`
    Rt *struct {
    AudienceRating *N200RtAudienceRating`json:"audienceRating,omitempty"`
    AudienceScore *float32`json:"audienceScore,omitempty"`
    CriticsRating *N200RtCriticsRating`json:"criticsRating,omitempty"`
    CriticsScore *float32`json:"criticsScore,omitempty"`
    Title *string`json:"title,omitempty"`
    Url *string`json:"url,omitempty"`
    Year *float32`json:"year,omitempty"`
}`json:"rt,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GetMovieMovieIdRatingscombinedResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMovieMovieIdRatingscombinedResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetMovieMovieIdRecommendationsResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *struct {
    Page *float32`json:"page,omitempty"`
    Results *[]MovieResult`json:"results,omitempty"`
    TotalPages *float32`json:"totalPages,omitempty"`
    TotalResults *float32`json:"totalResults,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GetMovieMovieIdRecommendationsResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMovieMovieIdRecommendationsResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetMovieMovieIdSimilarResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *struct {
    Page *float32`json:"page,omitempty"`
    Results *[]MovieResult`json:"results,omitempty"`
    TotalPages *float32`json:"totalPages,omitempty"`
    TotalResults *float32`json:"totalResults,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GetMovieMovieIdSimilarResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMovieMovieIdSimilarResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetNetworkNetworkIdResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *ProductionCompany
}

// Status returns HTTPResponse.Status
func (r GetNetworkNetworkIdResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNetworkNetworkIdResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetPersonPersonIdResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *PersonDetails
}

// Status returns HTTPResponse.Status
func (r GetPersonPersonIdResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPersonPersonIdResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetPersonPersonIdCombinedCreditsResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *struct {
    Cast *[]CreditCast`json:"cast,omitempty"`
    Crew *[]CreditCrew`json:"crew,omitempty"`
    Id *float32`json:"id,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GetPersonPersonIdCombinedCreditsResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPersonPersonIdCombinedCreditsResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetRegionsResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *[]struct {
    EnglishName *string`json:"english_name,omitempty"`
    Iso31661 *string`json:"iso_3166_1,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GetRegionsResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRegionsResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetRequestResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *struct {
    PageInfo *PageInfo`json:"pageInfo,omitempty"`
    Results *[]MediaRequest`json:"results,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GetRequestResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRequestResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type PostRequestResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON201 *MediaRequest
}

// Status returns HTTPResponse.Status
func (r PostRequestResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRequestResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetRequestCountResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *struct {
    Approved *float32`json:"approved,omitempty"`
    Available *float32`json:"available,omitempty"`
    Declined *float32`json:"declined,omitempty"`
    Movie *float32`json:"movie,omitempty"`
    Pending *float32`json:"pending,omitempty"`
    Processing *float32`json:"processing,omitempty"`
    Total *float32`json:"total,omitempty"`
    Tv *float32`json:"tv,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GetRequestCountResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRequestCountResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type DeleteRequestRequestIdResponse struct {
    Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteRequestRequestIdResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRequestRequestIdResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetRequestRequestIdResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *MediaRequest
}

// Status returns HTTPResponse.Status
func (r GetRequestRequestIdResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRequestRequestIdResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type PutRequestRequestIdResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *MediaRequest
}

// Status returns HTTPResponse.Status
func (r PutRequestRequestIdResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutRequestRequestIdResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type PostRequestRequestIdRetryResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *MediaRequest
}

// Status returns HTTPResponse.Status
func (r PostRequestRequestIdRetryResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRequestRequestIdRetryResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type PostRequestRequestIdStatusResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *MediaRequest
}

// Status returns HTTPResponse.Status
func (r PostRequestRequestIdStatusResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRequestRequestIdStatusResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetSearchResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *struct {
    Page *float32`json:"page,omitempty"`
    Results *[]200_Results_Item`json:"results,omitempty"`
    TotalPages *float32`json:"totalPages,omitempty"`
    TotalResults *float32`json:"totalResults,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GetSearchResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSearchResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetSearchCompanyResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *struct {
    Page *float32`json:"page,omitempty"`
    Results *[]Company`json:"results,omitempty"`
    TotalPages *float32`json:"totalPages,omitempty"`
    TotalResults *float32`json:"totalResults,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GetSearchCompanyResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSearchCompanyResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetSearchKeywordResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *struct {
    Page *float32`json:"page,omitempty"`
    Results *[]Keyword`json:"results,omitempty"`
    TotalPages *float32`json:"totalPages,omitempty"`
    TotalResults *float32`json:"totalResults,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GetSearchKeywordResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSearchKeywordResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetServiceRadarrResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *[]RadarrSettings
}

// Status returns HTTPResponse.Status
func (r GetServiceRadarrResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServiceRadarrResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetServiceRadarrRadarrIdResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *struct {
    Profiles *ServiceProfile`json:"profiles,omitempty"`
    Server *RadarrSettings`json:"server,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GetServiceRadarrRadarrIdResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServiceRadarrRadarrIdResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetServiceSonarrResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *[]SonarrSettings
}

// Status returns HTTPResponse.Status
func (r GetServiceSonarrResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServiceSonarrResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetServiceSonarrLookupTmdbIdResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *[]SonarrSeries
}

// Status returns HTTPResponse.Status
func (r GetServiceSonarrLookupTmdbIdResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServiceSonarrLookupTmdbIdResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetServiceSonarrSonarrIdResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *struct {
    Profiles *ServiceProfile`json:"profiles,omitempty"`
    Server *SonarrSettings`json:"server,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GetServiceSonarrSonarrIdResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServiceSonarrSonarrIdResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetSettingsAboutResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *struct {
    AppDataPath *string`json:"appDataPath,omitempty"`
    TotalMediaItems *float32`json:"totalMediaItems,omitempty"`
    TotalRequests *float32`json:"totalRequests,omitempty"`
    Tz *string`json:"tz"`
    Version *string`json:"version,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GetSettingsAboutResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsAboutResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetSettingsCacheResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *struct {
    ApiCaches *[]struct {
    Id *string`json:"id,omitempty"`
    Name *string`json:"name,omitempty"`
    Stats *struct {
    Hits *float32`json:"hits,omitempty"`
    Keys *float32`json:"keys,omitempty"`
    Ksize *float32`json:"ksize,omitempty"`
    Misses *float32`json:"misses,omitempty"`
    Vsize *float32`json:"vsize,omitempty"`
}`json:"stats,omitempty"`
}`json:"apiCaches,omitempty"`
    ImageCache *struct {
    Tmdb *struct {
    ImageCount *float32`json:"imageCount,omitempty"`
    Size *float32`json:"size,omitempty"`
}`json:"tmdb,omitempty"`
}`json:"imageCache,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GetSettingsCacheResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsCacheResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type PostSettingsCacheCacheIdFlushResponse struct {
    Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostSettingsCacheCacheIdFlushResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSettingsCacheCacheIdFlushResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetSettingsDiscoverResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *[]DiscoverSlider
}

// Status returns HTTPResponse.Status
func (r GetSettingsDiscoverResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsDiscoverResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type PostSettingsDiscoverResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *[]DiscoverSlider
}

// Status returns HTTPResponse.Status
func (r PostSettingsDiscoverResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSettingsDiscoverResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type PostSettingsDiscoverAddResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *DiscoverSlider
}

// Status returns HTTPResponse.Status
func (r PostSettingsDiscoverAddResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSettingsDiscoverAddResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetSettingsDiscoverResetResponse struct {
    Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSettingsDiscoverResetResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsDiscoverResetResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type DeleteSettingsDiscoverSliderIdResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *DiscoverSlider
}

// Status returns HTTPResponse.Status
func (r DeleteSettingsDiscoverSliderIdResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSettingsDiscoverSliderIdResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type PutSettingsDiscoverSliderIdResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *DiscoverSlider
}

// Status returns HTTPResponse.Status
func (r PutSettingsDiscoverSliderIdResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSettingsDiscoverSliderIdResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type PostSettingsInitializeResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *PublicSettings
}

// Status returns HTTPResponse.Status
func (r PostSettingsInitializeResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSettingsInitializeResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetSettingsJellyfinResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *JellyfinSettings
}

// Status returns HTTPResponse.Status
func (r GetSettingsJellyfinResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsJellyfinResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type PostSettingsJellyfinResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *JellyfinSettings
}

// Status returns HTTPResponse.Status
func (r PostSettingsJellyfinResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSettingsJellyfinResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetSettingsJellyfinLibraryResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *[]JellyfinLibrary
}

// Status returns HTTPResponse.Status
func (r GetSettingsJellyfinLibraryResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsJellyfinLibraryResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetSettingsJellyfinSyncResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *struct {
    CurrentLibrary *JellyfinLibrary`json:"currentLibrary,omitempty"`
    Libraries *[]JellyfinLibrary`json:"libraries,omitempty"`
    Progress *float32`json:"progress,omitempty"`
    Running *bool`json:"running,omitempty"`
    Total *float32`json:"total,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GetSettingsJellyfinSyncResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsJellyfinSyncResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type PostSettingsJellyfinSyncResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *struct {
    CurrentLibrary *JellyfinLibrary`json:"currentLibrary,omitempty"`
    Libraries *[]JellyfinLibrary`json:"libraries,omitempty"`
    Progress *float32`json:"progress,omitempty"`
    Running *bool`json:"running,omitempty"`
    Total *float32`json:"total,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r PostSettingsJellyfinSyncResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSettingsJellyfinSyncResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetSettingsJellyfinUsersResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *[]struct {
    UserId *int`json:"userId,omitempty"`
    Username *string`json:"username,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GetSettingsJellyfinUsersResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsJellyfinUsersResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetSettingsJobsResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *[]Job
}

// Status returns HTTPResponse.Status
func (r GetSettingsJobsResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsJobsResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type PostSettingsJobsJobIdCancelResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *Job
}

// Status returns HTTPResponse.Status
func (r PostSettingsJobsJobIdCancelResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSettingsJobsJobIdCancelResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type PostSettingsJobsJobIdRunResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *Job
}

// Status returns HTTPResponse.Status
func (r PostSettingsJobsJobIdRunResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSettingsJobsJobIdRunResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type PostSettingsJobsJobIdScheduleResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *Job
}

// Status returns HTTPResponse.Status
func (r PostSettingsJobsJobIdScheduleResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSettingsJobsJobIdScheduleResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetSettingsLogsResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *[]struct {
    Label *string`json:"label,omitempty"`
    Level *string`json:"level,omitempty"`
    Message *string`json:"message,omitempty"`
    Timestamp *string`json:"timestamp,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GetSettingsLogsResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsLogsResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetSettingsMainResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *MainSettings
}

// Status returns HTTPResponse.Status
func (r GetSettingsMainResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsMainResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type PostSettingsMainResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *MainSettings
}

// Status returns HTTPResponse.Status
func (r PostSettingsMainResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSettingsMainResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type PostSettingsMainRegenerateResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *MainSettings
}

// Status returns HTTPResponse.Status
func (r PostSettingsMainRegenerateResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSettingsMainRegenerateResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetSettingsNotificationsDiscordResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *DiscordSettings
}

// Status returns HTTPResponse.Status
func (r GetSettingsNotificationsDiscordResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsNotificationsDiscordResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type PostSettingsNotificationsDiscordResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *DiscordSettings
}

// Status returns HTTPResponse.Status
func (r PostSettingsNotificationsDiscordResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSettingsNotificationsDiscordResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type PostSettingsNotificationsDiscordTestResponse struct {
    Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostSettingsNotificationsDiscordTestResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSettingsNotificationsDiscordTestResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetSettingsNotificationsEmailResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *NotificationEmailSettings
}

// Status returns HTTPResponse.Status
func (r GetSettingsNotificationsEmailResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsNotificationsEmailResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type PostSettingsNotificationsEmailResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *NotificationEmailSettings
}

// Status returns HTTPResponse.Status
func (r PostSettingsNotificationsEmailResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSettingsNotificationsEmailResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type PostSettingsNotificationsEmailTestResponse struct {
    Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostSettingsNotificationsEmailTestResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSettingsNotificationsEmailTestResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetSettingsNotificationsGotifyResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *GotifySettings
}

// Status returns HTTPResponse.Status
func (r GetSettingsNotificationsGotifyResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsNotificationsGotifyResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type PostSettingsNotificationsGotifyResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *GotifySettings
}

// Status returns HTTPResponse.Status
func (r PostSettingsNotificationsGotifyResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSettingsNotificationsGotifyResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type PostSettingsNotificationsGotifyTestResponse struct {
    Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostSettingsNotificationsGotifyTestResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSettingsNotificationsGotifyTestResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetSettingsNotificationsLunaseaResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *LunaSeaSettings
}

// Status returns HTTPResponse.Status
func (r GetSettingsNotificationsLunaseaResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsNotificationsLunaseaResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type PostSettingsNotificationsLunaseaResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *LunaSeaSettings
}

// Status returns HTTPResponse.Status
func (r PostSettingsNotificationsLunaseaResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSettingsNotificationsLunaseaResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type PostSettingsNotificationsLunaseaTestResponse struct {
    Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostSettingsNotificationsLunaseaTestResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSettingsNotificationsLunaseaTestResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetSettingsNotificationsPushbulletResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *PushbulletSettings
}

// Status returns HTTPResponse.Status
func (r GetSettingsNotificationsPushbulletResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsNotificationsPushbulletResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type PostSettingsNotificationsPushbulletResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *PushbulletSettings
}

// Status returns HTTPResponse.Status
func (r PostSettingsNotificationsPushbulletResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSettingsNotificationsPushbulletResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type PostSettingsNotificationsPushbulletTestResponse struct {
    Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostSettingsNotificationsPushbulletTestResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSettingsNotificationsPushbulletTestResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetSettingsNotificationsPushoverResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *PushoverSettings
}

// Status returns HTTPResponse.Status
func (r GetSettingsNotificationsPushoverResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsNotificationsPushoverResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type PostSettingsNotificationsPushoverResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *PushoverSettings
}

// Status returns HTTPResponse.Status
func (r PostSettingsNotificationsPushoverResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSettingsNotificationsPushoverResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetSettingsNotificationsPushoverSoundsResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *[]struct {
    Description *string`json:"description,omitempty"`
    Name *string`json:"name,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GetSettingsNotificationsPushoverSoundsResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsNotificationsPushoverSoundsResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type PostSettingsNotificationsPushoverTestResponse struct {
    Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostSettingsNotificationsPushoverTestResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSettingsNotificationsPushoverTestResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetSettingsNotificationsSlackResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *SlackSettings
}

// Status returns HTTPResponse.Status
func (r GetSettingsNotificationsSlackResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsNotificationsSlackResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type PostSettingsNotificationsSlackResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *SlackSettings
}

// Status returns HTTPResponse.Status
func (r PostSettingsNotificationsSlackResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSettingsNotificationsSlackResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type PostSettingsNotificationsSlackTestResponse struct {
    Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostSettingsNotificationsSlackTestResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSettingsNotificationsSlackTestResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetSettingsNotificationsTelegramResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *TelegramSettings
}

// Status returns HTTPResponse.Status
func (r GetSettingsNotificationsTelegramResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsNotificationsTelegramResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type PostSettingsNotificationsTelegramResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *TelegramSettings
}

// Status returns HTTPResponse.Status
func (r PostSettingsNotificationsTelegramResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSettingsNotificationsTelegramResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type PostSettingsNotificationsTelegramTestResponse struct {
    Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostSettingsNotificationsTelegramTestResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSettingsNotificationsTelegramTestResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetSettingsNotificationsWebhookResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *WebhookSettings
}

// Status returns HTTPResponse.Status
func (r GetSettingsNotificationsWebhookResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsNotificationsWebhookResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type PostSettingsNotificationsWebhookResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *WebhookSettings
}

// Status returns HTTPResponse.Status
func (r PostSettingsNotificationsWebhookResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSettingsNotificationsWebhookResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type PostSettingsNotificationsWebhookTestResponse struct {
    Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostSettingsNotificationsWebhookTestResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSettingsNotificationsWebhookTestResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetSettingsNotificationsWebpushResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *WebPushSettings
}

// Status returns HTTPResponse.Status
func (r GetSettingsNotificationsWebpushResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsNotificationsWebpushResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type PostSettingsNotificationsWebpushResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *WebPushSettings
}

// Status returns HTTPResponse.Status
func (r PostSettingsNotificationsWebpushResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSettingsNotificationsWebpushResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type PostSettingsNotificationsWebpushTestResponse struct {
    Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostSettingsNotificationsWebpushTestResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSettingsNotificationsWebpushTestResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetSettingsPlexResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *PlexSettings
}

// Status returns HTTPResponse.Status
func (r GetSettingsPlexResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsPlexResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type PostSettingsPlexResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *PlexSettings
}

// Status returns HTTPResponse.Status
func (r PostSettingsPlexResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSettingsPlexResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetSettingsPlexDevicesServersResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *[]PlexDevice
}

// Status returns HTTPResponse.Status
func (r GetSettingsPlexDevicesServersResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsPlexDevicesServersResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetSettingsPlexLibraryResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *[]PlexLibrary
}

// Status returns HTTPResponse.Status
func (r GetSettingsPlexLibraryResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsPlexLibraryResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetSettingsPlexSyncResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *struct {
    CurrentLibrary *PlexLibrary`json:"currentLibrary,omitempty"`
    Libraries *[]PlexLibrary`json:"libraries,omitempty"`
    Progress *float32`json:"progress,omitempty"`
    Running *bool`json:"running,omitempty"`
    Total *float32`json:"total,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GetSettingsPlexSyncResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsPlexSyncResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type PostSettingsPlexSyncResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *struct {
    CurrentLibrary *PlexLibrary`json:"currentLibrary,omitempty"`
    Libraries *[]PlexLibrary`json:"libraries,omitempty"`
    Progress *float32`json:"progress,omitempty"`
    Running *bool`json:"running,omitempty"`
    Total *float32`json:"total,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r PostSettingsPlexSyncResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSettingsPlexSyncResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetSettingsPlexUsersResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *[]struct {
    Email *string`json:"email,omitempty"`
    Id *string`json:"id,omitempty"`
    Thumb *string`json:"thumb,omitempty"`
    Title *string`json:"title,omitempty"`
    Username *string`json:"username,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GetSettingsPlexUsersResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsPlexUsersResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetSettingsPublicResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *PublicSettings
}

// Status returns HTTPResponse.Status
func (r GetSettingsPublicResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsPublicResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetSettingsRadarrResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *[]RadarrSettings
}

// Status returns HTTPResponse.Status
func (r GetSettingsRadarrResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsRadarrResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type PostSettingsRadarrResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON201 *RadarrSettings
}

// Status returns HTTPResponse.Status
func (r PostSettingsRadarrResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSettingsRadarrResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type PostSettingsRadarrTestResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *struct {
    Profiles *[]ServiceProfile`json:"profiles,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r PostSettingsRadarrTestResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSettingsRadarrTestResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type DeleteSettingsRadarrRadarrIdResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *RadarrSettings
}

// Status returns HTTPResponse.Status
func (r DeleteSettingsRadarrRadarrIdResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSettingsRadarrRadarrIdResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type PutSettingsRadarrRadarrIdResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *RadarrSettings
}

// Status returns HTTPResponse.Status
func (r PutSettingsRadarrRadarrIdResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSettingsRadarrRadarrIdResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetSettingsRadarrRadarrIdProfilesResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *[]ServiceProfile
}

// Status returns HTTPResponse.Status
func (r GetSettingsRadarrRadarrIdProfilesResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsRadarrRadarrIdProfilesResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetSettingsSonarrResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *[]SonarrSettings
}

// Status returns HTTPResponse.Status
func (r GetSettingsSonarrResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsSonarrResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type PostSettingsSonarrResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON201 *SonarrSettings
}

// Status returns HTTPResponse.Status
func (r PostSettingsSonarrResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSettingsSonarrResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type PostSettingsSonarrTestResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *struct {
    Profiles *[]ServiceProfile`json:"profiles,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r PostSettingsSonarrTestResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSettingsSonarrTestResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type DeleteSettingsSonarrSonarrIdResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *SonarrSettings
}

// Status returns HTTPResponse.Status
func (r DeleteSettingsSonarrSonarrIdResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSettingsSonarrSonarrIdResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type PutSettingsSonarrSonarrIdResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *SonarrSettings
}

// Status returns HTTPResponse.Status
func (r PutSettingsSonarrSonarrIdResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSettingsSonarrSonarrIdResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetSettingsTautulliResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *TautulliSettings
}

// Status returns HTTPResponse.Status
func (r GetSettingsTautulliResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettingsTautulliResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type PostSettingsTautulliResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *TautulliSettings
}

// Status returns HTTPResponse.Status
func (r PostSettingsTautulliResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSettingsTautulliResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetStatusResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *struct {
    CommitTag *string`json:"commitTag,omitempty"`
    CommitsBehind *float32`json:"commitsBehind,omitempty"`
    RestartRequired *bool`json:"restartRequired,omitempty"`
    UpdateAvailable *bool`json:"updateAvailable,omitempty"`
    Version *string`json:"version,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GetStatusResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatusResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetStatusAppdataResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *struct {
    AppData *bool`json:"appData,omitempty"`
    AppDataPath *string`json:"appDataPath,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GetStatusAppdataResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatusAppdataResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetStudioStudioIdResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *ProductionCompany
}

// Status returns HTTPResponse.Status
func (r GetStudioStudioIdResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStudioStudioIdResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetTvTvIdResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *TvDetails
}

// Status returns HTTPResponse.Status
func (r GetTvTvIdResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTvTvIdResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetTvTvIdRatingsResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *struct {
    CriticsRating *N200CriticsRating`json:"criticsRating,omitempty"`
    CriticsScore *float32`json:"criticsScore,omitempty"`
    Title *string`json:"title,omitempty"`
    Url *string`json:"url,omitempty"`
    Year *float32`json:"year,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GetTvTvIdRatingsResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTvTvIdRatingsResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetTvTvIdRecommendationsResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *struct {
    Page *float32`json:"page,omitempty"`
    Results *[]TvResult`json:"results,omitempty"`
    TotalPages *float32`json:"totalPages,omitempty"`
    TotalResults *float32`json:"totalResults,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GetTvTvIdRecommendationsResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTvTvIdRecommendationsResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetTvTvIdSeasonSeasonIdResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *Season
}

// Status returns HTTPResponse.Status
func (r GetTvTvIdSeasonSeasonIdResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTvTvIdSeasonSeasonIdResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetTvTvIdSimilarResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *struct {
    Page *float32`json:"page,omitempty"`
    Results *[]TvResult`json:"results,omitempty"`
    TotalPages *float32`json:"totalPages,omitempty"`
    TotalResults *float32`json:"totalResults,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GetTvTvIdSimilarResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTvTvIdSimilarResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetUserResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *struct {
    PageInfo *PageInfo`json:"pageInfo,omitempty"`
    Results *[]User`json:"results,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GetUserResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type PostUserResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON201 *User
}

// Status returns HTTPResponse.Status
func (r PostUserResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUserResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type PutUserResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *[]User
}

// Status returns HTTPResponse.Status
func (r PutUserResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutUserResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type PostUserImportFromJellyfinResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON201 *[]User
}

// Status returns HTTPResponse.Status
func (r PostUserImportFromJellyfinResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUserImportFromJellyfinResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type PostUserImportFromPlexResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON201 *[]User
}

// Status returns HTTPResponse.Status
func (r PostUserImportFromPlexResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUserImportFromPlexResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type PostUserRegisterPushSubscriptionResponse struct {
    Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostUserRegisterPushSubscriptionResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUserRegisterPushSubscriptionResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type DeleteUserUserIdResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *User
}

// Status returns HTTPResponse.Status
func (r DeleteUserUserIdResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUserUserIdResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetUserUserIdResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *User
}

// Status returns HTTPResponse.Status
func (r GetUserUserIdResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserUserIdResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type PutUserUserIdResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *User
}

// Status returns HTTPResponse.Status
func (r PutUserUserIdResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutUserUserIdResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetUserUserIdQuotaResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *struct {
    Movie *struct {
    Days *float32`json:"days,omitempty"`
    Limit *float32`json:"limit,omitempty"`
    Remaining *float32`json:"remaining,omitempty"`
    Restricted *bool`json:"restricted,omitempty"`
    Used *float32`json:"used,omitempty"`
}`json:"movie,omitempty"`
    Tv *struct {
    Days *float32`json:"days,omitempty"`
    Limit *float32`json:"limit,omitempty"`
    Remaining *float32`json:"remaining,omitempty"`
    Restricted *bool`json:"restricted,omitempty"`
    Used *float32`json:"used,omitempty"`
}`json:"tv,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GetUserUserIdQuotaResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserUserIdQuotaResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetUserUserIdRequestsResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *struct {
    PageInfo *PageInfo`json:"pageInfo,omitempty"`
    Results *[]MediaRequest`json:"results,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GetUserUserIdRequestsResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserUserIdRequestsResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetUserUserIdSettingsMainResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *struct {
    Username *string`json:"username,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GetUserUserIdSettingsMainResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserUserIdSettingsMainResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type PostUserUserIdSettingsMainResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *struct {
    Username *string`json:"username,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r PostUserUserIdSettingsMainResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUserUserIdSettingsMainResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetUserUserIdSettingsNotificationsResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *UserSettingsNotifications
}

// Status returns HTTPResponse.Status
func (r GetUserUserIdSettingsNotificationsResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserUserIdSettingsNotificationsResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type PostUserUserIdSettingsNotificationsResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *UserSettingsNotifications
}

// Status returns HTTPResponse.Status
func (r PostUserUserIdSettingsNotificationsResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUserUserIdSettingsNotificationsResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetUserUserIdSettingsPasswordResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *struct {
    HasPassword *bool`json:"hasPassword,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GetUserUserIdSettingsPasswordResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserUserIdSettingsPasswordResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type PostUserUserIdSettingsPasswordResponse struct {
    Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostUserUserIdSettingsPasswordResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUserUserIdSettingsPasswordResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetUserUserIdSettingsPermissionsResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *struct {
    Permissions *float32`json:"permissions,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GetUserUserIdSettingsPermissionsResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserUserIdSettingsPermissionsResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type PostUserUserIdSettingsPermissionsResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *struct {
    Permissions *float32`json:"permissions,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r PostUserUserIdSettingsPermissionsResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUserUserIdSettingsPermissionsResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetUserUserIdWatchDataResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *struct {
    PlayCount *float32`json:"playCount,omitempty"`
    RecentlyWatched *[]MediaInfo`json:"recentlyWatched,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GetUserUserIdWatchDataResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserUserIdWatchDataResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetUserUserIdWatchlistResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *struct {
    Page *float32`json:"page,omitempty"`
    Results *[]struct {
    RatingKey *string`json:"ratingKey,omitempty"`
    Title *string`json:"title,omitempty"`
    TmdbId *float32`json:"tmdbId,omitempty"`
    Type *string`json:"type,omitempty"`
}`json:"results,omitempty"`
    TotalPages *float32`json:"totalPages,omitempty"`
    TotalResults *float32`json:"totalResults,omitempty"`
}
}

// Status returns HTTPResponse.Status
func (r GetUserUserIdWatchlistResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserUserIdWatchlistResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type PostWatchlistResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *Watchlist
}

// Status returns HTTPResponse.Status
func (r PostWatchlistResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostWatchlistResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type DeleteWatchlistTmdbIdResponse struct {
    Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteWatchlistTmdbIdResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteWatchlistTmdbIdResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetWatchprovidersMoviesResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *[]WatchProviderDetails
}

// Status returns HTTPResponse.Status
func (r GetWatchprovidersMoviesResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWatchprovidersMoviesResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetWatchprovidersRegionsResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *[]WatchProviderRegion
}

// Status returns HTTPResponse.Status
func (r GetWatchprovidersRegionsResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWatchprovidersRegionsResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}

type GetWatchprovidersTvResponse struct {
    Body         []byte
	HTTPResponse *http.Response
    JSON200 *[]WatchProviderDetails
}

// Status returns HTTPResponse.Status
func (r GetWatchprovidersTvResponse) Status() string {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.Status
    }
    return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWatchprovidersTvResponse) StatusCode() int {
    if r.HTTPResponse != nil {
        return r.HTTPResponse.StatusCode
    }
    return 0
}






// PostAuthJellyfinWithBodyWithResponse request with arbitrary body returning *PostAuthJellyfinResponse
func (c *ClientWithResponses) PostAuthJellyfinWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostAuthJellyfinResponse, error){
    rsp, err := c.PostAuthJellyfinWithBody(ctx, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostAuthJellyfinResponse(rsp)
}


func (c *ClientWithResponses) PostAuthJellyfinWithResponse(ctx context.Context, body PostAuthJellyfinJSONRequestBody, reqEditors... RequestEditorFn) (*PostAuthJellyfinResponse, error) {
    rsp, err := c.PostAuthJellyfin(ctx, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostAuthJellyfinResponse(rsp)
}






// PostAuthLocalWithBodyWithResponse request with arbitrary body returning *PostAuthLocalResponse
func (c *ClientWithResponses) PostAuthLocalWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostAuthLocalResponse, error){
    rsp, err := c.PostAuthLocalWithBody(ctx, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostAuthLocalResponse(rsp)
}


func (c *ClientWithResponses) PostAuthLocalWithResponse(ctx context.Context, body PostAuthLocalJSONRequestBody, reqEditors... RequestEditorFn) (*PostAuthLocalResponse, error) {
    rsp, err := c.PostAuthLocal(ctx, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostAuthLocalResponse(rsp)
}






// PostAuthLogoutWithResponse request returning *PostAuthLogoutResponse
func (c *ClientWithResponses) PostAuthLogoutWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*PostAuthLogoutResponse, error){
    rsp, err := c.PostAuthLogout(ctx, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostAuthLogoutResponse(rsp)
}






// GetAuthMeWithResponse request returning *GetAuthMeResponse
func (c *ClientWithResponses) GetAuthMeWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*GetAuthMeResponse, error){
    rsp, err := c.GetAuthMe(ctx, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetAuthMeResponse(rsp)
}






// PostAuthPlexWithBodyWithResponse request with arbitrary body returning *PostAuthPlexResponse
func (c *ClientWithResponses) PostAuthPlexWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostAuthPlexResponse, error){
    rsp, err := c.PostAuthPlexWithBody(ctx, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostAuthPlexResponse(rsp)
}


func (c *ClientWithResponses) PostAuthPlexWithResponse(ctx context.Context, body PostAuthPlexJSONRequestBody, reqEditors... RequestEditorFn) (*PostAuthPlexResponse, error) {
    rsp, err := c.PostAuthPlex(ctx, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostAuthPlexResponse(rsp)
}






// PostAuthResetPasswordWithBodyWithResponse request with arbitrary body returning *PostAuthResetPasswordResponse
func (c *ClientWithResponses) PostAuthResetPasswordWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostAuthResetPasswordResponse, error){
    rsp, err := c.PostAuthResetPasswordWithBody(ctx, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostAuthResetPasswordResponse(rsp)
}


func (c *ClientWithResponses) PostAuthResetPasswordWithResponse(ctx context.Context, body PostAuthResetPasswordJSONRequestBody, reqEditors... RequestEditorFn) (*PostAuthResetPasswordResponse, error) {
    rsp, err := c.PostAuthResetPassword(ctx, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostAuthResetPasswordResponse(rsp)
}






// PostAuthResetPasswordGuidWithBodyWithResponse request with arbitrary body returning *PostAuthResetPasswordGuidResponse
func (c *ClientWithResponses) PostAuthResetPasswordGuidWithBodyWithResponse(ctx context.Context, guid string, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostAuthResetPasswordGuidResponse, error){
    rsp, err := c.PostAuthResetPasswordGuidWithBody(ctx, guid, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostAuthResetPasswordGuidResponse(rsp)
}


func (c *ClientWithResponses) PostAuthResetPasswordGuidWithResponse(ctx context.Context, guid string, body PostAuthResetPasswordGuidJSONRequestBody, reqEditors... RequestEditorFn) (*PostAuthResetPasswordGuidResponse, error) {
    rsp, err := c.PostAuthResetPasswordGuid(ctx, guid, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostAuthResetPasswordGuidResponse(rsp)
}






// GetBackdropsWithResponse request returning *GetBackdropsResponse
func (c *ClientWithResponses) GetBackdropsWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*GetBackdropsResponse, error){
    rsp, err := c.GetBackdrops(ctx, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetBackdropsResponse(rsp)
}






// GetCollectionCollectionIdWithResponse request returning *GetCollectionCollectionIdResponse
func (c *ClientWithResponses) GetCollectionCollectionIdWithResponse(ctx context.Context, collectionId float32, params *GetCollectionCollectionIdParams, reqEditors... RequestEditorFn) (*GetCollectionCollectionIdResponse, error){
    rsp, err := c.GetCollectionCollectionId(ctx, collectionId, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetCollectionCollectionIdResponse(rsp)
}






// GetDiscoverGenresliderMovieWithResponse request returning *GetDiscoverGenresliderMovieResponse
func (c *ClientWithResponses) GetDiscoverGenresliderMovieWithResponse(ctx context.Context, params *GetDiscoverGenresliderMovieParams, reqEditors... RequestEditorFn) (*GetDiscoverGenresliderMovieResponse, error){
    rsp, err := c.GetDiscoverGenresliderMovie(ctx, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetDiscoverGenresliderMovieResponse(rsp)
}






// GetDiscoverGenresliderTvWithResponse request returning *GetDiscoverGenresliderTvResponse
func (c *ClientWithResponses) GetDiscoverGenresliderTvWithResponse(ctx context.Context, params *GetDiscoverGenresliderTvParams, reqEditors... RequestEditorFn) (*GetDiscoverGenresliderTvResponse, error){
    rsp, err := c.GetDiscoverGenresliderTv(ctx, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetDiscoverGenresliderTvResponse(rsp)
}






// GetDiscoverKeywordKeywordIdMoviesWithResponse request returning *GetDiscoverKeywordKeywordIdMoviesResponse
func (c *ClientWithResponses) GetDiscoverKeywordKeywordIdMoviesWithResponse(ctx context.Context, keywordId float32, params *GetDiscoverKeywordKeywordIdMoviesParams, reqEditors... RequestEditorFn) (*GetDiscoverKeywordKeywordIdMoviesResponse, error){
    rsp, err := c.GetDiscoverKeywordKeywordIdMovies(ctx, keywordId, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetDiscoverKeywordKeywordIdMoviesResponse(rsp)
}






// GetDiscoverMoviesWithResponse request returning *GetDiscoverMoviesResponse
func (c *ClientWithResponses) GetDiscoverMoviesWithResponse(ctx context.Context, params *GetDiscoverMoviesParams, reqEditors... RequestEditorFn) (*GetDiscoverMoviesResponse, error){
    rsp, err := c.GetDiscoverMovies(ctx, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetDiscoverMoviesResponse(rsp)
}






// GetDiscoverMoviesGenreGenreIdWithResponse request returning *GetDiscoverMoviesGenreGenreIdResponse
func (c *ClientWithResponses) GetDiscoverMoviesGenreGenreIdWithResponse(ctx context.Context, genreId string, params *GetDiscoverMoviesGenreGenreIdParams, reqEditors... RequestEditorFn) (*GetDiscoverMoviesGenreGenreIdResponse, error){
    rsp, err := c.GetDiscoverMoviesGenreGenreId(ctx, genreId, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetDiscoverMoviesGenreGenreIdResponse(rsp)
}






// GetDiscoverMoviesLanguageLanguageWithResponse request returning *GetDiscoverMoviesLanguageLanguageResponse
func (c *ClientWithResponses) GetDiscoverMoviesLanguageLanguageWithResponse(ctx context.Context, language string, params *GetDiscoverMoviesLanguageLanguageParams, reqEditors... RequestEditorFn) (*GetDiscoverMoviesLanguageLanguageResponse, error){
    rsp, err := c.GetDiscoverMoviesLanguageLanguage(ctx, language, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetDiscoverMoviesLanguageLanguageResponse(rsp)
}






// GetDiscoverMoviesStudioStudioIdWithResponse request returning *GetDiscoverMoviesStudioStudioIdResponse
func (c *ClientWithResponses) GetDiscoverMoviesStudioStudioIdWithResponse(ctx context.Context, studioId string, params *GetDiscoverMoviesStudioStudioIdParams, reqEditors... RequestEditorFn) (*GetDiscoverMoviesStudioStudioIdResponse, error){
    rsp, err := c.GetDiscoverMoviesStudioStudioId(ctx, studioId, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetDiscoverMoviesStudioStudioIdResponse(rsp)
}






// GetDiscoverMoviesUpcomingWithResponse request returning *GetDiscoverMoviesUpcomingResponse
func (c *ClientWithResponses) GetDiscoverMoviesUpcomingWithResponse(ctx context.Context, params *GetDiscoverMoviesUpcomingParams, reqEditors... RequestEditorFn) (*GetDiscoverMoviesUpcomingResponse, error){
    rsp, err := c.GetDiscoverMoviesUpcoming(ctx, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetDiscoverMoviesUpcomingResponse(rsp)
}






// GetDiscoverTrendingWithResponse request returning *GetDiscoverTrendingResponse
func (c *ClientWithResponses) GetDiscoverTrendingWithResponse(ctx context.Context, params *GetDiscoverTrendingParams, reqEditors... RequestEditorFn) (*GetDiscoverTrendingResponse, error){
    rsp, err := c.GetDiscoverTrending(ctx, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetDiscoverTrendingResponse(rsp)
}






// GetDiscoverTvWithResponse request returning *GetDiscoverTvResponse
func (c *ClientWithResponses) GetDiscoverTvWithResponse(ctx context.Context, params *GetDiscoverTvParams, reqEditors... RequestEditorFn) (*GetDiscoverTvResponse, error){
    rsp, err := c.GetDiscoverTv(ctx, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetDiscoverTvResponse(rsp)
}






// GetDiscoverTvGenreGenreIdWithResponse request returning *GetDiscoverTvGenreGenreIdResponse
func (c *ClientWithResponses) GetDiscoverTvGenreGenreIdWithResponse(ctx context.Context, genreId string, params *GetDiscoverTvGenreGenreIdParams, reqEditors... RequestEditorFn) (*GetDiscoverTvGenreGenreIdResponse, error){
    rsp, err := c.GetDiscoverTvGenreGenreId(ctx, genreId, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetDiscoverTvGenreGenreIdResponse(rsp)
}






// GetDiscoverTvLanguageLanguageWithResponse request returning *GetDiscoverTvLanguageLanguageResponse
func (c *ClientWithResponses) GetDiscoverTvLanguageLanguageWithResponse(ctx context.Context, language string, params *GetDiscoverTvLanguageLanguageParams, reqEditors... RequestEditorFn) (*GetDiscoverTvLanguageLanguageResponse, error){
    rsp, err := c.GetDiscoverTvLanguageLanguage(ctx, language, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetDiscoverTvLanguageLanguageResponse(rsp)
}






// GetDiscoverTvNetworkNetworkIdWithResponse request returning *GetDiscoverTvNetworkNetworkIdResponse
func (c *ClientWithResponses) GetDiscoverTvNetworkNetworkIdWithResponse(ctx context.Context, networkId string, params *GetDiscoverTvNetworkNetworkIdParams, reqEditors... RequestEditorFn) (*GetDiscoverTvNetworkNetworkIdResponse, error){
    rsp, err := c.GetDiscoverTvNetworkNetworkId(ctx, networkId, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetDiscoverTvNetworkNetworkIdResponse(rsp)
}






// GetDiscoverTvUpcomingWithResponse request returning *GetDiscoverTvUpcomingResponse
func (c *ClientWithResponses) GetDiscoverTvUpcomingWithResponse(ctx context.Context, params *GetDiscoverTvUpcomingParams, reqEditors... RequestEditorFn) (*GetDiscoverTvUpcomingResponse, error){
    rsp, err := c.GetDiscoverTvUpcoming(ctx, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetDiscoverTvUpcomingResponse(rsp)
}






// GetDiscoverWatchlistWithResponse request returning *GetDiscoverWatchlistResponse
func (c *ClientWithResponses) GetDiscoverWatchlistWithResponse(ctx context.Context, params *GetDiscoverWatchlistParams, reqEditors... RequestEditorFn) (*GetDiscoverWatchlistResponse, error){
    rsp, err := c.GetDiscoverWatchlist(ctx, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetDiscoverWatchlistResponse(rsp)
}






// GetGenresMovieWithResponse request returning *GetGenresMovieResponse
func (c *ClientWithResponses) GetGenresMovieWithResponse(ctx context.Context, params *GetGenresMovieParams, reqEditors... RequestEditorFn) (*GetGenresMovieResponse, error){
    rsp, err := c.GetGenresMovie(ctx, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetGenresMovieResponse(rsp)
}






// GetGenresTvWithResponse request returning *GetGenresTvResponse
func (c *ClientWithResponses) GetGenresTvWithResponse(ctx context.Context, params *GetGenresTvParams, reqEditors... RequestEditorFn) (*GetGenresTvResponse, error){
    rsp, err := c.GetGenresTv(ctx, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetGenresTvResponse(rsp)
}






// GetIssueWithResponse request returning *GetIssueResponse
func (c *ClientWithResponses) GetIssueWithResponse(ctx context.Context, params *GetIssueParams, reqEditors... RequestEditorFn) (*GetIssueResponse, error){
    rsp, err := c.GetIssue(ctx, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetIssueResponse(rsp)
}






// PostIssueWithBodyWithResponse request with arbitrary body returning *PostIssueResponse
func (c *ClientWithResponses) PostIssueWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostIssueResponse, error){
    rsp, err := c.PostIssueWithBody(ctx, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostIssueResponse(rsp)
}


func (c *ClientWithResponses) PostIssueWithResponse(ctx context.Context, body PostIssueJSONRequestBody, reqEditors... RequestEditorFn) (*PostIssueResponse, error) {
    rsp, err := c.PostIssue(ctx, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostIssueResponse(rsp)
}






// GetIssueCountWithResponse request returning *GetIssueCountResponse
func (c *ClientWithResponses) GetIssueCountWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*GetIssueCountResponse, error){
    rsp, err := c.GetIssueCount(ctx, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetIssueCountResponse(rsp)
}






// DeleteIssueIssueIdWithResponse request returning *DeleteIssueIssueIdResponse
func (c *ClientWithResponses) DeleteIssueIssueIdWithResponse(ctx context.Context, issueId string, reqEditors... RequestEditorFn) (*DeleteIssueIssueIdResponse, error){
    rsp, err := c.DeleteIssueIssueId(ctx, issueId, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseDeleteIssueIssueIdResponse(rsp)
}






// GetIssueIssueIdWithResponse request returning *GetIssueIssueIdResponse
func (c *ClientWithResponses) GetIssueIssueIdWithResponse(ctx context.Context, issueId float32, reqEditors... RequestEditorFn) (*GetIssueIssueIdResponse, error){
    rsp, err := c.GetIssueIssueId(ctx, issueId, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetIssueIssueIdResponse(rsp)
}






// PostIssueIssueIdCommentWithBodyWithResponse request with arbitrary body returning *PostIssueIssueIdCommentResponse
func (c *ClientWithResponses) PostIssueIssueIdCommentWithBodyWithResponse(ctx context.Context, issueId float32, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostIssueIssueIdCommentResponse, error){
    rsp, err := c.PostIssueIssueIdCommentWithBody(ctx, issueId, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostIssueIssueIdCommentResponse(rsp)
}


func (c *ClientWithResponses) PostIssueIssueIdCommentWithResponse(ctx context.Context, issueId float32, body PostIssueIssueIdCommentJSONRequestBody, reqEditors... RequestEditorFn) (*PostIssueIssueIdCommentResponse, error) {
    rsp, err := c.PostIssueIssueIdComment(ctx, issueId, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostIssueIssueIdCommentResponse(rsp)
}






// PostIssueIssueIdStatusWithResponse request returning *PostIssueIssueIdStatusResponse
func (c *ClientWithResponses) PostIssueIssueIdStatusWithResponse(ctx context.Context, issueId string, status PostIssueIssueIdStatusParamsStatus, reqEditors... RequestEditorFn) (*PostIssueIssueIdStatusResponse, error){
    rsp, err := c.PostIssueIssueIdStatus(ctx, issueId, status, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostIssueIssueIdStatusResponse(rsp)
}






// DeleteIssueCommentCommentIdWithResponse request returning *DeleteIssueCommentCommentIdResponse
func (c *ClientWithResponses) DeleteIssueCommentCommentIdWithResponse(ctx context.Context, commentId string, reqEditors... RequestEditorFn) (*DeleteIssueCommentCommentIdResponse, error){
    rsp, err := c.DeleteIssueCommentCommentId(ctx, commentId, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseDeleteIssueCommentCommentIdResponse(rsp)
}






// GetIssueCommentCommentIdWithResponse request returning *GetIssueCommentCommentIdResponse
func (c *ClientWithResponses) GetIssueCommentCommentIdWithResponse(ctx context.Context, commentId string, reqEditors... RequestEditorFn) (*GetIssueCommentCommentIdResponse, error){
    rsp, err := c.GetIssueCommentCommentId(ctx, commentId, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetIssueCommentCommentIdResponse(rsp)
}






// PutIssueCommentCommentIdWithBodyWithResponse request with arbitrary body returning *PutIssueCommentCommentIdResponse
func (c *ClientWithResponses) PutIssueCommentCommentIdWithBodyWithResponse(ctx context.Context, commentId string, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PutIssueCommentCommentIdResponse, error){
    rsp, err := c.PutIssueCommentCommentIdWithBody(ctx, commentId, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePutIssueCommentCommentIdResponse(rsp)
}


func (c *ClientWithResponses) PutIssueCommentCommentIdWithResponse(ctx context.Context, commentId string, body PutIssueCommentCommentIdJSONRequestBody, reqEditors... RequestEditorFn) (*PutIssueCommentCommentIdResponse, error) {
    rsp, err := c.PutIssueCommentCommentId(ctx, commentId, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePutIssueCommentCommentIdResponse(rsp)
}






// GetKeywordKeywordIdWithResponse request returning *GetKeywordKeywordIdResponse
func (c *ClientWithResponses) GetKeywordKeywordIdWithResponse(ctx context.Context, keywordId float32, reqEditors... RequestEditorFn) (*GetKeywordKeywordIdResponse, error){
    rsp, err := c.GetKeywordKeywordId(ctx, keywordId, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetKeywordKeywordIdResponse(rsp)
}






// GetLanguagesWithResponse request returning *GetLanguagesResponse
func (c *ClientWithResponses) GetLanguagesWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*GetLanguagesResponse, error){
    rsp, err := c.GetLanguages(ctx, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetLanguagesResponse(rsp)
}






// GetMediaWithResponse request returning *GetMediaResponse
func (c *ClientWithResponses) GetMediaWithResponse(ctx context.Context, params *GetMediaParams, reqEditors... RequestEditorFn) (*GetMediaResponse, error){
    rsp, err := c.GetMedia(ctx, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetMediaResponse(rsp)
}






// DeleteMediaMediaIdWithResponse request returning *DeleteMediaMediaIdResponse
func (c *ClientWithResponses) DeleteMediaMediaIdWithResponse(ctx context.Context, mediaId string, reqEditors... RequestEditorFn) (*DeleteMediaMediaIdResponse, error){
    rsp, err := c.DeleteMediaMediaId(ctx, mediaId, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseDeleteMediaMediaIdResponse(rsp)
}






// DeleteMediaMediaIdFileWithResponse request returning *DeleteMediaMediaIdFileResponse
func (c *ClientWithResponses) DeleteMediaMediaIdFileWithResponse(ctx context.Context, mediaId string, reqEditors... RequestEditorFn) (*DeleteMediaMediaIdFileResponse, error){
    rsp, err := c.DeleteMediaMediaIdFile(ctx, mediaId, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseDeleteMediaMediaIdFileResponse(rsp)
}






// GetMediaMediaIdWatchDataWithResponse request returning *GetMediaMediaIdWatchDataResponse
func (c *ClientWithResponses) GetMediaMediaIdWatchDataWithResponse(ctx context.Context, mediaId string, reqEditors... RequestEditorFn) (*GetMediaMediaIdWatchDataResponse, error){
    rsp, err := c.GetMediaMediaIdWatchData(ctx, mediaId, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetMediaMediaIdWatchDataResponse(rsp)
}






// PostMediaMediaIdStatusWithBodyWithResponse request with arbitrary body returning *PostMediaMediaIdStatusResponse
func (c *ClientWithResponses) PostMediaMediaIdStatusWithBodyWithResponse(ctx context.Context, mediaId string, status PostMediaMediaIdStatusParamsStatus, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostMediaMediaIdStatusResponse, error){
    rsp, err := c.PostMediaMediaIdStatusWithBody(ctx, mediaId, status, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostMediaMediaIdStatusResponse(rsp)
}


func (c *ClientWithResponses) PostMediaMediaIdStatusWithResponse(ctx context.Context, mediaId string, status PostMediaMediaIdStatusParamsStatus, body PostMediaMediaIdStatusJSONRequestBody, reqEditors... RequestEditorFn) (*PostMediaMediaIdStatusResponse, error) {
    rsp, err := c.PostMediaMediaIdStatus(ctx, mediaId, status, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostMediaMediaIdStatusResponse(rsp)
}






// GetMovieMovieIdWithResponse request returning *GetMovieMovieIdResponse
func (c *ClientWithResponses) GetMovieMovieIdWithResponse(ctx context.Context, movieId float32, params *GetMovieMovieIdParams, reqEditors... RequestEditorFn) (*GetMovieMovieIdResponse, error){
    rsp, err := c.GetMovieMovieId(ctx, movieId, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetMovieMovieIdResponse(rsp)
}






// GetMovieMovieIdRatingsWithResponse request returning *GetMovieMovieIdRatingsResponse
func (c *ClientWithResponses) GetMovieMovieIdRatingsWithResponse(ctx context.Context, movieId float32, reqEditors... RequestEditorFn) (*GetMovieMovieIdRatingsResponse, error){
    rsp, err := c.GetMovieMovieIdRatings(ctx, movieId, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetMovieMovieIdRatingsResponse(rsp)
}






// GetMovieMovieIdRatingscombinedWithResponse request returning *GetMovieMovieIdRatingscombinedResponse
func (c *ClientWithResponses) GetMovieMovieIdRatingscombinedWithResponse(ctx context.Context, movieId float32, reqEditors... RequestEditorFn) (*GetMovieMovieIdRatingscombinedResponse, error){
    rsp, err := c.GetMovieMovieIdRatingscombined(ctx, movieId, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetMovieMovieIdRatingscombinedResponse(rsp)
}






// GetMovieMovieIdRecommendationsWithResponse request returning *GetMovieMovieIdRecommendationsResponse
func (c *ClientWithResponses) GetMovieMovieIdRecommendationsWithResponse(ctx context.Context, movieId float32, params *GetMovieMovieIdRecommendationsParams, reqEditors... RequestEditorFn) (*GetMovieMovieIdRecommendationsResponse, error){
    rsp, err := c.GetMovieMovieIdRecommendations(ctx, movieId, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetMovieMovieIdRecommendationsResponse(rsp)
}






// GetMovieMovieIdSimilarWithResponse request returning *GetMovieMovieIdSimilarResponse
func (c *ClientWithResponses) GetMovieMovieIdSimilarWithResponse(ctx context.Context, movieId float32, params *GetMovieMovieIdSimilarParams, reqEditors... RequestEditorFn) (*GetMovieMovieIdSimilarResponse, error){
    rsp, err := c.GetMovieMovieIdSimilar(ctx, movieId, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetMovieMovieIdSimilarResponse(rsp)
}






// GetNetworkNetworkIdWithResponse request returning *GetNetworkNetworkIdResponse
func (c *ClientWithResponses) GetNetworkNetworkIdWithResponse(ctx context.Context, networkId float32, reqEditors... RequestEditorFn) (*GetNetworkNetworkIdResponse, error){
    rsp, err := c.GetNetworkNetworkId(ctx, networkId, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetNetworkNetworkIdResponse(rsp)
}






// GetPersonPersonIdWithResponse request returning *GetPersonPersonIdResponse
func (c *ClientWithResponses) GetPersonPersonIdWithResponse(ctx context.Context, personId float32, params *GetPersonPersonIdParams, reqEditors... RequestEditorFn) (*GetPersonPersonIdResponse, error){
    rsp, err := c.GetPersonPersonId(ctx, personId, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetPersonPersonIdResponse(rsp)
}






// GetPersonPersonIdCombinedCreditsWithResponse request returning *GetPersonPersonIdCombinedCreditsResponse
func (c *ClientWithResponses) GetPersonPersonIdCombinedCreditsWithResponse(ctx context.Context, personId float32, params *GetPersonPersonIdCombinedCreditsParams, reqEditors... RequestEditorFn) (*GetPersonPersonIdCombinedCreditsResponse, error){
    rsp, err := c.GetPersonPersonIdCombinedCredits(ctx, personId, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetPersonPersonIdCombinedCreditsResponse(rsp)
}






// GetRegionsWithResponse request returning *GetRegionsResponse
func (c *ClientWithResponses) GetRegionsWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*GetRegionsResponse, error){
    rsp, err := c.GetRegions(ctx, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetRegionsResponse(rsp)
}






// GetRequestWithResponse request returning *GetRequestResponse
func (c *ClientWithResponses) GetRequestWithResponse(ctx context.Context, params *GetRequestParams, reqEditors... RequestEditorFn) (*GetRequestResponse, error){
    rsp, err := c.GetRequest(ctx, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetRequestResponse(rsp)
}






// PostRequestWithBodyWithResponse request with arbitrary body returning *PostRequestResponse
func (c *ClientWithResponses) PostRequestWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostRequestResponse, error){
    rsp, err := c.PostRequestWithBody(ctx, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostRequestResponse(rsp)
}


func (c *ClientWithResponses) PostRequestWithResponse(ctx context.Context, body PostRequestJSONRequestBody, reqEditors... RequestEditorFn) (*PostRequestResponse, error) {
    rsp, err := c.PostRequest(ctx, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostRequestResponse(rsp)
}






// GetRequestCountWithResponse request returning *GetRequestCountResponse
func (c *ClientWithResponses) GetRequestCountWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*GetRequestCountResponse, error){
    rsp, err := c.GetRequestCount(ctx, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetRequestCountResponse(rsp)
}






// DeleteRequestRequestIdWithResponse request returning *DeleteRequestRequestIdResponse
func (c *ClientWithResponses) DeleteRequestRequestIdWithResponse(ctx context.Context, requestId string, reqEditors... RequestEditorFn) (*DeleteRequestRequestIdResponse, error){
    rsp, err := c.DeleteRequestRequestId(ctx, requestId, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseDeleteRequestRequestIdResponse(rsp)
}






// GetRequestRequestIdWithResponse request returning *GetRequestRequestIdResponse
func (c *ClientWithResponses) GetRequestRequestIdWithResponse(ctx context.Context, requestId string, reqEditors... RequestEditorFn) (*GetRequestRequestIdResponse, error){
    rsp, err := c.GetRequestRequestId(ctx, requestId, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetRequestRequestIdResponse(rsp)
}






// PutRequestRequestIdWithBodyWithResponse request with arbitrary body returning *PutRequestRequestIdResponse
func (c *ClientWithResponses) PutRequestRequestIdWithBodyWithResponse(ctx context.Context, requestId string, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PutRequestRequestIdResponse, error){
    rsp, err := c.PutRequestRequestIdWithBody(ctx, requestId, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePutRequestRequestIdResponse(rsp)
}


func (c *ClientWithResponses) PutRequestRequestIdWithResponse(ctx context.Context, requestId string, body PutRequestRequestIdJSONRequestBody, reqEditors... RequestEditorFn) (*PutRequestRequestIdResponse, error) {
    rsp, err := c.PutRequestRequestId(ctx, requestId, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePutRequestRequestIdResponse(rsp)
}






// PostRequestRequestIdRetryWithResponse request returning *PostRequestRequestIdRetryResponse
func (c *ClientWithResponses) PostRequestRequestIdRetryWithResponse(ctx context.Context, requestId string, reqEditors... RequestEditorFn) (*PostRequestRequestIdRetryResponse, error){
    rsp, err := c.PostRequestRequestIdRetry(ctx, requestId, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostRequestRequestIdRetryResponse(rsp)
}






// PostRequestRequestIdStatusWithResponse request returning *PostRequestRequestIdStatusResponse
func (c *ClientWithResponses) PostRequestRequestIdStatusWithResponse(ctx context.Context, requestId string, status PostRequestRequestIdStatusParamsStatus, reqEditors... RequestEditorFn) (*PostRequestRequestIdStatusResponse, error){
    rsp, err := c.PostRequestRequestIdStatus(ctx, requestId, status, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostRequestRequestIdStatusResponse(rsp)
}






// GetSearchWithResponse request returning *GetSearchResponse
func (c *ClientWithResponses) GetSearchWithResponse(ctx context.Context, params *GetSearchParams, reqEditors... RequestEditorFn) (*GetSearchResponse, error){
    rsp, err := c.GetSearch(ctx, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetSearchResponse(rsp)
}






// GetSearchCompanyWithResponse request returning *GetSearchCompanyResponse
func (c *ClientWithResponses) GetSearchCompanyWithResponse(ctx context.Context, params *GetSearchCompanyParams, reqEditors... RequestEditorFn) (*GetSearchCompanyResponse, error){
    rsp, err := c.GetSearchCompany(ctx, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetSearchCompanyResponse(rsp)
}






// GetSearchKeywordWithResponse request returning *GetSearchKeywordResponse
func (c *ClientWithResponses) GetSearchKeywordWithResponse(ctx context.Context, params *GetSearchKeywordParams, reqEditors... RequestEditorFn) (*GetSearchKeywordResponse, error){
    rsp, err := c.GetSearchKeyword(ctx, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetSearchKeywordResponse(rsp)
}






// GetServiceRadarrWithResponse request returning *GetServiceRadarrResponse
func (c *ClientWithResponses) GetServiceRadarrWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*GetServiceRadarrResponse, error){
    rsp, err := c.GetServiceRadarr(ctx, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetServiceRadarrResponse(rsp)
}






// GetServiceRadarrRadarrIdWithResponse request returning *GetServiceRadarrRadarrIdResponse
func (c *ClientWithResponses) GetServiceRadarrRadarrIdWithResponse(ctx context.Context, radarrId float32, reqEditors... RequestEditorFn) (*GetServiceRadarrRadarrIdResponse, error){
    rsp, err := c.GetServiceRadarrRadarrId(ctx, radarrId, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetServiceRadarrRadarrIdResponse(rsp)
}






// GetServiceSonarrWithResponse request returning *GetServiceSonarrResponse
func (c *ClientWithResponses) GetServiceSonarrWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*GetServiceSonarrResponse, error){
    rsp, err := c.GetServiceSonarr(ctx, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetServiceSonarrResponse(rsp)
}






// GetServiceSonarrLookupTmdbIdWithResponse request returning *GetServiceSonarrLookupTmdbIdResponse
func (c *ClientWithResponses) GetServiceSonarrLookupTmdbIdWithResponse(ctx context.Context, tmdbId float32, reqEditors... RequestEditorFn) (*GetServiceSonarrLookupTmdbIdResponse, error){
    rsp, err := c.GetServiceSonarrLookupTmdbId(ctx, tmdbId, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetServiceSonarrLookupTmdbIdResponse(rsp)
}






// GetServiceSonarrSonarrIdWithResponse request returning *GetServiceSonarrSonarrIdResponse
func (c *ClientWithResponses) GetServiceSonarrSonarrIdWithResponse(ctx context.Context, sonarrId float32, reqEditors... RequestEditorFn) (*GetServiceSonarrSonarrIdResponse, error){
    rsp, err := c.GetServiceSonarrSonarrId(ctx, sonarrId, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetServiceSonarrSonarrIdResponse(rsp)
}






// GetSettingsAboutWithResponse request returning *GetSettingsAboutResponse
func (c *ClientWithResponses) GetSettingsAboutWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*GetSettingsAboutResponse, error){
    rsp, err := c.GetSettingsAbout(ctx, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetSettingsAboutResponse(rsp)
}






// GetSettingsCacheWithResponse request returning *GetSettingsCacheResponse
func (c *ClientWithResponses) GetSettingsCacheWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*GetSettingsCacheResponse, error){
    rsp, err := c.GetSettingsCache(ctx, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetSettingsCacheResponse(rsp)
}






// PostSettingsCacheCacheIdFlushWithResponse request returning *PostSettingsCacheCacheIdFlushResponse
func (c *ClientWithResponses) PostSettingsCacheCacheIdFlushWithResponse(ctx context.Context, cacheId string, reqEditors... RequestEditorFn) (*PostSettingsCacheCacheIdFlushResponse, error){
    rsp, err := c.PostSettingsCacheCacheIdFlush(ctx, cacheId, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostSettingsCacheCacheIdFlushResponse(rsp)
}






// GetSettingsDiscoverWithResponse request returning *GetSettingsDiscoverResponse
func (c *ClientWithResponses) GetSettingsDiscoverWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*GetSettingsDiscoverResponse, error){
    rsp, err := c.GetSettingsDiscover(ctx, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetSettingsDiscoverResponse(rsp)
}






// PostSettingsDiscoverWithBodyWithResponse request with arbitrary body returning *PostSettingsDiscoverResponse
func (c *ClientWithResponses) PostSettingsDiscoverWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostSettingsDiscoverResponse, error){
    rsp, err := c.PostSettingsDiscoverWithBody(ctx, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostSettingsDiscoverResponse(rsp)
}


func (c *ClientWithResponses) PostSettingsDiscoverWithResponse(ctx context.Context, body PostSettingsDiscoverJSONRequestBody, reqEditors... RequestEditorFn) (*PostSettingsDiscoverResponse, error) {
    rsp, err := c.PostSettingsDiscover(ctx, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostSettingsDiscoverResponse(rsp)
}






// PostSettingsDiscoverAddWithBodyWithResponse request with arbitrary body returning *PostSettingsDiscoverAddResponse
func (c *ClientWithResponses) PostSettingsDiscoverAddWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostSettingsDiscoverAddResponse, error){
    rsp, err := c.PostSettingsDiscoverAddWithBody(ctx, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostSettingsDiscoverAddResponse(rsp)
}


func (c *ClientWithResponses) PostSettingsDiscoverAddWithResponse(ctx context.Context, body PostSettingsDiscoverAddJSONRequestBody, reqEditors... RequestEditorFn) (*PostSettingsDiscoverAddResponse, error) {
    rsp, err := c.PostSettingsDiscoverAdd(ctx, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostSettingsDiscoverAddResponse(rsp)
}






// GetSettingsDiscoverResetWithResponse request returning *GetSettingsDiscoverResetResponse
func (c *ClientWithResponses) GetSettingsDiscoverResetWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*GetSettingsDiscoverResetResponse, error){
    rsp, err := c.GetSettingsDiscoverReset(ctx, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetSettingsDiscoverResetResponse(rsp)
}






// DeleteSettingsDiscoverSliderIdWithResponse request returning *DeleteSettingsDiscoverSliderIdResponse
func (c *ClientWithResponses) DeleteSettingsDiscoverSliderIdWithResponse(ctx context.Context, sliderId float32, reqEditors... RequestEditorFn) (*DeleteSettingsDiscoverSliderIdResponse, error){
    rsp, err := c.DeleteSettingsDiscoverSliderId(ctx, sliderId, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseDeleteSettingsDiscoverSliderIdResponse(rsp)
}






// PutSettingsDiscoverSliderIdWithBodyWithResponse request with arbitrary body returning *PutSettingsDiscoverSliderIdResponse
func (c *ClientWithResponses) PutSettingsDiscoverSliderIdWithBodyWithResponse(ctx context.Context, sliderId float32, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PutSettingsDiscoverSliderIdResponse, error){
    rsp, err := c.PutSettingsDiscoverSliderIdWithBody(ctx, sliderId, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePutSettingsDiscoverSliderIdResponse(rsp)
}


func (c *ClientWithResponses) PutSettingsDiscoverSliderIdWithResponse(ctx context.Context, sliderId float32, body PutSettingsDiscoverSliderIdJSONRequestBody, reqEditors... RequestEditorFn) (*PutSettingsDiscoverSliderIdResponse, error) {
    rsp, err := c.PutSettingsDiscoverSliderId(ctx, sliderId, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePutSettingsDiscoverSliderIdResponse(rsp)
}






// PostSettingsInitializeWithResponse request returning *PostSettingsInitializeResponse
func (c *ClientWithResponses) PostSettingsInitializeWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*PostSettingsInitializeResponse, error){
    rsp, err := c.PostSettingsInitialize(ctx, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostSettingsInitializeResponse(rsp)
}






// GetSettingsJellyfinWithResponse request returning *GetSettingsJellyfinResponse
func (c *ClientWithResponses) GetSettingsJellyfinWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*GetSettingsJellyfinResponse, error){
    rsp, err := c.GetSettingsJellyfin(ctx, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetSettingsJellyfinResponse(rsp)
}






// PostSettingsJellyfinWithBodyWithResponse request with arbitrary body returning *PostSettingsJellyfinResponse
func (c *ClientWithResponses) PostSettingsJellyfinWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostSettingsJellyfinResponse, error){
    rsp, err := c.PostSettingsJellyfinWithBody(ctx, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostSettingsJellyfinResponse(rsp)
}


func (c *ClientWithResponses) PostSettingsJellyfinWithResponse(ctx context.Context, body PostSettingsJellyfinJSONRequestBody, reqEditors... RequestEditorFn) (*PostSettingsJellyfinResponse, error) {
    rsp, err := c.PostSettingsJellyfin(ctx, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostSettingsJellyfinResponse(rsp)
}






// GetSettingsJellyfinLibraryWithResponse request returning *GetSettingsJellyfinLibraryResponse
func (c *ClientWithResponses) GetSettingsJellyfinLibraryWithResponse(ctx context.Context, params *GetSettingsJellyfinLibraryParams, reqEditors... RequestEditorFn) (*GetSettingsJellyfinLibraryResponse, error){
    rsp, err := c.GetSettingsJellyfinLibrary(ctx, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetSettingsJellyfinLibraryResponse(rsp)
}






// GetSettingsJellyfinSyncWithResponse request returning *GetSettingsJellyfinSyncResponse
func (c *ClientWithResponses) GetSettingsJellyfinSyncWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*GetSettingsJellyfinSyncResponse, error){
    rsp, err := c.GetSettingsJellyfinSync(ctx, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetSettingsJellyfinSyncResponse(rsp)
}






// PostSettingsJellyfinSyncWithBodyWithResponse request with arbitrary body returning *PostSettingsJellyfinSyncResponse
func (c *ClientWithResponses) PostSettingsJellyfinSyncWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostSettingsJellyfinSyncResponse, error){
    rsp, err := c.PostSettingsJellyfinSyncWithBody(ctx, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostSettingsJellyfinSyncResponse(rsp)
}


func (c *ClientWithResponses) PostSettingsJellyfinSyncWithResponse(ctx context.Context, body PostSettingsJellyfinSyncJSONRequestBody, reqEditors... RequestEditorFn) (*PostSettingsJellyfinSyncResponse, error) {
    rsp, err := c.PostSettingsJellyfinSync(ctx, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostSettingsJellyfinSyncResponse(rsp)
}






// GetSettingsJellyfinUsersWithResponse request returning *GetSettingsJellyfinUsersResponse
func (c *ClientWithResponses) GetSettingsJellyfinUsersWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*GetSettingsJellyfinUsersResponse, error){
    rsp, err := c.GetSettingsJellyfinUsers(ctx, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetSettingsJellyfinUsersResponse(rsp)
}






// GetSettingsJobsWithResponse request returning *GetSettingsJobsResponse
func (c *ClientWithResponses) GetSettingsJobsWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*GetSettingsJobsResponse, error){
    rsp, err := c.GetSettingsJobs(ctx, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetSettingsJobsResponse(rsp)
}






// PostSettingsJobsJobIdCancelWithResponse request returning *PostSettingsJobsJobIdCancelResponse
func (c *ClientWithResponses) PostSettingsJobsJobIdCancelWithResponse(ctx context.Context, jobId string, reqEditors... RequestEditorFn) (*PostSettingsJobsJobIdCancelResponse, error){
    rsp, err := c.PostSettingsJobsJobIdCancel(ctx, jobId, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostSettingsJobsJobIdCancelResponse(rsp)
}






// PostSettingsJobsJobIdRunWithResponse request returning *PostSettingsJobsJobIdRunResponse
func (c *ClientWithResponses) PostSettingsJobsJobIdRunWithResponse(ctx context.Context, jobId string, reqEditors... RequestEditorFn) (*PostSettingsJobsJobIdRunResponse, error){
    rsp, err := c.PostSettingsJobsJobIdRun(ctx, jobId, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostSettingsJobsJobIdRunResponse(rsp)
}






// PostSettingsJobsJobIdScheduleWithBodyWithResponse request with arbitrary body returning *PostSettingsJobsJobIdScheduleResponse
func (c *ClientWithResponses) PostSettingsJobsJobIdScheduleWithBodyWithResponse(ctx context.Context, jobId string, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostSettingsJobsJobIdScheduleResponse, error){
    rsp, err := c.PostSettingsJobsJobIdScheduleWithBody(ctx, jobId, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostSettingsJobsJobIdScheduleResponse(rsp)
}


func (c *ClientWithResponses) PostSettingsJobsJobIdScheduleWithResponse(ctx context.Context, jobId string, body PostSettingsJobsJobIdScheduleJSONRequestBody, reqEditors... RequestEditorFn) (*PostSettingsJobsJobIdScheduleResponse, error) {
    rsp, err := c.PostSettingsJobsJobIdSchedule(ctx, jobId, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostSettingsJobsJobIdScheduleResponse(rsp)
}






// GetSettingsLogsWithResponse request returning *GetSettingsLogsResponse
func (c *ClientWithResponses) GetSettingsLogsWithResponse(ctx context.Context, params *GetSettingsLogsParams, reqEditors... RequestEditorFn) (*GetSettingsLogsResponse, error){
    rsp, err := c.GetSettingsLogs(ctx, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetSettingsLogsResponse(rsp)
}






// GetSettingsMainWithResponse request returning *GetSettingsMainResponse
func (c *ClientWithResponses) GetSettingsMainWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*GetSettingsMainResponse, error){
    rsp, err := c.GetSettingsMain(ctx, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetSettingsMainResponse(rsp)
}






// PostSettingsMainWithBodyWithResponse request with arbitrary body returning *PostSettingsMainResponse
func (c *ClientWithResponses) PostSettingsMainWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostSettingsMainResponse, error){
    rsp, err := c.PostSettingsMainWithBody(ctx, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostSettingsMainResponse(rsp)
}


func (c *ClientWithResponses) PostSettingsMainWithResponse(ctx context.Context, body PostSettingsMainJSONRequestBody, reqEditors... RequestEditorFn) (*PostSettingsMainResponse, error) {
    rsp, err := c.PostSettingsMain(ctx, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostSettingsMainResponse(rsp)
}






// PostSettingsMainRegenerateWithResponse request returning *PostSettingsMainRegenerateResponse
func (c *ClientWithResponses) PostSettingsMainRegenerateWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*PostSettingsMainRegenerateResponse, error){
    rsp, err := c.PostSettingsMainRegenerate(ctx, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostSettingsMainRegenerateResponse(rsp)
}






// GetSettingsNotificationsDiscordWithResponse request returning *GetSettingsNotificationsDiscordResponse
func (c *ClientWithResponses) GetSettingsNotificationsDiscordWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*GetSettingsNotificationsDiscordResponse, error){
    rsp, err := c.GetSettingsNotificationsDiscord(ctx, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetSettingsNotificationsDiscordResponse(rsp)
}






// PostSettingsNotificationsDiscordWithBodyWithResponse request with arbitrary body returning *PostSettingsNotificationsDiscordResponse
func (c *ClientWithResponses) PostSettingsNotificationsDiscordWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostSettingsNotificationsDiscordResponse, error){
    rsp, err := c.PostSettingsNotificationsDiscordWithBody(ctx, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostSettingsNotificationsDiscordResponse(rsp)
}


func (c *ClientWithResponses) PostSettingsNotificationsDiscordWithResponse(ctx context.Context, body PostSettingsNotificationsDiscordJSONRequestBody, reqEditors... RequestEditorFn) (*PostSettingsNotificationsDiscordResponse, error) {
    rsp, err := c.PostSettingsNotificationsDiscord(ctx, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostSettingsNotificationsDiscordResponse(rsp)
}






// PostSettingsNotificationsDiscordTestWithBodyWithResponse request with arbitrary body returning *PostSettingsNotificationsDiscordTestResponse
func (c *ClientWithResponses) PostSettingsNotificationsDiscordTestWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostSettingsNotificationsDiscordTestResponse, error){
    rsp, err := c.PostSettingsNotificationsDiscordTestWithBody(ctx, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostSettingsNotificationsDiscordTestResponse(rsp)
}


func (c *ClientWithResponses) PostSettingsNotificationsDiscordTestWithResponse(ctx context.Context, body PostSettingsNotificationsDiscordTestJSONRequestBody, reqEditors... RequestEditorFn) (*PostSettingsNotificationsDiscordTestResponse, error) {
    rsp, err := c.PostSettingsNotificationsDiscordTest(ctx, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostSettingsNotificationsDiscordTestResponse(rsp)
}






// GetSettingsNotificationsEmailWithResponse request returning *GetSettingsNotificationsEmailResponse
func (c *ClientWithResponses) GetSettingsNotificationsEmailWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*GetSettingsNotificationsEmailResponse, error){
    rsp, err := c.GetSettingsNotificationsEmail(ctx, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetSettingsNotificationsEmailResponse(rsp)
}






// PostSettingsNotificationsEmailWithBodyWithResponse request with arbitrary body returning *PostSettingsNotificationsEmailResponse
func (c *ClientWithResponses) PostSettingsNotificationsEmailWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostSettingsNotificationsEmailResponse, error){
    rsp, err := c.PostSettingsNotificationsEmailWithBody(ctx, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostSettingsNotificationsEmailResponse(rsp)
}


func (c *ClientWithResponses) PostSettingsNotificationsEmailWithResponse(ctx context.Context, body PostSettingsNotificationsEmailJSONRequestBody, reqEditors... RequestEditorFn) (*PostSettingsNotificationsEmailResponse, error) {
    rsp, err := c.PostSettingsNotificationsEmail(ctx, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostSettingsNotificationsEmailResponse(rsp)
}






// PostSettingsNotificationsEmailTestWithBodyWithResponse request with arbitrary body returning *PostSettingsNotificationsEmailTestResponse
func (c *ClientWithResponses) PostSettingsNotificationsEmailTestWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostSettingsNotificationsEmailTestResponse, error){
    rsp, err := c.PostSettingsNotificationsEmailTestWithBody(ctx, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostSettingsNotificationsEmailTestResponse(rsp)
}


func (c *ClientWithResponses) PostSettingsNotificationsEmailTestWithResponse(ctx context.Context, body PostSettingsNotificationsEmailTestJSONRequestBody, reqEditors... RequestEditorFn) (*PostSettingsNotificationsEmailTestResponse, error) {
    rsp, err := c.PostSettingsNotificationsEmailTest(ctx, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostSettingsNotificationsEmailTestResponse(rsp)
}






// GetSettingsNotificationsGotifyWithResponse request returning *GetSettingsNotificationsGotifyResponse
func (c *ClientWithResponses) GetSettingsNotificationsGotifyWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*GetSettingsNotificationsGotifyResponse, error){
    rsp, err := c.GetSettingsNotificationsGotify(ctx, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetSettingsNotificationsGotifyResponse(rsp)
}






// PostSettingsNotificationsGotifyWithBodyWithResponse request with arbitrary body returning *PostSettingsNotificationsGotifyResponse
func (c *ClientWithResponses) PostSettingsNotificationsGotifyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostSettingsNotificationsGotifyResponse, error){
    rsp, err := c.PostSettingsNotificationsGotifyWithBody(ctx, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostSettingsNotificationsGotifyResponse(rsp)
}


func (c *ClientWithResponses) PostSettingsNotificationsGotifyWithResponse(ctx context.Context, body PostSettingsNotificationsGotifyJSONRequestBody, reqEditors... RequestEditorFn) (*PostSettingsNotificationsGotifyResponse, error) {
    rsp, err := c.PostSettingsNotificationsGotify(ctx, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostSettingsNotificationsGotifyResponse(rsp)
}






// PostSettingsNotificationsGotifyTestWithBodyWithResponse request with arbitrary body returning *PostSettingsNotificationsGotifyTestResponse
func (c *ClientWithResponses) PostSettingsNotificationsGotifyTestWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostSettingsNotificationsGotifyTestResponse, error){
    rsp, err := c.PostSettingsNotificationsGotifyTestWithBody(ctx, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostSettingsNotificationsGotifyTestResponse(rsp)
}


func (c *ClientWithResponses) PostSettingsNotificationsGotifyTestWithResponse(ctx context.Context, body PostSettingsNotificationsGotifyTestJSONRequestBody, reqEditors... RequestEditorFn) (*PostSettingsNotificationsGotifyTestResponse, error) {
    rsp, err := c.PostSettingsNotificationsGotifyTest(ctx, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostSettingsNotificationsGotifyTestResponse(rsp)
}






// GetSettingsNotificationsLunaseaWithResponse request returning *GetSettingsNotificationsLunaseaResponse
func (c *ClientWithResponses) GetSettingsNotificationsLunaseaWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*GetSettingsNotificationsLunaseaResponse, error){
    rsp, err := c.GetSettingsNotificationsLunasea(ctx, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetSettingsNotificationsLunaseaResponse(rsp)
}






// PostSettingsNotificationsLunaseaWithBodyWithResponse request with arbitrary body returning *PostSettingsNotificationsLunaseaResponse
func (c *ClientWithResponses) PostSettingsNotificationsLunaseaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostSettingsNotificationsLunaseaResponse, error){
    rsp, err := c.PostSettingsNotificationsLunaseaWithBody(ctx, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostSettingsNotificationsLunaseaResponse(rsp)
}


func (c *ClientWithResponses) PostSettingsNotificationsLunaseaWithResponse(ctx context.Context, body PostSettingsNotificationsLunaseaJSONRequestBody, reqEditors... RequestEditorFn) (*PostSettingsNotificationsLunaseaResponse, error) {
    rsp, err := c.PostSettingsNotificationsLunasea(ctx, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostSettingsNotificationsLunaseaResponse(rsp)
}






// PostSettingsNotificationsLunaseaTestWithBodyWithResponse request with arbitrary body returning *PostSettingsNotificationsLunaseaTestResponse
func (c *ClientWithResponses) PostSettingsNotificationsLunaseaTestWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostSettingsNotificationsLunaseaTestResponse, error){
    rsp, err := c.PostSettingsNotificationsLunaseaTestWithBody(ctx, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostSettingsNotificationsLunaseaTestResponse(rsp)
}


func (c *ClientWithResponses) PostSettingsNotificationsLunaseaTestWithResponse(ctx context.Context, body PostSettingsNotificationsLunaseaTestJSONRequestBody, reqEditors... RequestEditorFn) (*PostSettingsNotificationsLunaseaTestResponse, error) {
    rsp, err := c.PostSettingsNotificationsLunaseaTest(ctx, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostSettingsNotificationsLunaseaTestResponse(rsp)
}






// GetSettingsNotificationsPushbulletWithResponse request returning *GetSettingsNotificationsPushbulletResponse
func (c *ClientWithResponses) GetSettingsNotificationsPushbulletWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*GetSettingsNotificationsPushbulletResponse, error){
    rsp, err := c.GetSettingsNotificationsPushbullet(ctx, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetSettingsNotificationsPushbulletResponse(rsp)
}






// PostSettingsNotificationsPushbulletWithBodyWithResponse request with arbitrary body returning *PostSettingsNotificationsPushbulletResponse
func (c *ClientWithResponses) PostSettingsNotificationsPushbulletWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostSettingsNotificationsPushbulletResponse, error){
    rsp, err := c.PostSettingsNotificationsPushbulletWithBody(ctx, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostSettingsNotificationsPushbulletResponse(rsp)
}


func (c *ClientWithResponses) PostSettingsNotificationsPushbulletWithResponse(ctx context.Context, body PostSettingsNotificationsPushbulletJSONRequestBody, reqEditors... RequestEditorFn) (*PostSettingsNotificationsPushbulletResponse, error) {
    rsp, err := c.PostSettingsNotificationsPushbullet(ctx, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostSettingsNotificationsPushbulletResponse(rsp)
}






// PostSettingsNotificationsPushbulletTestWithBodyWithResponse request with arbitrary body returning *PostSettingsNotificationsPushbulletTestResponse
func (c *ClientWithResponses) PostSettingsNotificationsPushbulletTestWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostSettingsNotificationsPushbulletTestResponse, error){
    rsp, err := c.PostSettingsNotificationsPushbulletTestWithBody(ctx, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostSettingsNotificationsPushbulletTestResponse(rsp)
}


func (c *ClientWithResponses) PostSettingsNotificationsPushbulletTestWithResponse(ctx context.Context, body PostSettingsNotificationsPushbulletTestJSONRequestBody, reqEditors... RequestEditorFn) (*PostSettingsNotificationsPushbulletTestResponse, error) {
    rsp, err := c.PostSettingsNotificationsPushbulletTest(ctx, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostSettingsNotificationsPushbulletTestResponse(rsp)
}






// GetSettingsNotificationsPushoverWithResponse request returning *GetSettingsNotificationsPushoverResponse
func (c *ClientWithResponses) GetSettingsNotificationsPushoverWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*GetSettingsNotificationsPushoverResponse, error){
    rsp, err := c.GetSettingsNotificationsPushover(ctx, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetSettingsNotificationsPushoverResponse(rsp)
}






// PostSettingsNotificationsPushoverWithBodyWithResponse request with arbitrary body returning *PostSettingsNotificationsPushoverResponse
func (c *ClientWithResponses) PostSettingsNotificationsPushoverWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostSettingsNotificationsPushoverResponse, error){
    rsp, err := c.PostSettingsNotificationsPushoverWithBody(ctx, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostSettingsNotificationsPushoverResponse(rsp)
}


func (c *ClientWithResponses) PostSettingsNotificationsPushoverWithResponse(ctx context.Context, body PostSettingsNotificationsPushoverJSONRequestBody, reqEditors... RequestEditorFn) (*PostSettingsNotificationsPushoverResponse, error) {
    rsp, err := c.PostSettingsNotificationsPushover(ctx, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostSettingsNotificationsPushoverResponse(rsp)
}






// GetSettingsNotificationsPushoverSoundsWithResponse request returning *GetSettingsNotificationsPushoverSoundsResponse
func (c *ClientWithResponses) GetSettingsNotificationsPushoverSoundsWithResponse(ctx context.Context, params *GetSettingsNotificationsPushoverSoundsParams, reqEditors... RequestEditorFn) (*GetSettingsNotificationsPushoverSoundsResponse, error){
    rsp, err := c.GetSettingsNotificationsPushoverSounds(ctx, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetSettingsNotificationsPushoverSoundsResponse(rsp)
}






// PostSettingsNotificationsPushoverTestWithBodyWithResponse request with arbitrary body returning *PostSettingsNotificationsPushoverTestResponse
func (c *ClientWithResponses) PostSettingsNotificationsPushoverTestWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostSettingsNotificationsPushoverTestResponse, error){
    rsp, err := c.PostSettingsNotificationsPushoverTestWithBody(ctx, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostSettingsNotificationsPushoverTestResponse(rsp)
}


func (c *ClientWithResponses) PostSettingsNotificationsPushoverTestWithResponse(ctx context.Context, body PostSettingsNotificationsPushoverTestJSONRequestBody, reqEditors... RequestEditorFn) (*PostSettingsNotificationsPushoverTestResponse, error) {
    rsp, err := c.PostSettingsNotificationsPushoverTest(ctx, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostSettingsNotificationsPushoverTestResponse(rsp)
}






// GetSettingsNotificationsSlackWithResponse request returning *GetSettingsNotificationsSlackResponse
func (c *ClientWithResponses) GetSettingsNotificationsSlackWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*GetSettingsNotificationsSlackResponse, error){
    rsp, err := c.GetSettingsNotificationsSlack(ctx, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetSettingsNotificationsSlackResponse(rsp)
}






// PostSettingsNotificationsSlackWithBodyWithResponse request with arbitrary body returning *PostSettingsNotificationsSlackResponse
func (c *ClientWithResponses) PostSettingsNotificationsSlackWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostSettingsNotificationsSlackResponse, error){
    rsp, err := c.PostSettingsNotificationsSlackWithBody(ctx, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostSettingsNotificationsSlackResponse(rsp)
}


func (c *ClientWithResponses) PostSettingsNotificationsSlackWithResponse(ctx context.Context, body PostSettingsNotificationsSlackJSONRequestBody, reqEditors... RequestEditorFn) (*PostSettingsNotificationsSlackResponse, error) {
    rsp, err := c.PostSettingsNotificationsSlack(ctx, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostSettingsNotificationsSlackResponse(rsp)
}






// PostSettingsNotificationsSlackTestWithBodyWithResponse request with arbitrary body returning *PostSettingsNotificationsSlackTestResponse
func (c *ClientWithResponses) PostSettingsNotificationsSlackTestWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostSettingsNotificationsSlackTestResponse, error){
    rsp, err := c.PostSettingsNotificationsSlackTestWithBody(ctx, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostSettingsNotificationsSlackTestResponse(rsp)
}


func (c *ClientWithResponses) PostSettingsNotificationsSlackTestWithResponse(ctx context.Context, body PostSettingsNotificationsSlackTestJSONRequestBody, reqEditors... RequestEditorFn) (*PostSettingsNotificationsSlackTestResponse, error) {
    rsp, err := c.PostSettingsNotificationsSlackTest(ctx, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostSettingsNotificationsSlackTestResponse(rsp)
}






// GetSettingsNotificationsTelegramWithResponse request returning *GetSettingsNotificationsTelegramResponse
func (c *ClientWithResponses) GetSettingsNotificationsTelegramWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*GetSettingsNotificationsTelegramResponse, error){
    rsp, err := c.GetSettingsNotificationsTelegram(ctx, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetSettingsNotificationsTelegramResponse(rsp)
}






// PostSettingsNotificationsTelegramWithBodyWithResponse request with arbitrary body returning *PostSettingsNotificationsTelegramResponse
func (c *ClientWithResponses) PostSettingsNotificationsTelegramWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostSettingsNotificationsTelegramResponse, error){
    rsp, err := c.PostSettingsNotificationsTelegramWithBody(ctx, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostSettingsNotificationsTelegramResponse(rsp)
}


func (c *ClientWithResponses) PostSettingsNotificationsTelegramWithResponse(ctx context.Context, body PostSettingsNotificationsTelegramJSONRequestBody, reqEditors... RequestEditorFn) (*PostSettingsNotificationsTelegramResponse, error) {
    rsp, err := c.PostSettingsNotificationsTelegram(ctx, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostSettingsNotificationsTelegramResponse(rsp)
}






// PostSettingsNotificationsTelegramTestWithBodyWithResponse request with arbitrary body returning *PostSettingsNotificationsTelegramTestResponse
func (c *ClientWithResponses) PostSettingsNotificationsTelegramTestWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostSettingsNotificationsTelegramTestResponse, error){
    rsp, err := c.PostSettingsNotificationsTelegramTestWithBody(ctx, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostSettingsNotificationsTelegramTestResponse(rsp)
}


func (c *ClientWithResponses) PostSettingsNotificationsTelegramTestWithResponse(ctx context.Context, body PostSettingsNotificationsTelegramTestJSONRequestBody, reqEditors... RequestEditorFn) (*PostSettingsNotificationsTelegramTestResponse, error) {
    rsp, err := c.PostSettingsNotificationsTelegramTest(ctx, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostSettingsNotificationsTelegramTestResponse(rsp)
}






// GetSettingsNotificationsWebhookWithResponse request returning *GetSettingsNotificationsWebhookResponse
func (c *ClientWithResponses) GetSettingsNotificationsWebhookWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*GetSettingsNotificationsWebhookResponse, error){
    rsp, err := c.GetSettingsNotificationsWebhook(ctx, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetSettingsNotificationsWebhookResponse(rsp)
}






// PostSettingsNotificationsWebhookWithBodyWithResponse request with arbitrary body returning *PostSettingsNotificationsWebhookResponse
func (c *ClientWithResponses) PostSettingsNotificationsWebhookWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostSettingsNotificationsWebhookResponse, error){
    rsp, err := c.PostSettingsNotificationsWebhookWithBody(ctx, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostSettingsNotificationsWebhookResponse(rsp)
}


func (c *ClientWithResponses) PostSettingsNotificationsWebhookWithResponse(ctx context.Context, body PostSettingsNotificationsWebhookJSONRequestBody, reqEditors... RequestEditorFn) (*PostSettingsNotificationsWebhookResponse, error) {
    rsp, err := c.PostSettingsNotificationsWebhook(ctx, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostSettingsNotificationsWebhookResponse(rsp)
}






// PostSettingsNotificationsWebhookTestWithBodyWithResponse request with arbitrary body returning *PostSettingsNotificationsWebhookTestResponse
func (c *ClientWithResponses) PostSettingsNotificationsWebhookTestWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostSettingsNotificationsWebhookTestResponse, error){
    rsp, err := c.PostSettingsNotificationsWebhookTestWithBody(ctx, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostSettingsNotificationsWebhookTestResponse(rsp)
}


func (c *ClientWithResponses) PostSettingsNotificationsWebhookTestWithResponse(ctx context.Context, body PostSettingsNotificationsWebhookTestJSONRequestBody, reqEditors... RequestEditorFn) (*PostSettingsNotificationsWebhookTestResponse, error) {
    rsp, err := c.PostSettingsNotificationsWebhookTest(ctx, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostSettingsNotificationsWebhookTestResponse(rsp)
}






// GetSettingsNotificationsWebpushWithResponse request returning *GetSettingsNotificationsWebpushResponse
func (c *ClientWithResponses) GetSettingsNotificationsWebpushWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*GetSettingsNotificationsWebpushResponse, error){
    rsp, err := c.GetSettingsNotificationsWebpush(ctx, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetSettingsNotificationsWebpushResponse(rsp)
}






// PostSettingsNotificationsWebpushWithBodyWithResponse request with arbitrary body returning *PostSettingsNotificationsWebpushResponse
func (c *ClientWithResponses) PostSettingsNotificationsWebpushWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostSettingsNotificationsWebpushResponse, error){
    rsp, err := c.PostSettingsNotificationsWebpushWithBody(ctx, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostSettingsNotificationsWebpushResponse(rsp)
}


func (c *ClientWithResponses) PostSettingsNotificationsWebpushWithResponse(ctx context.Context, body PostSettingsNotificationsWebpushJSONRequestBody, reqEditors... RequestEditorFn) (*PostSettingsNotificationsWebpushResponse, error) {
    rsp, err := c.PostSettingsNotificationsWebpush(ctx, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostSettingsNotificationsWebpushResponse(rsp)
}






// PostSettingsNotificationsWebpushTestWithBodyWithResponse request with arbitrary body returning *PostSettingsNotificationsWebpushTestResponse
func (c *ClientWithResponses) PostSettingsNotificationsWebpushTestWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostSettingsNotificationsWebpushTestResponse, error){
    rsp, err := c.PostSettingsNotificationsWebpushTestWithBody(ctx, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostSettingsNotificationsWebpushTestResponse(rsp)
}


func (c *ClientWithResponses) PostSettingsNotificationsWebpushTestWithResponse(ctx context.Context, body PostSettingsNotificationsWebpushTestJSONRequestBody, reqEditors... RequestEditorFn) (*PostSettingsNotificationsWebpushTestResponse, error) {
    rsp, err := c.PostSettingsNotificationsWebpushTest(ctx, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostSettingsNotificationsWebpushTestResponse(rsp)
}






// GetSettingsPlexWithResponse request returning *GetSettingsPlexResponse
func (c *ClientWithResponses) GetSettingsPlexWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*GetSettingsPlexResponse, error){
    rsp, err := c.GetSettingsPlex(ctx, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetSettingsPlexResponse(rsp)
}






// PostSettingsPlexWithBodyWithResponse request with arbitrary body returning *PostSettingsPlexResponse
func (c *ClientWithResponses) PostSettingsPlexWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostSettingsPlexResponse, error){
    rsp, err := c.PostSettingsPlexWithBody(ctx, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostSettingsPlexResponse(rsp)
}


func (c *ClientWithResponses) PostSettingsPlexWithResponse(ctx context.Context, body PostSettingsPlexJSONRequestBody, reqEditors... RequestEditorFn) (*PostSettingsPlexResponse, error) {
    rsp, err := c.PostSettingsPlex(ctx, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostSettingsPlexResponse(rsp)
}






// GetSettingsPlexDevicesServersWithResponse request returning *GetSettingsPlexDevicesServersResponse
func (c *ClientWithResponses) GetSettingsPlexDevicesServersWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*GetSettingsPlexDevicesServersResponse, error){
    rsp, err := c.GetSettingsPlexDevicesServers(ctx, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetSettingsPlexDevicesServersResponse(rsp)
}






// GetSettingsPlexLibraryWithResponse request returning *GetSettingsPlexLibraryResponse
func (c *ClientWithResponses) GetSettingsPlexLibraryWithResponse(ctx context.Context, params *GetSettingsPlexLibraryParams, reqEditors... RequestEditorFn) (*GetSettingsPlexLibraryResponse, error){
    rsp, err := c.GetSettingsPlexLibrary(ctx, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetSettingsPlexLibraryResponse(rsp)
}






// GetSettingsPlexSyncWithResponse request returning *GetSettingsPlexSyncResponse
func (c *ClientWithResponses) GetSettingsPlexSyncWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*GetSettingsPlexSyncResponse, error){
    rsp, err := c.GetSettingsPlexSync(ctx, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetSettingsPlexSyncResponse(rsp)
}






// PostSettingsPlexSyncWithBodyWithResponse request with arbitrary body returning *PostSettingsPlexSyncResponse
func (c *ClientWithResponses) PostSettingsPlexSyncWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostSettingsPlexSyncResponse, error){
    rsp, err := c.PostSettingsPlexSyncWithBody(ctx, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostSettingsPlexSyncResponse(rsp)
}


func (c *ClientWithResponses) PostSettingsPlexSyncWithResponse(ctx context.Context, body PostSettingsPlexSyncJSONRequestBody, reqEditors... RequestEditorFn) (*PostSettingsPlexSyncResponse, error) {
    rsp, err := c.PostSettingsPlexSync(ctx, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostSettingsPlexSyncResponse(rsp)
}






// GetSettingsPlexUsersWithResponse request returning *GetSettingsPlexUsersResponse
func (c *ClientWithResponses) GetSettingsPlexUsersWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*GetSettingsPlexUsersResponse, error){
    rsp, err := c.GetSettingsPlexUsers(ctx, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetSettingsPlexUsersResponse(rsp)
}






// GetSettingsPublicWithResponse request returning *GetSettingsPublicResponse
func (c *ClientWithResponses) GetSettingsPublicWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*GetSettingsPublicResponse, error){
    rsp, err := c.GetSettingsPublic(ctx, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetSettingsPublicResponse(rsp)
}






// GetSettingsRadarrWithResponse request returning *GetSettingsRadarrResponse
func (c *ClientWithResponses) GetSettingsRadarrWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*GetSettingsRadarrResponse, error){
    rsp, err := c.GetSettingsRadarr(ctx, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetSettingsRadarrResponse(rsp)
}






// PostSettingsRadarrWithBodyWithResponse request with arbitrary body returning *PostSettingsRadarrResponse
func (c *ClientWithResponses) PostSettingsRadarrWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostSettingsRadarrResponse, error){
    rsp, err := c.PostSettingsRadarrWithBody(ctx, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostSettingsRadarrResponse(rsp)
}


func (c *ClientWithResponses) PostSettingsRadarrWithResponse(ctx context.Context, body PostSettingsRadarrJSONRequestBody, reqEditors... RequestEditorFn) (*PostSettingsRadarrResponse, error) {
    rsp, err := c.PostSettingsRadarr(ctx, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostSettingsRadarrResponse(rsp)
}






// PostSettingsRadarrTestWithBodyWithResponse request with arbitrary body returning *PostSettingsRadarrTestResponse
func (c *ClientWithResponses) PostSettingsRadarrTestWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostSettingsRadarrTestResponse, error){
    rsp, err := c.PostSettingsRadarrTestWithBody(ctx, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostSettingsRadarrTestResponse(rsp)
}


func (c *ClientWithResponses) PostSettingsRadarrTestWithResponse(ctx context.Context, body PostSettingsRadarrTestJSONRequestBody, reqEditors... RequestEditorFn) (*PostSettingsRadarrTestResponse, error) {
    rsp, err := c.PostSettingsRadarrTest(ctx, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostSettingsRadarrTestResponse(rsp)
}






// DeleteSettingsRadarrRadarrIdWithResponse request returning *DeleteSettingsRadarrRadarrIdResponse
func (c *ClientWithResponses) DeleteSettingsRadarrRadarrIdWithResponse(ctx context.Context, radarrId int, reqEditors... RequestEditorFn) (*DeleteSettingsRadarrRadarrIdResponse, error){
    rsp, err := c.DeleteSettingsRadarrRadarrId(ctx, radarrId, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseDeleteSettingsRadarrRadarrIdResponse(rsp)
}






// PutSettingsRadarrRadarrIdWithBodyWithResponse request with arbitrary body returning *PutSettingsRadarrRadarrIdResponse
func (c *ClientWithResponses) PutSettingsRadarrRadarrIdWithBodyWithResponse(ctx context.Context, radarrId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PutSettingsRadarrRadarrIdResponse, error){
    rsp, err := c.PutSettingsRadarrRadarrIdWithBody(ctx, radarrId, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePutSettingsRadarrRadarrIdResponse(rsp)
}


func (c *ClientWithResponses) PutSettingsRadarrRadarrIdWithResponse(ctx context.Context, radarrId int, body PutSettingsRadarrRadarrIdJSONRequestBody, reqEditors... RequestEditorFn) (*PutSettingsRadarrRadarrIdResponse, error) {
    rsp, err := c.PutSettingsRadarrRadarrId(ctx, radarrId, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePutSettingsRadarrRadarrIdResponse(rsp)
}






// GetSettingsRadarrRadarrIdProfilesWithResponse request returning *GetSettingsRadarrRadarrIdProfilesResponse
func (c *ClientWithResponses) GetSettingsRadarrRadarrIdProfilesWithResponse(ctx context.Context, radarrId int, reqEditors... RequestEditorFn) (*GetSettingsRadarrRadarrIdProfilesResponse, error){
    rsp, err := c.GetSettingsRadarrRadarrIdProfiles(ctx, radarrId, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetSettingsRadarrRadarrIdProfilesResponse(rsp)
}






// GetSettingsSonarrWithResponse request returning *GetSettingsSonarrResponse
func (c *ClientWithResponses) GetSettingsSonarrWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*GetSettingsSonarrResponse, error){
    rsp, err := c.GetSettingsSonarr(ctx, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetSettingsSonarrResponse(rsp)
}






// PostSettingsSonarrWithBodyWithResponse request with arbitrary body returning *PostSettingsSonarrResponse
func (c *ClientWithResponses) PostSettingsSonarrWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostSettingsSonarrResponse, error){
    rsp, err := c.PostSettingsSonarrWithBody(ctx, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostSettingsSonarrResponse(rsp)
}


func (c *ClientWithResponses) PostSettingsSonarrWithResponse(ctx context.Context, body PostSettingsSonarrJSONRequestBody, reqEditors... RequestEditorFn) (*PostSettingsSonarrResponse, error) {
    rsp, err := c.PostSettingsSonarr(ctx, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostSettingsSonarrResponse(rsp)
}






// PostSettingsSonarrTestWithBodyWithResponse request with arbitrary body returning *PostSettingsSonarrTestResponse
func (c *ClientWithResponses) PostSettingsSonarrTestWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostSettingsSonarrTestResponse, error){
    rsp, err := c.PostSettingsSonarrTestWithBody(ctx, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostSettingsSonarrTestResponse(rsp)
}


func (c *ClientWithResponses) PostSettingsSonarrTestWithResponse(ctx context.Context, body PostSettingsSonarrTestJSONRequestBody, reqEditors... RequestEditorFn) (*PostSettingsSonarrTestResponse, error) {
    rsp, err := c.PostSettingsSonarrTest(ctx, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostSettingsSonarrTestResponse(rsp)
}






// DeleteSettingsSonarrSonarrIdWithResponse request returning *DeleteSettingsSonarrSonarrIdResponse
func (c *ClientWithResponses) DeleteSettingsSonarrSonarrIdWithResponse(ctx context.Context, sonarrId int, reqEditors... RequestEditorFn) (*DeleteSettingsSonarrSonarrIdResponse, error){
    rsp, err := c.DeleteSettingsSonarrSonarrId(ctx, sonarrId, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseDeleteSettingsSonarrSonarrIdResponse(rsp)
}






// PutSettingsSonarrSonarrIdWithBodyWithResponse request with arbitrary body returning *PutSettingsSonarrSonarrIdResponse
func (c *ClientWithResponses) PutSettingsSonarrSonarrIdWithBodyWithResponse(ctx context.Context, sonarrId int, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PutSettingsSonarrSonarrIdResponse, error){
    rsp, err := c.PutSettingsSonarrSonarrIdWithBody(ctx, sonarrId, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePutSettingsSonarrSonarrIdResponse(rsp)
}


func (c *ClientWithResponses) PutSettingsSonarrSonarrIdWithResponse(ctx context.Context, sonarrId int, body PutSettingsSonarrSonarrIdJSONRequestBody, reqEditors... RequestEditorFn) (*PutSettingsSonarrSonarrIdResponse, error) {
    rsp, err := c.PutSettingsSonarrSonarrId(ctx, sonarrId, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePutSettingsSonarrSonarrIdResponse(rsp)
}






// GetSettingsTautulliWithResponse request returning *GetSettingsTautulliResponse
func (c *ClientWithResponses) GetSettingsTautulliWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*GetSettingsTautulliResponse, error){
    rsp, err := c.GetSettingsTautulli(ctx, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetSettingsTautulliResponse(rsp)
}






// PostSettingsTautulliWithBodyWithResponse request with arbitrary body returning *PostSettingsTautulliResponse
func (c *ClientWithResponses) PostSettingsTautulliWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostSettingsTautulliResponse, error){
    rsp, err := c.PostSettingsTautulliWithBody(ctx, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostSettingsTautulliResponse(rsp)
}


func (c *ClientWithResponses) PostSettingsTautulliWithResponse(ctx context.Context, body PostSettingsTautulliJSONRequestBody, reqEditors... RequestEditorFn) (*PostSettingsTautulliResponse, error) {
    rsp, err := c.PostSettingsTautulli(ctx, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostSettingsTautulliResponse(rsp)
}






// GetStatusWithResponse request returning *GetStatusResponse
func (c *ClientWithResponses) GetStatusWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*GetStatusResponse, error){
    rsp, err := c.GetStatus(ctx, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetStatusResponse(rsp)
}






// GetStatusAppdataWithResponse request returning *GetStatusAppdataResponse
func (c *ClientWithResponses) GetStatusAppdataWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*GetStatusAppdataResponse, error){
    rsp, err := c.GetStatusAppdata(ctx, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetStatusAppdataResponse(rsp)
}






// GetStudioStudioIdWithResponse request returning *GetStudioStudioIdResponse
func (c *ClientWithResponses) GetStudioStudioIdWithResponse(ctx context.Context, studioId float32, reqEditors... RequestEditorFn) (*GetStudioStudioIdResponse, error){
    rsp, err := c.GetStudioStudioId(ctx, studioId, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetStudioStudioIdResponse(rsp)
}






// GetTvTvIdWithResponse request returning *GetTvTvIdResponse
func (c *ClientWithResponses) GetTvTvIdWithResponse(ctx context.Context, tvId float32, params *GetTvTvIdParams, reqEditors... RequestEditorFn) (*GetTvTvIdResponse, error){
    rsp, err := c.GetTvTvId(ctx, tvId, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetTvTvIdResponse(rsp)
}






// GetTvTvIdRatingsWithResponse request returning *GetTvTvIdRatingsResponse
func (c *ClientWithResponses) GetTvTvIdRatingsWithResponse(ctx context.Context, tvId float32, reqEditors... RequestEditorFn) (*GetTvTvIdRatingsResponse, error){
    rsp, err := c.GetTvTvIdRatings(ctx, tvId, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetTvTvIdRatingsResponse(rsp)
}






// GetTvTvIdRecommendationsWithResponse request returning *GetTvTvIdRecommendationsResponse
func (c *ClientWithResponses) GetTvTvIdRecommendationsWithResponse(ctx context.Context, tvId float32, params *GetTvTvIdRecommendationsParams, reqEditors... RequestEditorFn) (*GetTvTvIdRecommendationsResponse, error){
    rsp, err := c.GetTvTvIdRecommendations(ctx, tvId, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetTvTvIdRecommendationsResponse(rsp)
}






// GetTvTvIdSeasonSeasonIdWithResponse request returning *GetTvTvIdSeasonSeasonIdResponse
func (c *ClientWithResponses) GetTvTvIdSeasonSeasonIdWithResponse(ctx context.Context, tvId float32, seasonId float32, params *GetTvTvIdSeasonSeasonIdParams, reqEditors... RequestEditorFn) (*GetTvTvIdSeasonSeasonIdResponse, error){
    rsp, err := c.GetTvTvIdSeasonSeasonId(ctx, tvId, seasonId, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetTvTvIdSeasonSeasonIdResponse(rsp)
}






// GetTvTvIdSimilarWithResponse request returning *GetTvTvIdSimilarResponse
func (c *ClientWithResponses) GetTvTvIdSimilarWithResponse(ctx context.Context, tvId float32, params *GetTvTvIdSimilarParams, reqEditors... RequestEditorFn) (*GetTvTvIdSimilarResponse, error){
    rsp, err := c.GetTvTvIdSimilar(ctx, tvId, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetTvTvIdSimilarResponse(rsp)
}






// GetUserWithResponse request returning *GetUserResponse
func (c *ClientWithResponses) GetUserWithResponse(ctx context.Context, params *GetUserParams, reqEditors... RequestEditorFn) (*GetUserResponse, error){
    rsp, err := c.GetUser(ctx, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetUserResponse(rsp)
}






// PostUserWithBodyWithResponse request with arbitrary body returning *PostUserResponse
func (c *ClientWithResponses) PostUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostUserResponse, error){
    rsp, err := c.PostUserWithBody(ctx, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostUserResponse(rsp)
}


func (c *ClientWithResponses) PostUserWithResponse(ctx context.Context, body PostUserJSONRequestBody, reqEditors... RequestEditorFn) (*PostUserResponse, error) {
    rsp, err := c.PostUser(ctx, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostUserResponse(rsp)
}






// PutUserWithBodyWithResponse request with arbitrary body returning *PutUserResponse
func (c *ClientWithResponses) PutUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PutUserResponse, error){
    rsp, err := c.PutUserWithBody(ctx, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePutUserResponse(rsp)
}


func (c *ClientWithResponses) PutUserWithResponse(ctx context.Context, body PutUserJSONRequestBody, reqEditors... RequestEditorFn) (*PutUserResponse, error) {
    rsp, err := c.PutUser(ctx, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePutUserResponse(rsp)
}






// PostUserImportFromJellyfinWithBodyWithResponse request with arbitrary body returning *PostUserImportFromJellyfinResponse
func (c *ClientWithResponses) PostUserImportFromJellyfinWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostUserImportFromJellyfinResponse, error){
    rsp, err := c.PostUserImportFromJellyfinWithBody(ctx, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostUserImportFromJellyfinResponse(rsp)
}


func (c *ClientWithResponses) PostUserImportFromJellyfinWithResponse(ctx context.Context, body PostUserImportFromJellyfinJSONRequestBody, reqEditors... RequestEditorFn) (*PostUserImportFromJellyfinResponse, error) {
    rsp, err := c.PostUserImportFromJellyfin(ctx, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostUserImportFromJellyfinResponse(rsp)
}






// PostUserImportFromPlexWithBodyWithResponse request with arbitrary body returning *PostUserImportFromPlexResponse
func (c *ClientWithResponses) PostUserImportFromPlexWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostUserImportFromPlexResponse, error){
    rsp, err := c.PostUserImportFromPlexWithBody(ctx, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostUserImportFromPlexResponse(rsp)
}


func (c *ClientWithResponses) PostUserImportFromPlexWithResponse(ctx context.Context, body PostUserImportFromPlexJSONRequestBody, reqEditors... RequestEditorFn) (*PostUserImportFromPlexResponse, error) {
    rsp, err := c.PostUserImportFromPlex(ctx, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostUserImportFromPlexResponse(rsp)
}






// PostUserRegisterPushSubscriptionWithBodyWithResponse request with arbitrary body returning *PostUserRegisterPushSubscriptionResponse
func (c *ClientWithResponses) PostUserRegisterPushSubscriptionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostUserRegisterPushSubscriptionResponse, error){
    rsp, err := c.PostUserRegisterPushSubscriptionWithBody(ctx, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostUserRegisterPushSubscriptionResponse(rsp)
}


func (c *ClientWithResponses) PostUserRegisterPushSubscriptionWithResponse(ctx context.Context, body PostUserRegisterPushSubscriptionJSONRequestBody, reqEditors... RequestEditorFn) (*PostUserRegisterPushSubscriptionResponse, error) {
    rsp, err := c.PostUserRegisterPushSubscription(ctx, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostUserRegisterPushSubscriptionResponse(rsp)
}






// DeleteUserUserIdWithResponse request returning *DeleteUserUserIdResponse
func (c *ClientWithResponses) DeleteUserUserIdWithResponse(ctx context.Context, userId float32, reqEditors... RequestEditorFn) (*DeleteUserUserIdResponse, error){
    rsp, err := c.DeleteUserUserId(ctx, userId, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseDeleteUserUserIdResponse(rsp)
}






// GetUserUserIdWithResponse request returning *GetUserUserIdResponse
func (c *ClientWithResponses) GetUserUserIdWithResponse(ctx context.Context, userId float32, reqEditors... RequestEditorFn) (*GetUserUserIdResponse, error){
    rsp, err := c.GetUserUserId(ctx, userId, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetUserUserIdResponse(rsp)
}






// PutUserUserIdWithBodyWithResponse request with arbitrary body returning *PutUserUserIdResponse
func (c *ClientWithResponses) PutUserUserIdWithBodyWithResponse(ctx context.Context, userId float32, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PutUserUserIdResponse, error){
    rsp, err := c.PutUserUserIdWithBody(ctx, userId, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePutUserUserIdResponse(rsp)
}


func (c *ClientWithResponses) PutUserUserIdWithResponse(ctx context.Context, userId float32, body PutUserUserIdJSONRequestBody, reqEditors... RequestEditorFn) (*PutUserUserIdResponse, error) {
    rsp, err := c.PutUserUserId(ctx, userId, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePutUserUserIdResponse(rsp)
}






// GetUserUserIdQuotaWithResponse request returning *GetUserUserIdQuotaResponse
func (c *ClientWithResponses) GetUserUserIdQuotaWithResponse(ctx context.Context, userId float32, reqEditors... RequestEditorFn) (*GetUserUserIdQuotaResponse, error){
    rsp, err := c.GetUserUserIdQuota(ctx, userId, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetUserUserIdQuotaResponse(rsp)
}






// GetUserUserIdRequestsWithResponse request returning *GetUserUserIdRequestsResponse
func (c *ClientWithResponses) GetUserUserIdRequestsWithResponse(ctx context.Context, userId float32, params *GetUserUserIdRequestsParams, reqEditors... RequestEditorFn) (*GetUserUserIdRequestsResponse, error){
    rsp, err := c.GetUserUserIdRequests(ctx, userId, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetUserUserIdRequestsResponse(rsp)
}






// GetUserUserIdSettingsMainWithResponse request returning *GetUserUserIdSettingsMainResponse
func (c *ClientWithResponses) GetUserUserIdSettingsMainWithResponse(ctx context.Context, userId float32, reqEditors... RequestEditorFn) (*GetUserUserIdSettingsMainResponse, error){
    rsp, err := c.GetUserUserIdSettingsMain(ctx, userId, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetUserUserIdSettingsMainResponse(rsp)
}






// PostUserUserIdSettingsMainWithBodyWithResponse request with arbitrary body returning *PostUserUserIdSettingsMainResponse
func (c *ClientWithResponses) PostUserUserIdSettingsMainWithBodyWithResponse(ctx context.Context, userId float32, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostUserUserIdSettingsMainResponse, error){
    rsp, err := c.PostUserUserIdSettingsMainWithBody(ctx, userId, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostUserUserIdSettingsMainResponse(rsp)
}


func (c *ClientWithResponses) PostUserUserIdSettingsMainWithResponse(ctx context.Context, userId float32, body PostUserUserIdSettingsMainJSONRequestBody, reqEditors... RequestEditorFn) (*PostUserUserIdSettingsMainResponse, error) {
    rsp, err := c.PostUserUserIdSettingsMain(ctx, userId, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostUserUserIdSettingsMainResponse(rsp)
}






// GetUserUserIdSettingsNotificationsWithResponse request returning *GetUserUserIdSettingsNotificationsResponse
func (c *ClientWithResponses) GetUserUserIdSettingsNotificationsWithResponse(ctx context.Context, userId float32, reqEditors... RequestEditorFn) (*GetUserUserIdSettingsNotificationsResponse, error){
    rsp, err := c.GetUserUserIdSettingsNotifications(ctx, userId, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetUserUserIdSettingsNotificationsResponse(rsp)
}






// PostUserUserIdSettingsNotificationsWithBodyWithResponse request with arbitrary body returning *PostUserUserIdSettingsNotificationsResponse
func (c *ClientWithResponses) PostUserUserIdSettingsNotificationsWithBodyWithResponse(ctx context.Context, userId float32, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostUserUserIdSettingsNotificationsResponse, error){
    rsp, err := c.PostUserUserIdSettingsNotificationsWithBody(ctx, userId, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostUserUserIdSettingsNotificationsResponse(rsp)
}


func (c *ClientWithResponses) PostUserUserIdSettingsNotificationsWithResponse(ctx context.Context, userId float32, body PostUserUserIdSettingsNotificationsJSONRequestBody, reqEditors... RequestEditorFn) (*PostUserUserIdSettingsNotificationsResponse, error) {
    rsp, err := c.PostUserUserIdSettingsNotifications(ctx, userId, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostUserUserIdSettingsNotificationsResponse(rsp)
}






// GetUserUserIdSettingsPasswordWithResponse request returning *GetUserUserIdSettingsPasswordResponse
func (c *ClientWithResponses) GetUserUserIdSettingsPasswordWithResponse(ctx context.Context, userId float32, reqEditors... RequestEditorFn) (*GetUserUserIdSettingsPasswordResponse, error){
    rsp, err := c.GetUserUserIdSettingsPassword(ctx, userId, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetUserUserIdSettingsPasswordResponse(rsp)
}






// PostUserUserIdSettingsPasswordWithBodyWithResponse request with arbitrary body returning *PostUserUserIdSettingsPasswordResponse
func (c *ClientWithResponses) PostUserUserIdSettingsPasswordWithBodyWithResponse(ctx context.Context, userId float32, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostUserUserIdSettingsPasswordResponse, error){
    rsp, err := c.PostUserUserIdSettingsPasswordWithBody(ctx, userId, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostUserUserIdSettingsPasswordResponse(rsp)
}


func (c *ClientWithResponses) PostUserUserIdSettingsPasswordWithResponse(ctx context.Context, userId float32, body PostUserUserIdSettingsPasswordJSONRequestBody, reqEditors... RequestEditorFn) (*PostUserUserIdSettingsPasswordResponse, error) {
    rsp, err := c.PostUserUserIdSettingsPassword(ctx, userId, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostUserUserIdSettingsPasswordResponse(rsp)
}






// GetUserUserIdSettingsPermissionsWithResponse request returning *GetUserUserIdSettingsPermissionsResponse
func (c *ClientWithResponses) GetUserUserIdSettingsPermissionsWithResponse(ctx context.Context, userId float32, reqEditors... RequestEditorFn) (*GetUserUserIdSettingsPermissionsResponse, error){
    rsp, err := c.GetUserUserIdSettingsPermissions(ctx, userId, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetUserUserIdSettingsPermissionsResponse(rsp)
}






// PostUserUserIdSettingsPermissionsWithBodyWithResponse request with arbitrary body returning *PostUserUserIdSettingsPermissionsResponse
func (c *ClientWithResponses) PostUserUserIdSettingsPermissionsWithBodyWithResponse(ctx context.Context, userId float32, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostUserUserIdSettingsPermissionsResponse, error){
    rsp, err := c.PostUserUserIdSettingsPermissionsWithBody(ctx, userId, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostUserUserIdSettingsPermissionsResponse(rsp)
}


func (c *ClientWithResponses) PostUserUserIdSettingsPermissionsWithResponse(ctx context.Context, userId float32, body PostUserUserIdSettingsPermissionsJSONRequestBody, reqEditors... RequestEditorFn) (*PostUserUserIdSettingsPermissionsResponse, error) {
    rsp, err := c.PostUserUserIdSettingsPermissions(ctx, userId, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostUserUserIdSettingsPermissionsResponse(rsp)
}






// GetUserUserIdWatchDataWithResponse request returning *GetUserUserIdWatchDataResponse
func (c *ClientWithResponses) GetUserUserIdWatchDataWithResponse(ctx context.Context, userId float32, reqEditors... RequestEditorFn) (*GetUserUserIdWatchDataResponse, error){
    rsp, err := c.GetUserUserIdWatchData(ctx, userId, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetUserUserIdWatchDataResponse(rsp)
}






// GetUserUserIdWatchlistWithResponse request returning *GetUserUserIdWatchlistResponse
func (c *ClientWithResponses) GetUserUserIdWatchlistWithResponse(ctx context.Context, userId float32, params *GetUserUserIdWatchlistParams, reqEditors... RequestEditorFn) (*GetUserUserIdWatchlistResponse, error){
    rsp, err := c.GetUserUserIdWatchlist(ctx, userId, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetUserUserIdWatchlistResponse(rsp)
}






// PostWatchlistWithBodyWithResponse request with arbitrary body returning *PostWatchlistResponse
func (c *ClientWithResponses) PostWatchlistWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors... RequestEditorFn) (*PostWatchlistResponse, error){
    rsp, err := c.PostWatchlistWithBody(ctx, contentType, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostWatchlistResponse(rsp)
}


func (c *ClientWithResponses) PostWatchlistWithResponse(ctx context.Context, body PostWatchlistJSONRequestBody, reqEditors... RequestEditorFn) (*PostWatchlistResponse, error) {
    rsp, err := c.PostWatchlist(ctx, body, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParsePostWatchlistResponse(rsp)
}






// DeleteWatchlistTmdbIdWithResponse request returning *DeleteWatchlistTmdbIdResponse
func (c *ClientWithResponses) DeleteWatchlistTmdbIdWithResponse(ctx context.Context, tmdbId string, reqEditors... RequestEditorFn) (*DeleteWatchlistTmdbIdResponse, error){
    rsp, err := c.DeleteWatchlistTmdbId(ctx, tmdbId, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseDeleteWatchlistTmdbIdResponse(rsp)
}






// GetWatchprovidersMoviesWithResponse request returning *GetWatchprovidersMoviesResponse
func (c *ClientWithResponses) GetWatchprovidersMoviesWithResponse(ctx context.Context, params *GetWatchprovidersMoviesParams, reqEditors... RequestEditorFn) (*GetWatchprovidersMoviesResponse, error){
    rsp, err := c.GetWatchprovidersMovies(ctx, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetWatchprovidersMoviesResponse(rsp)
}






// GetWatchprovidersRegionsWithResponse request returning *GetWatchprovidersRegionsResponse
func (c *ClientWithResponses) GetWatchprovidersRegionsWithResponse(ctx context.Context, reqEditors... RequestEditorFn) (*GetWatchprovidersRegionsResponse, error){
    rsp, err := c.GetWatchprovidersRegions(ctx, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetWatchprovidersRegionsResponse(rsp)
}






// GetWatchprovidersTvWithResponse request returning *GetWatchprovidersTvResponse
func (c *ClientWithResponses) GetWatchprovidersTvWithResponse(ctx context.Context, params *GetWatchprovidersTvParams, reqEditors... RequestEditorFn) (*GetWatchprovidersTvResponse, error){
    rsp, err := c.GetWatchprovidersTv(ctx, params, reqEditors...)
    if err != nil {
        return nil, err
    }
    return ParseGetWatchprovidersTvResponse(rsp)
}








// ParsePostAuthJellyfinResponse parses an HTTP response from a PostAuthJellyfinWithResponse call
func ParsePostAuthJellyfinResponse(rsp *http.Response) (*PostAuthJellyfinResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &PostAuthJellyfinResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest User
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParsePostAuthLocalResponse parses an HTTP response from a PostAuthLocalWithResponse call
func ParsePostAuthLocalResponse(rsp *http.Response) (*PostAuthLocalResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &PostAuthLocalResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest User
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParsePostAuthLogoutResponse parses an HTTP response from a PostAuthLogoutWithResponse call
func ParsePostAuthLogoutResponse(rsp *http.Response) (*PostAuthLogoutResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &PostAuthLogoutResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest struct {
    Status *string`json:"status,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseGetAuthMeResponse parses an HTTP response from a GetAuthMeWithResponse call
func ParseGetAuthMeResponse(rsp *http.Response) (*GetAuthMeResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetAuthMeResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest User
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParsePostAuthPlexResponse parses an HTTP response from a PostAuthPlexWithResponse call
func ParsePostAuthPlexResponse(rsp *http.Response) (*PostAuthPlexResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &PostAuthPlexResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest User
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParsePostAuthResetPasswordResponse parses an HTTP response from a PostAuthResetPasswordWithResponse call
func ParsePostAuthResetPasswordResponse(rsp *http.Response) (*PostAuthResetPasswordResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &PostAuthResetPasswordResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest struct {
    Status *string`json:"status,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParsePostAuthResetPasswordGuidResponse parses an HTTP response from a PostAuthResetPasswordGuidWithResponse call
func ParsePostAuthResetPasswordGuidResponse(rsp *http.Response) (*PostAuthResetPasswordGuidResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &PostAuthResetPasswordGuidResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest struct {
    Status *string`json:"status,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseGetBackdropsResponse parses an HTTP response from a GetBackdropsWithResponse call
func ParseGetBackdropsResponse(rsp *http.Response) (*GetBackdropsResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetBackdropsResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest []string
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseGetCollectionCollectionIdResponse parses an HTTP response from a GetCollectionCollectionIdWithResponse call
func ParseGetCollectionCollectionIdResponse(rsp *http.Response) (*GetCollectionCollectionIdResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetCollectionCollectionIdResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest Collection
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseGetDiscoverGenresliderMovieResponse parses an HTTP response from a GetDiscoverGenresliderMovieWithResponse call
func ParseGetDiscoverGenresliderMovieResponse(rsp *http.Response) (*GetDiscoverGenresliderMovieResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetDiscoverGenresliderMovieResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest []struct {
    Backdrops *[]string`json:"backdrops,omitempty"`
    Id *float32`json:"id,omitempty"`
    Name *string`json:"name,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseGetDiscoverGenresliderTvResponse parses an HTTP response from a GetDiscoverGenresliderTvWithResponse call
func ParseGetDiscoverGenresliderTvResponse(rsp *http.Response) (*GetDiscoverGenresliderTvResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetDiscoverGenresliderTvResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest []struct {
    Backdrops *[]string`json:"backdrops,omitempty"`
    Id *float32`json:"id,omitempty"`
    Name *string`json:"name,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseGetDiscoverKeywordKeywordIdMoviesResponse parses an HTTP response from a GetDiscoverKeywordKeywordIdMoviesWithResponse call
func ParseGetDiscoverKeywordKeywordIdMoviesResponse(rsp *http.Response) (*GetDiscoverKeywordKeywordIdMoviesResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetDiscoverKeywordKeywordIdMoviesResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest struct {
    Page *float32`json:"page,omitempty"`
    Results *[]MovieResult`json:"results,omitempty"`
    TotalPages *float32`json:"totalPages,omitempty"`
    TotalResults *float32`json:"totalResults,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseGetDiscoverMoviesResponse parses an HTTP response from a GetDiscoverMoviesWithResponse call
func ParseGetDiscoverMoviesResponse(rsp *http.Response) (*GetDiscoverMoviesResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetDiscoverMoviesResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest struct {
    Page *float32`json:"page,omitempty"`
    Results *[]MovieResult`json:"results,omitempty"`
    TotalPages *float32`json:"totalPages,omitempty"`
    TotalResults *float32`json:"totalResults,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseGetDiscoverMoviesGenreGenreIdResponse parses an HTTP response from a GetDiscoverMoviesGenreGenreIdWithResponse call
func ParseGetDiscoverMoviesGenreGenreIdResponse(rsp *http.Response) (*GetDiscoverMoviesGenreGenreIdResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetDiscoverMoviesGenreGenreIdResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest struct {
    Genre *Genre`json:"genre,omitempty"`
    Page *float32`json:"page,omitempty"`
    Results *[]MovieResult`json:"results,omitempty"`
    TotalPages *float32`json:"totalPages,omitempty"`
    TotalResults *float32`json:"totalResults,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseGetDiscoverMoviesLanguageLanguageResponse parses an HTTP response from a GetDiscoverMoviesLanguageLanguageWithResponse call
func ParseGetDiscoverMoviesLanguageLanguageResponse(rsp *http.Response) (*GetDiscoverMoviesLanguageLanguageResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetDiscoverMoviesLanguageLanguageResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest struct {
    Language *SpokenLanguage`json:"language,omitempty"`
    Page *float32`json:"page,omitempty"`
    Results *[]MovieResult`json:"results,omitempty"`
    TotalPages *float32`json:"totalPages,omitempty"`
    TotalResults *float32`json:"totalResults,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseGetDiscoverMoviesStudioStudioIdResponse parses an HTTP response from a GetDiscoverMoviesStudioStudioIdWithResponse call
func ParseGetDiscoverMoviesStudioStudioIdResponse(rsp *http.Response) (*GetDiscoverMoviesStudioStudioIdResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetDiscoverMoviesStudioStudioIdResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest struct {
    Page *float32`json:"page,omitempty"`
    Results *[]MovieResult`json:"results,omitempty"`
    Studio *ProductionCompany`json:"studio,omitempty"`
    TotalPages *float32`json:"totalPages,omitempty"`
    TotalResults *float32`json:"totalResults,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseGetDiscoverMoviesUpcomingResponse parses an HTTP response from a GetDiscoverMoviesUpcomingWithResponse call
func ParseGetDiscoverMoviesUpcomingResponse(rsp *http.Response) (*GetDiscoverMoviesUpcomingResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetDiscoverMoviesUpcomingResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest struct {
    Page *float32`json:"page,omitempty"`
    Results *[]MovieResult`json:"results,omitempty"`
    TotalPages *float32`json:"totalPages,omitempty"`
    TotalResults *float32`json:"totalResults,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseGetDiscoverTrendingResponse parses an HTTP response from a GetDiscoverTrendingWithResponse call
func ParseGetDiscoverTrendingResponse(rsp *http.Response) (*GetDiscoverTrendingResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetDiscoverTrendingResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest struct {
    Page *float32`json:"page,omitempty"`
    Results *[]200_Results_Item`json:"results,omitempty"`
    TotalPages *float32`json:"totalPages,omitempty"`
    TotalResults *float32`json:"totalResults,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseGetDiscoverTvResponse parses an HTTP response from a GetDiscoverTvWithResponse call
func ParseGetDiscoverTvResponse(rsp *http.Response) (*GetDiscoverTvResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetDiscoverTvResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest struct {
    Page *float32`json:"page,omitempty"`
    Results *[]TvResult`json:"results,omitempty"`
    TotalPages *float32`json:"totalPages,omitempty"`
    TotalResults *float32`json:"totalResults,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseGetDiscoverTvGenreGenreIdResponse parses an HTTP response from a GetDiscoverTvGenreGenreIdWithResponse call
func ParseGetDiscoverTvGenreGenreIdResponse(rsp *http.Response) (*GetDiscoverTvGenreGenreIdResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetDiscoverTvGenreGenreIdResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest struct {
    Genre *Genre`json:"genre,omitempty"`
    Page *float32`json:"page,omitempty"`
    Results *[]TvResult`json:"results,omitempty"`
    TotalPages *float32`json:"totalPages,omitempty"`
    TotalResults *float32`json:"totalResults,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseGetDiscoverTvLanguageLanguageResponse parses an HTTP response from a GetDiscoverTvLanguageLanguageWithResponse call
func ParseGetDiscoverTvLanguageLanguageResponse(rsp *http.Response) (*GetDiscoverTvLanguageLanguageResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetDiscoverTvLanguageLanguageResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest struct {
    Language *SpokenLanguage`json:"language,omitempty"`
    Page *float32`json:"page,omitempty"`
    Results *[]TvResult`json:"results,omitempty"`
    TotalPages *float32`json:"totalPages,omitempty"`
    TotalResults *float32`json:"totalResults,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseGetDiscoverTvNetworkNetworkIdResponse parses an HTTP response from a GetDiscoverTvNetworkNetworkIdWithResponse call
func ParseGetDiscoverTvNetworkNetworkIdResponse(rsp *http.Response) (*GetDiscoverTvNetworkNetworkIdResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetDiscoverTvNetworkNetworkIdResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest struct {
    Network *Network`json:"network,omitempty"`
    Page *float32`json:"page,omitempty"`
    Results *[]TvResult`json:"results,omitempty"`
    TotalPages *float32`json:"totalPages,omitempty"`
    TotalResults *float32`json:"totalResults,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseGetDiscoverTvUpcomingResponse parses an HTTP response from a GetDiscoverTvUpcomingWithResponse call
func ParseGetDiscoverTvUpcomingResponse(rsp *http.Response) (*GetDiscoverTvUpcomingResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetDiscoverTvUpcomingResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest struct {
    Page *float32`json:"page,omitempty"`
    Results *[]TvResult`json:"results,omitempty"`
    TotalPages *float32`json:"totalPages,omitempty"`
    TotalResults *float32`json:"totalResults,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseGetDiscoverWatchlistResponse parses an HTTP response from a GetDiscoverWatchlistWithResponse call
func ParseGetDiscoverWatchlistResponse(rsp *http.Response) (*GetDiscoverWatchlistResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetDiscoverWatchlistResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest struct {
    Page *float32`json:"page,omitempty"`
    Results *[]struct {
    RatingKey *string`json:"ratingKey,omitempty"`
    Title *string`json:"title,omitempty"`
    TmdbId *float32`json:"tmdbId,omitempty"`
    Type *string`json:"type,omitempty"`
}`json:"results,omitempty"`
    TotalPages *float32`json:"totalPages,omitempty"`
    TotalResults *float32`json:"totalResults,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseGetGenresMovieResponse parses an HTTP response from a GetGenresMovieWithResponse call
func ParseGetGenresMovieResponse(rsp *http.Response) (*GetGenresMovieResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetGenresMovieResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest []struct {
    Id *float32`json:"id,omitempty"`
    Name *string`json:"name,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseGetGenresTvResponse parses an HTTP response from a GetGenresTvWithResponse call
func ParseGetGenresTvResponse(rsp *http.Response) (*GetGenresTvResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetGenresTvResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest []struct {
    Id *float32`json:"id,omitempty"`
    Name *string`json:"name,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseGetIssueResponse parses an HTTP response from a GetIssueWithResponse call
func ParseGetIssueResponse(rsp *http.Response) (*GetIssueResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetIssueResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest struct {
    PageInfo *PageInfo`json:"pageInfo,omitempty"`
    Results *[]Issue`json:"results,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParsePostIssueResponse parses an HTTP response from a PostIssueWithResponse call
func ParsePostIssueResponse(rsp *http.Response) (*PostIssueResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &PostIssueResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
var dest Issue
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON201 = &dest

}


    return response, nil
}


// ParseGetIssueCountResponse parses an HTTP response from a GetIssueCountWithResponse call
func ParseGetIssueCountResponse(rsp *http.Response) (*GetIssueCountResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetIssueCountResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest struct {
    Audio *float32`json:"audio,omitempty"`
    Closed *float32`json:"closed,omitempty"`
    Open *float32`json:"open,omitempty"`
    Others *float32`json:"others,omitempty"`
    Subtitles *float32`json:"subtitles,omitempty"`
    Total *float32`json:"total,omitempty"`
    Video *float32`json:"video,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseDeleteIssueIssueIdResponse parses an HTTP response from a DeleteIssueIssueIdWithResponse call
func ParseDeleteIssueIssueIdResponse(rsp *http.Response) (*DeleteIssueIssueIdResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &DeleteIssueIssueIdResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    

    return response, nil
}


// ParseGetIssueIssueIdResponse parses an HTTP response from a GetIssueIssueIdWithResponse call
func ParseGetIssueIssueIdResponse(rsp *http.Response) (*GetIssueIssueIdResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetIssueIssueIdResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest Issue
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParsePostIssueIssueIdCommentResponse parses an HTTP response from a PostIssueIssueIdCommentWithResponse call
func ParsePostIssueIssueIdCommentResponse(rsp *http.Response) (*PostIssueIssueIdCommentResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &PostIssueIssueIdCommentResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest Issue
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParsePostIssueIssueIdStatusResponse parses an HTTP response from a PostIssueIssueIdStatusWithResponse call
func ParsePostIssueIssueIdStatusResponse(rsp *http.Response) (*PostIssueIssueIdStatusResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &PostIssueIssueIdStatusResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest Issue
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseDeleteIssueCommentCommentIdResponse parses an HTTP response from a DeleteIssueCommentCommentIdWithResponse call
func ParseDeleteIssueCommentCommentIdResponse(rsp *http.Response) (*DeleteIssueCommentCommentIdResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &DeleteIssueCommentCommentIdResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    

    return response, nil
}


// ParseGetIssueCommentCommentIdResponse parses an HTTP response from a GetIssueCommentCommentIdWithResponse call
func ParseGetIssueCommentCommentIdResponse(rsp *http.Response) (*GetIssueCommentCommentIdResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetIssueCommentCommentIdResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest IssueComment
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParsePutIssueCommentCommentIdResponse parses an HTTP response from a PutIssueCommentCommentIdWithResponse call
func ParsePutIssueCommentCommentIdResponse(rsp *http.Response) (*PutIssueCommentCommentIdResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &PutIssueCommentCommentIdResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest IssueComment
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseGetKeywordKeywordIdResponse parses an HTTP response from a GetKeywordKeywordIdWithResponse call
func ParseGetKeywordKeywordIdResponse(rsp *http.Response) (*GetKeywordKeywordIdResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetKeywordKeywordIdResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest Keyword
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseGetLanguagesResponse parses an HTTP response from a GetLanguagesWithResponse call
func ParseGetLanguagesResponse(rsp *http.Response) (*GetLanguagesResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetLanguagesResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest []struct {
    EnglishName *string`json:"english_name,omitempty"`
    Iso6391 *string`json:"iso_639_1,omitempty"`
    Name *string`json:"name,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseGetMediaResponse parses an HTTP response from a GetMediaWithResponse call
func ParseGetMediaResponse(rsp *http.Response) (*GetMediaResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetMediaResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest struct {
    PageInfo *PageInfo`json:"pageInfo,omitempty"`
    Results *[]MediaInfo`json:"results,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseDeleteMediaMediaIdResponse parses an HTTP response from a DeleteMediaMediaIdWithResponse call
func ParseDeleteMediaMediaIdResponse(rsp *http.Response) (*DeleteMediaMediaIdResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &DeleteMediaMediaIdResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    

    return response, nil
}


// ParseDeleteMediaMediaIdFileResponse parses an HTTP response from a DeleteMediaMediaIdFileWithResponse call
func ParseDeleteMediaMediaIdFileResponse(rsp *http.Response) (*DeleteMediaMediaIdFileResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &DeleteMediaMediaIdFileResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    

    return response, nil
}


// ParseGetMediaMediaIdWatchDataResponse parses an HTTP response from a GetMediaMediaIdWatchDataWithResponse call
func ParseGetMediaMediaIdWatchDataResponse(rsp *http.Response) (*GetMediaMediaIdWatchDataResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetMediaMediaIdWatchDataResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest struct {
    Data *struct {
    PlayCount *float32`json:"playCount,omitempty"`
    PlayCount30Days *float32`json:"playCount30Days,omitempty"`
    PlayCount7Days *float32`json:"playCount7Days,omitempty"`
    Users *[]User`json:"users,omitempty"`
}`json:"data,omitempty"`
    Data4k *struct {
    PlayCount *float32`json:"playCount,omitempty"`
    PlayCount30Days *float32`json:"playCount30Days,omitempty"`
    PlayCount7Days *float32`json:"playCount7Days,omitempty"`
    Users *[]User`json:"users,omitempty"`
}`json:"data4k,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParsePostMediaMediaIdStatusResponse parses an HTTP response from a PostMediaMediaIdStatusWithResponse call
func ParsePostMediaMediaIdStatusResponse(rsp *http.Response) (*PostMediaMediaIdStatusResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &PostMediaMediaIdStatusResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest MediaInfo
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseGetMovieMovieIdResponse parses an HTTP response from a GetMovieMovieIdWithResponse call
func ParseGetMovieMovieIdResponse(rsp *http.Response) (*GetMovieMovieIdResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetMovieMovieIdResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest MovieDetails
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseGetMovieMovieIdRatingsResponse parses an HTTP response from a GetMovieMovieIdRatingsWithResponse call
func ParseGetMovieMovieIdRatingsResponse(rsp *http.Response) (*GetMovieMovieIdRatingsResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetMovieMovieIdRatingsResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest struct {
    AudienceRating *N200AudienceRating`json:"audienceRating,omitempty"`
    AudienceScore *float32`json:"audienceScore,omitempty"`
    CriticsRating *N200CriticsRating`json:"criticsRating,omitempty"`
    CriticsScore *float32`json:"criticsScore,omitempty"`
    Title *string`json:"title,omitempty"`
    Url *string`json:"url,omitempty"`
    Year *float32`json:"year,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseGetMovieMovieIdRatingscombinedResponse parses an HTTP response from a GetMovieMovieIdRatingscombinedWithResponse call
func ParseGetMovieMovieIdRatingscombinedResponse(rsp *http.Response) (*GetMovieMovieIdRatingscombinedResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetMovieMovieIdRatingscombinedResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest struct {
    Imdb *struct {
    CriticsScore *float32`json:"criticsScore,omitempty"`
    Title *string`json:"title,omitempty"`
    Url *string`json:"url,omitempty"`
}`json:"imdb,omitempty"`
    Rt *struct {
    AudienceRating *N200RtAudienceRating`json:"audienceRating,omitempty"`
    AudienceScore *float32`json:"audienceScore,omitempty"`
    CriticsRating *N200RtCriticsRating`json:"criticsRating,omitempty"`
    CriticsScore *float32`json:"criticsScore,omitempty"`
    Title *string`json:"title,omitempty"`
    Url *string`json:"url,omitempty"`
    Year *float32`json:"year,omitempty"`
}`json:"rt,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseGetMovieMovieIdRecommendationsResponse parses an HTTP response from a GetMovieMovieIdRecommendationsWithResponse call
func ParseGetMovieMovieIdRecommendationsResponse(rsp *http.Response) (*GetMovieMovieIdRecommendationsResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetMovieMovieIdRecommendationsResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest struct {
    Page *float32`json:"page,omitempty"`
    Results *[]MovieResult`json:"results,omitempty"`
    TotalPages *float32`json:"totalPages,omitempty"`
    TotalResults *float32`json:"totalResults,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseGetMovieMovieIdSimilarResponse parses an HTTP response from a GetMovieMovieIdSimilarWithResponse call
func ParseGetMovieMovieIdSimilarResponse(rsp *http.Response) (*GetMovieMovieIdSimilarResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetMovieMovieIdSimilarResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest struct {
    Page *float32`json:"page,omitempty"`
    Results *[]MovieResult`json:"results,omitempty"`
    TotalPages *float32`json:"totalPages,omitempty"`
    TotalResults *float32`json:"totalResults,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseGetNetworkNetworkIdResponse parses an HTTP response from a GetNetworkNetworkIdWithResponse call
func ParseGetNetworkNetworkIdResponse(rsp *http.Response) (*GetNetworkNetworkIdResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetNetworkNetworkIdResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest ProductionCompany
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseGetPersonPersonIdResponse parses an HTTP response from a GetPersonPersonIdWithResponse call
func ParseGetPersonPersonIdResponse(rsp *http.Response) (*GetPersonPersonIdResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetPersonPersonIdResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest PersonDetails
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseGetPersonPersonIdCombinedCreditsResponse parses an HTTP response from a GetPersonPersonIdCombinedCreditsWithResponse call
func ParseGetPersonPersonIdCombinedCreditsResponse(rsp *http.Response) (*GetPersonPersonIdCombinedCreditsResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetPersonPersonIdCombinedCreditsResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest struct {
    Cast *[]CreditCast`json:"cast,omitempty"`
    Crew *[]CreditCrew`json:"crew,omitempty"`
    Id *float32`json:"id,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseGetRegionsResponse parses an HTTP response from a GetRegionsWithResponse call
func ParseGetRegionsResponse(rsp *http.Response) (*GetRegionsResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetRegionsResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest []struct {
    EnglishName *string`json:"english_name,omitempty"`
    Iso31661 *string`json:"iso_3166_1,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseGetRequestResponse parses an HTTP response from a GetRequestWithResponse call
func ParseGetRequestResponse(rsp *http.Response) (*GetRequestResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetRequestResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest struct {
    PageInfo *PageInfo`json:"pageInfo,omitempty"`
    Results *[]MediaRequest`json:"results,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParsePostRequestResponse parses an HTTP response from a PostRequestWithResponse call
func ParsePostRequestResponse(rsp *http.Response) (*PostRequestResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &PostRequestResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
var dest MediaRequest
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON201 = &dest

}


    return response, nil
}


// ParseGetRequestCountResponse parses an HTTP response from a GetRequestCountWithResponse call
func ParseGetRequestCountResponse(rsp *http.Response) (*GetRequestCountResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetRequestCountResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest struct {
    Approved *float32`json:"approved,omitempty"`
    Available *float32`json:"available,omitempty"`
    Declined *float32`json:"declined,omitempty"`
    Movie *float32`json:"movie,omitempty"`
    Pending *float32`json:"pending,omitempty"`
    Processing *float32`json:"processing,omitempty"`
    Total *float32`json:"total,omitempty"`
    Tv *float32`json:"tv,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseDeleteRequestRequestIdResponse parses an HTTP response from a DeleteRequestRequestIdWithResponse call
func ParseDeleteRequestRequestIdResponse(rsp *http.Response) (*DeleteRequestRequestIdResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &DeleteRequestRequestIdResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    

    return response, nil
}


// ParseGetRequestRequestIdResponse parses an HTTP response from a GetRequestRequestIdWithResponse call
func ParseGetRequestRequestIdResponse(rsp *http.Response) (*GetRequestRequestIdResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetRequestRequestIdResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest MediaRequest
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParsePutRequestRequestIdResponse parses an HTTP response from a PutRequestRequestIdWithResponse call
func ParsePutRequestRequestIdResponse(rsp *http.Response) (*PutRequestRequestIdResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &PutRequestRequestIdResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest MediaRequest
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParsePostRequestRequestIdRetryResponse parses an HTTP response from a PostRequestRequestIdRetryWithResponse call
func ParsePostRequestRequestIdRetryResponse(rsp *http.Response) (*PostRequestRequestIdRetryResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &PostRequestRequestIdRetryResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest MediaRequest
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParsePostRequestRequestIdStatusResponse parses an HTTP response from a PostRequestRequestIdStatusWithResponse call
func ParsePostRequestRequestIdStatusResponse(rsp *http.Response) (*PostRequestRequestIdStatusResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &PostRequestRequestIdStatusResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest MediaRequest
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseGetSearchResponse parses an HTTP response from a GetSearchWithResponse call
func ParseGetSearchResponse(rsp *http.Response) (*GetSearchResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetSearchResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest struct {
    Page *float32`json:"page,omitempty"`
    Results *[]200_Results_Item`json:"results,omitempty"`
    TotalPages *float32`json:"totalPages,omitempty"`
    TotalResults *float32`json:"totalResults,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseGetSearchCompanyResponse parses an HTTP response from a GetSearchCompanyWithResponse call
func ParseGetSearchCompanyResponse(rsp *http.Response) (*GetSearchCompanyResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetSearchCompanyResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest struct {
    Page *float32`json:"page,omitempty"`
    Results *[]Company`json:"results,omitempty"`
    TotalPages *float32`json:"totalPages,omitempty"`
    TotalResults *float32`json:"totalResults,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseGetSearchKeywordResponse parses an HTTP response from a GetSearchKeywordWithResponse call
func ParseGetSearchKeywordResponse(rsp *http.Response) (*GetSearchKeywordResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetSearchKeywordResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest struct {
    Page *float32`json:"page,omitempty"`
    Results *[]Keyword`json:"results,omitempty"`
    TotalPages *float32`json:"totalPages,omitempty"`
    TotalResults *float32`json:"totalResults,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseGetServiceRadarrResponse parses an HTTP response from a GetServiceRadarrWithResponse call
func ParseGetServiceRadarrResponse(rsp *http.Response) (*GetServiceRadarrResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetServiceRadarrResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest []RadarrSettings
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseGetServiceRadarrRadarrIdResponse parses an HTTP response from a GetServiceRadarrRadarrIdWithResponse call
func ParseGetServiceRadarrRadarrIdResponse(rsp *http.Response) (*GetServiceRadarrRadarrIdResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetServiceRadarrRadarrIdResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest struct {
    Profiles *ServiceProfile`json:"profiles,omitempty"`
    Server *RadarrSettings`json:"server,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseGetServiceSonarrResponse parses an HTTP response from a GetServiceSonarrWithResponse call
func ParseGetServiceSonarrResponse(rsp *http.Response) (*GetServiceSonarrResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetServiceSonarrResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest []SonarrSettings
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseGetServiceSonarrLookupTmdbIdResponse parses an HTTP response from a GetServiceSonarrLookupTmdbIdWithResponse call
func ParseGetServiceSonarrLookupTmdbIdResponse(rsp *http.Response) (*GetServiceSonarrLookupTmdbIdResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetServiceSonarrLookupTmdbIdResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest []SonarrSeries
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseGetServiceSonarrSonarrIdResponse parses an HTTP response from a GetServiceSonarrSonarrIdWithResponse call
func ParseGetServiceSonarrSonarrIdResponse(rsp *http.Response) (*GetServiceSonarrSonarrIdResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetServiceSonarrSonarrIdResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest struct {
    Profiles *ServiceProfile`json:"profiles,omitempty"`
    Server *SonarrSettings`json:"server,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseGetSettingsAboutResponse parses an HTTP response from a GetSettingsAboutWithResponse call
func ParseGetSettingsAboutResponse(rsp *http.Response) (*GetSettingsAboutResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetSettingsAboutResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest struct {
    AppDataPath *string`json:"appDataPath,omitempty"`
    TotalMediaItems *float32`json:"totalMediaItems,omitempty"`
    TotalRequests *float32`json:"totalRequests,omitempty"`
    Tz *string`json:"tz"`
    Version *string`json:"version,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseGetSettingsCacheResponse parses an HTTP response from a GetSettingsCacheWithResponse call
func ParseGetSettingsCacheResponse(rsp *http.Response) (*GetSettingsCacheResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetSettingsCacheResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest struct {
    ApiCaches *[]struct {
    Id *string`json:"id,omitempty"`
    Name *string`json:"name,omitempty"`
    Stats *struct {
    Hits *float32`json:"hits,omitempty"`
    Keys *float32`json:"keys,omitempty"`
    Ksize *float32`json:"ksize,omitempty"`
    Misses *float32`json:"misses,omitempty"`
    Vsize *float32`json:"vsize,omitempty"`
}`json:"stats,omitempty"`
}`json:"apiCaches,omitempty"`
    ImageCache *struct {
    Tmdb *struct {
    ImageCount *float32`json:"imageCount,omitempty"`
    Size *float32`json:"size,omitempty"`
}`json:"tmdb,omitempty"`
}`json:"imageCache,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParsePostSettingsCacheCacheIdFlushResponse parses an HTTP response from a PostSettingsCacheCacheIdFlushWithResponse call
func ParsePostSettingsCacheCacheIdFlushResponse(rsp *http.Response) (*PostSettingsCacheCacheIdFlushResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &PostSettingsCacheCacheIdFlushResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    

    return response, nil
}


// ParseGetSettingsDiscoverResponse parses an HTTP response from a GetSettingsDiscoverWithResponse call
func ParseGetSettingsDiscoverResponse(rsp *http.Response) (*GetSettingsDiscoverResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetSettingsDiscoverResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest []DiscoverSlider
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParsePostSettingsDiscoverResponse parses an HTTP response from a PostSettingsDiscoverWithResponse call
func ParsePostSettingsDiscoverResponse(rsp *http.Response) (*PostSettingsDiscoverResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &PostSettingsDiscoverResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest []DiscoverSlider
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParsePostSettingsDiscoverAddResponse parses an HTTP response from a PostSettingsDiscoverAddWithResponse call
func ParsePostSettingsDiscoverAddResponse(rsp *http.Response) (*PostSettingsDiscoverAddResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &PostSettingsDiscoverAddResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest DiscoverSlider
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseGetSettingsDiscoverResetResponse parses an HTTP response from a GetSettingsDiscoverResetWithResponse call
func ParseGetSettingsDiscoverResetResponse(rsp *http.Response) (*GetSettingsDiscoverResetResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetSettingsDiscoverResetResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    

    return response, nil
}


// ParseDeleteSettingsDiscoverSliderIdResponse parses an HTTP response from a DeleteSettingsDiscoverSliderIdWithResponse call
func ParseDeleteSettingsDiscoverSliderIdResponse(rsp *http.Response) (*DeleteSettingsDiscoverSliderIdResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &DeleteSettingsDiscoverSliderIdResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest DiscoverSlider
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParsePutSettingsDiscoverSliderIdResponse parses an HTTP response from a PutSettingsDiscoverSliderIdWithResponse call
func ParsePutSettingsDiscoverSliderIdResponse(rsp *http.Response) (*PutSettingsDiscoverSliderIdResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &PutSettingsDiscoverSliderIdResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest DiscoverSlider
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParsePostSettingsInitializeResponse parses an HTTP response from a PostSettingsInitializeWithResponse call
func ParsePostSettingsInitializeResponse(rsp *http.Response) (*PostSettingsInitializeResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &PostSettingsInitializeResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest PublicSettings
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseGetSettingsJellyfinResponse parses an HTTP response from a GetSettingsJellyfinWithResponse call
func ParseGetSettingsJellyfinResponse(rsp *http.Response) (*GetSettingsJellyfinResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetSettingsJellyfinResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest JellyfinSettings
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParsePostSettingsJellyfinResponse parses an HTTP response from a PostSettingsJellyfinWithResponse call
func ParsePostSettingsJellyfinResponse(rsp *http.Response) (*PostSettingsJellyfinResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &PostSettingsJellyfinResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest JellyfinSettings
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseGetSettingsJellyfinLibraryResponse parses an HTTP response from a GetSettingsJellyfinLibraryWithResponse call
func ParseGetSettingsJellyfinLibraryResponse(rsp *http.Response) (*GetSettingsJellyfinLibraryResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetSettingsJellyfinLibraryResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest []JellyfinLibrary
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseGetSettingsJellyfinSyncResponse parses an HTTP response from a GetSettingsJellyfinSyncWithResponse call
func ParseGetSettingsJellyfinSyncResponse(rsp *http.Response) (*GetSettingsJellyfinSyncResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetSettingsJellyfinSyncResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest struct {
    CurrentLibrary *JellyfinLibrary`json:"currentLibrary,omitempty"`
    Libraries *[]JellyfinLibrary`json:"libraries,omitempty"`
    Progress *float32`json:"progress,omitempty"`
    Running *bool`json:"running,omitempty"`
    Total *float32`json:"total,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParsePostSettingsJellyfinSyncResponse parses an HTTP response from a PostSettingsJellyfinSyncWithResponse call
func ParsePostSettingsJellyfinSyncResponse(rsp *http.Response) (*PostSettingsJellyfinSyncResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &PostSettingsJellyfinSyncResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest struct {
    CurrentLibrary *JellyfinLibrary`json:"currentLibrary,omitempty"`
    Libraries *[]JellyfinLibrary`json:"libraries,omitempty"`
    Progress *float32`json:"progress,omitempty"`
    Running *bool`json:"running,omitempty"`
    Total *float32`json:"total,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseGetSettingsJellyfinUsersResponse parses an HTTP response from a GetSettingsJellyfinUsersWithResponse call
func ParseGetSettingsJellyfinUsersResponse(rsp *http.Response) (*GetSettingsJellyfinUsersResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetSettingsJellyfinUsersResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest []struct {
    UserId *int`json:"userId,omitempty"`
    Username *string`json:"username,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseGetSettingsJobsResponse parses an HTTP response from a GetSettingsJobsWithResponse call
func ParseGetSettingsJobsResponse(rsp *http.Response) (*GetSettingsJobsResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetSettingsJobsResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest []Job
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParsePostSettingsJobsJobIdCancelResponse parses an HTTP response from a PostSettingsJobsJobIdCancelWithResponse call
func ParsePostSettingsJobsJobIdCancelResponse(rsp *http.Response) (*PostSettingsJobsJobIdCancelResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &PostSettingsJobsJobIdCancelResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest Job
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParsePostSettingsJobsJobIdRunResponse parses an HTTP response from a PostSettingsJobsJobIdRunWithResponse call
func ParsePostSettingsJobsJobIdRunResponse(rsp *http.Response) (*PostSettingsJobsJobIdRunResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &PostSettingsJobsJobIdRunResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest Job
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParsePostSettingsJobsJobIdScheduleResponse parses an HTTP response from a PostSettingsJobsJobIdScheduleWithResponse call
func ParsePostSettingsJobsJobIdScheduleResponse(rsp *http.Response) (*PostSettingsJobsJobIdScheduleResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &PostSettingsJobsJobIdScheduleResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest Job
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseGetSettingsLogsResponse parses an HTTP response from a GetSettingsLogsWithResponse call
func ParseGetSettingsLogsResponse(rsp *http.Response) (*GetSettingsLogsResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetSettingsLogsResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest []struct {
    Label *string`json:"label,omitempty"`
    Level *string`json:"level,omitempty"`
    Message *string`json:"message,omitempty"`
    Timestamp *string`json:"timestamp,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseGetSettingsMainResponse parses an HTTP response from a GetSettingsMainWithResponse call
func ParseGetSettingsMainResponse(rsp *http.Response) (*GetSettingsMainResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetSettingsMainResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest MainSettings
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParsePostSettingsMainResponse parses an HTTP response from a PostSettingsMainWithResponse call
func ParsePostSettingsMainResponse(rsp *http.Response) (*PostSettingsMainResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &PostSettingsMainResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest MainSettings
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParsePostSettingsMainRegenerateResponse parses an HTTP response from a PostSettingsMainRegenerateWithResponse call
func ParsePostSettingsMainRegenerateResponse(rsp *http.Response) (*PostSettingsMainRegenerateResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &PostSettingsMainRegenerateResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest MainSettings
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseGetSettingsNotificationsDiscordResponse parses an HTTP response from a GetSettingsNotificationsDiscordWithResponse call
func ParseGetSettingsNotificationsDiscordResponse(rsp *http.Response) (*GetSettingsNotificationsDiscordResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetSettingsNotificationsDiscordResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest DiscordSettings
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParsePostSettingsNotificationsDiscordResponse parses an HTTP response from a PostSettingsNotificationsDiscordWithResponse call
func ParsePostSettingsNotificationsDiscordResponse(rsp *http.Response) (*PostSettingsNotificationsDiscordResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &PostSettingsNotificationsDiscordResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest DiscordSettings
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParsePostSettingsNotificationsDiscordTestResponse parses an HTTP response from a PostSettingsNotificationsDiscordTestWithResponse call
func ParsePostSettingsNotificationsDiscordTestResponse(rsp *http.Response) (*PostSettingsNotificationsDiscordTestResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &PostSettingsNotificationsDiscordTestResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    

    return response, nil
}


// ParseGetSettingsNotificationsEmailResponse parses an HTTP response from a GetSettingsNotificationsEmailWithResponse call
func ParseGetSettingsNotificationsEmailResponse(rsp *http.Response) (*GetSettingsNotificationsEmailResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetSettingsNotificationsEmailResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest NotificationEmailSettings
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParsePostSettingsNotificationsEmailResponse parses an HTTP response from a PostSettingsNotificationsEmailWithResponse call
func ParsePostSettingsNotificationsEmailResponse(rsp *http.Response) (*PostSettingsNotificationsEmailResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &PostSettingsNotificationsEmailResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest NotificationEmailSettings
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParsePostSettingsNotificationsEmailTestResponse parses an HTTP response from a PostSettingsNotificationsEmailTestWithResponse call
func ParsePostSettingsNotificationsEmailTestResponse(rsp *http.Response) (*PostSettingsNotificationsEmailTestResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &PostSettingsNotificationsEmailTestResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    

    return response, nil
}


// ParseGetSettingsNotificationsGotifyResponse parses an HTTP response from a GetSettingsNotificationsGotifyWithResponse call
func ParseGetSettingsNotificationsGotifyResponse(rsp *http.Response) (*GetSettingsNotificationsGotifyResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetSettingsNotificationsGotifyResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest GotifySettings
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParsePostSettingsNotificationsGotifyResponse parses an HTTP response from a PostSettingsNotificationsGotifyWithResponse call
func ParsePostSettingsNotificationsGotifyResponse(rsp *http.Response) (*PostSettingsNotificationsGotifyResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &PostSettingsNotificationsGotifyResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest GotifySettings
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParsePostSettingsNotificationsGotifyTestResponse parses an HTTP response from a PostSettingsNotificationsGotifyTestWithResponse call
func ParsePostSettingsNotificationsGotifyTestResponse(rsp *http.Response) (*PostSettingsNotificationsGotifyTestResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &PostSettingsNotificationsGotifyTestResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    

    return response, nil
}


// ParseGetSettingsNotificationsLunaseaResponse parses an HTTP response from a GetSettingsNotificationsLunaseaWithResponse call
func ParseGetSettingsNotificationsLunaseaResponse(rsp *http.Response) (*GetSettingsNotificationsLunaseaResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetSettingsNotificationsLunaseaResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest LunaSeaSettings
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParsePostSettingsNotificationsLunaseaResponse parses an HTTP response from a PostSettingsNotificationsLunaseaWithResponse call
func ParsePostSettingsNotificationsLunaseaResponse(rsp *http.Response) (*PostSettingsNotificationsLunaseaResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &PostSettingsNotificationsLunaseaResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest LunaSeaSettings
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParsePostSettingsNotificationsLunaseaTestResponse parses an HTTP response from a PostSettingsNotificationsLunaseaTestWithResponse call
func ParsePostSettingsNotificationsLunaseaTestResponse(rsp *http.Response) (*PostSettingsNotificationsLunaseaTestResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &PostSettingsNotificationsLunaseaTestResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    

    return response, nil
}


// ParseGetSettingsNotificationsPushbulletResponse parses an HTTP response from a GetSettingsNotificationsPushbulletWithResponse call
func ParseGetSettingsNotificationsPushbulletResponse(rsp *http.Response) (*GetSettingsNotificationsPushbulletResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetSettingsNotificationsPushbulletResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest PushbulletSettings
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParsePostSettingsNotificationsPushbulletResponse parses an HTTP response from a PostSettingsNotificationsPushbulletWithResponse call
func ParsePostSettingsNotificationsPushbulletResponse(rsp *http.Response) (*PostSettingsNotificationsPushbulletResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &PostSettingsNotificationsPushbulletResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest PushbulletSettings
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParsePostSettingsNotificationsPushbulletTestResponse parses an HTTP response from a PostSettingsNotificationsPushbulletTestWithResponse call
func ParsePostSettingsNotificationsPushbulletTestResponse(rsp *http.Response) (*PostSettingsNotificationsPushbulletTestResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &PostSettingsNotificationsPushbulletTestResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    

    return response, nil
}


// ParseGetSettingsNotificationsPushoverResponse parses an HTTP response from a GetSettingsNotificationsPushoverWithResponse call
func ParseGetSettingsNotificationsPushoverResponse(rsp *http.Response) (*GetSettingsNotificationsPushoverResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetSettingsNotificationsPushoverResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest PushoverSettings
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParsePostSettingsNotificationsPushoverResponse parses an HTTP response from a PostSettingsNotificationsPushoverWithResponse call
func ParsePostSettingsNotificationsPushoverResponse(rsp *http.Response) (*PostSettingsNotificationsPushoverResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &PostSettingsNotificationsPushoverResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest PushoverSettings
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseGetSettingsNotificationsPushoverSoundsResponse parses an HTTP response from a GetSettingsNotificationsPushoverSoundsWithResponse call
func ParseGetSettingsNotificationsPushoverSoundsResponse(rsp *http.Response) (*GetSettingsNotificationsPushoverSoundsResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetSettingsNotificationsPushoverSoundsResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest []struct {
    Description *string`json:"description,omitempty"`
    Name *string`json:"name,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParsePostSettingsNotificationsPushoverTestResponse parses an HTTP response from a PostSettingsNotificationsPushoverTestWithResponse call
func ParsePostSettingsNotificationsPushoverTestResponse(rsp *http.Response) (*PostSettingsNotificationsPushoverTestResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &PostSettingsNotificationsPushoverTestResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    

    return response, nil
}


// ParseGetSettingsNotificationsSlackResponse parses an HTTP response from a GetSettingsNotificationsSlackWithResponse call
func ParseGetSettingsNotificationsSlackResponse(rsp *http.Response) (*GetSettingsNotificationsSlackResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetSettingsNotificationsSlackResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest SlackSettings
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParsePostSettingsNotificationsSlackResponse parses an HTTP response from a PostSettingsNotificationsSlackWithResponse call
func ParsePostSettingsNotificationsSlackResponse(rsp *http.Response) (*PostSettingsNotificationsSlackResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &PostSettingsNotificationsSlackResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest SlackSettings
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParsePostSettingsNotificationsSlackTestResponse parses an HTTP response from a PostSettingsNotificationsSlackTestWithResponse call
func ParsePostSettingsNotificationsSlackTestResponse(rsp *http.Response) (*PostSettingsNotificationsSlackTestResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &PostSettingsNotificationsSlackTestResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    

    return response, nil
}


// ParseGetSettingsNotificationsTelegramResponse parses an HTTP response from a GetSettingsNotificationsTelegramWithResponse call
func ParseGetSettingsNotificationsTelegramResponse(rsp *http.Response) (*GetSettingsNotificationsTelegramResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetSettingsNotificationsTelegramResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest TelegramSettings
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParsePostSettingsNotificationsTelegramResponse parses an HTTP response from a PostSettingsNotificationsTelegramWithResponse call
func ParsePostSettingsNotificationsTelegramResponse(rsp *http.Response) (*PostSettingsNotificationsTelegramResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &PostSettingsNotificationsTelegramResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest TelegramSettings
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParsePostSettingsNotificationsTelegramTestResponse parses an HTTP response from a PostSettingsNotificationsTelegramTestWithResponse call
func ParsePostSettingsNotificationsTelegramTestResponse(rsp *http.Response) (*PostSettingsNotificationsTelegramTestResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &PostSettingsNotificationsTelegramTestResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    

    return response, nil
}


// ParseGetSettingsNotificationsWebhookResponse parses an HTTP response from a GetSettingsNotificationsWebhookWithResponse call
func ParseGetSettingsNotificationsWebhookResponse(rsp *http.Response) (*GetSettingsNotificationsWebhookResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetSettingsNotificationsWebhookResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest WebhookSettings
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParsePostSettingsNotificationsWebhookResponse parses an HTTP response from a PostSettingsNotificationsWebhookWithResponse call
func ParsePostSettingsNotificationsWebhookResponse(rsp *http.Response) (*PostSettingsNotificationsWebhookResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &PostSettingsNotificationsWebhookResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest WebhookSettings
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParsePostSettingsNotificationsWebhookTestResponse parses an HTTP response from a PostSettingsNotificationsWebhookTestWithResponse call
func ParsePostSettingsNotificationsWebhookTestResponse(rsp *http.Response) (*PostSettingsNotificationsWebhookTestResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &PostSettingsNotificationsWebhookTestResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    

    return response, nil
}


// ParseGetSettingsNotificationsWebpushResponse parses an HTTP response from a GetSettingsNotificationsWebpushWithResponse call
func ParseGetSettingsNotificationsWebpushResponse(rsp *http.Response) (*GetSettingsNotificationsWebpushResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetSettingsNotificationsWebpushResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest WebPushSettings
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParsePostSettingsNotificationsWebpushResponse parses an HTTP response from a PostSettingsNotificationsWebpushWithResponse call
func ParsePostSettingsNotificationsWebpushResponse(rsp *http.Response) (*PostSettingsNotificationsWebpushResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &PostSettingsNotificationsWebpushResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest WebPushSettings
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParsePostSettingsNotificationsWebpushTestResponse parses an HTTP response from a PostSettingsNotificationsWebpushTestWithResponse call
func ParsePostSettingsNotificationsWebpushTestResponse(rsp *http.Response) (*PostSettingsNotificationsWebpushTestResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &PostSettingsNotificationsWebpushTestResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    

    return response, nil
}


// ParseGetSettingsPlexResponse parses an HTTP response from a GetSettingsPlexWithResponse call
func ParseGetSettingsPlexResponse(rsp *http.Response) (*GetSettingsPlexResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetSettingsPlexResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest PlexSettings
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParsePostSettingsPlexResponse parses an HTTP response from a PostSettingsPlexWithResponse call
func ParsePostSettingsPlexResponse(rsp *http.Response) (*PostSettingsPlexResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &PostSettingsPlexResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest PlexSettings
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseGetSettingsPlexDevicesServersResponse parses an HTTP response from a GetSettingsPlexDevicesServersWithResponse call
func ParseGetSettingsPlexDevicesServersResponse(rsp *http.Response) (*GetSettingsPlexDevicesServersResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetSettingsPlexDevicesServersResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest []PlexDevice
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseGetSettingsPlexLibraryResponse parses an HTTP response from a GetSettingsPlexLibraryWithResponse call
func ParseGetSettingsPlexLibraryResponse(rsp *http.Response) (*GetSettingsPlexLibraryResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetSettingsPlexLibraryResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest []PlexLibrary
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseGetSettingsPlexSyncResponse parses an HTTP response from a GetSettingsPlexSyncWithResponse call
func ParseGetSettingsPlexSyncResponse(rsp *http.Response) (*GetSettingsPlexSyncResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetSettingsPlexSyncResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest struct {
    CurrentLibrary *PlexLibrary`json:"currentLibrary,omitempty"`
    Libraries *[]PlexLibrary`json:"libraries,omitempty"`
    Progress *float32`json:"progress,omitempty"`
    Running *bool`json:"running,omitempty"`
    Total *float32`json:"total,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParsePostSettingsPlexSyncResponse parses an HTTP response from a PostSettingsPlexSyncWithResponse call
func ParsePostSettingsPlexSyncResponse(rsp *http.Response) (*PostSettingsPlexSyncResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &PostSettingsPlexSyncResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest struct {
    CurrentLibrary *PlexLibrary`json:"currentLibrary,omitempty"`
    Libraries *[]PlexLibrary`json:"libraries,omitempty"`
    Progress *float32`json:"progress,omitempty"`
    Running *bool`json:"running,omitempty"`
    Total *float32`json:"total,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseGetSettingsPlexUsersResponse parses an HTTP response from a GetSettingsPlexUsersWithResponse call
func ParseGetSettingsPlexUsersResponse(rsp *http.Response) (*GetSettingsPlexUsersResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetSettingsPlexUsersResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest []struct {
    Email *string`json:"email,omitempty"`
    Id *string`json:"id,omitempty"`
    Thumb *string`json:"thumb,omitempty"`
    Title *string`json:"title,omitempty"`
    Username *string`json:"username,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseGetSettingsPublicResponse parses an HTTP response from a GetSettingsPublicWithResponse call
func ParseGetSettingsPublicResponse(rsp *http.Response) (*GetSettingsPublicResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetSettingsPublicResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest PublicSettings
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseGetSettingsRadarrResponse parses an HTTP response from a GetSettingsRadarrWithResponse call
func ParseGetSettingsRadarrResponse(rsp *http.Response) (*GetSettingsRadarrResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetSettingsRadarrResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest []RadarrSettings
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParsePostSettingsRadarrResponse parses an HTTP response from a PostSettingsRadarrWithResponse call
func ParsePostSettingsRadarrResponse(rsp *http.Response) (*PostSettingsRadarrResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &PostSettingsRadarrResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
var dest RadarrSettings
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON201 = &dest

}


    return response, nil
}


// ParsePostSettingsRadarrTestResponse parses an HTTP response from a PostSettingsRadarrTestWithResponse call
func ParsePostSettingsRadarrTestResponse(rsp *http.Response) (*PostSettingsRadarrTestResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &PostSettingsRadarrTestResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest struct {
    Profiles *[]ServiceProfile`json:"profiles,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseDeleteSettingsRadarrRadarrIdResponse parses an HTTP response from a DeleteSettingsRadarrRadarrIdWithResponse call
func ParseDeleteSettingsRadarrRadarrIdResponse(rsp *http.Response) (*DeleteSettingsRadarrRadarrIdResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &DeleteSettingsRadarrRadarrIdResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest RadarrSettings
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParsePutSettingsRadarrRadarrIdResponse parses an HTTP response from a PutSettingsRadarrRadarrIdWithResponse call
func ParsePutSettingsRadarrRadarrIdResponse(rsp *http.Response) (*PutSettingsRadarrRadarrIdResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &PutSettingsRadarrRadarrIdResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest RadarrSettings
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseGetSettingsRadarrRadarrIdProfilesResponse parses an HTTP response from a GetSettingsRadarrRadarrIdProfilesWithResponse call
func ParseGetSettingsRadarrRadarrIdProfilesResponse(rsp *http.Response) (*GetSettingsRadarrRadarrIdProfilesResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetSettingsRadarrRadarrIdProfilesResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest []ServiceProfile
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseGetSettingsSonarrResponse parses an HTTP response from a GetSettingsSonarrWithResponse call
func ParseGetSettingsSonarrResponse(rsp *http.Response) (*GetSettingsSonarrResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetSettingsSonarrResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest []SonarrSettings
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParsePostSettingsSonarrResponse parses an HTTP response from a PostSettingsSonarrWithResponse call
func ParsePostSettingsSonarrResponse(rsp *http.Response) (*PostSettingsSonarrResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &PostSettingsSonarrResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
var dest SonarrSettings
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON201 = &dest

}


    return response, nil
}


// ParsePostSettingsSonarrTestResponse parses an HTTP response from a PostSettingsSonarrTestWithResponse call
func ParsePostSettingsSonarrTestResponse(rsp *http.Response) (*PostSettingsSonarrTestResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &PostSettingsSonarrTestResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest struct {
    Profiles *[]ServiceProfile`json:"profiles,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseDeleteSettingsSonarrSonarrIdResponse parses an HTTP response from a DeleteSettingsSonarrSonarrIdWithResponse call
func ParseDeleteSettingsSonarrSonarrIdResponse(rsp *http.Response) (*DeleteSettingsSonarrSonarrIdResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &DeleteSettingsSonarrSonarrIdResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest SonarrSettings
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParsePutSettingsSonarrSonarrIdResponse parses an HTTP response from a PutSettingsSonarrSonarrIdWithResponse call
func ParsePutSettingsSonarrSonarrIdResponse(rsp *http.Response) (*PutSettingsSonarrSonarrIdResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &PutSettingsSonarrSonarrIdResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest SonarrSettings
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseGetSettingsTautulliResponse parses an HTTP response from a GetSettingsTautulliWithResponse call
func ParseGetSettingsTautulliResponse(rsp *http.Response) (*GetSettingsTautulliResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetSettingsTautulliResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest TautulliSettings
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParsePostSettingsTautulliResponse parses an HTTP response from a PostSettingsTautulliWithResponse call
func ParsePostSettingsTautulliResponse(rsp *http.Response) (*PostSettingsTautulliResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &PostSettingsTautulliResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest TautulliSettings
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseGetStatusResponse parses an HTTP response from a GetStatusWithResponse call
func ParseGetStatusResponse(rsp *http.Response) (*GetStatusResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetStatusResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest struct {
    CommitTag *string`json:"commitTag,omitempty"`
    CommitsBehind *float32`json:"commitsBehind,omitempty"`
    RestartRequired *bool`json:"restartRequired,omitempty"`
    UpdateAvailable *bool`json:"updateAvailable,omitempty"`
    Version *string`json:"version,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseGetStatusAppdataResponse parses an HTTP response from a GetStatusAppdataWithResponse call
func ParseGetStatusAppdataResponse(rsp *http.Response) (*GetStatusAppdataResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetStatusAppdataResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest struct {
    AppData *bool`json:"appData,omitempty"`
    AppDataPath *string`json:"appDataPath,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseGetStudioStudioIdResponse parses an HTTP response from a GetStudioStudioIdWithResponse call
func ParseGetStudioStudioIdResponse(rsp *http.Response) (*GetStudioStudioIdResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetStudioStudioIdResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest ProductionCompany
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseGetTvTvIdResponse parses an HTTP response from a GetTvTvIdWithResponse call
func ParseGetTvTvIdResponse(rsp *http.Response) (*GetTvTvIdResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetTvTvIdResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest TvDetails
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseGetTvTvIdRatingsResponse parses an HTTP response from a GetTvTvIdRatingsWithResponse call
func ParseGetTvTvIdRatingsResponse(rsp *http.Response) (*GetTvTvIdRatingsResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetTvTvIdRatingsResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest struct {
    CriticsRating *N200CriticsRating`json:"criticsRating,omitempty"`
    CriticsScore *float32`json:"criticsScore,omitempty"`
    Title *string`json:"title,omitempty"`
    Url *string`json:"url,omitempty"`
    Year *float32`json:"year,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseGetTvTvIdRecommendationsResponse parses an HTTP response from a GetTvTvIdRecommendationsWithResponse call
func ParseGetTvTvIdRecommendationsResponse(rsp *http.Response) (*GetTvTvIdRecommendationsResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetTvTvIdRecommendationsResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest struct {
    Page *float32`json:"page,omitempty"`
    Results *[]TvResult`json:"results,omitempty"`
    TotalPages *float32`json:"totalPages,omitempty"`
    TotalResults *float32`json:"totalResults,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseGetTvTvIdSeasonSeasonIdResponse parses an HTTP response from a GetTvTvIdSeasonSeasonIdWithResponse call
func ParseGetTvTvIdSeasonSeasonIdResponse(rsp *http.Response) (*GetTvTvIdSeasonSeasonIdResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetTvTvIdSeasonSeasonIdResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest Season
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseGetTvTvIdSimilarResponse parses an HTTP response from a GetTvTvIdSimilarWithResponse call
func ParseGetTvTvIdSimilarResponse(rsp *http.Response) (*GetTvTvIdSimilarResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetTvTvIdSimilarResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest struct {
    Page *float32`json:"page,omitempty"`
    Results *[]TvResult`json:"results,omitempty"`
    TotalPages *float32`json:"totalPages,omitempty"`
    TotalResults *float32`json:"totalResults,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseGetUserResponse parses an HTTP response from a GetUserWithResponse call
func ParseGetUserResponse(rsp *http.Response) (*GetUserResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetUserResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest struct {
    PageInfo *PageInfo`json:"pageInfo,omitempty"`
    Results *[]User`json:"results,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParsePostUserResponse parses an HTTP response from a PostUserWithResponse call
func ParsePostUserResponse(rsp *http.Response) (*PostUserResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &PostUserResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
var dest User
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON201 = &dest

}


    return response, nil
}


// ParsePutUserResponse parses an HTTP response from a PutUserWithResponse call
func ParsePutUserResponse(rsp *http.Response) (*PutUserResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &PutUserResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest []User
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParsePostUserImportFromJellyfinResponse parses an HTTP response from a PostUserImportFromJellyfinWithResponse call
func ParsePostUserImportFromJellyfinResponse(rsp *http.Response) (*PostUserImportFromJellyfinResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &PostUserImportFromJellyfinResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
var dest []User
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON201 = &dest

}


    return response, nil
}


// ParsePostUserImportFromPlexResponse parses an HTTP response from a PostUserImportFromPlexWithResponse call
func ParsePostUserImportFromPlexResponse(rsp *http.Response) (*PostUserImportFromPlexResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &PostUserImportFromPlexResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
var dest []User
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON201 = &dest

}


    return response, nil
}


// ParsePostUserRegisterPushSubscriptionResponse parses an HTTP response from a PostUserRegisterPushSubscriptionWithResponse call
func ParsePostUserRegisterPushSubscriptionResponse(rsp *http.Response) (*PostUserRegisterPushSubscriptionResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &PostUserRegisterPushSubscriptionResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    

    return response, nil
}


// ParseDeleteUserUserIdResponse parses an HTTP response from a DeleteUserUserIdWithResponse call
func ParseDeleteUserUserIdResponse(rsp *http.Response) (*DeleteUserUserIdResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &DeleteUserUserIdResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest User
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseGetUserUserIdResponse parses an HTTP response from a GetUserUserIdWithResponse call
func ParseGetUserUserIdResponse(rsp *http.Response) (*GetUserUserIdResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetUserUserIdResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest User
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParsePutUserUserIdResponse parses an HTTP response from a PutUserUserIdWithResponse call
func ParsePutUserUserIdResponse(rsp *http.Response) (*PutUserUserIdResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &PutUserUserIdResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest User
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseGetUserUserIdQuotaResponse parses an HTTP response from a GetUserUserIdQuotaWithResponse call
func ParseGetUserUserIdQuotaResponse(rsp *http.Response) (*GetUserUserIdQuotaResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetUserUserIdQuotaResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest struct {
    Movie *struct {
    Days *float32`json:"days,omitempty"`
    Limit *float32`json:"limit,omitempty"`
    Remaining *float32`json:"remaining,omitempty"`
    Restricted *bool`json:"restricted,omitempty"`
    Used *float32`json:"used,omitempty"`
}`json:"movie,omitempty"`
    Tv *struct {
    Days *float32`json:"days,omitempty"`
    Limit *float32`json:"limit,omitempty"`
    Remaining *float32`json:"remaining,omitempty"`
    Restricted *bool`json:"restricted,omitempty"`
    Used *float32`json:"used,omitempty"`
}`json:"tv,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseGetUserUserIdRequestsResponse parses an HTTP response from a GetUserUserIdRequestsWithResponse call
func ParseGetUserUserIdRequestsResponse(rsp *http.Response) (*GetUserUserIdRequestsResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetUserUserIdRequestsResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest struct {
    PageInfo *PageInfo`json:"pageInfo,omitempty"`
    Results *[]MediaRequest`json:"results,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseGetUserUserIdSettingsMainResponse parses an HTTP response from a GetUserUserIdSettingsMainWithResponse call
func ParseGetUserUserIdSettingsMainResponse(rsp *http.Response) (*GetUserUserIdSettingsMainResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetUserUserIdSettingsMainResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest struct {
    Username *string`json:"username,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParsePostUserUserIdSettingsMainResponse parses an HTTP response from a PostUserUserIdSettingsMainWithResponse call
func ParsePostUserUserIdSettingsMainResponse(rsp *http.Response) (*PostUserUserIdSettingsMainResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &PostUserUserIdSettingsMainResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest struct {
    Username *string`json:"username,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseGetUserUserIdSettingsNotificationsResponse parses an HTTP response from a GetUserUserIdSettingsNotificationsWithResponse call
func ParseGetUserUserIdSettingsNotificationsResponse(rsp *http.Response) (*GetUserUserIdSettingsNotificationsResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetUserUserIdSettingsNotificationsResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest UserSettingsNotifications
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParsePostUserUserIdSettingsNotificationsResponse parses an HTTP response from a PostUserUserIdSettingsNotificationsWithResponse call
func ParsePostUserUserIdSettingsNotificationsResponse(rsp *http.Response) (*PostUserUserIdSettingsNotificationsResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &PostUserUserIdSettingsNotificationsResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest UserSettingsNotifications
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseGetUserUserIdSettingsPasswordResponse parses an HTTP response from a GetUserUserIdSettingsPasswordWithResponse call
func ParseGetUserUserIdSettingsPasswordResponse(rsp *http.Response) (*GetUserUserIdSettingsPasswordResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetUserUserIdSettingsPasswordResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest struct {
    HasPassword *bool`json:"hasPassword,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParsePostUserUserIdSettingsPasswordResponse parses an HTTP response from a PostUserUserIdSettingsPasswordWithResponse call
func ParsePostUserUserIdSettingsPasswordResponse(rsp *http.Response) (*PostUserUserIdSettingsPasswordResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &PostUserUserIdSettingsPasswordResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    

    return response, nil
}


// ParseGetUserUserIdSettingsPermissionsResponse parses an HTTP response from a GetUserUserIdSettingsPermissionsWithResponse call
func ParseGetUserUserIdSettingsPermissionsResponse(rsp *http.Response) (*GetUserUserIdSettingsPermissionsResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetUserUserIdSettingsPermissionsResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest struct {
    Permissions *float32`json:"permissions,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParsePostUserUserIdSettingsPermissionsResponse parses an HTTP response from a PostUserUserIdSettingsPermissionsWithResponse call
func ParsePostUserUserIdSettingsPermissionsResponse(rsp *http.Response) (*PostUserUserIdSettingsPermissionsResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &PostUserUserIdSettingsPermissionsResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest struct {
    Permissions *float32`json:"permissions,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseGetUserUserIdWatchDataResponse parses an HTTP response from a GetUserUserIdWatchDataWithResponse call
func ParseGetUserUserIdWatchDataResponse(rsp *http.Response) (*GetUserUserIdWatchDataResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetUserUserIdWatchDataResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest struct {
    PlayCount *float32`json:"playCount,omitempty"`
    RecentlyWatched *[]MediaInfo`json:"recentlyWatched,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseGetUserUserIdWatchlistResponse parses an HTTP response from a GetUserUserIdWatchlistWithResponse call
func ParseGetUserUserIdWatchlistResponse(rsp *http.Response) (*GetUserUserIdWatchlistResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetUserUserIdWatchlistResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest struct {
    Page *float32`json:"page,omitempty"`
    Results *[]struct {
    RatingKey *string`json:"ratingKey,omitempty"`
    Title *string`json:"title,omitempty"`
    TmdbId *float32`json:"tmdbId,omitempty"`
    Type *string`json:"type,omitempty"`
}`json:"results,omitempty"`
    TotalPages *float32`json:"totalPages,omitempty"`
    TotalResults *float32`json:"totalResults,omitempty"`
}
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParsePostWatchlistResponse parses an HTTP response from a PostWatchlistWithResponse call
func ParsePostWatchlistResponse(rsp *http.Response) (*PostWatchlistResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &PostWatchlistResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest Watchlist
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseDeleteWatchlistTmdbIdResponse parses an HTTP response from a DeleteWatchlistTmdbIdWithResponse call
func ParseDeleteWatchlistTmdbIdResponse(rsp *http.Response) (*DeleteWatchlistTmdbIdResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &DeleteWatchlistTmdbIdResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    

    return response, nil
}


// ParseGetWatchprovidersMoviesResponse parses an HTTP response from a GetWatchprovidersMoviesWithResponse call
func ParseGetWatchprovidersMoviesResponse(rsp *http.Response) (*GetWatchprovidersMoviesResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetWatchprovidersMoviesResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest []WatchProviderDetails
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseGetWatchprovidersRegionsResponse parses an HTTP response from a GetWatchprovidersRegionsWithResponse call
func ParseGetWatchprovidersRegionsResponse(rsp *http.Response) (*GetWatchprovidersRegionsResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetWatchprovidersRegionsResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest []WatchProviderRegion
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}


// ParseGetWatchprovidersTvResponse parses an HTTP response from a GetWatchprovidersTvWithResponse call
func ParseGetWatchprovidersTvResponse(rsp *http.Response) (*GetWatchprovidersTvResponse, error) {
    bodyBytes, err := io.ReadAll(rsp.Body)
    defer func() { _ = rsp.Body.Close() }()
    if err != nil {
        return nil, err
    }

    response := &GetWatchprovidersTvResponse{
Body: bodyBytes,
HTTPResponse: rsp,
}

    switch {
case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
var dest []WatchProviderDetails
if err := json.Unmarshal(bodyBytes, &dest); err != nil { 
 return nil, err 
}
response.JSON200 = &dest

}


    return response, nil
}

: jellyseerrclient.go:17516:19: '_' must separate successive digits (and 3 more errors)
exit status 1
jellyseerrclient/generate.go:6: running "go": exit status 1
