/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"encoding/json"
)

// checks if the ModelLiveTvKeywordInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelLiveTvKeywordInfo{}

// ModelLiveTvKeywordInfo struct for ModelLiveTvKeywordInfo
type ModelLiveTvKeywordInfo struct {
	KeywordType *ModelLiveTvKeywordType `json:"KeywordType,omitempty"`
	Keyword *string `json:"Keyword,omitempty"`
}

// NewModelLiveTvKeywordInfo instantiates a new ModelLiveTvKeywordInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelLiveTvKeywordInfo() *ModelLiveTvKeywordInfo {
	this := ModelLiveTvKeywordInfo{}
	return &this
}

// NewModelLiveTvKeywordInfoWithDefaults instantiates a new ModelLiveTvKeywordInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelLiveTvKeywordInfoWithDefaults() *ModelLiveTvKeywordInfo {
	this := ModelLiveTvKeywordInfo{}
	return &this
}

// GetKeywordType returns the KeywordType field value if set, zero value otherwise.
func (o *ModelLiveTvKeywordInfo) GetKeywordType() ModelLiveTvKeywordType {
	if o == nil || IsNil(o.KeywordType) {
		var ret ModelLiveTvKeywordType
		return ret
	}
	return *o.KeywordType
}

// GetKeywordTypeOk returns a tuple with the KeywordType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelLiveTvKeywordInfo) GetKeywordTypeOk() (*ModelLiveTvKeywordType, bool) {
	if o == nil || IsNil(o.KeywordType) {
		return nil, false
	}
	return o.KeywordType, true
}

// HasKeywordType returns a boolean if a field has been set.
func (o *ModelLiveTvKeywordInfo) HasKeywordType() bool {
	if o != nil && !IsNil(o.KeywordType) {
		return true
	}

	return false
}

// SetKeywordType gets a reference to the given ModelLiveTvKeywordType and assigns it to the KeywordType field.
func (o *ModelLiveTvKeywordInfo) SetKeywordType(v ModelLiveTvKeywordType) {
	o.KeywordType = &v
}

// GetKeyword returns the Keyword field value if set, zero value otherwise.
func (o *ModelLiveTvKeywordInfo) GetKeyword() string {
	if o == nil || IsNil(o.Keyword) {
		var ret string
		return ret
	}
	return *o.Keyword
}

// GetKeywordOk returns a tuple with the Keyword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelLiveTvKeywordInfo) GetKeywordOk() (*string, bool) {
	if o == nil || IsNil(o.Keyword) {
		return nil, false
	}
	return o.Keyword, true
}

// HasKeyword returns a boolean if a field has been set.
func (o *ModelLiveTvKeywordInfo) HasKeyword() bool {
	if o != nil && !IsNil(o.Keyword) {
		return true
	}

	return false
}

// SetKeyword gets a reference to the given string and assigns it to the Keyword field.
func (o *ModelLiveTvKeywordInfo) SetKeyword(v string) {
	o.Keyword = &v
}

func (o ModelLiveTvKeywordInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelLiveTvKeywordInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.KeywordType) {
		toSerialize["KeywordType"] = o.KeywordType
	}
	if !IsNil(o.Keyword) {
		toSerialize["Keyword"] = o.Keyword
	}
	return toSerialize, nil
}

type NullableModelLiveTvKeywordInfo struct {
	value *ModelLiveTvKeywordInfo
	isSet bool
}

func (v NullableModelLiveTvKeywordInfo) Get() *ModelLiveTvKeywordInfo {
	return v.value
}

func (v *NullableModelLiveTvKeywordInfo) Set(val *ModelLiveTvKeywordInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableModelLiveTvKeywordInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableModelLiveTvKeywordInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelLiveTvKeywordInfo(val *ModelLiveTvKeywordInfo) *NullableModelLiveTvKeywordInfo {
	return &NullableModelLiveTvKeywordInfo{value: val, isSet: true}
}

func (v NullableModelLiveTvKeywordInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelLiveTvKeywordInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


