/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"encoding/json"
	"fmt"
)

// ModelProfileConditionValue the model 'ModelProfileConditionValue'
type ModelProfileConditionValue string

// List of ProfileConditionValue
const (
	MODELPROFILECONDITIONVALUE_AUDIO_CHANNELS ModelProfileConditionValue = "AudioChannels"
	MODELPROFILECONDITIONVALUE_AUDIO_BITRATE ModelProfileConditionValue = "AudioBitrate"
	MODELPROFILECONDITIONVALUE_AUDIO_PROFILE ModelProfileConditionValue = "AudioProfile"
	MODELPROFILECONDITIONVALUE_WIDTH ModelProfileConditionValue = "Width"
	MODELPROFILECONDITIONVALUE_HEIGHT ModelProfileConditionValue = "Height"
	MODELPROFILECONDITIONVALUE_HAS64_BIT_OFFSETS ModelProfileConditionValue = "Has64BitOffsets"
	MODELPROFILECONDITIONVALUE_PACKET_LENGTH ModelProfileConditionValue = "PacketLength"
	MODELPROFILECONDITIONVALUE_VIDEO_BIT_DEPTH ModelProfileConditionValue = "VideoBitDepth"
	MODELPROFILECONDITIONVALUE_VIDEO_BITRATE ModelProfileConditionValue = "VideoBitrate"
	MODELPROFILECONDITIONVALUE_VIDEO_FRAMERATE ModelProfileConditionValue = "VideoFramerate"
	MODELPROFILECONDITIONVALUE_VIDEO_LEVEL ModelProfileConditionValue = "VideoLevel"
	MODELPROFILECONDITIONVALUE_VIDEO_PROFILE ModelProfileConditionValue = "VideoProfile"
	MODELPROFILECONDITIONVALUE_VIDEO_TIMESTAMP ModelProfileConditionValue = "VideoTimestamp"
	MODELPROFILECONDITIONVALUE_IS_ANAMORPHIC ModelProfileConditionValue = "IsAnamorphic"
	MODELPROFILECONDITIONVALUE_REF_FRAMES ModelProfileConditionValue = "RefFrames"
	MODELPROFILECONDITIONVALUE_NUM_AUDIO_STREAMS ModelProfileConditionValue = "NumAudioStreams"
	MODELPROFILECONDITIONVALUE_NUM_VIDEO_STREAMS ModelProfileConditionValue = "NumVideoStreams"
	MODELPROFILECONDITIONVALUE_IS_SECONDARY_AUDIO ModelProfileConditionValue = "IsSecondaryAudio"
	MODELPROFILECONDITIONVALUE_VIDEO_CODEC_TAG ModelProfileConditionValue = "VideoCodecTag"
	MODELPROFILECONDITIONVALUE_IS_AVC ModelProfileConditionValue = "IsAvc"
	MODELPROFILECONDITIONVALUE_IS_INTERLACED ModelProfileConditionValue = "IsInterlaced"
	MODELPROFILECONDITIONVALUE_AUDIO_SAMPLE_RATE ModelProfileConditionValue = "AudioSampleRate"
	MODELPROFILECONDITIONVALUE_AUDIO_BIT_DEPTH ModelProfileConditionValue = "AudioBitDepth"
	MODELPROFILECONDITIONVALUE_VIDEO_RANGE ModelProfileConditionValue = "VideoRange"
	MODELPROFILECONDITIONVALUE_VIDEO_ROTATION ModelProfileConditionValue = "VideoRotation"
)

// All allowed values of ModelProfileConditionValue enum
var AllowedModelProfileConditionValueEnumValues = []ModelProfileConditionValue{
	"AudioChannels",
	"AudioBitrate",
	"AudioProfile",
	"Width",
	"Height",
	"Has64BitOffsets",
	"PacketLength",
	"VideoBitDepth",
	"VideoBitrate",
	"VideoFramerate",
	"VideoLevel",
	"VideoProfile",
	"VideoTimestamp",
	"IsAnamorphic",
	"RefFrames",
	"NumAudioStreams",
	"NumVideoStreams",
	"IsSecondaryAudio",
	"VideoCodecTag",
	"IsAvc",
	"IsInterlaced",
	"AudioSampleRate",
	"AudioBitDepth",
	"VideoRange",
	"VideoRotation",
}

func (v *ModelProfileConditionValue) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ModelProfileConditionValue(value)
	for _, existing := range AllowedModelProfileConditionValueEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ModelProfileConditionValue", value)
}

// NewModelProfileConditionValueFromValue returns a pointer to a valid ModelProfileConditionValue
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewModelProfileConditionValueFromValue(v string) (*ModelProfileConditionValue, error) {
	ev := ModelProfileConditionValue(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ModelProfileConditionValue: valid values are %v", v, AllowedModelProfileConditionValueEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ModelProfileConditionValue) IsValid() bool {
	for _, existing := range AllowedModelProfileConditionValueEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ProfileConditionValue value
func (v ModelProfileConditionValue) Ptr() *ModelProfileConditionValue {
	return &v
}

type NullableModelProfileConditionValue struct {
	value *ModelProfileConditionValue
	isSet bool
}

func (v NullableModelProfileConditionValue) Get() *ModelProfileConditionValue {
	return v.value
}

func (v *NullableModelProfileConditionValue) Set(val *ModelProfileConditionValue) {
	v.value = val
	v.isSet = true
}

func (v NullableModelProfileConditionValue) IsSet() bool {
	return v.isSet
}

func (v *NullableModelProfileConditionValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelProfileConditionValue(val *ModelProfileConditionValue) *NullableModelProfileConditionValue {
	return &NullableModelProfileConditionValue{value: val, isSet: true}
}

func (v NullableModelProfileConditionValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelProfileConditionValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

