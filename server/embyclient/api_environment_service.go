/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// EnvironmentServiceAPIService EnvironmentServiceAPI service
type EnvironmentServiceAPIService service

type EnvironmentServiceAPIGetEnvironmentDefaultdirectorybrowserRequest struct {
	ctx context.Context
	ApiService *EnvironmentServiceAPIService
}

func (r EnvironmentServiceAPIGetEnvironmentDefaultdirectorybrowserRequest) Execute() (*ModelDefaultDirectoryBrowserInfo, *http.Response, error) {
	return r.ApiService.GetEnvironmentDefaultdirectorybrowserExecute(r)
}

/*
GetEnvironmentDefaultdirectorybrowser Gets the parent path of a given path

Requires authentication as administrator

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return EnvironmentServiceAPIGetEnvironmentDefaultdirectorybrowserRequest
*/
func (a *EnvironmentServiceAPIService) GetEnvironmentDefaultdirectorybrowser(ctx context.Context) EnvironmentServiceAPIGetEnvironmentDefaultdirectorybrowserRequest {
	return EnvironmentServiceAPIGetEnvironmentDefaultdirectorybrowserRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ModelDefaultDirectoryBrowserInfo
func (a *EnvironmentServiceAPIService) GetEnvironmentDefaultdirectorybrowserExecute(r EnvironmentServiceAPIGetEnvironmentDefaultdirectorybrowserRequest) (*ModelDefaultDirectoryBrowserInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ModelDefaultDirectoryBrowserInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentServiceAPIService.GetEnvironmentDefaultdirectorybrowser")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Environment/DefaultDirectoryBrowser"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EnvironmentServiceAPIGetEnvironmentDirectorycontentsRequest struct {
	ctx context.Context
	ApiService *EnvironmentServiceAPIService
	path *string
	includeFiles *bool
	includeDirectories *bool
}

func (r EnvironmentServiceAPIGetEnvironmentDirectorycontentsRequest) Path(path string) EnvironmentServiceAPIGetEnvironmentDirectorycontentsRequest {
	r.path = &path
	return r
}

// An optional filter to include or exclude files from the results. true/false
func (r EnvironmentServiceAPIGetEnvironmentDirectorycontentsRequest) IncludeFiles(includeFiles bool) EnvironmentServiceAPIGetEnvironmentDirectorycontentsRequest {
	r.includeFiles = &includeFiles
	return r
}

// An optional filter to include or exclude folders from the results. true/false
func (r EnvironmentServiceAPIGetEnvironmentDirectorycontentsRequest) IncludeDirectories(includeDirectories bool) EnvironmentServiceAPIGetEnvironmentDirectorycontentsRequest {
	r.includeDirectories = &includeDirectories
	return r
}

func (r EnvironmentServiceAPIGetEnvironmentDirectorycontentsRequest) Execute() ([]ModelIOFileSystemEntryInfo, *http.Response, error) {
	return r.ApiService.GetEnvironmentDirectorycontentsExecute(r)
}

/*
GetEnvironmentDirectorycontents Gets the contents of a given directory in the file system

Requires authentication as administrator

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return EnvironmentServiceAPIGetEnvironmentDirectorycontentsRequest
*/
func (a *EnvironmentServiceAPIService) GetEnvironmentDirectorycontents(ctx context.Context) EnvironmentServiceAPIGetEnvironmentDirectorycontentsRequest {
	return EnvironmentServiceAPIGetEnvironmentDirectorycontentsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ModelIOFileSystemEntryInfo
func (a *EnvironmentServiceAPIService) GetEnvironmentDirectorycontentsExecute(r EnvironmentServiceAPIGetEnvironmentDirectorycontentsRequest) ([]ModelIOFileSystemEntryInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ModelIOFileSystemEntryInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentServiceAPIService.GetEnvironmentDirectorycontents")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Environment/DirectoryContents"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.path == nil {
		return localVarReturnValue, nil, reportError("path is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "Path", r.path, "")
	if r.includeFiles != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IncludeFiles", r.includeFiles, "")
	}
	if r.includeDirectories != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IncludeDirectories", r.includeDirectories, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EnvironmentServiceAPIGetEnvironmentDrivesRequest struct {
	ctx context.Context
	ApiService *EnvironmentServiceAPIService
}

func (r EnvironmentServiceAPIGetEnvironmentDrivesRequest) Execute() ([]ModelIOFileSystemEntryInfo, *http.Response, error) {
	return r.ApiService.GetEnvironmentDrivesExecute(r)
}

/*
GetEnvironmentDrives Gets available drives from the server's file system

Requires authentication as administrator

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return EnvironmentServiceAPIGetEnvironmentDrivesRequest
*/
func (a *EnvironmentServiceAPIService) GetEnvironmentDrives(ctx context.Context) EnvironmentServiceAPIGetEnvironmentDrivesRequest {
	return EnvironmentServiceAPIGetEnvironmentDrivesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ModelIOFileSystemEntryInfo
func (a *EnvironmentServiceAPIService) GetEnvironmentDrivesExecute(r EnvironmentServiceAPIGetEnvironmentDrivesRequest) ([]ModelIOFileSystemEntryInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ModelIOFileSystemEntryInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentServiceAPIService.GetEnvironmentDrives")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Environment/Drives"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EnvironmentServiceAPIGetEnvironmentNetworkdevicesRequest struct {
	ctx context.Context
	ApiService *EnvironmentServiceAPIService
}

func (r EnvironmentServiceAPIGetEnvironmentNetworkdevicesRequest) Execute() ([]ModelIOFileSystemEntryInfo, *http.Response, error) {
	return r.ApiService.GetEnvironmentNetworkdevicesExecute(r)
}

/*
GetEnvironmentNetworkdevices Gets a list of devices on the network

Requires authentication as administrator

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return EnvironmentServiceAPIGetEnvironmentNetworkdevicesRequest
*/
func (a *EnvironmentServiceAPIService) GetEnvironmentNetworkdevices(ctx context.Context) EnvironmentServiceAPIGetEnvironmentNetworkdevicesRequest {
	return EnvironmentServiceAPIGetEnvironmentNetworkdevicesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ModelIOFileSystemEntryInfo
func (a *EnvironmentServiceAPIService) GetEnvironmentNetworkdevicesExecute(r EnvironmentServiceAPIGetEnvironmentNetworkdevicesRequest) ([]ModelIOFileSystemEntryInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ModelIOFileSystemEntryInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentServiceAPIService.GetEnvironmentNetworkdevices")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Environment/NetworkDevices"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EnvironmentServiceAPIGetEnvironmentNetworksharesRequest struct {
	ctx context.Context
	ApiService *EnvironmentServiceAPIService
	path *string
}

func (r EnvironmentServiceAPIGetEnvironmentNetworksharesRequest) Path(path string) EnvironmentServiceAPIGetEnvironmentNetworksharesRequest {
	r.path = &path
	return r
}

func (r EnvironmentServiceAPIGetEnvironmentNetworksharesRequest) Execute() ([]ModelIOFileSystemEntryInfo, *http.Response, error) {
	return r.ApiService.GetEnvironmentNetworksharesExecute(r)
}

/*
GetEnvironmentNetworkshares Gets shares from a network device

Requires authentication as administrator

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return EnvironmentServiceAPIGetEnvironmentNetworksharesRequest
*/
func (a *EnvironmentServiceAPIService) GetEnvironmentNetworkshares(ctx context.Context) EnvironmentServiceAPIGetEnvironmentNetworksharesRequest {
	return EnvironmentServiceAPIGetEnvironmentNetworksharesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ModelIOFileSystemEntryInfo
func (a *EnvironmentServiceAPIService) GetEnvironmentNetworksharesExecute(r EnvironmentServiceAPIGetEnvironmentNetworksharesRequest) ([]ModelIOFileSystemEntryInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ModelIOFileSystemEntryInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentServiceAPIService.GetEnvironmentNetworkshares")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Environment/NetworkShares"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.path == nil {
		return localVarReturnValue, nil, reportError("path is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "Path", r.path, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EnvironmentServiceAPIGetEnvironmentParentpathRequest struct {
	ctx context.Context
	ApiService *EnvironmentServiceAPIService
	path *string
}

func (r EnvironmentServiceAPIGetEnvironmentParentpathRequest) Path(path string) EnvironmentServiceAPIGetEnvironmentParentpathRequest {
	r.path = &path
	return r
}

func (r EnvironmentServiceAPIGetEnvironmentParentpathRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.GetEnvironmentParentpathExecute(r)
}

/*
GetEnvironmentParentpath Gets the parent path of a given path

Requires authentication as administrator

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return EnvironmentServiceAPIGetEnvironmentParentpathRequest
*/
func (a *EnvironmentServiceAPIService) GetEnvironmentParentpath(ctx context.Context) EnvironmentServiceAPIGetEnvironmentParentpathRequest {
	return EnvironmentServiceAPIGetEnvironmentParentpathRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return string
func (a *EnvironmentServiceAPIService) GetEnvironmentParentpathExecute(r EnvironmentServiceAPIGetEnvironmentParentpathRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentServiceAPIService.GetEnvironmentParentpath")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Environment/ParentPath"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.path == nil {
		return localVarReturnValue, nil, reportError("path is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "Path", r.path, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EnvironmentServiceAPIPostEnvironmentDirectorycontentsRequest struct {
	ctx context.Context
	ApiService *EnvironmentServiceAPIService
	path *string
	modelGetDirectoryContents *ModelGetDirectoryContents
	includeFiles *bool
	includeDirectories *bool
}

func (r EnvironmentServiceAPIPostEnvironmentDirectorycontentsRequest) Path(path string) EnvironmentServiceAPIPostEnvironmentDirectorycontentsRequest {
	r.path = &path
	return r
}

// GetDirectoryContents
func (r EnvironmentServiceAPIPostEnvironmentDirectorycontentsRequest) ModelGetDirectoryContents(modelGetDirectoryContents ModelGetDirectoryContents) EnvironmentServiceAPIPostEnvironmentDirectorycontentsRequest {
	r.modelGetDirectoryContents = &modelGetDirectoryContents
	return r
}

// An optional filter to include or exclude files from the results. true/false
func (r EnvironmentServiceAPIPostEnvironmentDirectorycontentsRequest) IncludeFiles(includeFiles bool) EnvironmentServiceAPIPostEnvironmentDirectorycontentsRequest {
	r.includeFiles = &includeFiles
	return r
}

// An optional filter to include or exclude folders from the results. true/false
func (r EnvironmentServiceAPIPostEnvironmentDirectorycontentsRequest) IncludeDirectories(includeDirectories bool) EnvironmentServiceAPIPostEnvironmentDirectorycontentsRequest {
	r.includeDirectories = &includeDirectories
	return r
}

func (r EnvironmentServiceAPIPostEnvironmentDirectorycontentsRequest) Execute() ([]ModelIOFileSystemEntryInfo, *http.Response, error) {
	return r.ApiService.PostEnvironmentDirectorycontentsExecute(r)
}

/*
PostEnvironmentDirectorycontents Gets the contents of a given directory in the file system

Requires authentication as administrator

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return EnvironmentServiceAPIPostEnvironmentDirectorycontentsRequest
*/
func (a *EnvironmentServiceAPIService) PostEnvironmentDirectorycontents(ctx context.Context) EnvironmentServiceAPIPostEnvironmentDirectorycontentsRequest {
	return EnvironmentServiceAPIPostEnvironmentDirectorycontentsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ModelIOFileSystemEntryInfo
func (a *EnvironmentServiceAPIService) PostEnvironmentDirectorycontentsExecute(r EnvironmentServiceAPIPostEnvironmentDirectorycontentsRequest) ([]ModelIOFileSystemEntryInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ModelIOFileSystemEntryInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentServiceAPIService.PostEnvironmentDirectorycontents")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Environment/DirectoryContents"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.path == nil {
		return localVarReturnValue, nil, reportError("path is required and must be specified")
	}
	if r.modelGetDirectoryContents == nil {
		return localVarReturnValue, nil, reportError("modelGetDirectoryContents is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "Path", r.path, "")
	if r.includeFiles != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IncludeFiles", r.includeFiles, "")
	}
	if r.includeDirectories != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IncludeDirectories", r.includeDirectories, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.modelGetDirectoryContents
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type EnvironmentServiceAPIPostEnvironmentValidatepathRequest struct {
	ctx context.Context
	ApiService *EnvironmentServiceAPIService
	path *string
	modelValidatePath *ModelValidatePath
}

func (r EnvironmentServiceAPIPostEnvironmentValidatepathRequest) Path(path string) EnvironmentServiceAPIPostEnvironmentValidatepathRequest {
	r.path = &path
	return r
}

// ValidatePath
func (r EnvironmentServiceAPIPostEnvironmentValidatepathRequest) ModelValidatePath(modelValidatePath ModelValidatePath) EnvironmentServiceAPIPostEnvironmentValidatepathRequest {
	r.modelValidatePath = &modelValidatePath
	return r
}

func (r EnvironmentServiceAPIPostEnvironmentValidatepathRequest) Execute() (*http.Response, error) {
	return r.ApiService.PostEnvironmentValidatepathExecute(r)
}

/*
PostEnvironmentValidatepath Gets the contents of a given directory in the file system

Requires authentication as administrator

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return EnvironmentServiceAPIPostEnvironmentValidatepathRequest
*/
func (a *EnvironmentServiceAPIService) PostEnvironmentValidatepath(ctx context.Context) EnvironmentServiceAPIPostEnvironmentValidatepathRequest {
	return EnvironmentServiceAPIPostEnvironmentValidatepathRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *EnvironmentServiceAPIService) PostEnvironmentValidatepathExecute(r EnvironmentServiceAPIPostEnvironmentValidatepathRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EnvironmentServiceAPIService.PostEnvironmentValidatepath")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Environment/ValidatePath"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.path == nil {
		return nil, reportError("path is required and must be specified")
	}
	if r.modelValidatePath == nil {
		return nil, reportError("modelValidatePath is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "Path", r.path, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.modelValidatePath
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
