/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"encoding/json"
)

// checks if the ModelVersion type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelVersion{}

// ModelVersion struct for ModelVersion
type ModelVersion struct {
	Major *int32 `json:"Major,omitempty"`
	Minor *int32 `json:"Minor,omitempty"`
	Build *int32 `json:"Build,omitempty"`
	Revision *int32 `json:"Revision,omitempty"`
	MajorRevision *int32 `json:"MajorRevision,omitempty"`
	MinorRevision *int32 `json:"MinorRevision,omitempty"`
}

// NewModelVersion instantiates a new ModelVersion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelVersion() *ModelVersion {
	this := ModelVersion{}
	return &this
}

// NewModelVersionWithDefaults instantiates a new ModelVersion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelVersionWithDefaults() *ModelVersion {
	this := ModelVersion{}
	return &this
}

// GetMajor returns the Major field value if set, zero value otherwise.
func (o *ModelVersion) GetMajor() int32 {
	if o == nil || IsNil(o.Major) {
		var ret int32
		return ret
	}
	return *o.Major
}

// GetMajorOk returns a tuple with the Major field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelVersion) GetMajorOk() (*int32, bool) {
	if o == nil || IsNil(o.Major) {
		return nil, false
	}
	return o.Major, true
}

// HasMajor returns a boolean if a field has been set.
func (o *ModelVersion) HasMajor() bool {
	if o != nil && !IsNil(o.Major) {
		return true
	}

	return false
}

// SetMajor gets a reference to the given int32 and assigns it to the Major field.
func (o *ModelVersion) SetMajor(v int32) {
	o.Major = &v
}

// GetMinor returns the Minor field value if set, zero value otherwise.
func (o *ModelVersion) GetMinor() int32 {
	if o == nil || IsNil(o.Minor) {
		var ret int32
		return ret
	}
	return *o.Minor
}

// GetMinorOk returns a tuple with the Minor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelVersion) GetMinorOk() (*int32, bool) {
	if o == nil || IsNil(o.Minor) {
		return nil, false
	}
	return o.Minor, true
}

// HasMinor returns a boolean if a field has been set.
func (o *ModelVersion) HasMinor() bool {
	if o != nil && !IsNil(o.Minor) {
		return true
	}

	return false
}

// SetMinor gets a reference to the given int32 and assigns it to the Minor field.
func (o *ModelVersion) SetMinor(v int32) {
	o.Minor = &v
}

// GetBuild returns the Build field value if set, zero value otherwise.
func (o *ModelVersion) GetBuild() int32 {
	if o == nil || IsNil(o.Build) {
		var ret int32
		return ret
	}
	return *o.Build
}

// GetBuildOk returns a tuple with the Build field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelVersion) GetBuildOk() (*int32, bool) {
	if o == nil || IsNil(o.Build) {
		return nil, false
	}
	return o.Build, true
}

// HasBuild returns a boolean if a field has been set.
func (o *ModelVersion) HasBuild() bool {
	if o != nil && !IsNil(o.Build) {
		return true
	}

	return false
}

// SetBuild gets a reference to the given int32 and assigns it to the Build field.
func (o *ModelVersion) SetBuild(v int32) {
	o.Build = &v
}

// GetRevision returns the Revision field value if set, zero value otherwise.
func (o *ModelVersion) GetRevision() int32 {
	if o == nil || IsNil(o.Revision) {
		var ret int32
		return ret
	}
	return *o.Revision
}

// GetRevisionOk returns a tuple with the Revision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelVersion) GetRevisionOk() (*int32, bool) {
	if o == nil || IsNil(o.Revision) {
		return nil, false
	}
	return o.Revision, true
}

// HasRevision returns a boolean if a field has been set.
func (o *ModelVersion) HasRevision() bool {
	if o != nil && !IsNil(o.Revision) {
		return true
	}

	return false
}

// SetRevision gets a reference to the given int32 and assigns it to the Revision field.
func (o *ModelVersion) SetRevision(v int32) {
	o.Revision = &v
}

// GetMajorRevision returns the MajorRevision field value if set, zero value otherwise.
func (o *ModelVersion) GetMajorRevision() int32 {
	if o == nil || IsNil(o.MajorRevision) {
		var ret int32
		return ret
	}
	return *o.MajorRevision
}

// GetMajorRevisionOk returns a tuple with the MajorRevision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelVersion) GetMajorRevisionOk() (*int32, bool) {
	if o == nil || IsNil(o.MajorRevision) {
		return nil, false
	}
	return o.MajorRevision, true
}

// HasMajorRevision returns a boolean if a field has been set.
func (o *ModelVersion) HasMajorRevision() bool {
	if o != nil && !IsNil(o.MajorRevision) {
		return true
	}

	return false
}

// SetMajorRevision gets a reference to the given int32 and assigns it to the MajorRevision field.
func (o *ModelVersion) SetMajorRevision(v int32) {
	o.MajorRevision = &v
}

// GetMinorRevision returns the MinorRevision field value if set, zero value otherwise.
func (o *ModelVersion) GetMinorRevision() int32 {
	if o == nil || IsNil(o.MinorRevision) {
		var ret int32
		return ret
	}
	return *o.MinorRevision
}

// GetMinorRevisionOk returns a tuple with the MinorRevision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelVersion) GetMinorRevisionOk() (*int32, bool) {
	if o == nil || IsNil(o.MinorRevision) {
		return nil, false
	}
	return o.MinorRevision, true
}

// HasMinorRevision returns a boolean if a field has been set.
func (o *ModelVersion) HasMinorRevision() bool {
	if o != nil && !IsNil(o.MinorRevision) {
		return true
	}

	return false
}

// SetMinorRevision gets a reference to the given int32 and assigns it to the MinorRevision field.
func (o *ModelVersion) SetMinorRevision(v int32) {
	o.MinorRevision = &v
}

func (o ModelVersion) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelVersion) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Major) {
		toSerialize["Major"] = o.Major
	}
	if !IsNil(o.Minor) {
		toSerialize["Minor"] = o.Minor
	}
	if !IsNil(o.Build) {
		toSerialize["Build"] = o.Build
	}
	if !IsNil(o.Revision) {
		toSerialize["Revision"] = o.Revision
	}
	if !IsNil(o.MajorRevision) {
		toSerialize["MajorRevision"] = o.MajorRevision
	}
	if !IsNil(o.MinorRevision) {
		toSerialize["MinorRevision"] = o.MinorRevision
	}
	return toSerialize, nil
}

type NullableModelVersion struct {
	value *ModelVersion
	isSet bool
}

func (v NullableModelVersion) Get() *ModelVersion {
	return v.value
}

func (v *NullableModelVersion) Set(val *ModelVersion) {
	v.value = val
	v.isSet = true
}

func (v NullableModelVersion) IsSet() bool {
	return v.isSet
}

func (v *NullableModelVersion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelVersion(val *ModelVersion) *NullableModelVersion {
	return &NullableModelVersion{value: val, isSet: true}
}

func (v NullableModelVersion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelVersion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


