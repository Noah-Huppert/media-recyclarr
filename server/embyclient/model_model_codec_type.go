/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"encoding/json"
	"fmt"
)

// ModelCodecType the model 'ModelCodecType'
type ModelCodecType string

// List of CodecType
const (
	MODELCODECTYPE_VIDEO ModelCodecType = "Video"
	MODELCODECTYPE_VIDEO_AUDIO ModelCodecType = "VideoAudio"
	MODELCODECTYPE_AUDIO ModelCodecType = "Audio"
)

// All allowed values of ModelCodecType enum
var AllowedModelCodecTypeEnumValues = []ModelCodecType{
	"Video",
	"VideoAudio",
	"Audio",
}

func (v *ModelCodecType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ModelCodecType(value)
	for _, existing := range AllowedModelCodecTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ModelCodecType", value)
}

// NewModelCodecTypeFromValue returns a pointer to a valid ModelCodecType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewModelCodecTypeFromValue(v string) (*ModelCodecType, error) {
	ev := ModelCodecType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ModelCodecType: valid values are %v", v, AllowedModelCodecTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ModelCodecType) IsValid() bool {
	for _, existing := range AllowedModelCodecTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CodecType value
func (v ModelCodecType) Ptr() *ModelCodecType {
	return &v
}

type NullableModelCodecType struct {
	value *ModelCodecType
	isSet bool
}

func (v NullableModelCodecType) Get() *ModelCodecType {
	return v.value
}

func (v *NullableModelCodecType) Set(val *ModelCodecType) {
	v.value = val
	v.isSet = true
}

func (v NullableModelCodecType) IsSet() bool {
	return v.isSet
}

func (v *NullableModelCodecType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelCodecType(val *ModelCodecType) *NullableModelCodecType {
	return &NullableModelCodecType{value: val, isSet: true}
}

func (v NullableModelCodecType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelCodecType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

