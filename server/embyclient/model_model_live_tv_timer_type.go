/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"encoding/json"
	"fmt"
)

// ModelLiveTvTimerType the model 'ModelLiveTvTimerType'
type ModelLiveTvTimerType string

// List of LiveTv.TimerType
const (
	MODELLIVETVTIMERTYPE_PROGRAM ModelLiveTvTimerType = "Program"
	MODELLIVETVTIMERTYPE_DATE_TIME ModelLiveTvTimerType = "DateTime"
	MODELLIVETVTIMERTYPE_KEYWORD ModelLiveTvTimerType = "Keyword"
)

// All allowed values of ModelLiveTvTimerType enum
var AllowedModelLiveTvTimerTypeEnumValues = []ModelLiveTvTimerType{
	"Program",
	"DateTime",
	"Keyword",
}

func (v *ModelLiveTvTimerType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ModelLiveTvTimerType(value)
	for _, existing := range AllowedModelLiveTvTimerTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ModelLiveTvTimerType", value)
}

// NewModelLiveTvTimerTypeFromValue returns a pointer to a valid ModelLiveTvTimerType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewModelLiveTvTimerTypeFromValue(v string) (*ModelLiveTvTimerType, error) {
	ev := ModelLiveTvTimerType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ModelLiveTvTimerType: valid values are %v", v, AllowedModelLiveTvTimerTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ModelLiveTvTimerType) IsValid() bool {
	for _, existing := range AllowedModelLiveTvTimerTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LiveTv.TimerType value
func (v ModelLiveTvTimerType) Ptr() *ModelLiveTvTimerType {
	return &v
}

type NullableModelLiveTvTimerType struct {
	value *ModelLiveTvTimerType
	isSet bool
}

func (v NullableModelLiveTvTimerType) Get() *ModelLiveTvTimerType {
	return v.value
}

func (v *NullableModelLiveTvTimerType) Set(val *ModelLiveTvTimerType) {
	v.value = val
	v.isSet = true
}

func (v NullableModelLiveTvTimerType) IsSet() bool {
	return v.isSet
}

func (v *NullableModelLiveTvTimerType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelLiveTvTimerType(val *ModelLiveTvTimerType) *NullableModelLiveTvTimerType {
	return &NullableModelLiveTvTimerType{value: val, isSet: true}
}

func (v NullableModelLiveTvTimerType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelLiveTvTimerType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

