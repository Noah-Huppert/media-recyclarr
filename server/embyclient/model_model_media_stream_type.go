/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"encoding/json"
	"fmt"
)

// ModelMediaStreamType the model 'ModelMediaStreamType'
type ModelMediaStreamType string

// List of MediaStreamType
const (
	MODELMEDIASTREAMTYPE_UNKNOWN ModelMediaStreamType = "Unknown"
	MODELMEDIASTREAMTYPE_AUDIO ModelMediaStreamType = "Audio"
	MODELMEDIASTREAMTYPE_VIDEO ModelMediaStreamType = "Video"
	MODELMEDIASTREAMTYPE_SUBTITLE ModelMediaStreamType = "Subtitle"
	MODELMEDIASTREAMTYPE_EMBEDDED_IMAGE ModelMediaStreamType = "EmbeddedImage"
	MODELMEDIASTREAMTYPE_ATTACHMENT ModelMediaStreamType = "Attachment"
	MODELMEDIASTREAMTYPE_DATA ModelMediaStreamType = "Data"
)

// All allowed values of ModelMediaStreamType enum
var AllowedModelMediaStreamTypeEnumValues = []ModelMediaStreamType{
	"Unknown",
	"Audio",
	"Video",
	"Subtitle",
	"EmbeddedImage",
	"Attachment",
	"Data",
}

func (v *ModelMediaStreamType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ModelMediaStreamType(value)
	for _, existing := range AllowedModelMediaStreamTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ModelMediaStreamType", value)
}

// NewModelMediaStreamTypeFromValue returns a pointer to a valid ModelMediaStreamType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewModelMediaStreamTypeFromValue(v string) (*ModelMediaStreamType, error) {
	ev := ModelMediaStreamType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ModelMediaStreamType: valid values are %v", v, AllowedModelMediaStreamTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ModelMediaStreamType) IsValid() bool {
	for _, existing := range AllowedModelMediaStreamTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MediaStreamType value
func (v ModelMediaStreamType) Ptr() *ModelMediaStreamType {
	return &v
}

type NullableModelMediaStreamType struct {
	value *ModelMediaStreamType
	isSet bool
}

func (v NullableModelMediaStreamType) Get() *ModelMediaStreamType {
	return v.value
}

func (v *NullableModelMediaStreamType) Set(val *ModelMediaStreamType) {
	v.value = val
	v.isSet = true
}

func (v NullableModelMediaStreamType) IsSet() bool {
	return v.isSet
}

func (v *NullableModelMediaStreamType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelMediaStreamType(val *ModelMediaStreamType) *NullableModelMediaStreamType {
	return &NullableModelMediaStreamType{value: val, isSet: true}
}

func (v NullableModelMediaStreamType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelMediaStreamType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

