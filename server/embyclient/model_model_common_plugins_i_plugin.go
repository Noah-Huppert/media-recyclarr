/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"encoding/json"
)

// checks if the ModelCommonPluginsIPlugin type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelCommonPluginsIPlugin{}

// ModelCommonPluginsIPlugin struct for ModelCommonPluginsIPlugin
type ModelCommonPluginsIPlugin struct {
	Name *string `json:"Name,omitempty"`
	Description *string `json:"Description,omitempty"`
	Id *string `json:"Id,omitempty"`
	Version *ModelVersion `json:"Version,omitempty"`
	AssemblyFilePath *string `json:"AssemblyFilePath,omitempty"`
	DataFolderPath *string `json:"DataFolderPath,omitempty"`
}

// NewModelCommonPluginsIPlugin instantiates a new ModelCommonPluginsIPlugin object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelCommonPluginsIPlugin() *ModelCommonPluginsIPlugin {
	this := ModelCommonPluginsIPlugin{}
	return &this
}

// NewModelCommonPluginsIPluginWithDefaults instantiates a new ModelCommonPluginsIPlugin object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelCommonPluginsIPluginWithDefaults() *ModelCommonPluginsIPlugin {
	this := ModelCommonPluginsIPlugin{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ModelCommonPluginsIPlugin) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelCommonPluginsIPlugin) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ModelCommonPluginsIPlugin) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ModelCommonPluginsIPlugin) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ModelCommonPluginsIPlugin) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelCommonPluginsIPlugin) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ModelCommonPluginsIPlugin) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ModelCommonPluginsIPlugin) SetDescription(v string) {
	o.Description = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ModelCommonPluginsIPlugin) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelCommonPluginsIPlugin) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ModelCommonPluginsIPlugin) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ModelCommonPluginsIPlugin) SetId(v string) {
	o.Id = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *ModelCommonPluginsIPlugin) GetVersion() ModelVersion {
	if o == nil || IsNil(o.Version) {
		var ret ModelVersion
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelCommonPluginsIPlugin) GetVersionOk() (*ModelVersion, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *ModelCommonPluginsIPlugin) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given ModelVersion and assigns it to the Version field.
func (o *ModelCommonPluginsIPlugin) SetVersion(v ModelVersion) {
	o.Version = &v
}

// GetAssemblyFilePath returns the AssemblyFilePath field value if set, zero value otherwise.
func (o *ModelCommonPluginsIPlugin) GetAssemblyFilePath() string {
	if o == nil || IsNil(o.AssemblyFilePath) {
		var ret string
		return ret
	}
	return *o.AssemblyFilePath
}

// GetAssemblyFilePathOk returns a tuple with the AssemblyFilePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelCommonPluginsIPlugin) GetAssemblyFilePathOk() (*string, bool) {
	if o == nil || IsNil(o.AssemblyFilePath) {
		return nil, false
	}
	return o.AssemblyFilePath, true
}

// HasAssemblyFilePath returns a boolean if a field has been set.
func (o *ModelCommonPluginsIPlugin) HasAssemblyFilePath() bool {
	if o != nil && !IsNil(o.AssemblyFilePath) {
		return true
	}

	return false
}

// SetAssemblyFilePath gets a reference to the given string and assigns it to the AssemblyFilePath field.
func (o *ModelCommonPluginsIPlugin) SetAssemblyFilePath(v string) {
	o.AssemblyFilePath = &v
}

// GetDataFolderPath returns the DataFolderPath field value if set, zero value otherwise.
func (o *ModelCommonPluginsIPlugin) GetDataFolderPath() string {
	if o == nil || IsNil(o.DataFolderPath) {
		var ret string
		return ret
	}
	return *o.DataFolderPath
}

// GetDataFolderPathOk returns a tuple with the DataFolderPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelCommonPluginsIPlugin) GetDataFolderPathOk() (*string, bool) {
	if o == nil || IsNil(o.DataFolderPath) {
		return nil, false
	}
	return o.DataFolderPath, true
}

// HasDataFolderPath returns a boolean if a field has been set.
func (o *ModelCommonPluginsIPlugin) HasDataFolderPath() bool {
	if o != nil && !IsNil(o.DataFolderPath) {
		return true
	}

	return false
}

// SetDataFolderPath gets a reference to the given string and assigns it to the DataFolderPath field.
func (o *ModelCommonPluginsIPlugin) SetDataFolderPath(v string) {
	o.DataFolderPath = &v
}

func (o ModelCommonPluginsIPlugin) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelCommonPluginsIPlugin) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["Description"] = o.Description
	}
	if !IsNil(o.Id) {
		toSerialize["Id"] = o.Id
	}
	if !IsNil(o.Version) {
		toSerialize["Version"] = o.Version
	}
	if !IsNil(o.AssemblyFilePath) {
		toSerialize["AssemblyFilePath"] = o.AssemblyFilePath
	}
	if !IsNil(o.DataFolderPath) {
		toSerialize["DataFolderPath"] = o.DataFolderPath
	}
	return toSerialize, nil
}

type NullableModelCommonPluginsIPlugin struct {
	value *ModelCommonPluginsIPlugin
	isSet bool
}

func (v NullableModelCommonPluginsIPlugin) Get() *ModelCommonPluginsIPlugin {
	return v.value
}

func (v *NullableModelCommonPluginsIPlugin) Set(val *ModelCommonPluginsIPlugin) {
	v.value = val
	v.isSet = true
}

func (v NullableModelCommonPluginsIPlugin) IsSet() bool {
	return v.isSet
}

func (v *NullableModelCommonPluginsIPlugin) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelCommonPluginsIPlugin(val *ModelCommonPluginsIPlugin) *NullableModelCommonPluginsIPlugin {
	return &NullableModelCommonPluginsIPlugin{value: val, isSet: true}
}

func (v NullableModelCommonPluginsIPlugin) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelCommonPluginsIPlugin) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


