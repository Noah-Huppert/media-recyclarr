/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// AudioServiceAPIService AudioServiceAPI service
type AudioServiceAPIService service

type AudioServiceAPIGetAudioByIdByStreamfilenameRequest struct {
	ctx context.Context
	ApiService *AudioServiceAPIService
	streamFileName string
	id string
	container *string
	deviceProfileId *string
	deviceId *string
	audioCodec *string
	enableAutoStreamCopy *bool
	audioSampleRate *int32
	audioBitRate *int32
	audioChannels *int32
	maxAudioChannels *int32
	static *bool
	profile *string
	level *string
	framerate *float32
	maxFramerate *float32
	copyTimestamps *bool
	startTimeTicks *int64
	width *int32
	height *int32
	maxWidth *int32
	maxHeight *int32
	videoBitRate *int32
	subtitleStreamIndex *int32
	subtitleMethod *ModelSubtitleDeliveryMethod
	maxRefFrames *int32
	maxVideoBitDepth *int32
	videoCodec *string
	audioStreamIndex *int32
	videoStreamIndex *int32
}

// Container
func (r AudioServiceAPIGetAudioByIdByStreamfilenameRequest) Container(container string) AudioServiceAPIGetAudioByIdByStreamfilenameRequest {
	r.container = &container
	return r
}

// Optional. The dlna device profile id to utilize.
func (r AudioServiceAPIGetAudioByIdByStreamfilenameRequest) DeviceProfileId(deviceProfileId string) AudioServiceAPIGetAudioByIdByStreamfilenameRequest {
	r.deviceProfileId = &deviceProfileId
	return r
}

// The device id of the client requesting. Used to stop encoding processes when needed.
func (r AudioServiceAPIGetAudioByIdByStreamfilenameRequest) DeviceId(deviceId string) AudioServiceAPIGetAudioByIdByStreamfilenameRequest {
	r.deviceId = &deviceId
	return r
}

// Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension. Options: aac, mp3, vorbis, wma.
func (r AudioServiceAPIGetAudioByIdByStreamfilenameRequest) AudioCodec(audioCodec string) AudioServiceAPIGetAudioByIdByStreamfilenameRequest {
	r.audioCodec = &audioCodec
	return r
}

// Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
func (r AudioServiceAPIGetAudioByIdByStreamfilenameRequest) EnableAutoStreamCopy(enableAutoStreamCopy bool) AudioServiceAPIGetAudioByIdByStreamfilenameRequest {
	r.enableAutoStreamCopy = &enableAutoStreamCopy
	return r
}

// Optional. Specify a specific audio sample rate, e.g. 44100
func (r AudioServiceAPIGetAudioByIdByStreamfilenameRequest) AudioSampleRate(audioSampleRate int32) AudioServiceAPIGetAudioByIdByStreamfilenameRequest {
	r.audioSampleRate = &audioSampleRate
	return r
}

// Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
func (r AudioServiceAPIGetAudioByIdByStreamfilenameRequest) AudioBitRate(audioBitRate int32) AudioServiceAPIGetAudioByIdByStreamfilenameRequest {
	r.audioBitRate = &audioBitRate
	return r
}

// Optional. Specify a specific number of audio channels to encode to, e.g. 2
func (r AudioServiceAPIGetAudioByIdByStreamfilenameRequest) AudioChannels(audioChannels int32) AudioServiceAPIGetAudioByIdByStreamfilenameRequest {
	r.audioChannels = &audioChannels
	return r
}

// Optional. Specify a maximum number of audio channels to encode to, e.g. 2
func (r AudioServiceAPIGetAudioByIdByStreamfilenameRequest) MaxAudioChannels(maxAudioChannels int32) AudioServiceAPIGetAudioByIdByStreamfilenameRequest {
	r.maxAudioChannels = &maxAudioChannels
	return r
}

// Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false
func (r AudioServiceAPIGetAudioByIdByStreamfilenameRequest) Static(static bool) AudioServiceAPIGetAudioByIdByStreamfilenameRequest {
	r.static = &static
	return r
}

// Optional. Specify a specific h264 profile, e.g. main, baseline, high.
func (r AudioServiceAPIGetAudioByIdByStreamfilenameRequest) Profile(profile string) AudioServiceAPIGetAudioByIdByStreamfilenameRequest {
	r.profile = &profile
	return r
}

// Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
func (r AudioServiceAPIGetAudioByIdByStreamfilenameRequest) Level(level string) AudioServiceAPIGetAudioByIdByStreamfilenameRequest {
	r.level = &level
	return r
}

// Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
func (r AudioServiceAPIGetAudioByIdByStreamfilenameRequest) Framerate(framerate float32) AudioServiceAPIGetAudioByIdByStreamfilenameRequest {
	r.framerate = &framerate
	return r
}

// Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
func (r AudioServiceAPIGetAudioByIdByStreamfilenameRequest) MaxFramerate(maxFramerate float32) AudioServiceAPIGetAudioByIdByStreamfilenameRequest {
	r.maxFramerate = &maxFramerate
	return r
}

// Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
func (r AudioServiceAPIGetAudioByIdByStreamfilenameRequest) CopyTimestamps(copyTimestamps bool) AudioServiceAPIGetAudioByIdByStreamfilenameRequest {
	r.copyTimestamps = &copyTimestamps
	return r
}

// Optional. Specify a starting offset, in ticks. 1ms &#x3D; 10000 ticks.
func (r AudioServiceAPIGetAudioByIdByStreamfilenameRequest) StartTimeTicks(startTimeTicks int64) AudioServiceAPIGetAudioByIdByStreamfilenameRequest {
	r.startTimeTicks = &startTimeTicks
	return r
}

// Optional. The fixed horizontal resolution of the encoded video.
func (r AudioServiceAPIGetAudioByIdByStreamfilenameRequest) Width(width int32) AudioServiceAPIGetAudioByIdByStreamfilenameRequest {
	r.width = &width
	return r
}

// Optional. The fixed vertical resolution of the encoded video.
func (r AudioServiceAPIGetAudioByIdByStreamfilenameRequest) Height(height int32) AudioServiceAPIGetAudioByIdByStreamfilenameRequest {
	r.height = &height
	return r
}

// Optional. The maximum horizontal resolution of the encoded video.
func (r AudioServiceAPIGetAudioByIdByStreamfilenameRequest) MaxWidth(maxWidth int32) AudioServiceAPIGetAudioByIdByStreamfilenameRequest {
	r.maxWidth = &maxWidth
	return r
}

// Optional. The maximum vertical resolution of the encoded video.
func (r AudioServiceAPIGetAudioByIdByStreamfilenameRequest) MaxHeight(maxHeight int32) AudioServiceAPIGetAudioByIdByStreamfilenameRequest {
	r.maxHeight = &maxHeight
	return r
}

// Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
func (r AudioServiceAPIGetAudioByIdByStreamfilenameRequest) VideoBitRate(videoBitRate int32) AudioServiceAPIGetAudioByIdByStreamfilenameRequest {
	r.videoBitRate = &videoBitRate
	return r
}

// Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
func (r AudioServiceAPIGetAudioByIdByStreamfilenameRequest) SubtitleStreamIndex(subtitleStreamIndex int32) AudioServiceAPIGetAudioByIdByStreamfilenameRequest {
	r.subtitleStreamIndex = &subtitleStreamIndex
	return r
}

// Optional. Specify the subtitle delivery method.
func (r AudioServiceAPIGetAudioByIdByStreamfilenameRequest) SubtitleMethod(subtitleMethod ModelSubtitleDeliveryMethod) AudioServiceAPIGetAudioByIdByStreamfilenameRequest {
	r.subtitleMethod = &subtitleMethod
	return r
}

// Optional.
func (r AudioServiceAPIGetAudioByIdByStreamfilenameRequest) MaxRefFrames(maxRefFrames int32) AudioServiceAPIGetAudioByIdByStreamfilenameRequest {
	r.maxRefFrames = &maxRefFrames
	return r
}

// Optional.
func (r AudioServiceAPIGetAudioByIdByStreamfilenameRequest) MaxVideoBitDepth(maxVideoBitDepth int32) AudioServiceAPIGetAudioByIdByStreamfilenameRequest {
	r.maxVideoBitDepth = &maxVideoBitDepth
	return r
}

// Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension. Options: h264, mpeg4, theora, vpx, wmv.
func (r AudioServiceAPIGetAudioByIdByStreamfilenameRequest) VideoCodec(videoCodec string) AudioServiceAPIGetAudioByIdByStreamfilenameRequest {
	r.videoCodec = &videoCodec
	return r
}

// Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
func (r AudioServiceAPIGetAudioByIdByStreamfilenameRequest) AudioStreamIndex(audioStreamIndex int32) AudioServiceAPIGetAudioByIdByStreamfilenameRequest {
	r.audioStreamIndex = &audioStreamIndex
	return r
}

// Optional. The index of the video stream to use. If omitted the first video stream will be used.
func (r AudioServiceAPIGetAudioByIdByStreamfilenameRequest) VideoStreamIndex(videoStreamIndex int32) AudioServiceAPIGetAudioByIdByStreamfilenameRequest {
	r.videoStreamIndex = &videoStreamIndex
	return r
}

func (r AudioServiceAPIGetAudioByIdByStreamfilenameRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetAudioByIdByStreamfilenameExecute(r)
}

/*
GetAudioByIdByStreamfilename Gets an audio stream

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param streamFileName
 @param id Item Id
 @return AudioServiceAPIGetAudioByIdByStreamfilenameRequest
*/
func (a *AudioServiceAPIService) GetAudioByIdByStreamfilename(ctx context.Context, streamFileName string, id string) AudioServiceAPIGetAudioByIdByStreamfilenameRequest {
	return AudioServiceAPIGetAudioByIdByStreamfilenameRequest{
		ApiService: a,
		ctx: ctx,
		streamFileName: streamFileName,
		id: id,
	}
}

// Execute executes the request
func (a *AudioServiceAPIService) GetAudioByIdByStreamfilenameExecute(r AudioServiceAPIGetAudioByIdByStreamfilenameRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AudioServiceAPIService.GetAudioByIdByStreamfilename")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Audio/{Id}/{StreamFileName}"
	localVarPath = strings.Replace(localVarPath, "{"+"StreamFileName"+"}", url.PathEscape(parameterValueToString(r.streamFileName, "streamFileName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.container == nil {
		return nil, reportError("container is required and must be specified")
	}

	if r.deviceProfileId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "DeviceProfileId", r.deviceProfileId, "")
	}
	if r.deviceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "DeviceId", r.deviceId, "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "Container", r.container, "")
	if r.audioCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioCodec", r.audioCodec, "")
	}
	if r.enableAutoStreamCopy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableAutoStreamCopy", r.enableAutoStreamCopy, "")
	}
	if r.audioSampleRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioSampleRate", r.audioSampleRate, "")
	}
	if r.audioBitRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioBitRate", r.audioBitRate, "")
	}
	if r.audioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioChannels", r.audioChannels, "")
	}
	if r.maxAudioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxAudioChannels", r.maxAudioChannels, "")
	}
	if r.static != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Static", r.static, "")
	}
	if r.profile != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Profile", r.profile, "")
	}
	if r.level != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Level", r.level, "")
	}
	if r.framerate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Framerate", r.framerate, "")
	}
	if r.maxFramerate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxFramerate", r.maxFramerate, "")
	}
	if r.copyTimestamps != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "CopyTimestamps", r.copyTimestamps, "")
	}
	if r.startTimeTicks != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "StartTimeTicks", r.startTimeTicks, "")
	}
	if r.width != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Width", r.width, "")
	}
	if r.height != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Height", r.height, "")
	}
	if r.maxWidth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxWidth", r.maxWidth, "")
	}
	if r.maxHeight != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxHeight", r.maxHeight, "")
	}
	if r.videoBitRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoBitRate", r.videoBitRate, "")
	}
	if r.subtitleStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SubtitleStreamIndex", r.subtitleStreamIndex, "")
	}
	if r.subtitleMethod != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SubtitleMethod", r.subtitleMethod, "")
	}
	if r.maxRefFrames != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxRefFrames", r.maxRefFrames, "")
	}
	if r.maxVideoBitDepth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxVideoBitDepth", r.maxVideoBitDepth, "")
	}
	if r.videoCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoCodec", r.videoCodec, "")
	}
	if r.audioStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioStreamIndex", r.audioStreamIndex, "")
	}
	if r.videoStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoStreamIndex", r.videoStreamIndex, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type AudioServiceAPIGetAudioByIdStreamRequest struct {
	ctx context.Context
	ApiService *AudioServiceAPIService
	id string
	container *string
	deviceProfileId *string
	deviceId *string
	audioCodec *string
	enableAutoStreamCopy *bool
	audioSampleRate *int32
	audioBitRate *int32
	audioChannels *int32
	maxAudioChannels *int32
	static *bool
	profile *string
	level *string
	framerate *float32
	maxFramerate *float32
	copyTimestamps *bool
	startTimeTicks *int64
	width *int32
	height *int32
	maxWidth *int32
	maxHeight *int32
	videoBitRate *int32
	subtitleStreamIndex *int32
	subtitleMethod *ModelSubtitleDeliveryMethod
	maxRefFrames *int32
	maxVideoBitDepth *int32
	videoCodec *string
	audioStreamIndex *int32
	videoStreamIndex *int32
}

// Container
func (r AudioServiceAPIGetAudioByIdStreamRequest) Container(container string) AudioServiceAPIGetAudioByIdStreamRequest {
	r.container = &container
	return r
}

// Optional. The dlna device profile id to utilize.
func (r AudioServiceAPIGetAudioByIdStreamRequest) DeviceProfileId(deviceProfileId string) AudioServiceAPIGetAudioByIdStreamRequest {
	r.deviceProfileId = &deviceProfileId
	return r
}

// The device id of the client requesting. Used to stop encoding processes when needed.
func (r AudioServiceAPIGetAudioByIdStreamRequest) DeviceId(deviceId string) AudioServiceAPIGetAudioByIdStreamRequest {
	r.deviceId = &deviceId
	return r
}

// Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension. Options: aac, mp3, vorbis, wma.
func (r AudioServiceAPIGetAudioByIdStreamRequest) AudioCodec(audioCodec string) AudioServiceAPIGetAudioByIdStreamRequest {
	r.audioCodec = &audioCodec
	return r
}

// Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
func (r AudioServiceAPIGetAudioByIdStreamRequest) EnableAutoStreamCopy(enableAutoStreamCopy bool) AudioServiceAPIGetAudioByIdStreamRequest {
	r.enableAutoStreamCopy = &enableAutoStreamCopy
	return r
}

// Optional. Specify a specific audio sample rate, e.g. 44100
func (r AudioServiceAPIGetAudioByIdStreamRequest) AudioSampleRate(audioSampleRate int32) AudioServiceAPIGetAudioByIdStreamRequest {
	r.audioSampleRate = &audioSampleRate
	return r
}

// Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
func (r AudioServiceAPIGetAudioByIdStreamRequest) AudioBitRate(audioBitRate int32) AudioServiceAPIGetAudioByIdStreamRequest {
	r.audioBitRate = &audioBitRate
	return r
}

// Optional. Specify a specific number of audio channels to encode to, e.g. 2
func (r AudioServiceAPIGetAudioByIdStreamRequest) AudioChannels(audioChannels int32) AudioServiceAPIGetAudioByIdStreamRequest {
	r.audioChannels = &audioChannels
	return r
}

// Optional. Specify a maximum number of audio channels to encode to, e.g. 2
func (r AudioServiceAPIGetAudioByIdStreamRequest) MaxAudioChannels(maxAudioChannels int32) AudioServiceAPIGetAudioByIdStreamRequest {
	r.maxAudioChannels = &maxAudioChannels
	return r
}

// Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false
func (r AudioServiceAPIGetAudioByIdStreamRequest) Static(static bool) AudioServiceAPIGetAudioByIdStreamRequest {
	r.static = &static
	return r
}

// Optional. Specify a specific h264 profile, e.g. main, baseline, high.
func (r AudioServiceAPIGetAudioByIdStreamRequest) Profile(profile string) AudioServiceAPIGetAudioByIdStreamRequest {
	r.profile = &profile
	return r
}

// Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
func (r AudioServiceAPIGetAudioByIdStreamRequest) Level(level string) AudioServiceAPIGetAudioByIdStreamRequest {
	r.level = &level
	return r
}

// Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
func (r AudioServiceAPIGetAudioByIdStreamRequest) Framerate(framerate float32) AudioServiceAPIGetAudioByIdStreamRequest {
	r.framerate = &framerate
	return r
}

// Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
func (r AudioServiceAPIGetAudioByIdStreamRequest) MaxFramerate(maxFramerate float32) AudioServiceAPIGetAudioByIdStreamRequest {
	r.maxFramerate = &maxFramerate
	return r
}

// Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
func (r AudioServiceAPIGetAudioByIdStreamRequest) CopyTimestamps(copyTimestamps bool) AudioServiceAPIGetAudioByIdStreamRequest {
	r.copyTimestamps = &copyTimestamps
	return r
}

// Optional. Specify a starting offset, in ticks. 1ms &#x3D; 10000 ticks.
func (r AudioServiceAPIGetAudioByIdStreamRequest) StartTimeTicks(startTimeTicks int64) AudioServiceAPIGetAudioByIdStreamRequest {
	r.startTimeTicks = &startTimeTicks
	return r
}

// Optional. The fixed horizontal resolution of the encoded video.
func (r AudioServiceAPIGetAudioByIdStreamRequest) Width(width int32) AudioServiceAPIGetAudioByIdStreamRequest {
	r.width = &width
	return r
}

// Optional. The fixed vertical resolution of the encoded video.
func (r AudioServiceAPIGetAudioByIdStreamRequest) Height(height int32) AudioServiceAPIGetAudioByIdStreamRequest {
	r.height = &height
	return r
}

// Optional. The maximum horizontal resolution of the encoded video.
func (r AudioServiceAPIGetAudioByIdStreamRequest) MaxWidth(maxWidth int32) AudioServiceAPIGetAudioByIdStreamRequest {
	r.maxWidth = &maxWidth
	return r
}

// Optional. The maximum vertical resolution of the encoded video.
func (r AudioServiceAPIGetAudioByIdStreamRequest) MaxHeight(maxHeight int32) AudioServiceAPIGetAudioByIdStreamRequest {
	r.maxHeight = &maxHeight
	return r
}

// Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
func (r AudioServiceAPIGetAudioByIdStreamRequest) VideoBitRate(videoBitRate int32) AudioServiceAPIGetAudioByIdStreamRequest {
	r.videoBitRate = &videoBitRate
	return r
}

// Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
func (r AudioServiceAPIGetAudioByIdStreamRequest) SubtitleStreamIndex(subtitleStreamIndex int32) AudioServiceAPIGetAudioByIdStreamRequest {
	r.subtitleStreamIndex = &subtitleStreamIndex
	return r
}

// Optional. Specify the subtitle delivery method.
func (r AudioServiceAPIGetAudioByIdStreamRequest) SubtitleMethod(subtitleMethod ModelSubtitleDeliveryMethod) AudioServiceAPIGetAudioByIdStreamRequest {
	r.subtitleMethod = &subtitleMethod
	return r
}

// Optional.
func (r AudioServiceAPIGetAudioByIdStreamRequest) MaxRefFrames(maxRefFrames int32) AudioServiceAPIGetAudioByIdStreamRequest {
	r.maxRefFrames = &maxRefFrames
	return r
}

// Optional.
func (r AudioServiceAPIGetAudioByIdStreamRequest) MaxVideoBitDepth(maxVideoBitDepth int32) AudioServiceAPIGetAudioByIdStreamRequest {
	r.maxVideoBitDepth = &maxVideoBitDepth
	return r
}

// Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension. Options: h264, mpeg4, theora, vpx, wmv.
func (r AudioServiceAPIGetAudioByIdStreamRequest) VideoCodec(videoCodec string) AudioServiceAPIGetAudioByIdStreamRequest {
	r.videoCodec = &videoCodec
	return r
}

// Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
func (r AudioServiceAPIGetAudioByIdStreamRequest) AudioStreamIndex(audioStreamIndex int32) AudioServiceAPIGetAudioByIdStreamRequest {
	r.audioStreamIndex = &audioStreamIndex
	return r
}

// Optional. The index of the video stream to use. If omitted the first video stream will be used.
func (r AudioServiceAPIGetAudioByIdStreamRequest) VideoStreamIndex(videoStreamIndex int32) AudioServiceAPIGetAudioByIdStreamRequest {
	r.videoStreamIndex = &videoStreamIndex
	return r
}

func (r AudioServiceAPIGetAudioByIdStreamRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetAudioByIdStreamExecute(r)
}

/*
GetAudioByIdStream Gets an audio stream

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Item Id
 @return AudioServiceAPIGetAudioByIdStreamRequest
*/
func (a *AudioServiceAPIService) GetAudioByIdStream(ctx context.Context, id string) AudioServiceAPIGetAudioByIdStreamRequest {
	return AudioServiceAPIGetAudioByIdStreamRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *AudioServiceAPIService) GetAudioByIdStreamExecute(r AudioServiceAPIGetAudioByIdStreamRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AudioServiceAPIService.GetAudioByIdStream")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Audio/{Id}/stream"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.container == nil {
		return nil, reportError("container is required and must be specified")
	}

	if r.deviceProfileId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "DeviceProfileId", r.deviceProfileId, "")
	}
	if r.deviceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "DeviceId", r.deviceId, "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "Container", r.container, "")
	if r.audioCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioCodec", r.audioCodec, "")
	}
	if r.enableAutoStreamCopy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableAutoStreamCopy", r.enableAutoStreamCopy, "")
	}
	if r.audioSampleRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioSampleRate", r.audioSampleRate, "")
	}
	if r.audioBitRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioBitRate", r.audioBitRate, "")
	}
	if r.audioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioChannels", r.audioChannels, "")
	}
	if r.maxAudioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxAudioChannels", r.maxAudioChannels, "")
	}
	if r.static != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Static", r.static, "")
	}
	if r.profile != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Profile", r.profile, "")
	}
	if r.level != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Level", r.level, "")
	}
	if r.framerate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Framerate", r.framerate, "")
	}
	if r.maxFramerate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxFramerate", r.maxFramerate, "")
	}
	if r.copyTimestamps != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "CopyTimestamps", r.copyTimestamps, "")
	}
	if r.startTimeTicks != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "StartTimeTicks", r.startTimeTicks, "")
	}
	if r.width != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Width", r.width, "")
	}
	if r.height != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Height", r.height, "")
	}
	if r.maxWidth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxWidth", r.maxWidth, "")
	}
	if r.maxHeight != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxHeight", r.maxHeight, "")
	}
	if r.videoBitRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoBitRate", r.videoBitRate, "")
	}
	if r.subtitleStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SubtitleStreamIndex", r.subtitleStreamIndex, "")
	}
	if r.subtitleMethod != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SubtitleMethod", r.subtitleMethod, "")
	}
	if r.maxRefFrames != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxRefFrames", r.maxRefFrames, "")
	}
	if r.maxVideoBitDepth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxVideoBitDepth", r.maxVideoBitDepth, "")
	}
	if r.videoCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoCodec", r.videoCodec, "")
	}
	if r.audioStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioStreamIndex", r.audioStreamIndex, "")
	}
	if r.videoStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoStreamIndex", r.videoStreamIndex, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type AudioServiceAPIGetAudioByIdStreamByContainerRequest struct {
	ctx context.Context
	ApiService *AudioServiceAPIService
	id string
	container string
	deviceProfileId *string
	deviceId *string
	audioCodec *string
	enableAutoStreamCopy *bool
	audioSampleRate *int32
	audioBitRate *int32
	audioChannels *int32
	maxAudioChannels *int32
	static *bool
	profile *string
	level *string
	framerate *float32
	maxFramerate *float32
	copyTimestamps *bool
	startTimeTicks *int64
	width *int32
	height *int32
	maxWidth *int32
	maxHeight *int32
	videoBitRate *int32
	subtitleStreamIndex *int32
	subtitleMethod *ModelSubtitleDeliveryMethod
	maxRefFrames *int32
	maxVideoBitDepth *int32
	videoCodec *string
	audioStreamIndex *int32
	videoStreamIndex *int32
}

// Optional. The dlna device profile id to utilize.
func (r AudioServiceAPIGetAudioByIdStreamByContainerRequest) DeviceProfileId(deviceProfileId string) AudioServiceAPIGetAudioByIdStreamByContainerRequest {
	r.deviceProfileId = &deviceProfileId
	return r
}

// The device id of the client requesting. Used to stop encoding processes when needed.
func (r AudioServiceAPIGetAudioByIdStreamByContainerRequest) DeviceId(deviceId string) AudioServiceAPIGetAudioByIdStreamByContainerRequest {
	r.deviceId = &deviceId
	return r
}

// Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension. Options: aac, mp3, vorbis, wma.
func (r AudioServiceAPIGetAudioByIdStreamByContainerRequest) AudioCodec(audioCodec string) AudioServiceAPIGetAudioByIdStreamByContainerRequest {
	r.audioCodec = &audioCodec
	return r
}

// Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
func (r AudioServiceAPIGetAudioByIdStreamByContainerRequest) EnableAutoStreamCopy(enableAutoStreamCopy bool) AudioServiceAPIGetAudioByIdStreamByContainerRequest {
	r.enableAutoStreamCopy = &enableAutoStreamCopy
	return r
}

// Optional. Specify a specific audio sample rate, e.g. 44100
func (r AudioServiceAPIGetAudioByIdStreamByContainerRequest) AudioSampleRate(audioSampleRate int32) AudioServiceAPIGetAudioByIdStreamByContainerRequest {
	r.audioSampleRate = &audioSampleRate
	return r
}

// Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
func (r AudioServiceAPIGetAudioByIdStreamByContainerRequest) AudioBitRate(audioBitRate int32) AudioServiceAPIGetAudioByIdStreamByContainerRequest {
	r.audioBitRate = &audioBitRate
	return r
}

// Optional. Specify a specific number of audio channels to encode to, e.g. 2
func (r AudioServiceAPIGetAudioByIdStreamByContainerRequest) AudioChannels(audioChannels int32) AudioServiceAPIGetAudioByIdStreamByContainerRequest {
	r.audioChannels = &audioChannels
	return r
}

// Optional. Specify a maximum number of audio channels to encode to, e.g. 2
func (r AudioServiceAPIGetAudioByIdStreamByContainerRequest) MaxAudioChannels(maxAudioChannels int32) AudioServiceAPIGetAudioByIdStreamByContainerRequest {
	r.maxAudioChannels = &maxAudioChannels
	return r
}

// Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false
func (r AudioServiceAPIGetAudioByIdStreamByContainerRequest) Static(static bool) AudioServiceAPIGetAudioByIdStreamByContainerRequest {
	r.static = &static
	return r
}

// Optional. Specify a specific h264 profile, e.g. main, baseline, high.
func (r AudioServiceAPIGetAudioByIdStreamByContainerRequest) Profile(profile string) AudioServiceAPIGetAudioByIdStreamByContainerRequest {
	r.profile = &profile
	return r
}

// Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
func (r AudioServiceAPIGetAudioByIdStreamByContainerRequest) Level(level string) AudioServiceAPIGetAudioByIdStreamByContainerRequest {
	r.level = &level
	return r
}

// Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
func (r AudioServiceAPIGetAudioByIdStreamByContainerRequest) Framerate(framerate float32) AudioServiceAPIGetAudioByIdStreamByContainerRequest {
	r.framerate = &framerate
	return r
}

// Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
func (r AudioServiceAPIGetAudioByIdStreamByContainerRequest) MaxFramerate(maxFramerate float32) AudioServiceAPIGetAudioByIdStreamByContainerRequest {
	r.maxFramerate = &maxFramerate
	return r
}

// Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
func (r AudioServiceAPIGetAudioByIdStreamByContainerRequest) CopyTimestamps(copyTimestamps bool) AudioServiceAPIGetAudioByIdStreamByContainerRequest {
	r.copyTimestamps = &copyTimestamps
	return r
}

// Optional. Specify a starting offset, in ticks. 1ms &#x3D; 10000 ticks.
func (r AudioServiceAPIGetAudioByIdStreamByContainerRequest) StartTimeTicks(startTimeTicks int64) AudioServiceAPIGetAudioByIdStreamByContainerRequest {
	r.startTimeTicks = &startTimeTicks
	return r
}

// Optional. The fixed horizontal resolution of the encoded video.
func (r AudioServiceAPIGetAudioByIdStreamByContainerRequest) Width(width int32) AudioServiceAPIGetAudioByIdStreamByContainerRequest {
	r.width = &width
	return r
}

// Optional. The fixed vertical resolution of the encoded video.
func (r AudioServiceAPIGetAudioByIdStreamByContainerRequest) Height(height int32) AudioServiceAPIGetAudioByIdStreamByContainerRequest {
	r.height = &height
	return r
}

// Optional. The maximum horizontal resolution of the encoded video.
func (r AudioServiceAPIGetAudioByIdStreamByContainerRequest) MaxWidth(maxWidth int32) AudioServiceAPIGetAudioByIdStreamByContainerRequest {
	r.maxWidth = &maxWidth
	return r
}

// Optional. The maximum vertical resolution of the encoded video.
func (r AudioServiceAPIGetAudioByIdStreamByContainerRequest) MaxHeight(maxHeight int32) AudioServiceAPIGetAudioByIdStreamByContainerRequest {
	r.maxHeight = &maxHeight
	return r
}

// Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
func (r AudioServiceAPIGetAudioByIdStreamByContainerRequest) VideoBitRate(videoBitRate int32) AudioServiceAPIGetAudioByIdStreamByContainerRequest {
	r.videoBitRate = &videoBitRate
	return r
}

// Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
func (r AudioServiceAPIGetAudioByIdStreamByContainerRequest) SubtitleStreamIndex(subtitleStreamIndex int32) AudioServiceAPIGetAudioByIdStreamByContainerRequest {
	r.subtitleStreamIndex = &subtitleStreamIndex
	return r
}

// Optional. Specify the subtitle delivery method.
func (r AudioServiceAPIGetAudioByIdStreamByContainerRequest) SubtitleMethod(subtitleMethod ModelSubtitleDeliveryMethod) AudioServiceAPIGetAudioByIdStreamByContainerRequest {
	r.subtitleMethod = &subtitleMethod
	return r
}

// Optional.
func (r AudioServiceAPIGetAudioByIdStreamByContainerRequest) MaxRefFrames(maxRefFrames int32) AudioServiceAPIGetAudioByIdStreamByContainerRequest {
	r.maxRefFrames = &maxRefFrames
	return r
}

// Optional.
func (r AudioServiceAPIGetAudioByIdStreamByContainerRequest) MaxVideoBitDepth(maxVideoBitDepth int32) AudioServiceAPIGetAudioByIdStreamByContainerRequest {
	r.maxVideoBitDepth = &maxVideoBitDepth
	return r
}

// Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension. Options: h264, mpeg4, theora, vpx, wmv.
func (r AudioServiceAPIGetAudioByIdStreamByContainerRequest) VideoCodec(videoCodec string) AudioServiceAPIGetAudioByIdStreamByContainerRequest {
	r.videoCodec = &videoCodec
	return r
}

// Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
func (r AudioServiceAPIGetAudioByIdStreamByContainerRequest) AudioStreamIndex(audioStreamIndex int32) AudioServiceAPIGetAudioByIdStreamByContainerRequest {
	r.audioStreamIndex = &audioStreamIndex
	return r
}

// Optional. The index of the video stream to use. If omitted the first video stream will be used.
func (r AudioServiceAPIGetAudioByIdStreamByContainerRequest) VideoStreamIndex(videoStreamIndex int32) AudioServiceAPIGetAudioByIdStreamByContainerRequest {
	r.videoStreamIndex = &videoStreamIndex
	return r
}

func (r AudioServiceAPIGetAudioByIdStreamByContainerRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetAudioByIdStreamByContainerExecute(r)
}

/*
GetAudioByIdStreamByContainer Gets an audio stream

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Item Id
 @param container Container
 @return AudioServiceAPIGetAudioByIdStreamByContainerRequest
*/
func (a *AudioServiceAPIService) GetAudioByIdStreamByContainer(ctx context.Context, id string, container string) AudioServiceAPIGetAudioByIdStreamByContainerRequest {
	return AudioServiceAPIGetAudioByIdStreamByContainerRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		container: container,
	}
}

// Execute executes the request
func (a *AudioServiceAPIService) GetAudioByIdStreamByContainerExecute(r AudioServiceAPIGetAudioByIdStreamByContainerRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AudioServiceAPIService.GetAudioByIdStreamByContainer")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Audio/{Id}/stream.{Container}"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Container"+"}", url.PathEscape(parameterValueToString(r.container, "container")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.deviceProfileId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "DeviceProfileId", r.deviceProfileId, "")
	}
	if r.deviceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "DeviceId", r.deviceId, "")
	}
	if r.audioCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioCodec", r.audioCodec, "")
	}
	if r.enableAutoStreamCopy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableAutoStreamCopy", r.enableAutoStreamCopy, "")
	}
	if r.audioSampleRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioSampleRate", r.audioSampleRate, "")
	}
	if r.audioBitRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioBitRate", r.audioBitRate, "")
	}
	if r.audioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioChannels", r.audioChannels, "")
	}
	if r.maxAudioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxAudioChannels", r.maxAudioChannels, "")
	}
	if r.static != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Static", r.static, "")
	}
	if r.profile != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Profile", r.profile, "")
	}
	if r.level != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Level", r.level, "")
	}
	if r.framerate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Framerate", r.framerate, "")
	}
	if r.maxFramerate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxFramerate", r.maxFramerate, "")
	}
	if r.copyTimestamps != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "CopyTimestamps", r.copyTimestamps, "")
	}
	if r.startTimeTicks != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "StartTimeTicks", r.startTimeTicks, "")
	}
	if r.width != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Width", r.width, "")
	}
	if r.height != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Height", r.height, "")
	}
	if r.maxWidth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxWidth", r.maxWidth, "")
	}
	if r.maxHeight != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxHeight", r.maxHeight, "")
	}
	if r.videoBitRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoBitRate", r.videoBitRate, "")
	}
	if r.subtitleStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SubtitleStreamIndex", r.subtitleStreamIndex, "")
	}
	if r.subtitleMethod != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SubtitleMethod", r.subtitleMethod, "")
	}
	if r.maxRefFrames != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxRefFrames", r.maxRefFrames, "")
	}
	if r.maxVideoBitDepth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxVideoBitDepth", r.maxVideoBitDepth, "")
	}
	if r.videoCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoCodec", r.videoCodec, "")
	}
	if r.audioStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioStreamIndex", r.audioStreamIndex, "")
	}
	if r.videoStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoStreamIndex", r.videoStreamIndex, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type AudioServiceAPIHeadAudioByIdByStreamfilenameRequest struct {
	ctx context.Context
	ApiService *AudioServiceAPIService
	streamFileName string
	id string
	container *string
	deviceProfileId *string
	deviceId *string
	audioCodec *string
	enableAutoStreamCopy *bool
	audioSampleRate *int32
	audioBitRate *int32
	audioChannels *int32
	maxAudioChannels *int32
	static *bool
	profile *string
	level *string
	framerate *float32
	maxFramerate *float32
	copyTimestamps *bool
	startTimeTicks *int64
	width *int32
	height *int32
	maxWidth *int32
	maxHeight *int32
	videoBitRate *int32
	subtitleStreamIndex *int32
	subtitleMethod *ModelSubtitleDeliveryMethod
	maxRefFrames *int32
	maxVideoBitDepth *int32
	videoCodec *string
	audioStreamIndex *int32
	videoStreamIndex *int32
}

// Container
func (r AudioServiceAPIHeadAudioByIdByStreamfilenameRequest) Container(container string) AudioServiceAPIHeadAudioByIdByStreamfilenameRequest {
	r.container = &container
	return r
}

// Optional. The dlna device profile id to utilize.
func (r AudioServiceAPIHeadAudioByIdByStreamfilenameRequest) DeviceProfileId(deviceProfileId string) AudioServiceAPIHeadAudioByIdByStreamfilenameRequest {
	r.deviceProfileId = &deviceProfileId
	return r
}

// The device id of the client requesting. Used to stop encoding processes when needed.
func (r AudioServiceAPIHeadAudioByIdByStreamfilenameRequest) DeviceId(deviceId string) AudioServiceAPIHeadAudioByIdByStreamfilenameRequest {
	r.deviceId = &deviceId
	return r
}

// Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension. Options: aac, mp3, vorbis, wma.
func (r AudioServiceAPIHeadAudioByIdByStreamfilenameRequest) AudioCodec(audioCodec string) AudioServiceAPIHeadAudioByIdByStreamfilenameRequest {
	r.audioCodec = &audioCodec
	return r
}

// Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
func (r AudioServiceAPIHeadAudioByIdByStreamfilenameRequest) EnableAutoStreamCopy(enableAutoStreamCopy bool) AudioServiceAPIHeadAudioByIdByStreamfilenameRequest {
	r.enableAutoStreamCopy = &enableAutoStreamCopy
	return r
}

// Optional. Specify a specific audio sample rate, e.g. 44100
func (r AudioServiceAPIHeadAudioByIdByStreamfilenameRequest) AudioSampleRate(audioSampleRate int32) AudioServiceAPIHeadAudioByIdByStreamfilenameRequest {
	r.audioSampleRate = &audioSampleRate
	return r
}

// Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
func (r AudioServiceAPIHeadAudioByIdByStreamfilenameRequest) AudioBitRate(audioBitRate int32) AudioServiceAPIHeadAudioByIdByStreamfilenameRequest {
	r.audioBitRate = &audioBitRate
	return r
}

// Optional. Specify a specific number of audio channels to encode to, e.g. 2
func (r AudioServiceAPIHeadAudioByIdByStreamfilenameRequest) AudioChannels(audioChannels int32) AudioServiceAPIHeadAudioByIdByStreamfilenameRequest {
	r.audioChannels = &audioChannels
	return r
}

// Optional. Specify a maximum number of audio channels to encode to, e.g. 2
func (r AudioServiceAPIHeadAudioByIdByStreamfilenameRequest) MaxAudioChannels(maxAudioChannels int32) AudioServiceAPIHeadAudioByIdByStreamfilenameRequest {
	r.maxAudioChannels = &maxAudioChannels
	return r
}

// Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false
func (r AudioServiceAPIHeadAudioByIdByStreamfilenameRequest) Static(static bool) AudioServiceAPIHeadAudioByIdByStreamfilenameRequest {
	r.static = &static
	return r
}

// Optional. Specify a specific h264 profile, e.g. main, baseline, high.
func (r AudioServiceAPIHeadAudioByIdByStreamfilenameRequest) Profile(profile string) AudioServiceAPIHeadAudioByIdByStreamfilenameRequest {
	r.profile = &profile
	return r
}

// Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
func (r AudioServiceAPIHeadAudioByIdByStreamfilenameRequest) Level(level string) AudioServiceAPIHeadAudioByIdByStreamfilenameRequest {
	r.level = &level
	return r
}

// Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
func (r AudioServiceAPIHeadAudioByIdByStreamfilenameRequest) Framerate(framerate float32) AudioServiceAPIHeadAudioByIdByStreamfilenameRequest {
	r.framerate = &framerate
	return r
}

// Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
func (r AudioServiceAPIHeadAudioByIdByStreamfilenameRequest) MaxFramerate(maxFramerate float32) AudioServiceAPIHeadAudioByIdByStreamfilenameRequest {
	r.maxFramerate = &maxFramerate
	return r
}

// Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
func (r AudioServiceAPIHeadAudioByIdByStreamfilenameRequest) CopyTimestamps(copyTimestamps bool) AudioServiceAPIHeadAudioByIdByStreamfilenameRequest {
	r.copyTimestamps = &copyTimestamps
	return r
}

// Optional. Specify a starting offset, in ticks. 1ms &#x3D; 10000 ticks.
func (r AudioServiceAPIHeadAudioByIdByStreamfilenameRequest) StartTimeTicks(startTimeTicks int64) AudioServiceAPIHeadAudioByIdByStreamfilenameRequest {
	r.startTimeTicks = &startTimeTicks
	return r
}

// Optional. The fixed horizontal resolution of the encoded video.
func (r AudioServiceAPIHeadAudioByIdByStreamfilenameRequest) Width(width int32) AudioServiceAPIHeadAudioByIdByStreamfilenameRequest {
	r.width = &width
	return r
}

// Optional. The fixed vertical resolution of the encoded video.
func (r AudioServiceAPIHeadAudioByIdByStreamfilenameRequest) Height(height int32) AudioServiceAPIHeadAudioByIdByStreamfilenameRequest {
	r.height = &height
	return r
}

// Optional. The maximum horizontal resolution of the encoded video.
func (r AudioServiceAPIHeadAudioByIdByStreamfilenameRequest) MaxWidth(maxWidth int32) AudioServiceAPIHeadAudioByIdByStreamfilenameRequest {
	r.maxWidth = &maxWidth
	return r
}

// Optional. The maximum vertical resolution of the encoded video.
func (r AudioServiceAPIHeadAudioByIdByStreamfilenameRequest) MaxHeight(maxHeight int32) AudioServiceAPIHeadAudioByIdByStreamfilenameRequest {
	r.maxHeight = &maxHeight
	return r
}

// Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
func (r AudioServiceAPIHeadAudioByIdByStreamfilenameRequest) VideoBitRate(videoBitRate int32) AudioServiceAPIHeadAudioByIdByStreamfilenameRequest {
	r.videoBitRate = &videoBitRate
	return r
}

// Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
func (r AudioServiceAPIHeadAudioByIdByStreamfilenameRequest) SubtitleStreamIndex(subtitleStreamIndex int32) AudioServiceAPIHeadAudioByIdByStreamfilenameRequest {
	r.subtitleStreamIndex = &subtitleStreamIndex
	return r
}

// Optional. Specify the subtitle delivery method.
func (r AudioServiceAPIHeadAudioByIdByStreamfilenameRequest) SubtitleMethod(subtitleMethod ModelSubtitleDeliveryMethod) AudioServiceAPIHeadAudioByIdByStreamfilenameRequest {
	r.subtitleMethod = &subtitleMethod
	return r
}

// Optional.
func (r AudioServiceAPIHeadAudioByIdByStreamfilenameRequest) MaxRefFrames(maxRefFrames int32) AudioServiceAPIHeadAudioByIdByStreamfilenameRequest {
	r.maxRefFrames = &maxRefFrames
	return r
}

// Optional.
func (r AudioServiceAPIHeadAudioByIdByStreamfilenameRequest) MaxVideoBitDepth(maxVideoBitDepth int32) AudioServiceAPIHeadAudioByIdByStreamfilenameRequest {
	r.maxVideoBitDepth = &maxVideoBitDepth
	return r
}

// Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension. Options: h264, mpeg4, theora, vpx, wmv.
func (r AudioServiceAPIHeadAudioByIdByStreamfilenameRequest) VideoCodec(videoCodec string) AudioServiceAPIHeadAudioByIdByStreamfilenameRequest {
	r.videoCodec = &videoCodec
	return r
}

// Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
func (r AudioServiceAPIHeadAudioByIdByStreamfilenameRequest) AudioStreamIndex(audioStreamIndex int32) AudioServiceAPIHeadAudioByIdByStreamfilenameRequest {
	r.audioStreamIndex = &audioStreamIndex
	return r
}

// Optional. The index of the video stream to use. If omitted the first video stream will be used.
func (r AudioServiceAPIHeadAudioByIdByStreamfilenameRequest) VideoStreamIndex(videoStreamIndex int32) AudioServiceAPIHeadAudioByIdByStreamfilenameRequest {
	r.videoStreamIndex = &videoStreamIndex
	return r
}

func (r AudioServiceAPIHeadAudioByIdByStreamfilenameRequest) Execute() (*http.Response, error) {
	return r.ApiService.HeadAudioByIdByStreamfilenameExecute(r)
}

/*
HeadAudioByIdByStreamfilename Gets an audio stream

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param streamFileName
 @param id Item Id
 @return AudioServiceAPIHeadAudioByIdByStreamfilenameRequest
*/
func (a *AudioServiceAPIService) HeadAudioByIdByStreamfilename(ctx context.Context, streamFileName string, id string) AudioServiceAPIHeadAudioByIdByStreamfilenameRequest {
	return AudioServiceAPIHeadAudioByIdByStreamfilenameRequest{
		ApiService: a,
		ctx: ctx,
		streamFileName: streamFileName,
		id: id,
	}
}

// Execute executes the request
func (a *AudioServiceAPIService) HeadAudioByIdByStreamfilenameExecute(r AudioServiceAPIHeadAudioByIdByStreamfilenameRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodHead
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AudioServiceAPIService.HeadAudioByIdByStreamfilename")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Audio/{Id}/{StreamFileName}"
	localVarPath = strings.Replace(localVarPath, "{"+"StreamFileName"+"}", url.PathEscape(parameterValueToString(r.streamFileName, "streamFileName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.container == nil {
		return nil, reportError("container is required and must be specified")
	}

	if r.deviceProfileId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "DeviceProfileId", r.deviceProfileId, "")
	}
	if r.deviceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "DeviceId", r.deviceId, "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "Container", r.container, "")
	if r.audioCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioCodec", r.audioCodec, "")
	}
	if r.enableAutoStreamCopy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableAutoStreamCopy", r.enableAutoStreamCopy, "")
	}
	if r.audioSampleRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioSampleRate", r.audioSampleRate, "")
	}
	if r.audioBitRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioBitRate", r.audioBitRate, "")
	}
	if r.audioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioChannels", r.audioChannels, "")
	}
	if r.maxAudioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxAudioChannels", r.maxAudioChannels, "")
	}
	if r.static != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Static", r.static, "")
	}
	if r.profile != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Profile", r.profile, "")
	}
	if r.level != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Level", r.level, "")
	}
	if r.framerate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Framerate", r.framerate, "")
	}
	if r.maxFramerate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxFramerate", r.maxFramerate, "")
	}
	if r.copyTimestamps != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "CopyTimestamps", r.copyTimestamps, "")
	}
	if r.startTimeTicks != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "StartTimeTicks", r.startTimeTicks, "")
	}
	if r.width != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Width", r.width, "")
	}
	if r.height != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Height", r.height, "")
	}
	if r.maxWidth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxWidth", r.maxWidth, "")
	}
	if r.maxHeight != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxHeight", r.maxHeight, "")
	}
	if r.videoBitRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoBitRate", r.videoBitRate, "")
	}
	if r.subtitleStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SubtitleStreamIndex", r.subtitleStreamIndex, "")
	}
	if r.subtitleMethod != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SubtitleMethod", r.subtitleMethod, "")
	}
	if r.maxRefFrames != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxRefFrames", r.maxRefFrames, "")
	}
	if r.maxVideoBitDepth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxVideoBitDepth", r.maxVideoBitDepth, "")
	}
	if r.videoCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoCodec", r.videoCodec, "")
	}
	if r.audioStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioStreamIndex", r.audioStreamIndex, "")
	}
	if r.videoStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoStreamIndex", r.videoStreamIndex, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type AudioServiceAPIHeadAudioByIdStreamRequest struct {
	ctx context.Context
	ApiService *AudioServiceAPIService
	id string
	container *string
	deviceProfileId *string
	deviceId *string
	audioCodec *string
	enableAutoStreamCopy *bool
	audioSampleRate *int32
	audioBitRate *int32
	audioChannels *int32
	maxAudioChannels *int32
	static *bool
	profile *string
	level *string
	framerate *float32
	maxFramerate *float32
	copyTimestamps *bool
	startTimeTicks *int64
	width *int32
	height *int32
	maxWidth *int32
	maxHeight *int32
	videoBitRate *int32
	subtitleStreamIndex *int32
	subtitleMethod *ModelSubtitleDeliveryMethod
	maxRefFrames *int32
	maxVideoBitDepth *int32
	videoCodec *string
	audioStreamIndex *int32
	videoStreamIndex *int32
}

// Container
func (r AudioServiceAPIHeadAudioByIdStreamRequest) Container(container string) AudioServiceAPIHeadAudioByIdStreamRequest {
	r.container = &container
	return r
}

// Optional. The dlna device profile id to utilize.
func (r AudioServiceAPIHeadAudioByIdStreamRequest) DeviceProfileId(deviceProfileId string) AudioServiceAPIHeadAudioByIdStreamRequest {
	r.deviceProfileId = &deviceProfileId
	return r
}

// The device id of the client requesting. Used to stop encoding processes when needed.
func (r AudioServiceAPIHeadAudioByIdStreamRequest) DeviceId(deviceId string) AudioServiceAPIHeadAudioByIdStreamRequest {
	r.deviceId = &deviceId
	return r
}

// Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension. Options: aac, mp3, vorbis, wma.
func (r AudioServiceAPIHeadAudioByIdStreamRequest) AudioCodec(audioCodec string) AudioServiceAPIHeadAudioByIdStreamRequest {
	r.audioCodec = &audioCodec
	return r
}

// Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
func (r AudioServiceAPIHeadAudioByIdStreamRequest) EnableAutoStreamCopy(enableAutoStreamCopy bool) AudioServiceAPIHeadAudioByIdStreamRequest {
	r.enableAutoStreamCopy = &enableAutoStreamCopy
	return r
}

// Optional. Specify a specific audio sample rate, e.g. 44100
func (r AudioServiceAPIHeadAudioByIdStreamRequest) AudioSampleRate(audioSampleRate int32) AudioServiceAPIHeadAudioByIdStreamRequest {
	r.audioSampleRate = &audioSampleRate
	return r
}

// Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
func (r AudioServiceAPIHeadAudioByIdStreamRequest) AudioBitRate(audioBitRate int32) AudioServiceAPIHeadAudioByIdStreamRequest {
	r.audioBitRate = &audioBitRate
	return r
}

// Optional. Specify a specific number of audio channels to encode to, e.g. 2
func (r AudioServiceAPIHeadAudioByIdStreamRequest) AudioChannels(audioChannels int32) AudioServiceAPIHeadAudioByIdStreamRequest {
	r.audioChannels = &audioChannels
	return r
}

// Optional. Specify a maximum number of audio channels to encode to, e.g. 2
func (r AudioServiceAPIHeadAudioByIdStreamRequest) MaxAudioChannels(maxAudioChannels int32) AudioServiceAPIHeadAudioByIdStreamRequest {
	r.maxAudioChannels = &maxAudioChannels
	return r
}

// Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false
func (r AudioServiceAPIHeadAudioByIdStreamRequest) Static(static bool) AudioServiceAPIHeadAudioByIdStreamRequest {
	r.static = &static
	return r
}

// Optional. Specify a specific h264 profile, e.g. main, baseline, high.
func (r AudioServiceAPIHeadAudioByIdStreamRequest) Profile(profile string) AudioServiceAPIHeadAudioByIdStreamRequest {
	r.profile = &profile
	return r
}

// Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
func (r AudioServiceAPIHeadAudioByIdStreamRequest) Level(level string) AudioServiceAPIHeadAudioByIdStreamRequest {
	r.level = &level
	return r
}

// Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
func (r AudioServiceAPIHeadAudioByIdStreamRequest) Framerate(framerate float32) AudioServiceAPIHeadAudioByIdStreamRequest {
	r.framerate = &framerate
	return r
}

// Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
func (r AudioServiceAPIHeadAudioByIdStreamRequest) MaxFramerate(maxFramerate float32) AudioServiceAPIHeadAudioByIdStreamRequest {
	r.maxFramerate = &maxFramerate
	return r
}

// Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
func (r AudioServiceAPIHeadAudioByIdStreamRequest) CopyTimestamps(copyTimestamps bool) AudioServiceAPIHeadAudioByIdStreamRequest {
	r.copyTimestamps = &copyTimestamps
	return r
}

// Optional. Specify a starting offset, in ticks. 1ms &#x3D; 10000 ticks.
func (r AudioServiceAPIHeadAudioByIdStreamRequest) StartTimeTicks(startTimeTicks int64) AudioServiceAPIHeadAudioByIdStreamRequest {
	r.startTimeTicks = &startTimeTicks
	return r
}

// Optional. The fixed horizontal resolution of the encoded video.
func (r AudioServiceAPIHeadAudioByIdStreamRequest) Width(width int32) AudioServiceAPIHeadAudioByIdStreamRequest {
	r.width = &width
	return r
}

// Optional. The fixed vertical resolution of the encoded video.
func (r AudioServiceAPIHeadAudioByIdStreamRequest) Height(height int32) AudioServiceAPIHeadAudioByIdStreamRequest {
	r.height = &height
	return r
}

// Optional. The maximum horizontal resolution of the encoded video.
func (r AudioServiceAPIHeadAudioByIdStreamRequest) MaxWidth(maxWidth int32) AudioServiceAPIHeadAudioByIdStreamRequest {
	r.maxWidth = &maxWidth
	return r
}

// Optional. The maximum vertical resolution of the encoded video.
func (r AudioServiceAPIHeadAudioByIdStreamRequest) MaxHeight(maxHeight int32) AudioServiceAPIHeadAudioByIdStreamRequest {
	r.maxHeight = &maxHeight
	return r
}

// Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
func (r AudioServiceAPIHeadAudioByIdStreamRequest) VideoBitRate(videoBitRate int32) AudioServiceAPIHeadAudioByIdStreamRequest {
	r.videoBitRate = &videoBitRate
	return r
}

// Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
func (r AudioServiceAPIHeadAudioByIdStreamRequest) SubtitleStreamIndex(subtitleStreamIndex int32) AudioServiceAPIHeadAudioByIdStreamRequest {
	r.subtitleStreamIndex = &subtitleStreamIndex
	return r
}

// Optional. Specify the subtitle delivery method.
func (r AudioServiceAPIHeadAudioByIdStreamRequest) SubtitleMethod(subtitleMethod ModelSubtitleDeliveryMethod) AudioServiceAPIHeadAudioByIdStreamRequest {
	r.subtitleMethod = &subtitleMethod
	return r
}

// Optional.
func (r AudioServiceAPIHeadAudioByIdStreamRequest) MaxRefFrames(maxRefFrames int32) AudioServiceAPIHeadAudioByIdStreamRequest {
	r.maxRefFrames = &maxRefFrames
	return r
}

// Optional.
func (r AudioServiceAPIHeadAudioByIdStreamRequest) MaxVideoBitDepth(maxVideoBitDepth int32) AudioServiceAPIHeadAudioByIdStreamRequest {
	r.maxVideoBitDepth = &maxVideoBitDepth
	return r
}

// Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension. Options: h264, mpeg4, theora, vpx, wmv.
func (r AudioServiceAPIHeadAudioByIdStreamRequest) VideoCodec(videoCodec string) AudioServiceAPIHeadAudioByIdStreamRequest {
	r.videoCodec = &videoCodec
	return r
}

// Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
func (r AudioServiceAPIHeadAudioByIdStreamRequest) AudioStreamIndex(audioStreamIndex int32) AudioServiceAPIHeadAudioByIdStreamRequest {
	r.audioStreamIndex = &audioStreamIndex
	return r
}

// Optional. The index of the video stream to use. If omitted the first video stream will be used.
func (r AudioServiceAPIHeadAudioByIdStreamRequest) VideoStreamIndex(videoStreamIndex int32) AudioServiceAPIHeadAudioByIdStreamRequest {
	r.videoStreamIndex = &videoStreamIndex
	return r
}

func (r AudioServiceAPIHeadAudioByIdStreamRequest) Execute() (*http.Response, error) {
	return r.ApiService.HeadAudioByIdStreamExecute(r)
}

/*
HeadAudioByIdStream Gets an audio stream

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Item Id
 @return AudioServiceAPIHeadAudioByIdStreamRequest
*/
func (a *AudioServiceAPIService) HeadAudioByIdStream(ctx context.Context, id string) AudioServiceAPIHeadAudioByIdStreamRequest {
	return AudioServiceAPIHeadAudioByIdStreamRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *AudioServiceAPIService) HeadAudioByIdStreamExecute(r AudioServiceAPIHeadAudioByIdStreamRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodHead
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AudioServiceAPIService.HeadAudioByIdStream")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Audio/{Id}/stream"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.container == nil {
		return nil, reportError("container is required and must be specified")
	}

	if r.deviceProfileId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "DeviceProfileId", r.deviceProfileId, "")
	}
	if r.deviceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "DeviceId", r.deviceId, "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "Container", r.container, "")
	if r.audioCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioCodec", r.audioCodec, "")
	}
	if r.enableAutoStreamCopy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableAutoStreamCopy", r.enableAutoStreamCopy, "")
	}
	if r.audioSampleRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioSampleRate", r.audioSampleRate, "")
	}
	if r.audioBitRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioBitRate", r.audioBitRate, "")
	}
	if r.audioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioChannels", r.audioChannels, "")
	}
	if r.maxAudioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxAudioChannels", r.maxAudioChannels, "")
	}
	if r.static != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Static", r.static, "")
	}
	if r.profile != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Profile", r.profile, "")
	}
	if r.level != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Level", r.level, "")
	}
	if r.framerate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Framerate", r.framerate, "")
	}
	if r.maxFramerate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxFramerate", r.maxFramerate, "")
	}
	if r.copyTimestamps != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "CopyTimestamps", r.copyTimestamps, "")
	}
	if r.startTimeTicks != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "StartTimeTicks", r.startTimeTicks, "")
	}
	if r.width != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Width", r.width, "")
	}
	if r.height != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Height", r.height, "")
	}
	if r.maxWidth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxWidth", r.maxWidth, "")
	}
	if r.maxHeight != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxHeight", r.maxHeight, "")
	}
	if r.videoBitRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoBitRate", r.videoBitRate, "")
	}
	if r.subtitleStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SubtitleStreamIndex", r.subtitleStreamIndex, "")
	}
	if r.subtitleMethod != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SubtitleMethod", r.subtitleMethod, "")
	}
	if r.maxRefFrames != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxRefFrames", r.maxRefFrames, "")
	}
	if r.maxVideoBitDepth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxVideoBitDepth", r.maxVideoBitDepth, "")
	}
	if r.videoCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoCodec", r.videoCodec, "")
	}
	if r.audioStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioStreamIndex", r.audioStreamIndex, "")
	}
	if r.videoStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoStreamIndex", r.videoStreamIndex, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type AudioServiceAPIHeadAudioByIdStreamByContainerRequest struct {
	ctx context.Context
	ApiService *AudioServiceAPIService
	id string
	container string
	deviceProfileId *string
	deviceId *string
	audioCodec *string
	enableAutoStreamCopy *bool
	audioSampleRate *int32
	audioBitRate *int32
	audioChannels *int32
	maxAudioChannels *int32
	static *bool
	profile *string
	level *string
	framerate *float32
	maxFramerate *float32
	copyTimestamps *bool
	startTimeTicks *int64
	width *int32
	height *int32
	maxWidth *int32
	maxHeight *int32
	videoBitRate *int32
	subtitleStreamIndex *int32
	subtitleMethod *ModelSubtitleDeliveryMethod
	maxRefFrames *int32
	maxVideoBitDepth *int32
	videoCodec *string
	audioStreamIndex *int32
	videoStreamIndex *int32
}

// Optional. The dlna device profile id to utilize.
func (r AudioServiceAPIHeadAudioByIdStreamByContainerRequest) DeviceProfileId(deviceProfileId string) AudioServiceAPIHeadAudioByIdStreamByContainerRequest {
	r.deviceProfileId = &deviceProfileId
	return r
}

// The device id of the client requesting. Used to stop encoding processes when needed.
func (r AudioServiceAPIHeadAudioByIdStreamByContainerRequest) DeviceId(deviceId string) AudioServiceAPIHeadAudioByIdStreamByContainerRequest {
	r.deviceId = &deviceId
	return r
}

// Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension. Options: aac, mp3, vorbis, wma.
func (r AudioServiceAPIHeadAudioByIdStreamByContainerRequest) AudioCodec(audioCodec string) AudioServiceAPIHeadAudioByIdStreamByContainerRequest {
	r.audioCodec = &audioCodec
	return r
}

// Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
func (r AudioServiceAPIHeadAudioByIdStreamByContainerRequest) EnableAutoStreamCopy(enableAutoStreamCopy bool) AudioServiceAPIHeadAudioByIdStreamByContainerRequest {
	r.enableAutoStreamCopy = &enableAutoStreamCopy
	return r
}

// Optional. Specify a specific audio sample rate, e.g. 44100
func (r AudioServiceAPIHeadAudioByIdStreamByContainerRequest) AudioSampleRate(audioSampleRate int32) AudioServiceAPIHeadAudioByIdStreamByContainerRequest {
	r.audioSampleRate = &audioSampleRate
	return r
}

// Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
func (r AudioServiceAPIHeadAudioByIdStreamByContainerRequest) AudioBitRate(audioBitRate int32) AudioServiceAPIHeadAudioByIdStreamByContainerRequest {
	r.audioBitRate = &audioBitRate
	return r
}

// Optional. Specify a specific number of audio channels to encode to, e.g. 2
func (r AudioServiceAPIHeadAudioByIdStreamByContainerRequest) AudioChannels(audioChannels int32) AudioServiceAPIHeadAudioByIdStreamByContainerRequest {
	r.audioChannels = &audioChannels
	return r
}

// Optional. Specify a maximum number of audio channels to encode to, e.g. 2
func (r AudioServiceAPIHeadAudioByIdStreamByContainerRequest) MaxAudioChannels(maxAudioChannels int32) AudioServiceAPIHeadAudioByIdStreamByContainerRequest {
	r.maxAudioChannels = &maxAudioChannels
	return r
}

// Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false
func (r AudioServiceAPIHeadAudioByIdStreamByContainerRequest) Static(static bool) AudioServiceAPIHeadAudioByIdStreamByContainerRequest {
	r.static = &static
	return r
}

// Optional. Specify a specific h264 profile, e.g. main, baseline, high.
func (r AudioServiceAPIHeadAudioByIdStreamByContainerRequest) Profile(profile string) AudioServiceAPIHeadAudioByIdStreamByContainerRequest {
	r.profile = &profile
	return r
}

// Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
func (r AudioServiceAPIHeadAudioByIdStreamByContainerRequest) Level(level string) AudioServiceAPIHeadAudioByIdStreamByContainerRequest {
	r.level = &level
	return r
}

// Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
func (r AudioServiceAPIHeadAudioByIdStreamByContainerRequest) Framerate(framerate float32) AudioServiceAPIHeadAudioByIdStreamByContainerRequest {
	r.framerate = &framerate
	return r
}

// Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
func (r AudioServiceAPIHeadAudioByIdStreamByContainerRequest) MaxFramerate(maxFramerate float32) AudioServiceAPIHeadAudioByIdStreamByContainerRequest {
	r.maxFramerate = &maxFramerate
	return r
}

// Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
func (r AudioServiceAPIHeadAudioByIdStreamByContainerRequest) CopyTimestamps(copyTimestamps bool) AudioServiceAPIHeadAudioByIdStreamByContainerRequest {
	r.copyTimestamps = &copyTimestamps
	return r
}

// Optional. Specify a starting offset, in ticks. 1ms &#x3D; 10000 ticks.
func (r AudioServiceAPIHeadAudioByIdStreamByContainerRequest) StartTimeTicks(startTimeTicks int64) AudioServiceAPIHeadAudioByIdStreamByContainerRequest {
	r.startTimeTicks = &startTimeTicks
	return r
}

// Optional. The fixed horizontal resolution of the encoded video.
func (r AudioServiceAPIHeadAudioByIdStreamByContainerRequest) Width(width int32) AudioServiceAPIHeadAudioByIdStreamByContainerRequest {
	r.width = &width
	return r
}

// Optional. The fixed vertical resolution of the encoded video.
func (r AudioServiceAPIHeadAudioByIdStreamByContainerRequest) Height(height int32) AudioServiceAPIHeadAudioByIdStreamByContainerRequest {
	r.height = &height
	return r
}

// Optional. The maximum horizontal resolution of the encoded video.
func (r AudioServiceAPIHeadAudioByIdStreamByContainerRequest) MaxWidth(maxWidth int32) AudioServiceAPIHeadAudioByIdStreamByContainerRequest {
	r.maxWidth = &maxWidth
	return r
}

// Optional. The maximum vertical resolution of the encoded video.
func (r AudioServiceAPIHeadAudioByIdStreamByContainerRequest) MaxHeight(maxHeight int32) AudioServiceAPIHeadAudioByIdStreamByContainerRequest {
	r.maxHeight = &maxHeight
	return r
}

// Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
func (r AudioServiceAPIHeadAudioByIdStreamByContainerRequest) VideoBitRate(videoBitRate int32) AudioServiceAPIHeadAudioByIdStreamByContainerRequest {
	r.videoBitRate = &videoBitRate
	return r
}

// Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
func (r AudioServiceAPIHeadAudioByIdStreamByContainerRequest) SubtitleStreamIndex(subtitleStreamIndex int32) AudioServiceAPIHeadAudioByIdStreamByContainerRequest {
	r.subtitleStreamIndex = &subtitleStreamIndex
	return r
}

// Optional. Specify the subtitle delivery method.
func (r AudioServiceAPIHeadAudioByIdStreamByContainerRequest) SubtitleMethod(subtitleMethod ModelSubtitleDeliveryMethod) AudioServiceAPIHeadAudioByIdStreamByContainerRequest {
	r.subtitleMethod = &subtitleMethod
	return r
}

// Optional.
func (r AudioServiceAPIHeadAudioByIdStreamByContainerRequest) MaxRefFrames(maxRefFrames int32) AudioServiceAPIHeadAudioByIdStreamByContainerRequest {
	r.maxRefFrames = &maxRefFrames
	return r
}

// Optional.
func (r AudioServiceAPIHeadAudioByIdStreamByContainerRequest) MaxVideoBitDepth(maxVideoBitDepth int32) AudioServiceAPIHeadAudioByIdStreamByContainerRequest {
	r.maxVideoBitDepth = &maxVideoBitDepth
	return r
}

// Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension. Options: h264, mpeg4, theora, vpx, wmv.
func (r AudioServiceAPIHeadAudioByIdStreamByContainerRequest) VideoCodec(videoCodec string) AudioServiceAPIHeadAudioByIdStreamByContainerRequest {
	r.videoCodec = &videoCodec
	return r
}

// Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
func (r AudioServiceAPIHeadAudioByIdStreamByContainerRequest) AudioStreamIndex(audioStreamIndex int32) AudioServiceAPIHeadAudioByIdStreamByContainerRequest {
	r.audioStreamIndex = &audioStreamIndex
	return r
}

// Optional. The index of the video stream to use. If omitted the first video stream will be used.
func (r AudioServiceAPIHeadAudioByIdStreamByContainerRequest) VideoStreamIndex(videoStreamIndex int32) AudioServiceAPIHeadAudioByIdStreamByContainerRequest {
	r.videoStreamIndex = &videoStreamIndex
	return r
}

func (r AudioServiceAPIHeadAudioByIdStreamByContainerRequest) Execute() (*http.Response, error) {
	return r.ApiService.HeadAudioByIdStreamByContainerExecute(r)
}

/*
HeadAudioByIdStreamByContainer Gets an audio stream

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Item Id
 @param container Container
 @return AudioServiceAPIHeadAudioByIdStreamByContainerRequest
*/
func (a *AudioServiceAPIService) HeadAudioByIdStreamByContainer(ctx context.Context, id string, container string) AudioServiceAPIHeadAudioByIdStreamByContainerRequest {
	return AudioServiceAPIHeadAudioByIdStreamByContainerRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		container: container,
	}
}

// Execute executes the request
func (a *AudioServiceAPIService) HeadAudioByIdStreamByContainerExecute(r AudioServiceAPIHeadAudioByIdStreamByContainerRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodHead
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AudioServiceAPIService.HeadAudioByIdStreamByContainer")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Audio/{Id}/stream.{Container}"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Container"+"}", url.PathEscape(parameterValueToString(r.container, "container")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.deviceProfileId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "DeviceProfileId", r.deviceProfileId, "")
	}
	if r.deviceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "DeviceId", r.deviceId, "")
	}
	if r.audioCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioCodec", r.audioCodec, "")
	}
	if r.enableAutoStreamCopy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableAutoStreamCopy", r.enableAutoStreamCopy, "")
	}
	if r.audioSampleRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioSampleRate", r.audioSampleRate, "")
	}
	if r.audioBitRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioBitRate", r.audioBitRate, "")
	}
	if r.audioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioChannels", r.audioChannels, "")
	}
	if r.maxAudioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxAudioChannels", r.maxAudioChannels, "")
	}
	if r.static != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Static", r.static, "")
	}
	if r.profile != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Profile", r.profile, "")
	}
	if r.level != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Level", r.level, "")
	}
	if r.framerate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Framerate", r.framerate, "")
	}
	if r.maxFramerate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxFramerate", r.maxFramerate, "")
	}
	if r.copyTimestamps != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "CopyTimestamps", r.copyTimestamps, "")
	}
	if r.startTimeTicks != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "StartTimeTicks", r.startTimeTicks, "")
	}
	if r.width != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Width", r.width, "")
	}
	if r.height != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Height", r.height, "")
	}
	if r.maxWidth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxWidth", r.maxWidth, "")
	}
	if r.maxHeight != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxHeight", r.maxHeight, "")
	}
	if r.videoBitRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoBitRate", r.videoBitRate, "")
	}
	if r.subtitleStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SubtitleStreamIndex", r.subtitleStreamIndex, "")
	}
	if r.subtitleMethod != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SubtitleMethod", r.subtitleMethod, "")
	}
	if r.maxRefFrames != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxRefFrames", r.maxRefFrames, "")
	}
	if r.maxVideoBitDepth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxVideoBitDepth", r.maxVideoBitDepth, "")
	}
	if r.videoCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoCodec", r.videoCodec, "")
	}
	if r.audioStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioStreamIndex", r.audioStreamIndex, "")
	}
	if r.videoStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoStreamIndex", r.videoStreamIndex, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
