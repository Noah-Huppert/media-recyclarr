/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"encoding/json"
)

// checks if the ModelAuthenticateUserByName type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelAuthenticateUserByName{}

// ModelAuthenticateUserByName struct for ModelAuthenticateUserByName
type ModelAuthenticateUserByName struct {
	Username *string `json:"Username,omitempty"`
	Pw *string `json:"Pw,omitempty"`
}

// NewModelAuthenticateUserByName instantiates a new ModelAuthenticateUserByName object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelAuthenticateUserByName() *ModelAuthenticateUserByName {
	this := ModelAuthenticateUserByName{}
	return &this
}

// NewModelAuthenticateUserByNameWithDefaults instantiates a new ModelAuthenticateUserByName object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelAuthenticateUserByNameWithDefaults() *ModelAuthenticateUserByName {
	this := ModelAuthenticateUserByName{}
	return &this
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *ModelAuthenticateUserByName) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelAuthenticateUserByName) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *ModelAuthenticateUserByName) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *ModelAuthenticateUserByName) SetUsername(v string) {
	o.Username = &v
}

// GetPw returns the Pw field value if set, zero value otherwise.
func (o *ModelAuthenticateUserByName) GetPw() string {
	if o == nil || IsNil(o.Pw) {
		var ret string
		return ret
	}
	return *o.Pw
}

// GetPwOk returns a tuple with the Pw field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelAuthenticateUserByName) GetPwOk() (*string, bool) {
	if o == nil || IsNil(o.Pw) {
		return nil, false
	}
	return o.Pw, true
}

// HasPw returns a boolean if a field has been set.
func (o *ModelAuthenticateUserByName) HasPw() bool {
	if o != nil && !IsNil(o.Pw) {
		return true
	}

	return false
}

// SetPw gets a reference to the given string and assigns it to the Pw field.
func (o *ModelAuthenticateUserByName) SetPw(v string) {
	o.Pw = &v
}

func (o ModelAuthenticateUserByName) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelAuthenticateUserByName) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Username) {
		toSerialize["Username"] = o.Username
	}
	if !IsNil(o.Pw) {
		toSerialize["Pw"] = o.Pw
	}
	return toSerialize, nil
}

type NullableModelAuthenticateUserByName struct {
	value *ModelAuthenticateUserByName
	isSet bool
}

func (v NullableModelAuthenticateUserByName) Get() *ModelAuthenticateUserByName {
	return v.value
}

func (v *NullableModelAuthenticateUserByName) Set(val *ModelAuthenticateUserByName) {
	v.value = val
	v.isSet = true
}

func (v NullableModelAuthenticateUserByName) IsSet() bool {
	return v.isSet
}

func (v *NullableModelAuthenticateUserByName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelAuthenticateUserByName(val *ModelAuthenticateUserByName) *NullableModelAuthenticateUserByName {
	return &NullableModelAuthenticateUserByName{value: val, isSet: true}
}

func (v NullableModelAuthenticateUserByName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelAuthenticateUserByName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


