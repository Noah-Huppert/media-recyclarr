/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"encoding/json"
)

// checks if the ModelResolutionWithRate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelResolutionWithRate{}

// ModelResolutionWithRate struct for ModelResolutionWithRate
type ModelResolutionWithRate struct {
	Width *int32 `json:"Width,omitempty"`
	Height *int32 `json:"Height,omitempty"`
	FrameRate *float64 `json:"FrameRate,omitempty"`
	Resolution *ModelResolution `json:"Resolution,omitempty"`
}

// NewModelResolutionWithRate instantiates a new ModelResolutionWithRate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelResolutionWithRate() *ModelResolutionWithRate {
	this := ModelResolutionWithRate{}
	return &this
}

// NewModelResolutionWithRateWithDefaults instantiates a new ModelResolutionWithRate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelResolutionWithRateWithDefaults() *ModelResolutionWithRate {
	this := ModelResolutionWithRate{}
	return &this
}

// GetWidth returns the Width field value if set, zero value otherwise.
func (o *ModelResolutionWithRate) GetWidth() int32 {
	if o == nil || IsNil(o.Width) {
		var ret int32
		return ret
	}
	return *o.Width
}

// GetWidthOk returns a tuple with the Width field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelResolutionWithRate) GetWidthOk() (*int32, bool) {
	if o == nil || IsNil(o.Width) {
		return nil, false
	}
	return o.Width, true
}

// HasWidth returns a boolean if a field has been set.
func (o *ModelResolutionWithRate) HasWidth() bool {
	if o != nil && !IsNil(o.Width) {
		return true
	}

	return false
}

// SetWidth gets a reference to the given int32 and assigns it to the Width field.
func (o *ModelResolutionWithRate) SetWidth(v int32) {
	o.Width = &v
}

// GetHeight returns the Height field value if set, zero value otherwise.
func (o *ModelResolutionWithRate) GetHeight() int32 {
	if o == nil || IsNil(o.Height) {
		var ret int32
		return ret
	}
	return *o.Height
}

// GetHeightOk returns a tuple with the Height field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelResolutionWithRate) GetHeightOk() (*int32, bool) {
	if o == nil || IsNil(o.Height) {
		return nil, false
	}
	return o.Height, true
}

// HasHeight returns a boolean if a field has been set.
func (o *ModelResolutionWithRate) HasHeight() bool {
	if o != nil && !IsNil(o.Height) {
		return true
	}

	return false
}

// SetHeight gets a reference to the given int32 and assigns it to the Height field.
func (o *ModelResolutionWithRate) SetHeight(v int32) {
	o.Height = &v
}

// GetFrameRate returns the FrameRate field value if set, zero value otherwise.
func (o *ModelResolutionWithRate) GetFrameRate() float64 {
	if o == nil || IsNil(o.FrameRate) {
		var ret float64
		return ret
	}
	return *o.FrameRate
}

// GetFrameRateOk returns a tuple with the FrameRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelResolutionWithRate) GetFrameRateOk() (*float64, bool) {
	if o == nil || IsNil(o.FrameRate) {
		return nil, false
	}
	return o.FrameRate, true
}

// HasFrameRate returns a boolean if a field has been set.
func (o *ModelResolutionWithRate) HasFrameRate() bool {
	if o != nil && !IsNil(o.FrameRate) {
		return true
	}

	return false
}

// SetFrameRate gets a reference to the given float64 and assigns it to the FrameRate field.
func (o *ModelResolutionWithRate) SetFrameRate(v float64) {
	o.FrameRate = &v
}

// GetResolution returns the Resolution field value if set, zero value otherwise.
func (o *ModelResolutionWithRate) GetResolution() ModelResolution {
	if o == nil || IsNil(o.Resolution) {
		var ret ModelResolution
		return ret
	}
	return *o.Resolution
}

// GetResolutionOk returns a tuple with the Resolution field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelResolutionWithRate) GetResolutionOk() (*ModelResolution, bool) {
	if o == nil || IsNil(o.Resolution) {
		return nil, false
	}
	return o.Resolution, true
}

// HasResolution returns a boolean if a field has been set.
func (o *ModelResolutionWithRate) HasResolution() bool {
	if o != nil && !IsNil(o.Resolution) {
		return true
	}

	return false
}

// SetResolution gets a reference to the given ModelResolution and assigns it to the Resolution field.
func (o *ModelResolutionWithRate) SetResolution(v ModelResolution) {
	o.Resolution = &v
}

func (o ModelResolutionWithRate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelResolutionWithRate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Width) {
		toSerialize["Width"] = o.Width
	}
	if !IsNil(o.Height) {
		toSerialize["Height"] = o.Height
	}
	if !IsNil(o.FrameRate) {
		toSerialize["FrameRate"] = o.FrameRate
	}
	if !IsNil(o.Resolution) {
		toSerialize["Resolution"] = o.Resolution
	}
	return toSerialize, nil
}

type NullableModelResolutionWithRate struct {
	value *ModelResolutionWithRate
	isSet bool
}

func (v NullableModelResolutionWithRate) Get() *ModelResolutionWithRate {
	return v.value
}

func (v *NullableModelResolutionWithRate) Set(val *ModelResolutionWithRate) {
	v.value = val
	v.isSet = true
}

func (v NullableModelResolutionWithRate) IsSet() bool {
	return v.isSet
}

func (v *NullableModelResolutionWithRate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelResolutionWithRate(val *ModelResolutionWithRate) *NullableModelResolutionWithRate {
	return &NullableModelResolutionWithRate{value: val, isSet: true}
}

func (v NullableModelResolutionWithRate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelResolutionWithRate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


