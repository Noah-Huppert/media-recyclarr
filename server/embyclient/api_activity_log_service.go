/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// ActivityLogServiceAPIService ActivityLogServiceAPI service
type ActivityLogServiceAPIService service

type ActivityLogServiceAPIGetSystemActivitylogEntriesRequest struct {
	ctx context.Context
	ApiService *ActivityLogServiceAPIService
	startIndex *int32
	limit *int32
	minDate *string
}

// Optional. The record index to start at. All items with a lower index will be dropped from the results.
func (r ActivityLogServiceAPIGetSystemActivitylogEntriesRequest) StartIndex(startIndex int32) ActivityLogServiceAPIGetSystemActivitylogEntriesRequest {
	r.startIndex = &startIndex
	return r
}

// Optional. The maximum number of records to return
func (r ActivityLogServiceAPIGetSystemActivitylogEntriesRequest) Limit(limit int32) ActivityLogServiceAPIGetSystemActivitylogEntriesRequest {
	r.limit = &limit
	return r
}

// Optional. The minimum date. Format &#x3D; ISO
func (r ActivityLogServiceAPIGetSystemActivitylogEntriesRequest) MinDate(minDate string) ActivityLogServiceAPIGetSystemActivitylogEntriesRequest {
	r.minDate = &minDate
	return r
}

func (r ActivityLogServiceAPIGetSystemActivitylogEntriesRequest) Execute() (*ModelQueryResultActivityLogEntry, *http.Response, error) {
	return r.ApiService.GetSystemActivitylogEntriesExecute(r)
}

/*
GetSystemActivitylogEntries Gets activity log entries

Requires authentication as administrator

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ActivityLogServiceAPIGetSystemActivitylogEntriesRequest
*/
func (a *ActivityLogServiceAPIService) GetSystemActivitylogEntries(ctx context.Context) ActivityLogServiceAPIGetSystemActivitylogEntriesRequest {
	return ActivityLogServiceAPIGetSystemActivitylogEntriesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ModelQueryResultActivityLogEntry
func (a *ActivityLogServiceAPIService) GetSystemActivitylogEntriesExecute(r ActivityLogServiceAPIGetSystemActivitylogEntriesRequest) (*ModelQueryResultActivityLogEntry, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ModelQueryResultActivityLogEntry
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ActivityLogServiceAPIService.GetSystemActivitylogEntries")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/System/ActivityLog/Entries"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "StartIndex", r.startIndex, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Limit", r.limit, "")
	}
	if r.minDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MinDate", r.minDate, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
