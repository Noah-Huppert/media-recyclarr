/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"encoding/json"
	"fmt"
)

// ModelAttributesValueCondition the model 'ModelAttributesValueCondition'
type ModelAttributesValueCondition string

// List of Attributes.ValueCondition
const (
	MODELATTRIBUTESVALUECONDITION_IS_EQUAL ModelAttributesValueCondition = "IsEqual"
	MODELATTRIBUTESVALUECONDITION_IS_NOT_EQUAL ModelAttributesValueCondition = "IsNotEqual"
	MODELATTRIBUTESVALUECONDITION_IS_GREATER ModelAttributesValueCondition = "IsGreater"
	MODELATTRIBUTESVALUECONDITION_IS_GREATER_OR_EQUAL ModelAttributesValueCondition = "IsGreaterOrEqual"
	MODELATTRIBUTESVALUECONDITION_IS_LESS ModelAttributesValueCondition = "IsLess"
	MODELATTRIBUTESVALUECONDITION_IS_LESS_OR_EQUAL ModelAttributesValueCondition = "IsLessOrEqual"
)

// All allowed values of ModelAttributesValueCondition enum
var AllowedModelAttributesValueConditionEnumValues = []ModelAttributesValueCondition{
	"IsEqual",
	"IsNotEqual",
	"IsGreater",
	"IsGreaterOrEqual",
	"IsLess",
	"IsLessOrEqual",
}

func (v *ModelAttributesValueCondition) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ModelAttributesValueCondition(value)
	for _, existing := range AllowedModelAttributesValueConditionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ModelAttributesValueCondition", value)
}

// NewModelAttributesValueConditionFromValue returns a pointer to a valid ModelAttributesValueCondition
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewModelAttributesValueConditionFromValue(v string) (*ModelAttributesValueCondition, error) {
	ev := ModelAttributesValueCondition(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ModelAttributesValueCondition: valid values are %v", v, AllowedModelAttributesValueConditionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ModelAttributesValueCondition) IsValid() bool {
	for _, existing := range AllowedModelAttributesValueConditionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Attributes.ValueCondition value
func (v ModelAttributesValueCondition) Ptr() *ModelAttributesValueCondition {
	return &v
}

type NullableModelAttributesValueCondition struct {
	value *ModelAttributesValueCondition
	isSet bool
}

func (v NullableModelAttributesValueCondition) Get() *ModelAttributesValueCondition {
	return v.value
}

func (v *NullableModelAttributesValueCondition) Set(val *ModelAttributesValueCondition) {
	v.value = val
	v.isSet = true
}

func (v NullableModelAttributesValueCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableModelAttributesValueCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelAttributesValueCondition(val *ModelAttributesValueCondition) *NullableModelAttributesValueCondition {
	return &NullableModelAttributesValueCondition{value: val, isSet: true}
}

func (v NullableModelAttributesValueCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelAttributesValueCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

