/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"encoding/json"
)

// checks if the ModelUserConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelUserConfiguration{}

// ModelUserConfiguration struct for ModelUserConfiguration
type ModelUserConfiguration struct {
	AudioLanguagePreference *string `json:"AudioLanguagePreference,omitempty"`
	PlayDefaultAudioTrack *bool `json:"PlayDefaultAudioTrack,omitempty"`
	SubtitleLanguagePreference *string `json:"SubtitleLanguagePreference,omitempty"`
	ProfilePin *string `json:"ProfilePin,omitempty"`
	DisplayMissingEpisodes *bool `json:"DisplayMissingEpisodes,omitempty"`
	SubtitleMode *ModelSubtitlePlaybackMode `json:"SubtitleMode,omitempty"`
	OrderedViews []string `json:"OrderedViews,omitempty"`
	LatestItemsExcludes []string `json:"LatestItemsExcludes,omitempty"`
	MyMediaExcludes []string `json:"MyMediaExcludes,omitempty"`
	HidePlayedInLatest *bool `json:"HidePlayedInLatest,omitempty"`
	HidePlayedInMoreLikeThis *bool `json:"HidePlayedInMoreLikeThis,omitempty"`
	HidePlayedInSuggestions *bool `json:"HidePlayedInSuggestions,omitempty"`
	RememberAudioSelections *bool `json:"RememberAudioSelections,omitempty"`
	RememberSubtitleSelections *bool `json:"RememberSubtitleSelections,omitempty"`
	EnableNextEpisodeAutoPlay *bool `json:"EnableNextEpisodeAutoPlay,omitempty"`
	ResumeRewindSeconds *int32 `json:"ResumeRewindSeconds,omitempty"`
	IntroSkipMode *ModelSegmentSkipMode `json:"IntroSkipMode,omitempty"`
	// Deprecated
	EnableLocalPassword *bool `json:"EnableLocalPassword,omitempty"`
}

// NewModelUserConfiguration instantiates a new ModelUserConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelUserConfiguration() *ModelUserConfiguration {
	this := ModelUserConfiguration{}
	return &this
}

// NewModelUserConfigurationWithDefaults instantiates a new ModelUserConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelUserConfigurationWithDefaults() *ModelUserConfiguration {
	this := ModelUserConfiguration{}
	return &this
}

// GetAudioLanguagePreference returns the AudioLanguagePreference field value if set, zero value otherwise.
func (o *ModelUserConfiguration) GetAudioLanguagePreference() string {
	if o == nil || IsNil(o.AudioLanguagePreference) {
		var ret string
		return ret
	}
	return *o.AudioLanguagePreference
}

// GetAudioLanguagePreferenceOk returns a tuple with the AudioLanguagePreference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserConfiguration) GetAudioLanguagePreferenceOk() (*string, bool) {
	if o == nil || IsNil(o.AudioLanguagePreference) {
		return nil, false
	}
	return o.AudioLanguagePreference, true
}

// HasAudioLanguagePreference returns a boolean if a field has been set.
func (o *ModelUserConfiguration) HasAudioLanguagePreference() bool {
	if o != nil && !IsNil(o.AudioLanguagePreference) {
		return true
	}

	return false
}

// SetAudioLanguagePreference gets a reference to the given string and assigns it to the AudioLanguagePreference field.
func (o *ModelUserConfiguration) SetAudioLanguagePreference(v string) {
	o.AudioLanguagePreference = &v
}

// GetPlayDefaultAudioTrack returns the PlayDefaultAudioTrack field value if set, zero value otherwise.
func (o *ModelUserConfiguration) GetPlayDefaultAudioTrack() bool {
	if o == nil || IsNil(o.PlayDefaultAudioTrack) {
		var ret bool
		return ret
	}
	return *o.PlayDefaultAudioTrack
}

// GetPlayDefaultAudioTrackOk returns a tuple with the PlayDefaultAudioTrack field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserConfiguration) GetPlayDefaultAudioTrackOk() (*bool, bool) {
	if o == nil || IsNil(o.PlayDefaultAudioTrack) {
		return nil, false
	}
	return o.PlayDefaultAudioTrack, true
}

// HasPlayDefaultAudioTrack returns a boolean if a field has been set.
func (o *ModelUserConfiguration) HasPlayDefaultAudioTrack() bool {
	if o != nil && !IsNil(o.PlayDefaultAudioTrack) {
		return true
	}

	return false
}

// SetPlayDefaultAudioTrack gets a reference to the given bool and assigns it to the PlayDefaultAudioTrack field.
func (o *ModelUserConfiguration) SetPlayDefaultAudioTrack(v bool) {
	o.PlayDefaultAudioTrack = &v
}

// GetSubtitleLanguagePreference returns the SubtitleLanguagePreference field value if set, zero value otherwise.
func (o *ModelUserConfiguration) GetSubtitleLanguagePreference() string {
	if o == nil || IsNil(o.SubtitleLanguagePreference) {
		var ret string
		return ret
	}
	return *o.SubtitleLanguagePreference
}

// GetSubtitleLanguagePreferenceOk returns a tuple with the SubtitleLanguagePreference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserConfiguration) GetSubtitleLanguagePreferenceOk() (*string, bool) {
	if o == nil || IsNil(o.SubtitleLanguagePreference) {
		return nil, false
	}
	return o.SubtitleLanguagePreference, true
}

// HasSubtitleLanguagePreference returns a boolean if a field has been set.
func (o *ModelUserConfiguration) HasSubtitleLanguagePreference() bool {
	if o != nil && !IsNil(o.SubtitleLanguagePreference) {
		return true
	}

	return false
}

// SetSubtitleLanguagePreference gets a reference to the given string and assigns it to the SubtitleLanguagePreference field.
func (o *ModelUserConfiguration) SetSubtitleLanguagePreference(v string) {
	o.SubtitleLanguagePreference = &v
}

// GetProfilePin returns the ProfilePin field value if set, zero value otherwise.
func (o *ModelUserConfiguration) GetProfilePin() string {
	if o == nil || IsNil(o.ProfilePin) {
		var ret string
		return ret
	}
	return *o.ProfilePin
}

// GetProfilePinOk returns a tuple with the ProfilePin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserConfiguration) GetProfilePinOk() (*string, bool) {
	if o == nil || IsNil(o.ProfilePin) {
		return nil, false
	}
	return o.ProfilePin, true
}

// HasProfilePin returns a boolean if a field has been set.
func (o *ModelUserConfiguration) HasProfilePin() bool {
	if o != nil && !IsNil(o.ProfilePin) {
		return true
	}

	return false
}

// SetProfilePin gets a reference to the given string and assigns it to the ProfilePin field.
func (o *ModelUserConfiguration) SetProfilePin(v string) {
	o.ProfilePin = &v
}

// GetDisplayMissingEpisodes returns the DisplayMissingEpisodes field value if set, zero value otherwise.
func (o *ModelUserConfiguration) GetDisplayMissingEpisodes() bool {
	if o == nil || IsNil(o.DisplayMissingEpisodes) {
		var ret bool
		return ret
	}
	return *o.DisplayMissingEpisodes
}

// GetDisplayMissingEpisodesOk returns a tuple with the DisplayMissingEpisodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserConfiguration) GetDisplayMissingEpisodesOk() (*bool, bool) {
	if o == nil || IsNil(o.DisplayMissingEpisodes) {
		return nil, false
	}
	return o.DisplayMissingEpisodes, true
}

// HasDisplayMissingEpisodes returns a boolean if a field has been set.
func (o *ModelUserConfiguration) HasDisplayMissingEpisodes() bool {
	if o != nil && !IsNil(o.DisplayMissingEpisodes) {
		return true
	}

	return false
}

// SetDisplayMissingEpisodes gets a reference to the given bool and assigns it to the DisplayMissingEpisodes field.
func (o *ModelUserConfiguration) SetDisplayMissingEpisodes(v bool) {
	o.DisplayMissingEpisodes = &v
}

// GetSubtitleMode returns the SubtitleMode field value if set, zero value otherwise.
func (o *ModelUserConfiguration) GetSubtitleMode() ModelSubtitlePlaybackMode {
	if o == nil || IsNil(o.SubtitleMode) {
		var ret ModelSubtitlePlaybackMode
		return ret
	}
	return *o.SubtitleMode
}

// GetSubtitleModeOk returns a tuple with the SubtitleMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserConfiguration) GetSubtitleModeOk() (*ModelSubtitlePlaybackMode, bool) {
	if o == nil || IsNil(o.SubtitleMode) {
		return nil, false
	}
	return o.SubtitleMode, true
}

// HasSubtitleMode returns a boolean if a field has been set.
func (o *ModelUserConfiguration) HasSubtitleMode() bool {
	if o != nil && !IsNil(o.SubtitleMode) {
		return true
	}

	return false
}

// SetSubtitleMode gets a reference to the given ModelSubtitlePlaybackMode and assigns it to the SubtitleMode field.
func (o *ModelUserConfiguration) SetSubtitleMode(v ModelSubtitlePlaybackMode) {
	o.SubtitleMode = &v
}

// GetOrderedViews returns the OrderedViews field value if set, zero value otherwise.
func (o *ModelUserConfiguration) GetOrderedViews() []string {
	if o == nil || IsNil(o.OrderedViews) {
		var ret []string
		return ret
	}
	return o.OrderedViews
}

// GetOrderedViewsOk returns a tuple with the OrderedViews field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserConfiguration) GetOrderedViewsOk() ([]string, bool) {
	if o == nil || IsNil(o.OrderedViews) {
		return nil, false
	}
	return o.OrderedViews, true
}

// HasOrderedViews returns a boolean if a field has been set.
func (o *ModelUserConfiguration) HasOrderedViews() bool {
	if o != nil && !IsNil(o.OrderedViews) {
		return true
	}

	return false
}

// SetOrderedViews gets a reference to the given []string and assigns it to the OrderedViews field.
func (o *ModelUserConfiguration) SetOrderedViews(v []string) {
	o.OrderedViews = v
}

// GetLatestItemsExcludes returns the LatestItemsExcludes field value if set, zero value otherwise.
func (o *ModelUserConfiguration) GetLatestItemsExcludes() []string {
	if o == nil || IsNil(o.LatestItemsExcludes) {
		var ret []string
		return ret
	}
	return o.LatestItemsExcludes
}

// GetLatestItemsExcludesOk returns a tuple with the LatestItemsExcludes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserConfiguration) GetLatestItemsExcludesOk() ([]string, bool) {
	if o == nil || IsNil(o.LatestItemsExcludes) {
		return nil, false
	}
	return o.LatestItemsExcludes, true
}

// HasLatestItemsExcludes returns a boolean if a field has been set.
func (o *ModelUserConfiguration) HasLatestItemsExcludes() bool {
	if o != nil && !IsNil(o.LatestItemsExcludes) {
		return true
	}

	return false
}

// SetLatestItemsExcludes gets a reference to the given []string and assigns it to the LatestItemsExcludes field.
func (o *ModelUserConfiguration) SetLatestItemsExcludes(v []string) {
	o.LatestItemsExcludes = v
}

// GetMyMediaExcludes returns the MyMediaExcludes field value if set, zero value otherwise.
func (o *ModelUserConfiguration) GetMyMediaExcludes() []string {
	if o == nil || IsNil(o.MyMediaExcludes) {
		var ret []string
		return ret
	}
	return o.MyMediaExcludes
}

// GetMyMediaExcludesOk returns a tuple with the MyMediaExcludes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserConfiguration) GetMyMediaExcludesOk() ([]string, bool) {
	if o == nil || IsNil(o.MyMediaExcludes) {
		return nil, false
	}
	return o.MyMediaExcludes, true
}

// HasMyMediaExcludes returns a boolean if a field has been set.
func (o *ModelUserConfiguration) HasMyMediaExcludes() bool {
	if o != nil && !IsNil(o.MyMediaExcludes) {
		return true
	}

	return false
}

// SetMyMediaExcludes gets a reference to the given []string and assigns it to the MyMediaExcludes field.
func (o *ModelUserConfiguration) SetMyMediaExcludes(v []string) {
	o.MyMediaExcludes = v
}

// GetHidePlayedInLatest returns the HidePlayedInLatest field value if set, zero value otherwise.
func (o *ModelUserConfiguration) GetHidePlayedInLatest() bool {
	if o == nil || IsNil(o.HidePlayedInLatest) {
		var ret bool
		return ret
	}
	return *o.HidePlayedInLatest
}

// GetHidePlayedInLatestOk returns a tuple with the HidePlayedInLatest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserConfiguration) GetHidePlayedInLatestOk() (*bool, bool) {
	if o == nil || IsNil(o.HidePlayedInLatest) {
		return nil, false
	}
	return o.HidePlayedInLatest, true
}

// HasHidePlayedInLatest returns a boolean if a field has been set.
func (o *ModelUserConfiguration) HasHidePlayedInLatest() bool {
	if o != nil && !IsNil(o.HidePlayedInLatest) {
		return true
	}

	return false
}

// SetHidePlayedInLatest gets a reference to the given bool and assigns it to the HidePlayedInLatest field.
func (o *ModelUserConfiguration) SetHidePlayedInLatest(v bool) {
	o.HidePlayedInLatest = &v
}

// GetHidePlayedInMoreLikeThis returns the HidePlayedInMoreLikeThis field value if set, zero value otherwise.
func (o *ModelUserConfiguration) GetHidePlayedInMoreLikeThis() bool {
	if o == nil || IsNil(o.HidePlayedInMoreLikeThis) {
		var ret bool
		return ret
	}
	return *o.HidePlayedInMoreLikeThis
}

// GetHidePlayedInMoreLikeThisOk returns a tuple with the HidePlayedInMoreLikeThis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserConfiguration) GetHidePlayedInMoreLikeThisOk() (*bool, bool) {
	if o == nil || IsNil(o.HidePlayedInMoreLikeThis) {
		return nil, false
	}
	return o.HidePlayedInMoreLikeThis, true
}

// HasHidePlayedInMoreLikeThis returns a boolean if a field has been set.
func (o *ModelUserConfiguration) HasHidePlayedInMoreLikeThis() bool {
	if o != nil && !IsNil(o.HidePlayedInMoreLikeThis) {
		return true
	}

	return false
}

// SetHidePlayedInMoreLikeThis gets a reference to the given bool and assigns it to the HidePlayedInMoreLikeThis field.
func (o *ModelUserConfiguration) SetHidePlayedInMoreLikeThis(v bool) {
	o.HidePlayedInMoreLikeThis = &v
}

// GetHidePlayedInSuggestions returns the HidePlayedInSuggestions field value if set, zero value otherwise.
func (o *ModelUserConfiguration) GetHidePlayedInSuggestions() bool {
	if o == nil || IsNil(o.HidePlayedInSuggestions) {
		var ret bool
		return ret
	}
	return *o.HidePlayedInSuggestions
}

// GetHidePlayedInSuggestionsOk returns a tuple with the HidePlayedInSuggestions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserConfiguration) GetHidePlayedInSuggestionsOk() (*bool, bool) {
	if o == nil || IsNil(o.HidePlayedInSuggestions) {
		return nil, false
	}
	return o.HidePlayedInSuggestions, true
}

// HasHidePlayedInSuggestions returns a boolean if a field has been set.
func (o *ModelUserConfiguration) HasHidePlayedInSuggestions() bool {
	if o != nil && !IsNil(o.HidePlayedInSuggestions) {
		return true
	}

	return false
}

// SetHidePlayedInSuggestions gets a reference to the given bool and assigns it to the HidePlayedInSuggestions field.
func (o *ModelUserConfiguration) SetHidePlayedInSuggestions(v bool) {
	o.HidePlayedInSuggestions = &v
}

// GetRememberAudioSelections returns the RememberAudioSelections field value if set, zero value otherwise.
func (o *ModelUserConfiguration) GetRememberAudioSelections() bool {
	if o == nil || IsNil(o.RememberAudioSelections) {
		var ret bool
		return ret
	}
	return *o.RememberAudioSelections
}

// GetRememberAudioSelectionsOk returns a tuple with the RememberAudioSelections field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserConfiguration) GetRememberAudioSelectionsOk() (*bool, bool) {
	if o == nil || IsNil(o.RememberAudioSelections) {
		return nil, false
	}
	return o.RememberAudioSelections, true
}

// HasRememberAudioSelections returns a boolean if a field has been set.
func (o *ModelUserConfiguration) HasRememberAudioSelections() bool {
	if o != nil && !IsNil(o.RememberAudioSelections) {
		return true
	}

	return false
}

// SetRememberAudioSelections gets a reference to the given bool and assigns it to the RememberAudioSelections field.
func (o *ModelUserConfiguration) SetRememberAudioSelections(v bool) {
	o.RememberAudioSelections = &v
}

// GetRememberSubtitleSelections returns the RememberSubtitleSelections field value if set, zero value otherwise.
func (o *ModelUserConfiguration) GetRememberSubtitleSelections() bool {
	if o == nil || IsNil(o.RememberSubtitleSelections) {
		var ret bool
		return ret
	}
	return *o.RememberSubtitleSelections
}

// GetRememberSubtitleSelectionsOk returns a tuple with the RememberSubtitleSelections field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserConfiguration) GetRememberSubtitleSelectionsOk() (*bool, bool) {
	if o == nil || IsNil(o.RememberSubtitleSelections) {
		return nil, false
	}
	return o.RememberSubtitleSelections, true
}

// HasRememberSubtitleSelections returns a boolean if a field has been set.
func (o *ModelUserConfiguration) HasRememberSubtitleSelections() bool {
	if o != nil && !IsNil(o.RememberSubtitleSelections) {
		return true
	}

	return false
}

// SetRememberSubtitleSelections gets a reference to the given bool and assigns it to the RememberSubtitleSelections field.
func (o *ModelUserConfiguration) SetRememberSubtitleSelections(v bool) {
	o.RememberSubtitleSelections = &v
}

// GetEnableNextEpisodeAutoPlay returns the EnableNextEpisodeAutoPlay field value if set, zero value otherwise.
func (o *ModelUserConfiguration) GetEnableNextEpisodeAutoPlay() bool {
	if o == nil || IsNil(o.EnableNextEpisodeAutoPlay) {
		var ret bool
		return ret
	}
	return *o.EnableNextEpisodeAutoPlay
}

// GetEnableNextEpisodeAutoPlayOk returns a tuple with the EnableNextEpisodeAutoPlay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserConfiguration) GetEnableNextEpisodeAutoPlayOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableNextEpisodeAutoPlay) {
		return nil, false
	}
	return o.EnableNextEpisodeAutoPlay, true
}

// HasEnableNextEpisodeAutoPlay returns a boolean if a field has been set.
func (o *ModelUserConfiguration) HasEnableNextEpisodeAutoPlay() bool {
	if o != nil && !IsNil(o.EnableNextEpisodeAutoPlay) {
		return true
	}

	return false
}

// SetEnableNextEpisodeAutoPlay gets a reference to the given bool and assigns it to the EnableNextEpisodeAutoPlay field.
func (o *ModelUserConfiguration) SetEnableNextEpisodeAutoPlay(v bool) {
	o.EnableNextEpisodeAutoPlay = &v
}

// GetResumeRewindSeconds returns the ResumeRewindSeconds field value if set, zero value otherwise.
func (o *ModelUserConfiguration) GetResumeRewindSeconds() int32 {
	if o == nil || IsNil(o.ResumeRewindSeconds) {
		var ret int32
		return ret
	}
	return *o.ResumeRewindSeconds
}

// GetResumeRewindSecondsOk returns a tuple with the ResumeRewindSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserConfiguration) GetResumeRewindSecondsOk() (*int32, bool) {
	if o == nil || IsNil(o.ResumeRewindSeconds) {
		return nil, false
	}
	return o.ResumeRewindSeconds, true
}

// HasResumeRewindSeconds returns a boolean if a field has been set.
func (o *ModelUserConfiguration) HasResumeRewindSeconds() bool {
	if o != nil && !IsNil(o.ResumeRewindSeconds) {
		return true
	}

	return false
}

// SetResumeRewindSeconds gets a reference to the given int32 and assigns it to the ResumeRewindSeconds field.
func (o *ModelUserConfiguration) SetResumeRewindSeconds(v int32) {
	o.ResumeRewindSeconds = &v
}

// GetIntroSkipMode returns the IntroSkipMode field value if set, zero value otherwise.
func (o *ModelUserConfiguration) GetIntroSkipMode() ModelSegmentSkipMode {
	if o == nil || IsNil(o.IntroSkipMode) {
		var ret ModelSegmentSkipMode
		return ret
	}
	return *o.IntroSkipMode
}

// GetIntroSkipModeOk returns a tuple with the IntroSkipMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserConfiguration) GetIntroSkipModeOk() (*ModelSegmentSkipMode, bool) {
	if o == nil || IsNil(o.IntroSkipMode) {
		return nil, false
	}
	return o.IntroSkipMode, true
}

// HasIntroSkipMode returns a boolean if a field has been set.
func (o *ModelUserConfiguration) HasIntroSkipMode() bool {
	if o != nil && !IsNil(o.IntroSkipMode) {
		return true
	}

	return false
}

// SetIntroSkipMode gets a reference to the given ModelSegmentSkipMode and assigns it to the IntroSkipMode field.
func (o *ModelUserConfiguration) SetIntroSkipMode(v ModelSegmentSkipMode) {
	o.IntroSkipMode = &v
}

// GetEnableLocalPassword returns the EnableLocalPassword field value if set, zero value otherwise.
// Deprecated
func (o *ModelUserConfiguration) GetEnableLocalPassword() bool {
	if o == nil || IsNil(o.EnableLocalPassword) {
		var ret bool
		return ret
	}
	return *o.EnableLocalPassword
}

// GetEnableLocalPasswordOk returns a tuple with the EnableLocalPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *ModelUserConfiguration) GetEnableLocalPasswordOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableLocalPassword) {
		return nil, false
	}
	return o.EnableLocalPassword, true
}

// HasEnableLocalPassword returns a boolean if a field has been set.
func (o *ModelUserConfiguration) HasEnableLocalPassword() bool {
	if o != nil && !IsNil(o.EnableLocalPassword) {
		return true
	}

	return false
}

// SetEnableLocalPassword gets a reference to the given bool and assigns it to the EnableLocalPassword field.
// Deprecated
func (o *ModelUserConfiguration) SetEnableLocalPassword(v bool) {
	o.EnableLocalPassword = &v
}

func (o ModelUserConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelUserConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AudioLanguagePreference) {
		toSerialize["AudioLanguagePreference"] = o.AudioLanguagePreference
	}
	if !IsNil(o.PlayDefaultAudioTrack) {
		toSerialize["PlayDefaultAudioTrack"] = o.PlayDefaultAudioTrack
	}
	if !IsNil(o.SubtitleLanguagePreference) {
		toSerialize["SubtitleLanguagePreference"] = o.SubtitleLanguagePreference
	}
	if !IsNil(o.ProfilePin) {
		toSerialize["ProfilePin"] = o.ProfilePin
	}
	if !IsNil(o.DisplayMissingEpisodes) {
		toSerialize["DisplayMissingEpisodes"] = o.DisplayMissingEpisodes
	}
	if !IsNil(o.SubtitleMode) {
		toSerialize["SubtitleMode"] = o.SubtitleMode
	}
	if !IsNil(o.OrderedViews) {
		toSerialize["OrderedViews"] = o.OrderedViews
	}
	if !IsNil(o.LatestItemsExcludes) {
		toSerialize["LatestItemsExcludes"] = o.LatestItemsExcludes
	}
	if !IsNil(o.MyMediaExcludes) {
		toSerialize["MyMediaExcludes"] = o.MyMediaExcludes
	}
	if !IsNil(o.HidePlayedInLatest) {
		toSerialize["HidePlayedInLatest"] = o.HidePlayedInLatest
	}
	if !IsNil(o.HidePlayedInMoreLikeThis) {
		toSerialize["HidePlayedInMoreLikeThis"] = o.HidePlayedInMoreLikeThis
	}
	if !IsNil(o.HidePlayedInSuggestions) {
		toSerialize["HidePlayedInSuggestions"] = o.HidePlayedInSuggestions
	}
	if !IsNil(o.RememberAudioSelections) {
		toSerialize["RememberAudioSelections"] = o.RememberAudioSelections
	}
	if !IsNil(o.RememberSubtitleSelections) {
		toSerialize["RememberSubtitleSelections"] = o.RememberSubtitleSelections
	}
	if !IsNil(o.EnableNextEpisodeAutoPlay) {
		toSerialize["EnableNextEpisodeAutoPlay"] = o.EnableNextEpisodeAutoPlay
	}
	if !IsNil(o.ResumeRewindSeconds) {
		toSerialize["ResumeRewindSeconds"] = o.ResumeRewindSeconds
	}
	if !IsNil(o.IntroSkipMode) {
		toSerialize["IntroSkipMode"] = o.IntroSkipMode
	}
	if !IsNil(o.EnableLocalPassword) {
		toSerialize["EnableLocalPassword"] = o.EnableLocalPassword
	}
	return toSerialize, nil
}

type NullableModelUserConfiguration struct {
	value *ModelUserConfiguration
	isSet bool
}

func (v NullableModelUserConfiguration) Get() *ModelUserConfiguration {
	return v.value
}

func (v *NullableModelUserConfiguration) Set(val *ModelUserConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableModelUserConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableModelUserConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelUserConfiguration(val *ModelUserConfiguration) *NullableModelUserConfiguration {
	return &NullableModelUserConfiguration{value: val, isSet: true}
}

func (v NullableModelUserConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelUserConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


