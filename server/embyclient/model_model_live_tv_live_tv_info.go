/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"encoding/json"
)

// checks if the ModelLiveTvLiveTvInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelLiveTvLiveTvInfo{}

// ModelLiveTvLiveTvInfo struct for ModelLiveTvLiveTvInfo
type ModelLiveTvLiveTvInfo struct {
	IsEnabled *bool `json:"IsEnabled,omitempty"`
	EnabledUsers []string `json:"EnabledUsers,omitempty"`
}

// NewModelLiveTvLiveTvInfo instantiates a new ModelLiveTvLiveTvInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelLiveTvLiveTvInfo() *ModelLiveTvLiveTvInfo {
	this := ModelLiveTvLiveTvInfo{}
	return &this
}

// NewModelLiveTvLiveTvInfoWithDefaults instantiates a new ModelLiveTvLiveTvInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelLiveTvLiveTvInfoWithDefaults() *ModelLiveTvLiveTvInfo {
	this := ModelLiveTvLiveTvInfo{}
	return &this
}

// GetIsEnabled returns the IsEnabled field value if set, zero value otherwise.
func (o *ModelLiveTvLiveTvInfo) GetIsEnabled() bool {
	if o == nil || IsNil(o.IsEnabled) {
		var ret bool
		return ret
	}
	return *o.IsEnabled
}

// GetIsEnabledOk returns a tuple with the IsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelLiveTvLiveTvInfo) GetIsEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsEnabled) {
		return nil, false
	}
	return o.IsEnabled, true
}

// HasIsEnabled returns a boolean if a field has been set.
func (o *ModelLiveTvLiveTvInfo) HasIsEnabled() bool {
	if o != nil && !IsNil(o.IsEnabled) {
		return true
	}

	return false
}

// SetIsEnabled gets a reference to the given bool and assigns it to the IsEnabled field.
func (o *ModelLiveTvLiveTvInfo) SetIsEnabled(v bool) {
	o.IsEnabled = &v
}

// GetEnabledUsers returns the EnabledUsers field value if set, zero value otherwise.
func (o *ModelLiveTvLiveTvInfo) GetEnabledUsers() []string {
	if o == nil || IsNil(o.EnabledUsers) {
		var ret []string
		return ret
	}
	return o.EnabledUsers
}

// GetEnabledUsersOk returns a tuple with the EnabledUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelLiveTvLiveTvInfo) GetEnabledUsersOk() ([]string, bool) {
	if o == nil || IsNil(o.EnabledUsers) {
		return nil, false
	}
	return o.EnabledUsers, true
}

// HasEnabledUsers returns a boolean if a field has been set.
func (o *ModelLiveTvLiveTvInfo) HasEnabledUsers() bool {
	if o != nil && !IsNil(o.EnabledUsers) {
		return true
	}

	return false
}

// SetEnabledUsers gets a reference to the given []string and assigns it to the EnabledUsers field.
func (o *ModelLiveTvLiveTvInfo) SetEnabledUsers(v []string) {
	o.EnabledUsers = v
}

func (o ModelLiveTvLiveTvInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelLiveTvLiveTvInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IsEnabled) {
		toSerialize["IsEnabled"] = o.IsEnabled
	}
	if !IsNil(o.EnabledUsers) {
		toSerialize["EnabledUsers"] = o.EnabledUsers
	}
	return toSerialize, nil
}

type NullableModelLiveTvLiveTvInfo struct {
	value *ModelLiveTvLiveTvInfo
	isSet bool
}

func (v NullableModelLiveTvLiveTvInfo) Get() *ModelLiveTvLiveTvInfo {
	return v.value
}

func (v *NullableModelLiveTvLiveTvInfo) Set(val *ModelLiveTvLiveTvInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableModelLiveTvLiveTvInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableModelLiveTvLiveTvInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelLiveTvLiveTvInfo(val *ModelLiveTvLiveTvInfo) *NullableModelLiveTvLiveTvInfo {
	return &NullableModelLiveTvLiveTvInfo{value: val, isSet: true}
}

func (v NullableModelLiveTvLiveTvInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelLiveTvLiveTvInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


