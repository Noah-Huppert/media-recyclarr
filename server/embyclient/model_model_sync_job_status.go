/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"encoding/json"
	"fmt"
)

// ModelSyncJobStatus the model 'ModelSyncJobStatus'
type ModelSyncJobStatus string

// List of SyncJobStatus
const (
	MODELSYNCJOBSTATUS_QUEUED ModelSyncJobStatus = "Queued"
	MODELSYNCJOBSTATUS_CONVERTING ModelSyncJobStatus = "Converting"
	MODELSYNCJOBSTATUS_READY_TO_TRANSFER ModelSyncJobStatus = "ReadyToTransfer"
	MODELSYNCJOBSTATUS_TRANSFERRING ModelSyncJobStatus = "Transferring"
	MODELSYNCJOBSTATUS_COMPLETED ModelSyncJobStatus = "Completed"
	MODELSYNCJOBSTATUS_COMPLETED_WITH_ERROR ModelSyncJobStatus = "CompletedWithError"
	MODELSYNCJOBSTATUS_FAILED ModelSyncJobStatus = "Failed"
)

// All allowed values of ModelSyncJobStatus enum
var AllowedModelSyncJobStatusEnumValues = []ModelSyncJobStatus{
	"Queued",
	"Converting",
	"ReadyToTransfer",
	"Transferring",
	"Completed",
	"CompletedWithError",
	"Failed",
}

func (v *ModelSyncJobStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ModelSyncJobStatus(value)
	for _, existing := range AllowedModelSyncJobStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ModelSyncJobStatus", value)
}

// NewModelSyncJobStatusFromValue returns a pointer to a valid ModelSyncJobStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewModelSyncJobStatusFromValue(v string) (*ModelSyncJobStatus, error) {
	ev := ModelSyncJobStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ModelSyncJobStatus: valid values are %v", v, AllowedModelSyncJobStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ModelSyncJobStatus) IsValid() bool {
	for _, existing := range AllowedModelSyncJobStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SyncJobStatus value
func (v ModelSyncJobStatus) Ptr() *ModelSyncJobStatus {
	return &v
}

type NullableModelSyncJobStatus struct {
	value *ModelSyncJobStatus
	isSet bool
}

func (v NullableModelSyncJobStatus) Get() *ModelSyncJobStatus {
	return v.value
}

func (v *NullableModelSyncJobStatus) Set(val *ModelSyncJobStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableModelSyncJobStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableModelSyncJobStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelSyncJobStatus(val *ModelSyncJobStatus) *NullableModelSyncJobStatus {
	return &NullableModelSyncJobStatus{value: val, isSet: true}
}

func (v NullableModelSyncJobStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelSyncJobStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

