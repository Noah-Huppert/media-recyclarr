/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"encoding/json"
	"fmt"
)

// ModelEnumsUICommandType the model 'ModelEnumsUICommandType'
type ModelEnumsUICommandType string

// List of Enums.UICommandType
const (
	MODELENUMSUICOMMANDTYPE_CUSTOM ModelEnumsUICommandType = "Custom"
	MODELENUMSUICOMMANDTYPE_WIZARD_CANCEL ModelEnumsUICommandType = "WizardCancel"
	MODELENUMSUICOMMANDTYPE_WIZARD_BACK ModelEnumsUICommandType = "WizardBack"
	MODELENUMSUICOMMANDTYPE_WIZARD_NEXT ModelEnumsUICommandType = "WizardNext"
	MODELENUMSUICOMMANDTYPE_WIZARD_FINISH ModelEnumsUICommandType = "WizardFinish"
	MODELENUMSUICOMMANDTYPE_DIALOG_CANCEL ModelEnumsUICommandType = "DialogCancel"
	MODELENUMSUICOMMANDTYPE_DIALOG_OK ModelEnumsUICommandType = "DialogOk"
	MODELENUMSUICOMMANDTYPE_PAGE_SAVE ModelEnumsUICommandType = "PageSave"
	MODELENUMSUICOMMANDTYPE_PAGE_BACK ModelEnumsUICommandType = "PageBack"
	MODELENUMSUICOMMANDTYPE_WIZARD_BUTTON1 ModelEnumsUICommandType = "WizardButton1"
	MODELENUMSUICOMMANDTYPE_WIZARD_BUTTON2 ModelEnumsUICommandType = "WizardButton2"
	MODELENUMSUICOMMANDTYPE_WIZARD_BUTTON3 ModelEnumsUICommandType = "WizardButton3"
)

// All allowed values of ModelEnumsUICommandType enum
var AllowedModelEnumsUICommandTypeEnumValues = []ModelEnumsUICommandType{
	"Custom",
	"WizardCancel",
	"WizardBack",
	"WizardNext",
	"WizardFinish",
	"DialogCancel",
	"DialogOk",
	"PageSave",
	"PageBack",
	"WizardButton1",
	"WizardButton2",
	"WizardButton3",
}

func (v *ModelEnumsUICommandType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ModelEnumsUICommandType(value)
	for _, existing := range AllowedModelEnumsUICommandTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ModelEnumsUICommandType", value)
}

// NewModelEnumsUICommandTypeFromValue returns a pointer to a valid ModelEnumsUICommandType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewModelEnumsUICommandTypeFromValue(v string) (*ModelEnumsUICommandType, error) {
	ev := ModelEnumsUICommandType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ModelEnumsUICommandType: valid values are %v", v, AllowedModelEnumsUICommandTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ModelEnumsUICommandType) IsValid() bool {
	for _, existing := range AllowedModelEnumsUICommandTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enums.UICommandType value
func (v ModelEnumsUICommandType) Ptr() *ModelEnumsUICommandType {
	return &v
}

type NullableModelEnumsUICommandType struct {
	value *ModelEnumsUICommandType
	isSet bool
}

func (v NullableModelEnumsUICommandType) Get() *ModelEnumsUICommandType {
	return v.value
}

func (v *NullableModelEnumsUICommandType) Set(val *ModelEnumsUICommandType) {
	v.value = val
	v.isSet = true
}

func (v NullableModelEnumsUICommandType) IsSet() bool {
	return v.isSet
}

func (v *NullableModelEnumsUICommandType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelEnumsUICommandType(val *ModelEnumsUICommandType) *NullableModelEnumsUICommandType {
	return &NullableModelEnumsUICommandType{value: val, isSet: true}
}

func (v NullableModelEnumsUICommandType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelEnumsUICommandType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

