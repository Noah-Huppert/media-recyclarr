/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"encoding/json"
)

// checks if the ModelLibraryLibraryOptionInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelLibraryLibraryOptionInfo{}

// ModelLibraryLibraryOptionInfo struct for ModelLibraryLibraryOptionInfo
type ModelLibraryLibraryOptionInfo struct {
	Name *string `json:"Name,omitempty"`
	SetupUrl *string `json:"SetupUrl,omitempty"`
	DefaultEnabled *bool `json:"DefaultEnabled,omitempty"`
	Features []ModelMetadataFeatures `json:"Features,omitempty"`
}

// NewModelLibraryLibraryOptionInfo instantiates a new ModelLibraryLibraryOptionInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelLibraryLibraryOptionInfo() *ModelLibraryLibraryOptionInfo {
	this := ModelLibraryLibraryOptionInfo{}
	return &this
}

// NewModelLibraryLibraryOptionInfoWithDefaults instantiates a new ModelLibraryLibraryOptionInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelLibraryLibraryOptionInfoWithDefaults() *ModelLibraryLibraryOptionInfo {
	this := ModelLibraryLibraryOptionInfo{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ModelLibraryLibraryOptionInfo) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelLibraryLibraryOptionInfo) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ModelLibraryLibraryOptionInfo) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ModelLibraryLibraryOptionInfo) SetName(v string) {
	o.Name = &v
}

// GetSetupUrl returns the SetupUrl field value if set, zero value otherwise.
func (o *ModelLibraryLibraryOptionInfo) GetSetupUrl() string {
	if o == nil || IsNil(o.SetupUrl) {
		var ret string
		return ret
	}
	return *o.SetupUrl
}

// GetSetupUrlOk returns a tuple with the SetupUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelLibraryLibraryOptionInfo) GetSetupUrlOk() (*string, bool) {
	if o == nil || IsNil(o.SetupUrl) {
		return nil, false
	}
	return o.SetupUrl, true
}

// HasSetupUrl returns a boolean if a field has been set.
func (o *ModelLibraryLibraryOptionInfo) HasSetupUrl() bool {
	if o != nil && !IsNil(o.SetupUrl) {
		return true
	}

	return false
}

// SetSetupUrl gets a reference to the given string and assigns it to the SetupUrl field.
func (o *ModelLibraryLibraryOptionInfo) SetSetupUrl(v string) {
	o.SetupUrl = &v
}

// GetDefaultEnabled returns the DefaultEnabled field value if set, zero value otherwise.
func (o *ModelLibraryLibraryOptionInfo) GetDefaultEnabled() bool {
	if o == nil || IsNil(o.DefaultEnabled) {
		var ret bool
		return ret
	}
	return *o.DefaultEnabled
}

// GetDefaultEnabledOk returns a tuple with the DefaultEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelLibraryLibraryOptionInfo) GetDefaultEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.DefaultEnabled) {
		return nil, false
	}
	return o.DefaultEnabled, true
}

// HasDefaultEnabled returns a boolean if a field has been set.
func (o *ModelLibraryLibraryOptionInfo) HasDefaultEnabled() bool {
	if o != nil && !IsNil(o.DefaultEnabled) {
		return true
	}

	return false
}

// SetDefaultEnabled gets a reference to the given bool and assigns it to the DefaultEnabled field.
func (o *ModelLibraryLibraryOptionInfo) SetDefaultEnabled(v bool) {
	o.DefaultEnabled = &v
}

// GetFeatures returns the Features field value if set, zero value otherwise.
func (o *ModelLibraryLibraryOptionInfo) GetFeatures() []ModelMetadataFeatures {
	if o == nil || IsNil(o.Features) {
		var ret []ModelMetadataFeatures
		return ret
	}
	return o.Features
}

// GetFeaturesOk returns a tuple with the Features field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelLibraryLibraryOptionInfo) GetFeaturesOk() ([]ModelMetadataFeatures, bool) {
	if o == nil || IsNil(o.Features) {
		return nil, false
	}
	return o.Features, true
}

// HasFeatures returns a boolean if a field has been set.
func (o *ModelLibraryLibraryOptionInfo) HasFeatures() bool {
	if o != nil && !IsNil(o.Features) {
		return true
	}

	return false
}

// SetFeatures gets a reference to the given []ModelMetadataFeatures and assigns it to the Features field.
func (o *ModelLibraryLibraryOptionInfo) SetFeatures(v []ModelMetadataFeatures) {
	o.Features = v
}

func (o ModelLibraryLibraryOptionInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelLibraryLibraryOptionInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if !IsNil(o.SetupUrl) {
		toSerialize["SetupUrl"] = o.SetupUrl
	}
	if !IsNil(o.DefaultEnabled) {
		toSerialize["DefaultEnabled"] = o.DefaultEnabled
	}
	if !IsNil(o.Features) {
		toSerialize["Features"] = o.Features
	}
	return toSerialize, nil
}

type NullableModelLibraryLibraryOptionInfo struct {
	value *ModelLibraryLibraryOptionInfo
	isSet bool
}

func (v NullableModelLibraryLibraryOptionInfo) Get() *ModelLibraryLibraryOptionInfo {
	return v.value
}

func (v *NullableModelLibraryLibraryOptionInfo) Set(val *ModelLibraryLibraryOptionInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableModelLibraryLibraryOptionInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableModelLibraryLibraryOptionInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelLibraryLibraryOptionInfo(val *ModelLibraryLibraryOptionInfo) *NullableModelLibraryLibraryOptionInfo {
	return &NullableModelLibraryLibraryOptionInfo{value: val, isSet: true}
}

func (v NullableModelLibraryLibraryOptionInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelLibraryLibraryOptionInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


