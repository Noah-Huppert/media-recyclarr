/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"encoding/json"
	"fmt"
)

// ModelImageType the model 'ModelImageType'
type ModelImageType string

// List of ImageType
const (
	MODELIMAGETYPE_PRIMARY ModelImageType = "Primary"
	MODELIMAGETYPE_ART ModelImageType = "Art"
	MODELIMAGETYPE_BACKDROP ModelImageType = "Backdrop"
	MODELIMAGETYPE_BANNER ModelImageType = "Banner"
	MODELIMAGETYPE_LOGO ModelImageType = "Logo"
	MODELIMAGETYPE_THUMB ModelImageType = "Thumb"
	MODELIMAGETYPE_DISC ModelImageType = "Disc"
	MODELIMAGETYPE_BOX ModelImageType = "Box"
	MODELIMAGETYPE_SCREENSHOT ModelImageType = "Screenshot"
	MODELIMAGETYPE_MENU ModelImageType = "Menu"
	MODELIMAGETYPE_CHAPTER ModelImageType = "Chapter"
	MODELIMAGETYPE_BOX_REAR ModelImageType = "BoxRear"
	MODELIMAGETYPE_THUMBNAIL ModelImageType = "Thumbnail"
	MODELIMAGETYPE_LOGO_LIGHT ModelImageType = "LogoLight"
	MODELIMAGETYPE_LOGO_LIGHT_COLOR ModelImageType = "LogoLightColor"
)

// All allowed values of ModelImageType enum
var AllowedModelImageTypeEnumValues = []ModelImageType{
	"Primary",
	"Art",
	"Backdrop",
	"Banner",
	"Logo",
	"Thumb",
	"Disc",
	"Box",
	"Screenshot",
	"Menu",
	"Chapter",
	"BoxRear",
	"Thumbnail",
	"LogoLight",
	"LogoLightColor",
}

func (v *ModelImageType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ModelImageType(value)
	for _, existing := range AllowedModelImageTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ModelImageType", value)
}

// NewModelImageTypeFromValue returns a pointer to a valid ModelImageType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewModelImageTypeFromValue(v string) (*ModelImageType, error) {
	ev := ModelImageType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ModelImageType: valid values are %v", v, AllowedModelImageTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ModelImageType) IsValid() bool {
	for _, existing := range AllowedModelImageTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ImageType value
func (v ModelImageType) Ptr() *ModelImageType {
	return &v
}

type NullableModelImageType struct {
	value *ModelImageType
	isSet bool
}

func (v NullableModelImageType) Get() *ModelImageType {
	return v.value
}

func (v *NullableModelImageType) Set(val *ModelImageType) {
	v.value = val
	v.isSet = true
}

func (v NullableModelImageType) IsSet() bool {
	return v.isSet
}

func (v *NullableModelImageType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelImageType(val *ModelImageType) *NullableModelImageType {
	return &NullableModelImageType{value: val, isSet: true}
}

func (v NullableModelImageType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelImageType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

