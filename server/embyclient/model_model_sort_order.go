/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"encoding/json"
	"fmt"
)

// ModelSortOrder the model 'ModelSortOrder'
type ModelSortOrder string

// List of SortOrder
const (
	MODELSORTORDER_ASCENDING ModelSortOrder = "Ascending"
	MODELSORTORDER_DESCENDING ModelSortOrder = "Descending"
)

// All allowed values of ModelSortOrder enum
var AllowedModelSortOrderEnumValues = []ModelSortOrder{
	"Ascending",
	"Descending",
}

func (v *ModelSortOrder) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ModelSortOrder(value)
	for _, existing := range AllowedModelSortOrderEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ModelSortOrder", value)
}

// NewModelSortOrderFromValue returns a pointer to a valid ModelSortOrder
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewModelSortOrderFromValue(v string) (*ModelSortOrder, error) {
	ev := ModelSortOrder(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ModelSortOrder: valid values are %v", v, AllowedModelSortOrderEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ModelSortOrder) IsValid() bool {
	for _, existing := range AllowedModelSortOrderEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SortOrder value
func (v ModelSortOrder) Ptr() *ModelSortOrder {
	return &v
}

type NullableModelSortOrder struct {
	value *ModelSortOrder
	isSet bool
}

func (v NullableModelSortOrder) Get() *ModelSortOrder {
	return v.value
}

func (v *NullableModelSortOrder) Set(val *ModelSortOrder) {
	v.value = val
	v.isSet = true
}

func (v NullableModelSortOrder) IsSet() bool {
	return v.isSet
}

func (v *NullableModelSortOrder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelSortOrder(val *ModelSortOrder) *NullableModelSortOrder {
	return &NullableModelSortOrder{value: val, isSet: true}
}

func (v NullableModelSortOrder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelSortOrder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

