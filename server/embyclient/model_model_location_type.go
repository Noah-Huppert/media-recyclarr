/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"encoding/json"
	"fmt"
)

// ModelLocationType the model 'ModelLocationType'
type ModelLocationType string

// List of LocationType
const (
	MODELLOCATIONTYPE_FILE_SYSTEM ModelLocationType = "FileSystem"
	MODELLOCATIONTYPE_VIRTUAL ModelLocationType = "Virtual"
)

// All allowed values of ModelLocationType enum
var AllowedModelLocationTypeEnumValues = []ModelLocationType{
	"FileSystem",
	"Virtual",
}

func (v *ModelLocationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ModelLocationType(value)
	for _, existing := range AllowedModelLocationTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ModelLocationType", value)
}

// NewModelLocationTypeFromValue returns a pointer to a valid ModelLocationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewModelLocationTypeFromValue(v string) (*ModelLocationType, error) {
	ev := ModelLocationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ModelLocationType: valid values are %v", v, AllowedModelLocationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ModelLocationType) IsValid() bool {
	for _, existing := range AllowedModelLocationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LocationType value
func (v ModelLocationType) Ptr() *ModelLocationType {
	return &v
}

type NullableModelLocationType struct {
	value *ModelLocationType
	isSet bool
}

func (v NullableModelLocationType) Get() *ModelLocationType {
	return v.value
}

func (v *NullableModelLocationType) Set(val *ModelLocationType) {
	v.value = val
	v.isSet = true
}

func (v NullableModelLocationType) IsSet() bool {
	return v.isSet
}

func (v *NullableModelLocationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelLocationType(val *ModelLocationType) *NullableModelLocationType {
	return &NullableModelLocationType{value: val, isSet: true}
}

func (v NullableModelLocationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelLocationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

