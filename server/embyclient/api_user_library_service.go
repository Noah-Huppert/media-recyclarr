/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// UserLibraryServiceAPIService UserLibraryServiceAPI service
type UserLibraryServiceAPIService service

type UserLibraryServiceAPIDeleteUsersByUseridFavoriteitemsByIdRequest struct {
	ctx context.Context
	ApiService *UserLibraryServiceAPIService
	userId string
	id string
}

func (r UserLibraryServiceAPIDeleteUsersByUseridFavoriteitemsByIdRequest) Execute() (*ModelUserItemDataDto, *http.Response, error) {
	return r.ApiService.DeleteUsersByUseridFavoriteitemsByIdExecute(r)
}

/*
DeleteUsersByUseridFavoriteitemsById Unmarks an item as a favorite

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId User Id
 @param id Item Id
 @return UserLibraryServiceAPIDeleteUsersByUseridFavoriteitemsByIdRequest
*/
func (a *UserLibraryServiceAPIService) DeleteUsersByUseridFavoriteitemsById(ctx context.Context, userId string, id string) UserLibraryServiceAPIDeleteUsersByUseridFavoriteitemsByIdRequest {
	return UserLibraryServiceAPIDeleteUsersByUseridFavoriteitemsByIdRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		id: id,
	}
}

// Execute executes the request
//  @return ModelUserItemDataDto
func (a *UserLibraryServiceAPIService) DeleteUsersByUseridFavoriteitemsByIdExecute(r UserLibraryServiceAPIDeleteUsersByUseridFavoriteitemsByIdRequest) (*ModelUserItemDataDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ModelUserItemDataDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserLibraryServiceAPIService.DeleteUsersByUseridFavoriteitemsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Users/{UserId}/FavoriteItems/{Id}"
	localVarPath = strings.Replace(localVarPath, "{"+"UserId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type UserLibraryServiceAPIDeleteUsersByUseridItemsByIdRatingRequest struct {
	ctx context.Context
	ApiService *UserLibraryServiceAPIService
	userId string
	id string
}

func (r UserLibraryServiceAPIDeleteUsersByUseridItemsByIdRatingRequest) Execute() (*ModelUserItemDataDto, *http.Response, error) {
	return r.ApiService.DeleteUsersByUseridItemsByIdRatingExecute(r)
}

/*
DeleteUsersByUseridItemsByIdRating Deletes a user's saved personal rating for an item

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId User Id
 @param id Item Id
 @return UserLibraryServiceAPIDeleteUsersByUseridItemsByIdRatingRequest
*/
func (a *UserLibraryServiceAPIService) DeleteUsersByUseridItemsByIdRating(ctx context.Context, userId string, id string) UserLibraryServiceAPIDeleteUsersByUseridItemsByIdRatingRequest {
	return UserLibraryServiceAPIDeleteUsersByUseridItemsByIdRatingRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		id: id,
	}
}

// Execute executes the request
//  @return ModelUserItemDataDto
func (a *UserLibraryServiceAPIService) DeleteUsersByUseridItemsByIdRatingExecute(r UserLibraryServiceAPIDeleteUsersByUseridItemsByIdRatingRequest) (*ModelUserItemDataDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ModelUserItemDataDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserLibraryServiceAPIService.DeleteUsersByUseridItemsByIdRating")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Users/{UserId}/Items/{Id}/Rating"
	localVarPath = strings.Replace(localVarPath, "{"+"UserId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type UserLibraryServiceAPIGetLivetvProgramsByIdRequest struct {
	ctx context.Context
	ApiService *UserLibraryServiceAPIService
	id string
}

func (r UserLibraryServiceAPIGetLivetvProgramsByIdRequest) Execute() (*ModelBaseItemDto, *http.Response, error) {
	return r.ApiService.GetLivetvProgramsByIdExecute(r)
}

/*
GetLivetvProgramsById Gets a live tv program

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Item Id
 @return UserLibraryServiceAPIGetLivetvProgramsByIdRequest
*/
func (a *UserLibraryServiceAPIService) GetLivetvProgramsById(ctx context.Context, id string) UserLibraryServiceAPIGetLivetvProgramsByIdRequest {
	return UserLibraryServiceAPIGetLivetvProgramsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ModelBaseItemDto
func (a *UserLibraryServiceAPIService) GetLivetvProgramsByIdExecute(r UserLibraryServiceAPIGetLivetvProgramsByIdRequest) (*ModelBaseItemDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ModelBaseItemDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserLibraryServiceAPIService.GetLivetvProgramsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/LiveTv/Programs/{Id}"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type UserLibraryServiceAPIGetUsersByUseridItemsByIdRequest struct {
	ctx context.Context
	ApiService *UserLibraryServiceAPIService
	userId string
	id string
}

func (r UserLibraryServiceAPIGetUsersByUseridItemsByIdRequest) Execute() (*ModelBaseItemDto, *http.Response, error) {
	return r.ApiService.GetUsersByUseridItemsByIdExecute(r)
}

/*
GetUsersByUseridItemsById Gets an item from a user's library

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId User Id
 @param id Item Id
 @return UserLibraryServiceAPIGetUsersByUseridItemsByIdRequest
*/
func (a *UserLibraryServiceAPIService) GetUsersByUseridItemsById(ctx context.Context, userId string, id string) UserLibraryServiceAPIGetUsersByUseridItemsByIdRequest {
	return UserLibraryServiceAPIGetUsersByUseridItemsByIdRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		id: id,
	}
}

// Execute executes the request
//  @return ModelBaseItemDto
func (a *UserLibraryServiceAPIService) GetUsersByUseridItemsByIdExecute(r UserLibraryServiceAPIGetUsersByUseridItemsByIdRequest) (*ModelBaseItemDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ModelBaseItemDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserLibraryServiceAPIService.GetUsersByUseridItemsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Users/{UserId}/Items/{Id}"
	localVarPath = strings.Replace(localVarPath, "{"+"UserId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type UserLibraryServiceAPIGetUsersByUseridItemsByIdIntrosRequest struct {
	ctx context.Context
	ApiService *UserLibraryServiceAPIService
	userId string
	id string
	fields *string
	enableImages *bool
	imageTypeLimit *int32
	enableImageTypes *string
	enableUserData *bool
}

// Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls
func (r UserLibraryServiceAPIGetUsersByUseridItemsByIdIntrosRequest) Fields(fields string) UserLibraryServiceAPIGetUsersByUseridItemsByIdIntrosRequest {
	r.fields = &fields
	return r
}

// Optional, include image information in output
func (r UserLibraryServiceAPIGetUsersByUseridItemsByIdIntrosRequest) EnableImages(enableImages bool) UserLibraryServiceAPIGetUsersByUseridItemsByIdIntrosRequest {
	r.enableImages = &enableImages
	return r
}

// Optional, the max number of images to return, per image type
func (r UserLibraryServiceAPIGetUsersByUseridItemsByIdIntrosRequest) ImageTypeLimit(imageTypeLimit int32) UserLibraryServiceAPIGetUsersByUseridItemsByIdIntrosRequest {
	r.imageTypeLimit = &imageTypeLimit
	return r
}

// Optional. The image types to include in the output.
func (r UserLibraryServiceAPIGetUsersByUseridItemsByIdIntrosRequest) EnableImageTypes(enableImageTypes string) UserLibraryServiceAPIGetUsersByUseridItemsByIdIntrosRequest {
	r.enableImageTypes = &enableImageTypes
	return r
}

// Optional, include user data
func (r UserLibraryServiceAPIGetUsersByUseridItemsByIdIntrosRequest) EnableUserData(enableUserData bool) UserLibraryServiceAPIGetUsersByUseridItemsByIdIntrosRequest {
	r.enableUserData = &enableUserData
	return r
}

func (r UserLibraryServiceAPIGetUsersByUseridItemsByIdIntrosRequest) Execute() (*ModelQueryResultBaseItemDto, *http.Response, error) {
	return r.ApiService.GetUsersByUseridItemsByIdIntrosExecute(r)
}

/*
GetUsersByUseridItemsByIdIntros Gets intros to play before the main media item plays

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId User Id
 @param id Item Id
 @return UserLibraryServiceAPIGetUsersByUseridItemsByIdIntrosRequest
*/
func (a *UserLibraryServiceAPIService) GetUsersByUseridItemsByIdIntros(ctx context.Context, userId string, id string) UserLibraryServiceAPIGetUsersByUseridItemsByIdIntrosRequest {
	return UserLibraryServiceAPIGetUsersByUseridItemsByIdIntrosRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		id: id,
	}
}

// Execute executes the request
//  @return ModelQueryResultBaseItemDto
func (a *UserLibraryServiceAPIService) GetUsersByUseridItemsByIdIntrosExecute(r UserLibraryServiceAPIGetUsersByUseridItemsByIdIntrosRequest) (*ModelQueryResultBaseItemDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ModelQueryResultBaseItemDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserLibraryServiceAPIService.GetUsersByUseridItemsByIdIntros")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Users/{UserId}/Items/{Id}/Intros"
	localVarPath = strings.Replace(localVarPath, "{"+"UserId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Fields", r.fields, "")
	}
	if r.enableImages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImages", r.enableImages, "")
	}
	if r.imageTypeLimit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ImageTypeLimit", r.imageTypeLimit, "")
	}
	if r.enableImageTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImageTypes", r.enableImageTypes, "")
	}
	if r.enableUserData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableUserData", r.enableUserData, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type UserLibraryServiceAPIGetUsersByUseridItemsByIdLocaltrailersRequest struct {
	ctx context.Context
	ApiService *UserLibraryServiceAPIService
	userId string
	id string
	fields *string
	enableImages *bool
	imageTypeLimit *int32
	enableImageTypes *string
	enableUserData *bool
}

// Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls
func (r UserLibraryServiceAPIGetUsersByUseridItemsByIdLocaltrailersRequest) Fields(fields string) UserLibraryServiceAPIGetUsersByUseridItemsByIdLocaltrailersRequest {
	r.fields = &fields
	return r
}

// Optional, include image information in output
func (r UserLibraryServiceAPIGetUsersByUseridItemsByIdLocaltrailersRequest) EnableImages(enableImages bool) UserLibraryServiceAPIGetUsersByUseridItemsByIdLocaltrailersRequest {
	r.enableImages = &enableImages
	return r
}

// Optional, the max number of images to return, per image type
func (r UserLibraryServiceAPIGetUsersByUseridItemsByIdLocaltrailersRequest) ImageTypeLimit(imageTypeLimit int32) UserLibraryServiceAPIGetUsersByUseridItemsByIdLocaltrailersRequest {
	r.imageTypeLimit = &imageTypeLimit
	return r
}

// Optional. The image types to include in the output.
func (r UserLibraryServiceAPIGetUsersByUseridItemsByIdLocaltrailersRequest) EnableImageTypes(enableImageTypes string) UserLibraryServiceAPIGetUsersByUseridItemsByIdLocaltrailersRequest {
	r.enableImageTypes = &enableImageTypes
	return r
}

// Optional, include user data
func (r UserLibraryServiceAPIGetUsersByUseridItemsByIdLocaltrailersRequest) EnableUserData(enableUserData bool) UserLibraryServiceAPIGetUsersByUseridItemsByIdLocaltrailersRequest {
	r.enableUserData = &enableUserData
	return r
}

func (r UserLibraryServiceAPIGetUsersByUseridItemsByIdLocaltrailersRequest) Execute() ([]ModelBaseItemDto, *http.Response, error) {
	return r.ApiService.GetUsersByUseridItemsByIdLocaltrailersExecute(r)
}

/*
GetUsersByUseridItemsByIdLocaltrailers Gets local trailers for an item

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId User Id
 @param id Item Id
 @return UserLibraryServiceAPIGetUsersByUseridItemsByIdLocaltrailersRequest
*/
func (a *UserLibraryServiceAPIService) GetUsersByUseridItemsByIdLocaltrailers(ctx context.Context, userId string, id string) UserLibraryServiceAPIGetUsersByUseridItemsByIdLocaltrailersRequest {
	return UserLibraryServiceAPIGetUsersByUseridItemsByIdLocaltrailersRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		id: id,
	}
}

// Execute executes the request
//  @return []ModelBaseItemDto
func (a *UserLibraryServiceAPIService) GetUsersByUseridItemsByIdLocaltrailersExecute(r UserLibraryServiceAPIGetUsersByUseridItemsByIdLocaltrailersRequest) ([]ModelBaseItemDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ModelBaseItemDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserLibraryServiceAPIService.GetUsersByUseridItemsByIdLocaltrailers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Users/{UserId}/Items/{Id}/LocalTrailers"
	localVarPath = strings.Replace(localVarPath, "{"+"UserId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Fields", r.fields, "")
	}
	if r.enableImages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImages", r.enableImages, "")
	}
	if r.imageTypeLimit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ImageTypeLimit", r.imageTypeLimit, "")
	}
	if r.enableImageTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImageTypes", r.enableImageTypes, "")
	}
	if r.enableUserData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableUserData", r.enableUserData, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type UserLibraryServiceAPIGetUsersByUseridItemsByIdSpecialfeaturesRequest struct {
	ctx context.Context
	ApiService *UserLibraryServiceAPIService
	userId string
	id string
	fields *string
	enableImages *bool
	imageTypeLimit *int32
	enableImageTypes *string
	enableUserData *bool
}

// Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls
func (r UserLibraryServiceAPIGetUsersByUseridItemsByIdSpecialfeaturesRequest) Fields(fields string) UserLibraryServiceAPIGetUsersByUseridItemsByIdSpecialfeaturesRequest {
	r.fields = &fields
	return r
}

// Optional, include image information in output
func (r UserLibraryServiceAPIGetUsersByUseridItemsByIdSpecialfeaturesRequest) EnableImages(enableImages bool) UserLibraryServiceAPIGetUsersByUseridItemsByIdSpecialfeaturesRequest {
	r.enableImages = &enableImages
	return r
}

// Optional, the max number of images to return, per image type
func (r UserLibraryServiceAPIGetUsersByUseridItemsByIdSpecialfeaturesRequest) ImageTypeLimit(imageTypeLimit int32) UserLibraryServiceAPIGetUsersByUseridItemsByIdSpecialfeaturesRequest {
	r.imageTypeLimit = &imageTypeLimit
	return r
}

// Optional. The image types to include in the output.
func (r UserLibraryServiceAPIGetUsersByUseridItemsByIdSpecialfeaturesRequest) EnableImageTypes(enableImageTypes string) UserLibraryServiceAPIGetUsersByUseridItemsByIdSpecialfeaturesRequest {
	r.enableImageTypes = &enableImageTypes
	return r
}

// Optional, include user data
func (r UserLibraryServiceAPIGetUsersByUseridItemsByIdSpecialfeaturesRequest) EnableUserData(enableUserData bool) UserLibraryServiceAPIGetUsersByUseridItemsByIdSpecialfeaturesRequest {
	r.enableUserData = &enableUserData
	return r
}

func (r UserLibraryServiceAPIGetUsersByUseridItemsByIdSpecialfeaturesRequest) Execute() ([]ModelBaseItemDto, *http.Response, error) {
	return r.ApiService.GetUsersByUseridItemsByIdSpecialfeaturesExecute(r)
}

/*
GetUsersByUseridItemsByIdSpecialfeatures Gets special features for an item

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId User Id
 @param id Movie Id
 @return UserLibraryServiceAPIGetUsersByUseridItemsByIdSpecialfeaturesRequest
*/
func (a *UserLibraryServiceAPIService) GetUsersByUseridItemsByIdSpecialfeatures(ctx context.Context, userId string, id string) UserLibraryServiceAPIGetUsersByUseridItemsByIdSpecialfeaturesRequest {
	return UserLibraryServiceAPIGetUsersByUseridItemsByIdSpecialfeaturesRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		id: id,
	}
}

// Execute executes the request
//  @return []ModelBaseItemDto
func (a *UserLibraryServiceAPIService) GetUsersByUseridItemsByIdSpecialfeaturesExecute(r UserLibraryServiceAPIGetUsersByUseridItemsByIdSpecialfeaturesRequest) ([]ModelBaseItemDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ModelBaseItemDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserLibraryServiceAPIService.GetUsersByUseridItemsByIdSpecialfeatures")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Users/{UserId}/Items/{Id}/SpecialFeatures"
	localVarPath = strings.Replace(localVarPath, "{"+"UserId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Fields", r.fields, "")
	}
	if r.enableImages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImages", r.enableImages, "")
	}
	if r.imageTypeLimit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ImageTypeLimit", r.imageTypeLimit, "")
	}
	if r.enableImageTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImageTypes", r.enableImageTypes, "")
	}
	if r.enableUserData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableUserData", r.enableUserData, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type UserLibraryServiceAPIGetUsersByUseridItemsLatestRequest struct {
	ctx context.Context
	ApiService *UserLibraryServiceAPIService
	userId string
	limit *int32
	parentId *string
	fields *string
	includeItemTypes *string
	mediaTypes *string
	isFolder *bool
	isPlayed *bool
	groupItems *bool
	enableImages *bool
	imageTypeLimit *int32
	enableImageTypes *string
	enableUserData *bool
}

// Limit
func (r UserLibraryServiceAPIGetUsersByUseridItemsLatestRequest) Limit(limit int32) UserLibraryServiceAPIGetUsersByUseridItemsLatestRequest {
	r.limit = &limit
	return r
}

// Specify this to localize the search to a specific item or folder. Omit to use the root
func (r UserLibraryServiceAPIGetUsersByUseridItemsLatestRequest) ParentId(parentId string) UserLibraryServiceAPIGetUsersByUseridItemsLatestRequest {
	r.parentId = &parentId
	return r
}

// Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, SortName, Studios, Taglines
func (r UserLibraryServiceAPIGetUsersByUseridItemsLatestRequest) Fields(fields string) UserLibraryServiceAPIGetUsersByUseridItemsLatestRequest {
	r.fields = &fields
	return r
}

// Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
func (r UserLibraryServiceAPIGetUsersByUseridItemsLatestRequest) IncludeItemTypes(includeItemTypes string) UserLibraryServiceAPIGetUsersByUseridItemsLatestRequest {
	r.includeItemTypes = &includeItemTypes
	return r
}

// Optional filter by MediaType. Allows multiple, comma delimited.
func (r UserLibraryServiceAPIGetUsersByUseridItemsLatestRequest) MediaTypes(mediaTypes string) UserLibraryServiceAPIGetUsersByUseridItemsLatestRequest {
	r.mediaTypes = &mediaTypes
	return r
}

// Filter by items that are folders, or not.
func (r UserLibraryServiceAPIGetUsersByUseridItemsLatestRequest) IsFolder(isFolder bool) UserLibraryServiceAPIGetUsersByUseridItemsLatestRequest {
	r.isFolder = &isFolder
	return r
}

// Filter by items that are played, or not.
func (r UserLibraryServiceAPIGetUsersByUseridItemsLatestRequest) IsPlayed(isPlayed bool) UserLibraryServiceAPIGetUsersByUseridItemsLatestRequest {
	r.isPlayed = &isPlayed
	return r
}

// Whether or not to group items into a parent container.
func (r UserLibraryServiceAPIGetUsersByUseridItemsLatestRequest) GroupItems(groupItems bool) UserLibraryServiceAPIGetUsersByUseridItemsLatestRequest {
	r.groupItems = &groupItems
	return r
}

// Optional, include image information in output
func (r UserLibraryServiceAPIGetUsersByUseridItemsLatestRequest) EnableImages(enableImages bool) UserLibraryServiceAPIGetUsersByUseridItemsLatestRequest {
	r.enableImages = &enableImages
	return r
}

// Optional, the max number of images to return, per image type
func (r UserLibraryServiceAPIGetUsersByUseridItemsLatestRequest) ImageTypeLimit(imageTypeLimit int32) UserLibraryServiceAPIGetUsersByUseridItemsLatestRequest {
	r.imageTypeLimit = &imageTypeLimit
	return r
}

// Optional. The image types to include in the output.
func (r UserLibraryServiceAPIGetUsersByUseridItemsLatestRequest) EnableImageTypes(enableImageTypes string) UserLibraryServiceAPIGetUsersByUseridItemsLatestRequest {
	r.enableImageTypes = &enableImageTypes
	return r
}

// Optional, include user data
func (r UserLibraryServiceAPIGetUsersByUseridItemsLatestRequest) EnableUserData(enableUserData bool) UserLibraryServiceAPIGetUsersByUseridItemsLatestRequest {
	r.enableUserData = &enableUserData
	return r
}

func (r UserLibraryServiceAPIGetUsersByUseridItemsLatestRequest) Execute() ([]ModelBaseItemDto, *http.Response, error) {
	return r.ApiService.GetUsersByUseridItemsLatestExecute(r)
}

/*
GetUsersByUseridItemsLatest Gets latest media

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId User Id
 @return UserLibraryServiceAPIGetUsersByUseridItemsLatestRequest
*/
func (a *UserLibraryServiceAPIService) GetUsersByUseridItemsLatest(ctx context.Context, userId string) UserLibraryServiceAPIGetUsersByUseridItemsLatestRequest {
	return UserLibraryServiceAPIGetUsersByUseridItemsLatestRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return []ModelBaseItemDto
func (a *UserLibraryServiceAPIService) GetUsersByUseridItemsLatestExecute(r UserLibraryServiceAPIGetUsersByUseridItemsLatestRequest) ([]ModelBaseItemDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ModelBaseItemDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserLibraryServiceAPIService.GetUsersByUseridItemsLatest")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Users/{UserId}/Items/Latest"
	localVarPath = strings.Replace(localVarPath, "{"+"UserId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Limit", r.limit, "")
	}
	if r.parentId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ParentId", r.parentId, "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Fields", r.fields, "")
	}
	if r.includeItemTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IncludeItemTypes", r.includeItemTypes, "")
	}
	if r.mediaTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MediaTypes", r.mediaTypes, "")
	}
	if r.isFolder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IsFolder", r.isFolder, "")
	}
	if r.isPlayed != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IsPlayed", r.isPlayed, "")
	}
	if r.groupItems != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "GroupItems", r.groupItems, "")
	}
	if r.enableImages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImages", r.enableImages, "")
	}
	if r.imageTypeLimit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ImageTypeLimit", r.imageTypeLimit, "")
	}
	if r.enableImageTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImageTypes", r.enableImageTypes, "")
	}
	if r.enableUserData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableUserData", r.enableUserData, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type UserLibraryServiceAPIGetUsersByUseridItemsRootRequest struct {
	ctx context.Context
	ApiService *UserLibraryServiceAPIService
	userId string
}

func (r UserLibraryServiceAPIGetUsersByUseridItemsRootRequest) Execute() (*ModelBaseItemDto, *http.Response, error) {
	return r.ApiService.GetUsersByUseridItemsRootExecute(r)
}

/*
GetUsersByUseridItemsRoot Gets the root folder from a user's library

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId User Id
 @return UserLibraryServiceAPIGetUsersByUseridItemsRootRequest
*/
func (a *UserLibraryServiceAPIService) GetUsersByUseridItemsRoot(ctx context.Context, userId string) UserLibraryServiceAPIGetUsersByUseridItemsRootRequest {
	return UserLibraryServiceAPIGetUsersByUseridItemsRootRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return ModelBaseItemDto
func (a *UserLibraryServiceAPIService) GetUsersByUseridItemsRootExecute(r UserLibraryServiceAPIGetUsersByUseridItemsRootRequest) (*ModelBaseItemDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ModelBaseItemDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserLibraryServiceAPIService.GetUsersByUseridItemsRoot")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Users/{UserId}/Items/Root"
	localVarPath = strings.Replace(localVarPath, "{"+"UserId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type UserLibraryServiceAPIGetVideosByIdAdditionalpartsRequest struct {
	ctx context.Context
	ApiService *UserLibraryServiceAPIService
	id string
	userId *string
	fields *string
	enableImages *bool
	imageTypeLimit *int32
	enableImageTypes *string
	enableUserData *bool
}

// Optional. Filter by user id, and attach user data
func (r UserLibraryServiceAPIGetVideosByIdAdditionalpartsRequest) UserId(userId string) UserLibraryServiceAPIGetVideosByIdAdditionalpartsRequest {
	r.userId = &userId
	return r
}

// Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls
func (r UserLibraryServiceAPIGetVideosByIdAdditionalpartsRequest) Fields(fields string) UserLibraryServiceAPIGetVideosByIdAdditionalpartsRequest {
	r.fields = &fields
	return r
}

// Optional, include image information in output
func (r UserLibraryServiceAPIGetVideosByIdAdditionalpartsRequest) EnableImages(enableImages bool) UserLibraryServiceAPIGetVideosByIdAdditionalpartsRequest {
	r.enableImages = &enableImages
	return r
}

// Optional, the max number of images to return, per image type
func (r UserLibraryServiceAPIGetVideosByIdAdditionalpartsRequest) ImageTypeLimit(imageTypeLimit int32) UserLibraryServiceAPIGetVideosByIdAdditionalpartsRequest {
	r.imageTypeLimit = &imageTypeLimit
	return r
}

// Optional. The image types to include in the output.
func (r UserLibraryServiceAPIGetVideosByIdAdditionalpartsRequest) EnableImageTypes(enableImageTypes string) UserLibraryServiceAPIGetVideosByIdAdditionalpartsRequest {
	r.enableImageTypes = &enableImageTypes
	return r
}

// Optional, include user data
func (r UserLibraryServiceAPIGetVideosByIdAdditionalpartsRequest) EnableUserData(enableUserData bool) UserLibraryServiceAPIGetVideosByIdAdditionalpartsRequest {
	r.enableUserData = &enableUserData
	return r
}

func (r UserLibraryServiceAPIGetVideosByIdAdditionalpartsRequest) Execute() (*ModelQueryResultBaseItemDto, *http.Response, error) {
	return r.ApiService.GetVideosByIdAdditionalpartsExecute(r)
}

/*
GetVideosByIdAdditionalparts Gets additional parts for a video.

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Item Id
 @return UserLibraryServiceAPIGetVideosByIdAdditionalpartsRequest
*/
func (a *UserLibraryServiceAPIService) GetVideosByIdAdditionalparts(ctx context.Context, id string) UserLibraryServiceAPIGetVideosByIdAdditionalpartsRequest {
	return UserLibraryServiceAPIGetVideosByIdAdditionalpartsRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ModelQueryResultBaseItemDto
func (a *UserLibraryServiceAPIService) GetVideosByIdAdditionalpartsExecute(r UserLibraryServiceAPIGetVideosByIdAdditionalpartsRequest) (*ModelQueryResultBaseItemDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ModelQueryResultBaseItemDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserLibraryServiceAPIService.GetVideosByIdAdditionalparts")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Videos/{Id}/AdditionalParts"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.userId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "UserId", r.userId, "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Fields", r.fields, "")
	}
	if r.enableImages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImages", r.enableImages, "")
	}
	if r.imageTypeLimit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ImageTypeLimit", r.imageTypeLimit, "")
	}
	if r.enableImageTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImageTypes", r.enableImageTypes, "")
	}
	if r.enableUserData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableUserData", r.enableUserData, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type UserLibraryServiceAPIPostItemsByIdMakeprivateRequest struct {
	ctx context.Context
	ApiService *UserLibraryServiceAPIService
	id string
}

func (r UserLibraryServiceAPIPostItemsByIdMakeprivateRequest) Execute() (*http.Response, error) {
	return r.ApiService.PostItemsByIdMakeprivateExecute(r)
}

/*
PostItemsByIdMakeprivate Makes an item private

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Item Id
 @return UserLibraryServiceAPIPostItemsByIdMakeprivateRequest
*/
func (a *UserLibraryServiceAPIService) PostItemsByIdMakeprivate(ctx context.Context, id string) UserLibraryServiceAPIPostItemsByIdMakeprivateRequest {
	return UserLibraryServiceAPIPostItemsByIdMakeprivateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *UserLibraryServiceAPIService) PostItemsByIdMakeprivateExecute(r UserLibraryServiceAPIPostItemsByIdMakeprivateRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserLibraryServiceAPIService.PostItemsByIdMakeprivate")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Items/{Id}/MakePrivate"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type UserLibraryServiceAPIPostItemsByIdMakepublicRequest struct {
	ctx context.Context
	ApiService *UserLibraryServiceAPIService
	id string
}

func (r UserLibraryServiceAPIPostItemsByIdMakepublicRequest) Execute() (*http.Response, error) {
	return r.ApiService.PostItemsByIdMakepublicExecute(r)
}

/*
PostItemsByIdMakepublic Makes an item public to all users

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Item Id
 @return UserLibraryServiceAPIPostItemsByIdMakepublicRequest
*/
func (a *UserLibraryServiceAPIService) PostItemsByIdMakepublic(ctx context.Context, id string) UserLibraryServiceAPIPostItemsByIdMakepublicRequest {
	return UserLibraryServiceAPIPostItemsByIdMakepublicRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *UserLibraryServiceAPIService) PostItemsByIdMakepublicExecute(r UserLibraryServiceAPIPostItemsByIdMakepublicRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserLibraryServiceAPIService.PostItemsByIdMakepublic")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Items/{Id}/MakePublic"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type UserLibraryServiceAPIPostUsersByUseridFavoriteitemsByIdRequest struct {
	ctx context.Context
	ApiService *UserLibraryServiceAPIService
	userId string
	id string
}

func (r UserLibraryServiceAPIPostUsersByUseridFavoriteitemsByIdRequest) Execute() (*ModelUserItemDataDto, *http.Response, error) {
	return r.ApiService.PostUsersByUseridFavoriteitemsByIdExecute(r)
}

/*
PostUsersByUseridFavoriteitemsById Marks an item as a favorite

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId User Id
 @param id Item Id
 @return UserLibraryServiceAPIPostUsersByUseridFavoriteitemsByIdRequest
*/
func (a *UserLibraryServiceAPIService) PostUsersByUseridFavoriteitemsById(ctx context.Context, userId string, id string) UserLibraryServiceAPIPostUsersByUseridFavoriteitemsByIdRequest {
	return UserLibraryServiceAPIPostUsersByUseridFavoriteitemsByIdRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		id: id,
	}
}

// Execute executes the request
//  @return ModelUserItemDataDto
func (a *UserLibraryServiceAPIService) PostUsersByUseridFavoriteitemsByIdExecute(r UserLibraryServiceAPIPostUsersByUseridFavoriteitemsByIdRequest) (*ModelUserItemDataDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ModelUserItemDataDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserLibraryServiceAPIService.PostUsersByUseridFavoriteitemsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Users/{UserId}/FavoriteItems/{Id}"
	localVarPath = strings.Replace(localVarPath, "{"+"UserId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type UserLibraryServiceAPIPostUsersByUseridFavoriteitemsByIdDeleteRequest struct {
	ctx context.Context
	ApiService *UserLibraryServiceAPIService
	userId string
	id string
}

func (r UserLibraryServiceAPIPostUsersByUseridFavoriteitemsByIdDeleteRequest) Execute() (*ModelUserItemDataDto, *http.Response, error) {
	return r.ApiService.PostUsersByUseridFavoriteitemsByIdDeleteExecute(r)
}

/*
PostUsersByUseridFavoriteitemsByIdDelete Unmarks an item as a favorite

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId User Id
 @param id Item Id
 @return UserLibraryServiceAPIPostUsersByUseridFavoriteitemsByIdDeleteRequest
*/
func (a *UserLibraryServiceAPIService) PostUsersByUseridFavoriteitemsByIdDelete(ctx context.Context, userId string, id string) UserLibraryServiceAPIPostUsersByUseridFavoriteitemsByIdDeleteRequest {
	return UserLibraryServiceAPIPostUsersByUseridFavoriteitemsByIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		id: id,
	}
}

// Execute executes the request
//  @return ModelUserItemDataDto
func (a *UserLibraryServiceAPIService) PostUsersByUseridFavoriteitemsByIdDeleteExecute(r UserLibraryServiceAPIPostUsersByUseridFavoriteitemsByIdDeleteRequest) (*ModelUserItemDataDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ModelUserItemDataDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserLibraryServiceAPIService.PostUsersByUseridFavoriteitemsByIdDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Users/{UserId}/FavoriteItems/{Id}/Delete"
	localVarPath = strings.Replace(localVarPath, "{"+"UserId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type UserLibraryServiceAPIPostUsersByUseridItemsByIdHidefromresumeRequest struct {
	ctx context.Context
	ApiService *UserLibraryServiceAPIService
	userId string
	id string
	hide *bool
}

// Whether the item should be hidden from reusme or not. true/false
func (r UserLibraryServiceAPIPostUsersByUseridItemsByIdHidefromresumeRequest) Hide(hide bool) UserLibraryServiceAPIPostUsersByUseridItemsByIdHidefromresumeRequest {
	r.hide = &hide
	return r
}

func (r UserLibraryServiceAPIPostUsersByUseridItemsByIdHidefromresumeRequest) Execute() (*ModelUserItemDataDto, *http.Response, error) {
	return r.ApiService.PostUsersByUseridItemsByIdHidefromresumeExecute(r)
}

/*
PostUsersByUseridItemsByIdHidefromresume Updates a user's hide from resume for an item

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId User Id
 @param id Item Id
 @return UserLibraryServiceAPIPostUsersByUseridItemsByIdHidefromresumeRequest
*/
func (a *UserLibraryServiceAPIService) PostUsersByUseridItemsByIdHidefromresume(ctx context.Context, userId string, id string) UserLibraryServiceAPIPostUsersByUseridItemsByIdHidefromresumeRequest {
	return UserLibraryServiceAPIPostUsersByUseridItemsByIdHidefromresumeRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		id: id,
	}
}

// Execute executes the request
//  @return ModelUserItemDataDto
func (a *UserLibraryServiceAPIService) PostUsersByUseridItemsByIdHidefromresumeExecute(r UserLibraryServiceAPIPostUsersByUseridItemsByIdHidefromresumeRequest) (*ModelUserItemDataDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ModelUserItemDataDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserLibraryServiceAPIService.PostUsersByUseridItemsByIdHidefromresume")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Users/{UserId}/Items/{Id}/HideFromResume"
	localVarPath = strings.Replace(localVarPath, "{"+"UserId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.hide == nil {
		return localVarReturnValue, nil, reportError("hide is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "Hide", r.hide, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type UserLibraryServiceAPIPostUsersByUseridItemsByIdRatingRequest struct {
	ctx context.Context
	ApiService *UserLibraryServiceAPIService
	userId string
	id string
	likes *bool
}

// Whether the user likes the item or not. true/false
func (r UserLibraryServiceAPIPostUsersByUseridItemsByIdRatingRequest) Likes(likes bool) UserLibraryServiceAPIPostUsersByUseridItemsByIdRatingRequest {
	r.likes = &likes
	return r
}

func (r UserLibraryServiceAPIPostUsersByUseridItemsByIdRatingRequest) Execute() (*ModelUserItemDataDto, *http.Response, error) {
	return r.ApiService.PostUsersByUseridItemsByIdRatingExecute(r)
}

/*
PostUsersByUseridItemsByIdRating Updates a user's rating for an item

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId User Id
 @param id Item Id
 @return UserLibraryServiceAPIPostUsersByUseridItemsByIdRatingRequest
*/
func (a *UserLibraryServiceAPIService) PostUsersByUseridItemsByIdRating(ctx context.Context, userId string, id string) UserLibraryServiceAPIPostUsersByUseridItemsByIdRatingRequest {
	return UserLibraryServiceAPIPostUsersByUseridItemsByIdRatingRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		id: id,
	}
}

// Execute executes the request
//  @return ModelUserItemDataDto
func (a *UserLibraryServiceAPIService) PostUsersByUseridItemsByIdRatingExecute(r UserLibraryServiceAPIPostUsersByUseridItemsByIdRatingRequest) (*ModelUserItemDataDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ModelUserItemDataDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserLibraryServiceAPIService.PostUsersByUseridItemsByIdRating")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Users/{UserId}/Items/{Id}/Rating"
	localVarPath = strings.Replace(localVarPath, "{"+"UserId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.likes == nil {
		return localVarReturnValue, nil, reportError("likes is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "Likes", r.likes, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type UserLibraryServiceAPIPostUsersByUseridItemsByIdRatingDeleteRequest struct {
	ctx context.Context
	ApiService *UserLibraryServiceAPIService
	userId string
	id string
}

func (r UserLibraryServiceAPIPostUsersByUseridItemsByIdRatingDeleteRequest) Execute() (*ModelUserItemDataDto, *http.Response, error) {
	return r.ApiService.PostUsersByUseridItemsByIdRatingDeleteExecute(r)
}

/*
PostUsersByUseridItemsByIdRatingDelete Deletes a user's saved personal rating for an item

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId User Id
 @param id Item Id
 @return UserLibraryServiceAPIPostUsersByUseridItemsByIdRatingDeleteRequest
*/
func (a *UserLibraryServiceAPIService) PostUsersByUseridItemsByIdRatingDelete(ctx context.Context, userId string, id string) UserLibraryServiceAPIPostUsersByUseridItemsByIdRatingDeleteRequest {
	return UserLibraryServiceAPIPostUsersByUseridItemsByIdRatingDeleteRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		id: id,
	}
}

// Execute executes the request
//  @return ModelUserItemDataDto
func (a *UserLibraryServiceAPIService) PostUsersByUseridItemsByIdRatingDeleteExecute(r UserLibraryServiceAPIPostUsersByUseridItemsByIdRatingDeleteRequest) (*ModelUserItemDataDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ModelUserItemDataDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserLibraryServiceAPIService.PostUsersByUseridItemsByIdRatingDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Users/{UserId}/Items/{Id}/Rating/Delete"
	localVarPath = strings.Replace(localVarPath, "{"+"UserId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
