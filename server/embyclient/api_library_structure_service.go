/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// LibraryStructureServiceAPIService LibraryStructureServiceAPI service
type LibraryStructureServiceAPIService service

type LibraryStructureServiceAPIDeleteLibraryVirtualfoldersRequest struct {
	ctx context.Context
	ApiService *LibraryStructureServiceAPIService
}

func (r LibraryStructureServiceAPIDeleteLibraryVirtualfoldersRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteLibraryVirtualfoldersExecute(r)
}

/*
DeleteLibraryVirtualfolders Method for DeleteLibraryVirtualfolders

Requires authentication as administrator

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return LibraryStructureServiceAPIDeleteLibraryVirtualfoldersRequest
*/
func (a *LibraryStructureServiceAPIService) DeleteLibraryVirtualfolders(ctx context.Context) LibraryStructureServiceAPIDeleteLibraryVirtualfoldersRequest {
	return LibraryStructureServiceAPIDeleteLibraryVirtualfoldersRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *LibraryStructureServiceAPIService) DeleteLibraryVirtualfoldersExecute(r LibraryStructureServiceAPIDeleteLibraryVirtualfoldersRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LibraryStructureServiceAPIService.DeleteLibraryVirtualfolders")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Library/VirtualFolders"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type LibraryStructureServiceAPIDeleteLibraryVirtualfoldersPathsRequest struct {
	ctx context.Context
	ApiService *LibraryStructureServiceAPIService
}

func (r LibraryStructureServiceAPIDeleteLibraryVirtualfoldersPathsRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteLibraryVirtualfoldersPathsExecute(r)
}

/*
DeleteLibraryVirtualfoldersPaths Method for DeleteLibraryVirtualfoldersPaths

Requires authentication as administrator

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return LibraryStructureServiceAPIDeleteLibraryVirtualfoldersPathsRequest
*/
func (a *LibraryStructureServiceAPIService) DeleteLibraryVirtualfoldersPaths(ctx context.Context) LibraryStructureServiceAPIDeleteLibraryVirtualfoldersPathsRequest {
	return LibraryStructureServiceAPIDeleteLibraryVirtualfoldersPathsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *LibraryStructureServiceAPIService) DeleteLibraryVirtualfoldersPathsExecute(r LibraryStructureServiceAPIDeleteLibraryVirtualfoldersPathsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LibraryStructureServiceAPIService.DeleteLibraryVirtualfoldersPaths")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Library/VirtualFolders/Paths"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type LibraryStructureServiceAPIGetLibraryVirtualfoldersQueryRequest struct {
	ctx context.Context
	ApiService *LibraryStructureServiceAPIService
	startIndex *int32
	limit *int32
}

// Optional. The record index to start at. All items with a lower index will be dropped from the results.
func (r LibraryStructureServiceAPIGetLibraryVirtualfoldersQueryRequest) StartIndex(startIndex int32) LibraryStructureServiceAPIGetLibraryVirtualfoldersQueryRequest {
	r.startIndex = &startIndex
	return r
}

// Optional. The maximum number of records to return
func (r LibraryStructureServiceAPIGetLibraryVirtualfoldersQueryRequest) Limit(limit int32) LibraryStructureServiceAPIGetLibraryVirtualfoldersQueryRequest {
	r.limit = &limit
	return r
}

func (r LibraryStructureServiceAPIGetLibraryVirtualfoldersQueryRequest) Execute() (*ModelQueryResultVirtualFolderInfo, *http.Response, error) {
	return r.ApiService.GetLibraryVirtualfoldersQueryExecute(r)
}

/*
GetLibraryVirtualfoldersQuery Method for GetLibraryVirtualfoldersQuery

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return LibraryStructureServiceAPIGetLibraryVirtualfoldersQueryRequest
*/
func (a *LibraryStructureServiceAPIService) GetLibraryVirtualfoldersQuery(ctx context.Context) LibraryStructureServiceAPIGetLibraryVirtualfoldersQueryRequest {
	return LibraryStructureServiceAPIGetLibraryVirtualfoldersQueryRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ModelQueryResultVirtualFolderInfo
func (a *LibraryStructureServiceAPIService) GetLibraryVirtualfoldersQueryExecute(r LibraryStructureServiceAPIGetLibraryVirtualfoldersQueryRequest) (*ModelQueryResultVirtualFolderInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ModelQueryResultVirtualFolderInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LibraryStructureServiceAPIService.GetLibraryVirtualfoldersQuery")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Library/VirtualFolders/Query"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "StartIndex", r.startIndex, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Limit", r.limit, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type LibraryStructureServiceAPIPostLibraryVirtualfoldersRequest struct {
	ctx context.Context
	ApiService *LibraryStructureServiceAPIService
	modelLibraryAddVirtualFolder *ModelLibraryAddVirtualFolder
}

// AddVirtualFolder
func (r LibraryStructureServiceAPIPostLibraryVirtualfoldersRequest) ModelLibraryAddVirtualFolder(modelLibraryAddVirtualFolder ModelLibraryAddVirtualFolder) LibraryStructureServiceAPIPostLibraryVirtualfoldersRequest {
	r.modelLibraryAddVirtualFolder = &modelLibraryAddVirtualFolder
	return r
}

func (r LibraryStructureServiceAPIPostLibraryVirtualfoldersRequest) Execute() (*http.Response, error) {
	return r.ApiService.PostLibraryVirtualfoldersExecute(r)
}

/*
PostLibraryVirtualfolders Method for PostLibraryVirtualfolders

Requires authentication as administrator

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return LibraryStructureServiceAPIPostLibraryVirtualfoldersRequest
*/
func (a *LibraryStructureServiceAPIService) PostLibraryVirtualfolders(ctx context.Context) LibraryStructureServiceAPIPostLibraryVirtualfoldersRequest {
	return LibraryStructureServiceAPIPostLibraryVirtualfoldersRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *LibraryStructureServiceAPIService) PostLibraryVirtualfoldersExecute(r LibraryStructureServiceAPIPostLibraryVirtualfoldersRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LibraryStructureServiceAPIService.PostLibraryVirtualfolders")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Library/VirtualFolders"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.modelLibraryAddVirtualFolder == nil {
		return nil, reportError("modelLibraryAddVirtualFolder is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.modelLibraryAddVirtualFolder
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type LibraryStructureServiceAPIPostLibraryVirtualfoldersDeleteRequest struct {
	ctx context.Context
	ApiService *LibraryStructureServiceAPIService
	modelLibraryRemoveVirtualFolder *ModelLibraryRemoveVirtualFolder
}

// RemoveVirtualFolder
func (r LibraryStructureServiceAPIPostLibraryVirtualfoldersDeleteRequest) ModelLibraryRemoveVirtualFolder(modelLibraryRemoveVirtualFolder ModelLibraryRemoveVirtualFolder) LibraryStructureServiceAPIPostLibraryVirtualfoldersDeleteRequest {
	r.modelLibraryRemoveVirtualFolder = &modelLibraryRemoveVirtualFolder
	return r
}

func (r LibraryStructureServiceAPIPostLibraryVirtualfoldersDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.PostLibraryVirtualfoldersDeleteExecute(r)
}

/*
PostLibraryVirtualfoldersDelete Method for PostLibraryVirtualfoldersDelete

Requires authentication as administrator

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return LibraryStructureServiceAPIPostLibraryVirtualfoldersDeleteRequest
*/
func (a *LibraryStructureServiceAPIService) PostLibraryVirtualfoldersDelete(ctx context.Context) LibraryStructureServiceAPIPostLibraryVirtualfoldersDeleteRequest {
	return LibraryStructureServiceAPIPostLibraryVirtualfoldersDeleteRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *LibraryStructureServiceAPIService) PostLibraryVirtualfoldersDeleteExecute(r LibraryStructureServiceAPIPostLibraryVirtualfoldersDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LibraryStructureServiceAPIService.PostLibraryVirtualfoldersDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Library/VirtualFolders/Delete"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.modelLibraryRemoveVirtualFolder == nil {
		return nil, reportError("modelLibraryRemoveVirtualFolder is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.modelLibraryRemoveVirtualFolder
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type LibraryStructureServiceAPIPostLibraryVirtualfoldersLibraryoptionsRequest struct {
	ctx context.Context
	ApiService *LibraryStructureServiceAPIService
	modelLibraryUpdateLibraryOptions *ModelLibraryUpdateLibraryOptions
}

// UpdateLibraryOptions
func (r LibraryStructureServiceAPIPostLibraryVirtualfoldersLibraryoptionsRequest) ModelLibraryUpdateLibraryOptions(modelLibraryUpdateLibraryOptions ModelLibraryUpdateLibraryOptions) LibraryStructureServiceAPIPostLibraryVirtualfoldersLibraryoptionsRequest {
	r.modelLibraryUpdateLibraryOptions = &modelLibraryUpdateLibraryOptions
	return r
}

func (r LibraryStructureServiceAPIPostLibraryVirtualfoldersLibraryoptionsRequest) Execute() (*http.Response, error) {
	return r.ApiService.PostLibraryVirtualfoldersLibraryoptionsExecute(r)
}

/*
PostLibraryVirtualfoldersLibraryoptions Method for PostLibraryVirtualfoldersLibraryoptions

Requires authentication as administrator

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return LibraryStructureServiceAPIPostLibraryVirtualfoldersLibraryoptionsRequest
*/
func (a *LibraryStructureServiceAPIService) PostLibraryVirtualfoldersLibraryoptions(ctx context.Context) LibraryStructureServiceAPIPostLibraryVirtualfoldersLibraryoptionsRequest {
	return LibraryStructureServiceAPIPostLibraryVirtualfoldersLibraryoptionsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *LibraryStructureServiceAPIService) PostLibraryVirtualfoldersLibraryoptionsExecute(r LibraryStructureServiceAPIPostLibraryVirtualfoldersLibraryoptionsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LibraryStructureServiceAPIService.PostLibraryVirtualfoldersLibraryoptions")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Library/VirtualFolders/LibraryOptions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.modelLibraryUpdateLibraryOptions == nil {
		return nil, reportError("modelLibraryUpdateLibraryOptions is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.modelLibraryUpdateLibraryOptions
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type LibraryStructureServiceAPIPostLibraryVirtualfoldersNameRequest struct {
	ctx context.Context
	ApiService *LibraryStructureServiceAPIService
	modelLibraryRenameVirtualFolder *ModelLibraryRenameVirtualFolder
}

// RenameVirtualFolder
func (r LibraryStructureServiceAPIPostLibraryVirtualfoldersNameRequest) ModelLibraryRenameVirtualFolder(modelLibraryRenameVirtualFolder ModelLibraryRenameVirtualFolder) LibraryStructureServiceAPIPostLibraryVirtualfoldersNameRequest {
	r.modelLibraryRenameVirtualFolder = &modelLibraryRenameVirtualFolder
	return r
}

func (r LibraryStructureServiceAPIPostLibraryVirtualfoldersNameRequest) Execute() (*http.Response, error) {
	return r.ApiService.PostLibraryVirtualfoldersNameExecute(r)
}

/*
PostLibraryVirtualfoldersName Method for PostLibraryVirtualfoldersName

Requires authentication as administrator

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return LibraryStructureServiceAPIPostLibraryVirtualfoldersNameRequest
*/
func (a *LibraryStructureServiceAPIService) PostLibraryVirtualfoldersName(ctx context.Context) LibraryStructureServiceAPIPostLibraryVirtualfoldersNameRequest {
	return LibraryStructureServiceAPIPostLibraryVirtualfoldersNameRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *LibraryStructureServiceAPIService) PostLibraryVirtualfoldersNameExecute(r LibraryStructureServiceAPIPostLibraryVirtualfoldersNameRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LibraryStructureServiceAPIService.PostLibraryVirtualfoldersName")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Library/VirtualFolders/Name"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.modelLibraryRenameVirtualFolder == nil {
		return nil, reportError("modelLibraryRenameVirtualFolder is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.modelLibraryRenameVirtualFolder
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type LibraryStructureServiceAPIPostLibraryVirtualfoldersPathsRequest struct {
	ctx context.Context
	ApiService *LibraryStructureServiceAPIService
	modelLibraryAddMediaPath *ModelLibraryAddMediaPath
}

// AddMediaPath
func (r LibraryStructureServiceAPIPostLibraryVirtualfoldersPathsRequest) ModelLibraryAddMediaPath(modelLibraryAddMediaPath ModelLibraryAddMediaPath) LibraryStructureServiceAPIPostLibraryVirtualfoldersPathsRequest {
	r.modelLibraryAddMediaPath = &modelLibraryAddMediaPath
	return r
}

func (r LibraryStructureServiceAPIPostLibraryVirtualfoldersPathsRequest) Execute() (*http.Response, error) {
	return r.ApiService.PostLibraryVirtualfoldersPathsExecute(r)
}

/*
PostLibraryVirtualfoldersPaths Method for PostLibraryVirtualfoldersPaths

Requires authentication as administrator

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return LibraryStructureServiceAPIPostLibraryVirtualfoldersPathsRequest
*/
func (a *LibraryStructureServiceAPIService) PostLibraryVirtualfoldersPaths(ctx context.Context) LibraryStructureServiceAPIPostLibraryVirtualfoldersPathsRequest {
	return LibraryStructureServiceAPIPostLibraryVirtualfoldersPathsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *LibraryStructureServiceAPIService) PostLibraryVirtualfoldersPathsExecute(r LibraryStructureServiceAPIPostLibraryVirtualfoldersPathsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LibraryStructureServiceAPIService.PostLibraryVirtualfoldersPaths")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Library/VirtualFolders/Paths"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.modelLibraryAddMediaPath == nil {
		return nil, reportError("modelLibraryAddMediaPath is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.modelLibraryAddMediaPath
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type LibraryStructureServiceAPIPostLibraryVirtualfoldersPathsDeleteRequest struct {
	ctx context.Context
	ApiService *LibraryStructureServiceAPIService
	modelLibraryRemoveMediaPath *ModelLibraryRemoveMediaPath
}

// RemoveMediaPath
func (r LibraryStructureServiceAPIPostLibraryVirtualfoldersPathsDeleteRequest) ModelLibraryRemoveMediaPath(modelLibraryRemoveMediaPath ModelLibraryRemoveMediaPath) LibraryStructureServiceAPIPostLibraryVirtualfoldersPathsDeleteRequest {
	r.modelLibraryRemoveMediaPath = &modelLibraryRemoveMediaPath
	return r
}

func (r LibraryStructureServiceAPIPostLibraryVirtualfoldersPathsDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.PostLibraryVirtualfoldersPathsDeleteExecute(r)
}

/*
PostLibraryVirtualfoldersPathsDelete Method for PostLibraryVirtualfoldersPathsDelete

Requires authentication as administrator

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return LibraryStructureServiceAPIPostLibraryVirtualfoldersPathsDeleteRequest
*/
func (a *LibraryStructureServiceAPIService) PostLibraryVirtualfoldersPathsDelete(ctx context.Context) LibraryStructureServiceAPIPostLibraryVirtualfoldersPathsDeleteRequest {
	return LibraryStructureServiceAPIPostLibraryVirtualfoldersPathsDeleteRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *LibraryStructureServiceAPIService) PostLibraryVirtualfoldersPathsDeleteExecute(r LibraryStructureServiceAPIPostLibraryVirtualfoldersPathsDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LibraryStructureServiceAPIService.PostLibraryVirtualfoldersPathsDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Library/VirtualFolders/Paths/Delete"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.modelLibraryRemoveMediaPath == nil {
		return nil, reportError("modelLibraryRemoveMediaPath is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.modelLibraryRemoveMediaPath
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type LibraryStructureServiceAPIPostLibraryVirtualfoldersPathsUpdateRequest struct {
	ctx context.Context
	ApiService *LibraryStructureServiceAPIService
	modelLibraryUpdateMediaPath *ModelLibraryUpdateMediaPath
}

// UpdateMediaPath
func (r LibraryStructureServiceAPIPostLibraryVirtualfoldersPathsUpdateRequest) ModelLibraryUpdateMediaPath(modelLibraryUpdateMediaPath ModelLibraryUpdateMediaPath) LibraryStructureServiceAPIPostLibraryVirtualfoldersPathsUpdateRequest {
	r.modelLibraryUpdateMediaPath = &modelLibraryUpdateMediaPath
	return r
}

func (r LibraryStructureServiceAPIPostLibraryVirtualfoldersPathsUpdateRequest) Execute() (*http.Response, error) {
	return r.ApiService.PostLibraryVirtualfoldersPathsUpdateExecute(r)
}

/*
PostLibraryVirtualfoldersPathsUpdate Method for PostLibraryVirtualfoldersPathsUpdate

Requires authentication as administrator

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return LibraryStructureServiceAPIPostLibraryVirtualfoldersPathsUpdateRequest
*/
func (a *LibraryStructureServiceAPIService) PostLibraryVirtualfoldersPathsUpdate(ctx context.Context) LibraryStructureServiceAPIPostLibraryVirtualfoldersPathsUpdateRequest {
	return LibraryStructureServiceAPIPostLibraryVirtualfoldersPathsUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *LibraryStructureServiceAPIService) PostLibraryVirtualfoldersPathsUpdateExecute(r LibraryStructureServiceAPIPostLibraryVirtualfoldersPathsUpdateRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LibraryStructureServiceAPIService.PostLibraryVirtualfoldersPathsUpdate")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Library/VirtualFolders/Paths/Update"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.modelLibraryUpdateMediaPath == nil {
		return nil, reportError("modelLibraryUpdateMediaPath is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.modelLibraryUpdateMediaPath
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
