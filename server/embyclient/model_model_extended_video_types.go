/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"encoding/json"
	"fmt"
)

// ModelExtendedVideoTypes the model 'ModelExtendedVideoTypes'
type ModelExtendedVideoTypes string

// List of ExtendedVideoTypes
const (
	MODELEXTENDEDVIDEOTYPES_NONE ModelExtendedVideoTypes = "None"
	MODELEXTENDEDVIDEOTYPES_HDR10 ModelExtendedVideoTypes = "Hdr10"
	MODELEXTENDEDVIDEOTYPES_HDR10_PLUS ModelExtendedVideoTypes = "Hdr10Plus"
	MODELEXTENDEDVIDEOTYPES_HYPER_LOG_GAMMA ModelExtendedVideoTypes = "HyperLogGamma"
	MODELEXTENDEDVIDEOTYPES_DOLBY_VISION ModelExtendedVideoTypes = "DolbyVision"
)

// All allowed values of ModelExtendedVideoTypes enum
var AllowedModelExtendedVideoTypesEnumValues = []ModelExtendedVideoTypes{
	"None",
	"Hdr10",
	"Hdr10Plus",
	"HyperLogGamma",
	"DolbyVision",
}

func (v *ModelExtendedVideoTypes) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ModelExtendedVideoTypes(value)
	for _, existing := range AllowedModelExtendedVideoTypesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ModelExtendedVideoTypes", value)
}

// NewModelExtendedVideoTypesFromValue returns a pointer to a valid ModelExtendedVideoTypes
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewModelExtendedVideoTypesFromValue(v string) (*ModelExtendedVideoTypes, error) {
	ev := ModelExtendedVideoTypes(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ModelExtendedVideoTypes: valid values are %v", v, AllowedModelExtendedVideoTypesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ModelExtendedVideoTypes) IsValid() bool {
	for _, existing := range AllowedModelExtendedVideoTypesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ExtendedVideoTypes value
func (v ModelExtendedVideoTypes) Ptr() *ModelExtendedVideoTypes {
	return &v
}

type NullableModelExtendedVideoTypes struct {
	value *ModelExtendedVideoTypes
	isSet bool
}

func (v NullableModelExtendedVideoTypes) Get() *ModelExtendedVideoTypes {
	return v.value
}

func (v *NullableModelExtendedVideoTypes) Set(val *ModelExtendedVideoTypes) {
	v.value = val
	v.isSet = true
}

func (v NullableModelExtendedVideoTypes) IsSet() bool {
	return v.isSet
}

func (v *NullableModelExtendedVideoTypes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelExtendedVideoTypes(val *ModelExtendedVideoTypes) *NullableModelExtendedVideoTypes {
	return &NullableModelExtendedVideoTypes{value: val, isSet: true}
}

func (v NullableModelExtendedVideoTypes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelExtendedVideoTypes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

