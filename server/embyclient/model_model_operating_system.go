/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"encoding/json"
	"fmt"
)

// ModelOperatingSystem the model 'ModelOperatingSystem'
type ModelOperatingSystem string

// List of OperatingSystem
const (
	MODELOPERATINGSYSTEM_WINDOWS ModelOperatingSystem = "Windows"
	MODELOPERATINGSYSTEM_LINUX ModelOperatingSystem = "Linux"
	MODELOPERATINGSYSTEM_OSX ModelOperatingSystem = "OSX"
	MODELOPERATINGSYSTEM_BSD ModelOperatingSystem = "BSD"
	MODELOPERATINGSYSTEM_ANDROID ModelOperatingSystem = "Android"
)

// All allowed values of ModelOperatingSystem enum
var AllowedModelOperatingSystemEnumValues = []ModelOperatingSystem{
	"Windows",
	"Linux",
	"OSX",
	"BSD",
	"Android",
}

func (v *ModelOperatingSystem) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ModelOperatingSystem(value)
	for _, existing := range AllowedModelOperatingSystemEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ModelOperatingSystem", value)
}

// NewModelOperatingSystemFromValue returns a pointer to a valid ModelOperatingSystem
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewModelOperatingSystemFromValue(v string) (*ModelOperatingSystem, error) {
	ev := ModelOperatingSystem(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ModelOperatingSystem: valid values are %v", v, AllowedModelOperatingSystemEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ModelOperatingSystem) IsValid() bool {
	for _, existing := range AllowedModelOperatingSystemEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OperatingSystem value
func (v ModelOperatingSystem) Ptr() *ModelOperatingSystem {
	return &v
}

type NullableModelOperatingSystem struct {
	value *ModelOperatingSystem
	isSet bool
}

func (v NullableModelOperatingSystem) Get() *ModelOperatingSystem {
	return v.value
}

func (v *NullableModelOperatingSystem) Set(val *ModelOperatingSystem) {
	v.value = val
	v.isSet = true
}

func (v NullableModelOperatingSystem) IsSet() bool {
	return v.isSet
}

func (v *NullableModelOperatingSystem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelOperatingSystem(val *ModelOperatingSystem) *NullableModelOperatingSystem {
	return &NullableModelOperatingSystem{value: val, isSet: true}
}

func (v NullableModelOperatingSystem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelOperatingSystem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

