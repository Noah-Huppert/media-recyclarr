/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"encoding/json"
)

// checks if the ModelLibraryAddVirtualFolder type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelLibraryAddVirtualFolder{}

// ModelLibraryAddVirtualFolder struct for ModelLibraryAddVirtualFolder
type ModelLibraryAddVirtualFolder struct {
	Name *string `json:"Name,omitempty"`
	CollectionType *string `json:"CollectionType,omitempty"`
	RefreshLibrary *bool `json:"RefreshLibrary,omitempty"`
	Paths []string `json:"Paths,omitempty"`
	LibraryOptions *ModelLibraryOptions `json:"LibraryOptions,omitempty"`
}

// NewModelLibraryAddVirtualFolder instantiates a new ModelLibraryAddVirtualFolder object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelLibraryAddVirtualFolder() *ModelLibraryAddVirtualFolder {
	this := ModelLibraryAddVirtualFolder{}
	return &this
}

// NewModelLibraryAddVirtualFolderWithDefaults instantiates a new ModelLibraryAddVirtualFolder object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelLibraryAddVirtualFolderWithDefaults() *ModelLibraryAddVirtualFolder {
	this := ModelLibraryAddVirtualFolder{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ModelLibraryAddVirtualFolder) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelLibraryAddVirtualFolder) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ModelLibraryAddVirtualFolder) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ModelLibraryAddVirtualFolder) SetName(v string) {
	o.Name = &v
}

// GetCollectionType returns the CollectionType field value if set, zero value otherwise.
func (o *ModelLibraryAddVirtualFolder) GetCollectionType() string {
	if o == nil || IsNil(o.CollectionType) {
		var ret string
		return ret
	}
	return *o.CollectionType
}

// GetCollectionTypeOk returns a tuple with the CollectionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelLibraryAddVirtualFolder) GetCollectionTypeOk() (*string, bool) {
	if o == nil || IsNil(o.CollectionType) {
		return nil, false
	}
	return o.CollectionType, true
}

// HasCollectionType returns a boolean if a field has been set.
func (o *ModelLibraryAddVirtualFolder) HasCollectionType() bool {
	if o != nil && !IsNil(o.CollectionType) {
		return true
	}

	return false
}

// SetCollectionType gets a reference to the given string and assigns it to the CollectionType field.
func (o *ModelLibraryAddVirtualFolder) SetCollectionType(v string) {
	o.CollectionType = &v
}

// GetRefreshLibrary returns the RefreshLibrary field value if set, zero value otherwise.
func (o *ModelLibraryAddVirtualFolder) GetRefreshLibrary() bool {
	if o == nil || IsNil(o.RefreshLibrary) {
		var ret bool
		return ret
	}
	return *o.RefreshLibrary
}

// GetRefreshLibraryOk returns a tuple with the RefreshLibrary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelLibraryAddVirtualFolder) GetRefreshLibraryOk() (*bool, bool) {
	if o == nil || IsNil(o.RefreshLibrary) {
		return nil, false
	}
	return o.RefreshLibrary, true
}

// HasRefreshLibrary returns a boolean if a field has been set.
func (o *ModelLibraryAddVirtualFolder) HasRefreshLibrary() bool {
	if o != nil && !IsNil(o.RefreshLibrary) {
		return true
	}

	return false
}

// SetRefreshLibrary gets a reference to the given bool and assigns it to the RefreshLibrary field.
func (o *ModelLibraryAddVirtualFolder) SetRefreshLibrary(v bool) {
	o.RefreshLibrary = &v
}

// GetPaths returns the Paths field value if set, zero value otherwise.
func (o *ModelLibraryAddVirtualFolder) GetPaths() []string {
	if o == nil || IsNil(o.Paths) {
		var ret []string
		return ret
	}
	return o.Paths
}

// GetPathsOk returns a tuple with the Paths field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelLibraryAddVirtualFolder) GetPathsOk() ([]string, bool) {
	if o == nil || IsNil(o.Paths) {
		return nil, false
	}
	return o.Paths, true
}

// HasPaths returns a boolean if a field has been set.
func (o *ModelLibraryAddVirtualFolder) HasPaths() bool {
	if o != nil && !IsNil(o.Paths) {
		return true
	}

	return false
}

// SetPaths gets a reference to the given []string and assigns it to the Paths field.
func (o *ModelLibraryAddVirtualFolder) SetPaths(v []string) {
	o.Paths = v
}

// GetLibraryOptions returns the LibraryOptions field value if set, zero value otherwise.
func (o *ModelLibraryAddVirtualFolder) GetLibraryOptions() ModelLibraryOptions {
	if o == nil || IsNil(o.LibraryOptions) {
		var ret ModelLibraryOptions
		return ret
	}
	return *o.LibraryOptions
}

// GetLibraryOptionsOk returns a tuple with the LibraryOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelLibraryAddVirtualFolder) GetLibraryOptionsOk() (*ModelLibraryOptions, bool) {
	if o == nil || IsNil(o.LibraryOptions) {
		return nil, false
	}
	return o.LibraryOptions, true
}

// HasLibraryOptions returns a boolean if a field has been set.
func (o *ModelLibraryAddVirtualFolder) HasLibraryOptions() bool {
	if o != nil && !IsNil(o.LibraryOptions) {
		return true
	}

	return false
}

// SetLibraryOptions gets a reference to the given ModelLibraryOptions and assigns it to the LibraryOptions field.
func (o *ModelLibraryAddVirtualFolder) SetLibraryOptions(v ModelLibraryOptions) {
	o.LibraryOptions = &v
}

func (o ModelLibraryAddVirtualFolder) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelLibraryAddVirtualFolder) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if !IsNil(o.CollectionType) {
		toSerialize["CollectionType"] = o.CollectionType
	}
	if !IsNil(o.RefreshLibrary) {
		toSerialize["RefreshLibrary"] = o.RefreshLibrary
	}
	if !IsNil(o.Paths) {
		toSerialize["Paths"] = o.Paths
	}
	if !IsNil(o.LibraryOptions) {
		toSerialize["LibraryOptions"] = o.LibraryOptions
	}
	return toSerialize, nil
}

type NullableModelLibraryAddVirtualFolder struct {
	value *ModelLibraryAddVirtualFolder
	isSet bool
}

func (v NullableModelLibraryAddVirtualFolder) Get() *ModelLibraryAddVirtualFolder {
	return v.value
}

func (v *NullableModelLibraryAddVirtualFolder) Set(val *ModelLibraryAddVirtualFolder) {
	v.value = val
	v.isSet = true
}

func (v NullableModelLibraryAddVirtualFolder) IsSet() bool {
	return v.isSet
}

func (v *NullableModelLibraryAddVirtualFolder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelLibraryAddVirtualFolder(val *ModelLibraryAddVirtualFolder) *NullableModelLibraryAddVirtualFolder {
	return &NullableModelLibraryAddVirtualFolder{value: val, isSet: true}
}

func (v NullableModelLibraryAddVirtualFolder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelLibraryAddVirtualFolder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


