/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"encoding/json"
	"fmt"
)

// ModelPlayCommand the model 'ModelPlayCommand'
type ModelPlayCommand string

// List of PlayCommand
const (
	MODELPLAYCOMMAND_PLAY_NOW ModelPlayCommand = "PlayNow"
	MODELPLAYCOMMAND_PLAY_NEXT ModelPlayCommand = "PlayNext"
	MODELPLAYCOMMAND_PLAY_LAST ModelPlayCommand = "PlayLast"
	MODELPLAYCOMMAND_PLAY_INSTANT_MIX ModelPlayCommand = "PlayInstantMix"
	MODELPLAYCOMMAND_PLAY_SHUFFLE ModelPlayCommand = "PlayShuffle"
)

// All allowed values of ModelPlayCommand enum
var AllowedModelPlayCommandEnumValues = []ModelPlayCommand{
	"PlayNow",
	"PlayNext",
	"PlayLast",
	"PlayInstantMix",
	"PlayShuffle",
}

func (v *ModelPlayCommand) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ModelPlayCommand(value)
	for _, existing := range AllowedModelPlayCommandEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ModelPlayCommand", value)
}

// NewModelPlayCommandFromValue returns a pointer to a valid ModelPlayCommand
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewModelPlayCommandFromValue(v string) (*ModelPlayCommand, error) {
	ev := ModelPlayCommand(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ModelPlayCommand: valid values are %v", v, AllowedModelPlayCommandEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ModelPlayCommand) IsValid() bool {
	for _, existing := range AllowedModelPlayCommandEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PlayCommand value
func (v ModelPlayCommand) Ptr() *ModelPlayCommand {
	return &v
}

type NullableModelPlayCommand struct {
	value *ModelPlayCommand
	isSet bool
}

func (v NullableModelPlayCommand) Get() *ModelPlayCommand {
	return v.value
}

func (v *NullableModelPlayCommand) Set(val *ModelPlayCommand) {
	v.value = val
	v.isSet = true
}

func (v NullableModelPlayCommand) IsSet() bool {
	return v.isSet
}

func (v *NullableModelPlayCommand) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelPlayCommand(val *ModelPlayCommand) *NullableModelPlayCommand {
	return &NullableModelPlayCommand{value: val, isSet: true}
}

func (v NullableModelPlayCommand) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelPlayCommand) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

