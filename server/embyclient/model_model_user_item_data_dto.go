/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"encoding/json"
	"time"
)

// checks if the ModelUserItemDataDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelUserItemDataDto{}

// ModelUserItemDataDto struct for ModelUserItemDataDto
type ModelUserItemDataDto struct {
	Rating NullableFloat64 `json:"Rating,omitempty"`
	PlayedPercentage NullableFloat64 `json:"PlayedPercentage,omitempty"`
	UnplayedItemCount NullableInt32 `json:"UnplayedItemCount,omitempty"`
	PlaybackPositionTicks *int64 `json:"PlaybackPositionTicks,omitempty"`
	PlayCount NullableInt32 `json:"PlayCount,omitempty"`
	IsFavorite *bool `json:"IsFavorite,omitempty"`
	LastPlayedDate NullableTime `json:"LastPlayedDate,omitempty"`
	Played *bool `json:"Played,omitempty"`
	Key *string `json:"Key,omitempty"`
	ItemId *string `json:"ItemId,omitempty"`
	ServerId *string `json:"ServerId,omitempty"`
}

// NewModelUserItemDataDto instantiates a new ModelUserItemDataDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelUserItemDataDto() *ModelUserItemDataDto {
	this := ModelUserItemDataDto{}
	return &this
}

// NewModelUserItemDataDtoWithDefaults instantiates a new ModelUserItemDataDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelUserItemDataDtoWithDefaults() *ModelUserItemDataDto {
	this := ModelUserItemDataDto{}
	return &this
}

// GetRating returns the Rating field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ModelUserItemDataDto) GetRating() float64 {
	if o == nil || IsNil(o.Rating.Get()) {
		var ret float64
		return ret
	}
	return *o.Rating.Get()
}

// GetRatingOk returns a tuple with the Rating field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelUserItemDataDto) GetRatingOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Rating.Get(), o.Rating.IsSet()
}

// HasRating returns a boolean if a field has been set.
func (o *ModelUserItemDataDto) HasRating() bool {
	if o != nil && o.Rating.IsSet() {
		return true
	}

	return false
}

// SetRating gets a reference to the given NullableFloat64 and assigns it to the Rating field.
func (o *ModelUserItemDataDto) SetRating(v float64) {
	o.Rating.Set(&v)
}
// SetRatingNil sets the value for Rating to be an explicit nil
func (o *ModelUserItemDataDto) SetRatingNil() {
	o.Rating.Set(nil)
}

// UnsetRating ensures that no value is present for Rating, not even an explicit nil
func (o *ModelUserItemDataDto) UnsetRating() {
	o.Rating.Unset()
}

// GetPlayedPercentage returns the PlayedPercentage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ModelUserItemDataDto) GetPlayedPercentage() float64 {
	if o == nil || IsNil(o.PlayedPercentage.Get()) {
		var ret float64
		return ret
	}
	return *o.PlayedPercentage.Get()
}

// GetPlayedPercentageOk returns a tuple with the PlayedPercentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelUserItemDataDto) GetPlayedPercentageOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.PlayedPercentage.Get(), o.PlayedPercentage.IsSet()
}

// HasPlayedPercentage returns a boolean if a field has been set.
func (o *ModelUserItemDataDto) HasPlayedPercentage() bool {
	if o != nil && o.PlayedPercentage.IsSet() {
		return true
	}

	return false
}

// SetPlayedPercentage gets a reference to the given NullableFloat64 and assigns it to the PlayedPercentage field.
func (o *ModelUserItemDataDto) SetPlayedPercentage(v float64) {
	o.PlayedPercentage.Set(&v)
}
// SetPlayedPercentageNil sets the value for PlayedPercentage to be an explicit nil
func (o *ModelUserItemDataDto) SetPlayedPercentageNil() {
	o.PlayedPercentage.Set(nil)
}

// UnsetPlayedPercentage ensures that no value is present for PlayedPercentage, not even an explicit nil
func (o *ModelUserItemDataDto) UnsetPlayedPercentage() {
	o.PlayedPercentage.Unset()
}

// GetUnplayedItemCount returns the UnplayedItemCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ModelUserItemDataDto) GetUnplayedItemCount() int32 {
	if o == nil || IsNil(o.UnplayedItemCount.Get()) {
		var ret int32
		return ret
	}
	return *o.UnplayedItemCount.Get()
}

// GetUnplayedItemCountOk returns a tuple with the UnplayedItemCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelUserItemDataDto) GetUnplayedItemCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.UnplayedItemCount.Get(), o.UnplayedItemCount.IsSet()
}

// HasUnplayedItemCount returns a boolean if a field has been set.
func (o *ModelUserItemDataDto) HasUnplayedItemCount() bool {
	if o != nil && o.UnplayedItemCount.IsSet() {
		return true
	}

	return false
}

// SetUnplayedItemCount gets a reference to the given NullableInt32 and assigns it to the UnplayedItemCount field.
func (o *ModelUserItemDataDto) SetUnplayedItemCount(v int32) {
	o.UnplayedItemCount.Set(&v)
}
// SetUnplayedItemCountNil sets the value for UnplayedItemCount to be an explicit nil
func (o *ModelUserItemDataDto) SetUnplayedItemCountNil() {
	o.UnplayedItemCount.Set(nil)
}

// UnsetUnplayedItemCount ensures that no value is present for UnplayedItemCount, not even an explicit nil
func (o *ModelUserItemDataDto) UnsetUnplayedItemCount() {
	o.UnplayedItemCount.Unset()
}

// GetPlaybackPositionTicks returns the PlaybackPositionTicks field value if set, zero value otherwise.
func (o *ModelUserItemDataDto) GetPlaybackPositionTicks() int64 {
	if o == nil || IsNil(o.PlaybackPositionTicks) {
		var ret int64
		return ret
	}
	return *o.PlaybackPositionTicks
}

// GetPlaybackPositionTicksOk returns a tuple with the PlaybackPositionTicks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserItemDataDto) GetPlaybackPositionTicksOk() (*int64, bool) {
	if o == nil || IsNil(o.PlaybackPositionTicks) {
		return nil, false
	}
	return o.PlaybackPositionTicks, true
}

// HasPlaybackPositionTicks returns a boolean if a field has been set.
func (o *ModelUserItemDataDto) HasPlaybackPositionTicks() bool {
	if o != nil && !IsNil(o.PlaybackPositionTicks) {
		return true
	}

	return false
}

// SetPlaybackPositionTicks gets a reference to the given int64 and assigns it to the PlaybackPositionTicks field.
func (o *ModelUserItemDataDto) SetPlaybackPositionTicks(v int64) {
	o.PlaybackPositionTicks = &v
}

// GetPlayCount returns the PlayCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ModelUserItemDataDto) GetPlayCount() int32 {
	if o == nil || IsNil(o.PlayCount.Get()) {
		var ret int32
		return ret
	}
	return *o.PlayCount.Get()
}

// GetPlayCountOk returns a tuple with the PlayCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelUserItemDataDto) GetPlayCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.PlayCount.Get(), o.PlayCount.IsSet()
}

// HasPlayCount returns a boolean if a field has been set.
func (o *ModelUserItemDataDto) HasPlayCount() bool {
	if o != nil && o.PlayCount.IsSet() {
		return true
	}

	return false
}

// SetPlayCount gets a reference to the given NullableInt32 and assigns it to the PlayCount field.
func (o *ModelUserItemDataDto) SetPlayCount(v int32) {
	o.PlayCount.Set(&v)
}
// SetPlayCountNil sets the value for PlayCount to be an explicit nil
func (o *ModelUserItemDataDto) SetPlayCountNil() {
	o.PlayCount.Set(nil)
}

// UnsetPlayCount ensures that no value is present for PlayCount, not even an explicit nil
func (o *ModelUserItemDataDto) UnsetPlayCount() {
	o.PlayCount.Unset()
}

// GetIsFavorite returns the IsFavorite field value if set, zero value otherwise.
func (o *ModelUserItemDataDto) GetIsFavorite() bool {
	if o == nil || IsNil(o.IsFavorite) {
		var ret bool
		return ret
	}
	return *o.IsFavorite
}

// GetIsFavoriteOk returns a tuple with the IsFavorite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserItemDataDto) GetIsFavoriteOk() (*bool, bool) {
	if o == nil || IsNil(o.IsFavorite) {
		return nil, false
	}
	return o.IsFavorite, true
}

// HasIsFavorite returns a boolean if a field has been set.
func (o *ModelUserItemDataDto) HasIsFavorite() bool {
	if o != nil && !IsNil(o.IsFavorite) {
		return true
	}

	return false
}

// SetIsFavorite gets a reference to the given bool and assigns it to the IsFavorite field.
func (o *ModelUserItemDataDto) SetIsFavorite(v bool) {
	o.IsFavorite = &v
}

// GetLastPlayedDate returns the LastPlayedDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ModelUserItemDataDto) GetLastPlayedDate() time.Time {
	if o == nil || IsNil(o.LastPlayedDate.Get()) {
		var ret time.Time
		return ret
	}
	return *o.LastPlayedDate.Get()
}

// GetLastPlayedDateOk returns a tuple with the LastPlayedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelUserItemDataDto) GetLastPlayedDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastPlayedDate.Get(), o.LastPlayedDate.IsSet()
}

// HasLastPlayedDate returns a boolean if a field has been set.
func (o *ModelUserItemDataDto) HasLastPlayedDate() bool {
	if o != nil && o.LastPlayedDate.IsSet() {
		return true
	}

	return false
}

// SetLastPlayedDate gets a reference to the given NullableTime and assigns it to the LastPlayedDate field.
func (o *ModelUserItemDataDto) SetLastPlayedDate(v time.Time) {
	o.LastPlayedDate.Set(&v)
}
// SetLastPlayedDateNil sets the value for LastPlayedDate to be an explicit nil
func (o *ModelUserItemDataDto) SetLastPlayedDateNil() {
	o.LastPlayedDate.Set(nil)
}

// UnsetLastPlayedDate ensures that no value is present for LastPlayedDate, not even an explicit nil
func (o *ModelUserItemDataDto) UnsetLastPlayedDate() {
	o.LastPlayedDate.Unset()
}

// GetPlayed returns the Played field value if set, zero value otherwise.
func (o *ModelUserItemDataDto) GetPlayed() bool {
	if o == nil || IsNil(o.Played) {
		var ret bool
		return ret
	}
	return *o.Played
}

// GetPlayedOk returns a tuple with the Played field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserItemDataDto) GetPlayedOk() (*bool, bool) {
	if o == nil || IsNil(o.Played) {
		return nil, false
	}
	return o.Played, true
}

// HasPlayed returns a boolean if a field has been set.
func (o *ModelUserItemDataDto) HasPlayed() bool {
	if o != nil && !IsNil(o.Played) {
		return true
	}

	return false
}

// SetPlayed gets a reference to the given bool and assigns it to the Played field.
func (o *ModelUserItemDataDto) SetPlayed(v bool) {
	o.Played = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *ModelUserItemDataDto) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserItemDataDto) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *ModelUserItemDataDto) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *ModelUserItemDataDto) SetKey(v string) {
	o.Key = &v
}

// GetItemId returns the ItemId field value if set, zero value otherwise.
func (o *ModelUserItemDataDto) GetItemId() string {
	if o == nil || IsNil(o.ItemId) {
		var ret string
		return ret
	}
	return *o.ItemId
}

// GetItemIdOk returns a tuple with the ItemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserItemDataDto) GetItemIdOk() (*string, bool) {
	if o == nil || IsNil(o.ItemId) {
		return nil, false
	}
	return o.ItemId, true
}

// HasItemId returns a boolean if a field has been set.
func (o *ModelUserItemDataDto) HasItemId() bool {
	if o != nil && !IsNil(o.ItemId) {
		return true
	}

	return false
}

// SetItemId gets a reference to the given string and assigns it to the ItemId field.
func (o *ModelUserItemDataDto) SetItemId(v string) {
	o.ItemId = &v
}

// GetServerId returns the ServerId field value if set, zero value otherwise.
func (o *ModelUserItemDataDto) GetServerId() string {
	if o == nil || IsNil(o.ServerId) {
		var ret string
		return ret
	}
	return *o.ServerId
}

// GetServerIdOk returns a tuple with the ServerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserItemDataDto) GetServerIdOk() (*string, bool) {
	if o == nil || IsNil(o.ServerId) {
		return nil, false
	}
	return o.ServerId, true
}

// HasServerId returns a boolean if a field has been set.
func (o *ModelUserItemDataDto) HasServerId() bool {
	if o != nil && !IsNil(o.ServerId) {
		return true
	}

	return false
}

// SetServerId gets a reference to the given string and assigns it to the ServerId field.
func (o *ModelUserItemDataDto) SetServerId(v string) {
	o.ServerId = &v
}

func (o ModelUserItemDataDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelUserItemDataDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Rating.IsSet() {
		toSerialize["Rating"] = o.Rating.Get()
	}
	if o.PlayedPercentage.IsSet() {
		toSerialize["PlayedPercentage"] = o.PlayedPercentage.Get()
	}
	if o.UnplayedItemCount.IsSet() {
		toSerialize["UnplayedItemCount"] = o.UnplayedItemCount.Get()
	}
	if !IsNil(o.PlaybackPositionTicks) {
		toSerialize["PlaybackPositionTicks"] = o.PlaybackPositionTicks
	}
	if o.PlayCount.IsSet() {
		toSerialize["PlayCount"] = o.PlayCount.Get()
	}
	if !IsNil(o.IsFavorite) {
		toSerialize["IsFavorite"] = o.IsFavorite
	}
	if o.LastPlayedDate.IsSet() {
		toSerialize["LastPlayedDate"] = o.LastPlayedDate.Get()
	}
	if !IsNil(o.Played) {
		toSerialize["Played"] = o.Played
	}
	if !IsNil(o.Key) {
		toSerialize["Key"] = o.Key
	}
	if !IsNil(o.ItemId) {
		toSerialize["ItemId"] = o.ItemId
	}
	if !IsNil(o.ServerId) {
		toSerialize["ServerId"] = o.ServerId
	}
	return toSerialize, nil
}

type NullableModelUserItemDataDto struct {
	value *ModelUserItemDataDto
	isSet bool
}

func (v NullableModelUserItemDataDto) Get() *ModelUserItemDataDto {
	return v.value
}

func (v *NullableModelUserItemDataDto) Set(val *ModelUserItemDataDto) {
	v.value = val
	v.isSet = true
}

func (v NullableModelUserItemDataDto) IsSet() bool {
	return v.isSet
}

func (v *NullableModelUserItemDataDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelUserItemDataDto(val *ModelUserItemDataDto) *NullableModelUserItemDataDto {
	return &NullableModelUserItemDataDto{value: val, isSet: true}
}

func (v NullableModelUserItemDataDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelUserItemDataDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


