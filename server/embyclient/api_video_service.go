/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// VideoServiceAPIService VideoServiceAPI service
type VideoServiceAPIService service

type VideoServiceAPIGetVideosByIdByStreamfilenameRequest struct {
	ctx context.Context
	ApiService *VideoServiceAPIService
	streamFileName string
	id string
	container *string
	deviceProfileId *string
	deviceId *string
	audioCodec *string
	enableAutoStreamCopy *bool
	audioSampleRate *int32
	audioBitRate *int32
	audioChannels *int32
	maxAudioChannels *int32
	static *bool
	profile *string
	level *string
	framerate *float32
	maxFramerate *float32
	copyTimestamps *bool
	startTimeTicks *int64
	width *int32
	height *int32
	maxWidth *int32
	maxHeight *int32
	videoBitRate *int32
	subtitleStreamIndex *int32
	subtitleMethod *ModelSubtitleDeliveryMethod
	maxRefFrames *int32
	maxVideoBitDepth *int32
	videoCodec *string
	audioStreamIndex *int32
	videoStreamIndex *int32
}

// Container
func (r VideoServiceAPIGetVideosByIdByStreamfilenameRequest) Container(container string) VideoServiceAPIGetVideosByIdByStreamfilenameRequest {
	r.container = &container
	return r
}

// Optional. The dlna device profile id to utilize.
func (r VideoServiceAPIGetVideosByIdByStreamfilenameRequest) DeviceProfileId(deviceProfileId string) VideoServiceAPIGetVideosByIdByStreamfilenameRequest {
	r.deviceProfileId = &deviceProfileId
	return r
}

// The device id of the client requesting. Used to stop encoding processes when needed.
func (r VideoServiceAPIGetVideosByIdByStreamfilenameRequest) DeviceId(deviceId string) VideoServiceAPIGetVideosByIdByStreamfilenameRequest {
	r.deviceId = &deviceId
	return r
}

// Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension. Options: aac, mp3, vorbis, wma.
func (r VideoServiceAPIGetVideosByIdByStreamfilenameRequest) AudioCodec(audioCodec string) VideoServiceAPIGetVideosByIdByStreamfilenameRequest {
	r.audioCodec = &audioCodec
	return r
}

// Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
func (r VideoServiceAPIGetVideosByIdByStreamfilenameRequest) EnableAutoStreamCopy(enableAutoStreamCopy bool) VideoServiceAPIGetVideosByIdByStreamfilenameRequest {
	r.enableAutoStreamCopy = &enableAutoStreamCopy
	return r
}

// Optional. Specify a specific audio sample rate, e.g. 44100
func (r VideoServiceAPIGetVideosByIdByStreamfilenameRequest) AudioSampleRate(audioSampleRate int32) VideoServiceAPIGetVideosByIdByStreamfilenameRequest {
	r.audioSampleRate = &audioSampleRate
	return r
}

// Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
func (r VideoServiceAPIGetVideosByIdByStreamfilenameRequest) AudioBitRate(audioBitRate int32) VideoServiceAPIGetVideosByIdByStreamfilenameRequest {
	r.audioBitRate = &audioBitRate
	return r
}

// Optional. Specify a specific number of audio channels to encode to, e.g. 2
func (r VideoServiceAPIGetVideosByIdByStreamfilenameRequest) AudioChannels(audioChannels int32) VideoServiceAPIGetVideosByIdByStreamfilenameRequest {
	r.audioChannels = &audioChannels
	return r
}

// Optional. Specify a maximum number of audio channels to encode to, e.g. 2
func (r VideoServiceAPIGetVideosByIdByStreamfilenameRequest) MaxAudioChannels(maxAudioChannels int32) VideoServiceAPIGetVideosByIdByStreamfilenameRequest {
	r.maxAudioChannels = &maxAudioChannels
	return r
}

// Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false
func (r VideoServiceAPIGetVideosByIdByStreamfilenameRequest) Static(static bool) VideoServiceAPIGetVideosByIdByStreamfilenameRequest {
	r.static = &static
	return r
}

// Optional. Specify a specific h264 profile, e.g. main, baseline, high.
func (r VideoServiceAPIGetVideosByIdByStreamfilenameRequest) Profile(profile string) VideoServiceAPIGetVideosByIdByStreamfilenameRequest {
	r.profile = &profile
	return r
}

// Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
func (r VideoServiceAPIGetVideosByIdByStreamfilenameRequest) Level(level string) VideoServiceAPIGetVideosByIdByStreamfilenameRequest {
	r.level = &level
	return r
}

// Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
func (r VideoServiceAPIGetVideosByIdByStreamfilenameRequest) Framerate(framerate float32) VideoServiceAPIGetVideosByIdByStreamfilenameRequest {
	r.framerate = &framerate
	return r
}

// Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
func (r VideoServiceAPIGetVideosByIdByStreamfilenameRequest) MaxFramerate(maxFramerate float32) VideoServiceAPIGetVideosByIdByStreamfilenameRequest {
	r.maxFramerate = &maxFramerate
	return r
}

// Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
func (r VideoServiceAPIGetVideosByIdByStreamfilenameRequest) CopyTimestamps(copyTimestamps bool) VideoServiceAPIGetVideosByIdByStreamfilenameRequest {
	r.copyTimestamps = &copyTimestamps
	return r
}

// Optional. Specify a starting offset, in ticks. 1ms &#x3D; 10000 ticks.
func (r VideoServiceAPIGetVideosByIdByStreamfilenameRequest) StartTimeTicks(startTimeTicks int64) VideoServiceAPIGetVideosByIdByStreamfilenameRequest {
	r.startTimeTicks = &startTimeTicks
	return r
}

// Optional. The fixed horizontal resolution of the encoded video.
func (r VideoServiceAPIGetVideosByIdByStreamfilenameRequest) Width(width int32) VideoServiceAPIGetVideosByIdByStreamfilenameRequest {
	r.width = &width
	return r
}

// Optional. The fixed vertical resolution of the encoded video.
func (r VideoServiceAPIGetVideosByIdByStreamfilenameRequest) Height(height int32) VideoServiceAPIGetVideosByIdByStreamfilenameRequest {
	r.height = &height
	return r
}

// Optional. The maximum horizontal resolution of the encoded video.
func (r VideoServiceAPIGetVideosByIdByStreamfilenameRequest) MaxWidth(maxWidth int32) VideoServiceAPIGetVideosByIdByStreamfilenameRequest {
	r.maxWidth = &maxWidth
	return r
}

// Optional. The maximum vertical resolution of the encoded video.
func (r VideoServiceAPIGetVideosByIdByStreamfilenameRequest) MaxHeight(maxHeight int32) VideoServiceAPIGetVideosByIdByStreamfilenameRequest {
	r.maxHeight = &maxHeight
	return r
}

// Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
func (r VideoServiceAPIGetVideosByIdByStreamfilenameRequest) VideoBitRate(videoBitRate int32) VideoServiceAPIGetVideosByIdByStreamfilenameRequest {
	r.videoBitRate = &videoBitRate
	return r
}

// Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
func (r VideoServiceAPIGetVideosByIdByStreamfilenameRequest) SubtitleStreamIndex(subtitleStreamIndex int32) VideoServiceAPIGetVideosByIdByStreamfilenameRequest {
	r.subtitleStreamIndex = &subtitleStreamIndex
	return r
}

// Optional. Specify the subtitle delivery method.
func (r VideoServiceAPIGetVideosByIdByStreamfilenameRequest) SubtitleMethod(subtitleMethod ModelSubtitleDeliveryMethod) VideoServiceAPIGetVideosByIdByStreamfilenameRequest {
	r.subtitleMethod = &subtitleMethod
	return r
}

// Optional.
func (r VideoServiceAPIGetVideosByIdByStreamfilenameRequest) MaxRefFrames(maxRefFrames int32) VideoServiceAPIGetVideosByIdByStreamfilenameRequest {
	r.maxRefFrames = &maxRefFrames
	return r
}

// Optional.
func (r VideoServiceAPIGetVideosByIdByStreamfilenameRequest) MaxVideoBitDepth(maxVideoBitDepth int32) VideoServiceAPIGetVideosByIdByStreamfilenameRequest {
	r.maxVideoBitDepth = &maxVideoBitDepth
	return r
}

// Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension. Options: h264, mpeg4, theora, vpx, wmv.
func (r VideoServiceAPIGetVideosByIdByStreamfilenameRequest) VideoCodec(videoCodec string) VideoServiceAPIGetVideosByIdByStreamfilenameRequest {
	r.videoCodec = &videoCodec
	return r
}

// Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
func (r VideoServiceAPIGetVideosByIdByStreamfilenameRequest) AudioStreamIndex(audioStreamIndex int32) VideoServiceAPIGetVideosByIdByStreamfilenameRequest {
	r.audioStreamIndex = &audioStreamIndex
	return r
}

// Optional. The index of the video stream to use. If omitted the first video stream will be used.
func (r VideoServiceAPIGetVideosByIdByStreamfilenameRequest) VideoStreamIndex(videoStreamIndex int32) VideoServiceAPIGetVideosByIdByStreamfilenameRequest {
	r.videoStreamIndex = &videoStreamIndex
	return r
}

func (r VideoServiceAPIGetVideosByIdByStreamfilenameRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetVideosByIdByStreamfilenameExecute(r)
}

/*
GetVideosByIdByStreamfilename Gets a video stream

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param streamFileName
 @param id Item Id
 @return VideoServiceAPIGetVideosByIdByStreamfilenameRequest
*/
func (a *VideoServiceAPIService) GetVideosByIdByStreamfilename(ctx context.Context, streamFileName string, id string) VideoServiceAPIGetVideosByIdByStreamfilenameRequest {
	return VideoServiceAPIGetVideosByIdByStreamfilenameRequest{
		ApiService: a,
		ctx: ctx,
		streamFileName: streamFileName,
		id: id,
	}
}

// Execute executes the request
func (a *VideoServiceAPIService) GetVideosByIdByStreamfilenameExecute(r VideoServiceAPIGetVideosByIdByStreamfilenameRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VideoServiceAPIService.GetVideosByIdByStreamfilename")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Videos/{Id}/{StreamFileName}"
	localVarPath = strings.Replace(localVarPath, "{"+"StreamFileName"+"}", url.PathEscape(parameterValueToString(r.streamFileName, "streamFileName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.container == nil {
		return nil, reportError("container is required and must be specified")
	}

	if r.deviceProfileId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "DeviceProfileId", r.deviceProfileId, "")
	}
	if r.deviceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "DeviceId", r.deviceId, "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "Container", r.container, "")
	if r.audioCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioCodec", r.audioCodec, "")
	}
	if r.enableAutoStreamCopy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableAutoStreamCopy", r.enableAutoStreamCopy, "")
	}
	if r.audioSampleRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioSampleRate", r.audioSampleRate, "")
	}
	if r.audioBitRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioBitRate", r.audioBitRate, "")
	}
	if r.audioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioChannels", r.audioChannels, "")
	}
	if r.maxAudioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxAudioChannels", r.maxAudioChannels, "")
	}
	if r.static != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Static", r.static, "")
	}
	if r.profile != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Profile", r.profile, "")
	}
	if r.level != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Level", r.level, "")
	}
	if r.framerate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Framerate", r.framerate, "")
	}
	if r.maxFramerate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxFramerate", r.maxFramerate, "")
	}
	if r.copyTimestamps != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "CopyTimestamps", r.copyTimestamps, "")
	}
	if r.startTimeTicks != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "StartTimeTicks", r.startTimeTicks, "")
	}
	if r.width != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Width", r.width, "")
	}
	if r.height != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Height", r.height, "")
	}
	if r.maxWidth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxWidth", r.maxWidth, "")
	}
	if r.maxHeight != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxHeight", r.maxHeight, "")
	}
	if r.videoBitRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoBitRate", r.videoBitRate, "")
	}
	if r.subtitleStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SubtitleStreamIndex", r.subtitleStreamIndex, "")
	}
	if r.subtitleMethod != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SubtitleMethod", r.subtitleMethod, "")
	}
	if r.maxRefFrames != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxRefFrames", r.maxRefFrames, "")
	}
	if r.maxVideoBitDepth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxVideoBitDepth", r.maxVideoBitDepth, "")
	}
	if r.videoCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoCodec", r.videoCodec, "")
	}
	if r.audioStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioStreamIndex", r.audioStreamIndex, "")
	}
	if r.videoStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoStreamIndex", r.videoStreamIndex, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type VideoServiceAPIGetVideosByIdStreamRequest struct {
	ctx context.Context
	ApiService *VideoServiceAPIService
	id string
	container *string
	deviceProfileId *string
	deviceId *string
	audioCodec *string
	enableAutoStreamCopy *bool
	audioSampleRate *int32
	audioBitRate *int32
	audioChannels *int32
	maxAudioChannels *int32
	static *bool
	profile *string
	level *string
	framerate *float32
	maxFramerate *float32
	copyTimestamps *bool
	startTimeTicks *int64
	width *int32
	height *int32
	maxWidth *int32
	maxHeight *int32
	videoBitRate *int32
	subtitleStreamIndex *int32
	subtitleMethod *ModelSubtitleDeliveryMethod
	maxRefFrames *int32
	maxVideoBitDepth *int32
	videoCodec *string
	audioStreamIndex *int32
	videoStreamIndex *int32
}

// Container
func (r VideoServiceAPIGetVideosByIdStreamRequest) Container(container string) VideoServiceAPIGetVideosByIdStreamRequest {
	r.container = &container
	return r
}

// Optional. The dlna device profile id to utilize.
func (r VideoServiceAPIGetVideosByIdStreamRequest) DeviceProfileId(deviceProfileId string) VideoServiceAPIGetVideosByIdStreamRequest {
	r.deviceProfileId = &deviceProfileId
	return r
}

// The device id of the client requesting. Used to stop encoding processes when needed.
func (r VideoServiceAPIGetVideosByIdStreamRequest) DeviceId(deviceId string) VideoServiceAPIGetVideosByIdStreamRequest {
	r.deviceId = &deviceId
	return r
}

// Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension. Options: aac, mp3, vorbis, wma.
func (r VideoServiceAPIGetVideosByIdStreamRequest) AudioCodec(audioCodec string) VideoServiceAPIGetVideosByIdStreamRequest {
	r.audioCodec = &audioCodec
	return r
}

// Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
func (r VideoServiceAPIGetVideosByIdStreamRequest) EnableAutoStreamCopy(enableAutoStreamCopy bool) VideoServiceAPIGetVideosByIdStreamRequest {
	r.enableAutoStreamCopy = &enableAutoStreamCopy
	return r
}

// Optional. Specify a specific audio sample rate, e.g. 44100
func (r VideoServiceAPIGetVideosByIdStreamRequest) AudioSampleRate(audioSampleRate int32) VideoServiceAPIGetVideosByIdStreamRequest {
	r.audioSampleRate = &audioSampleRate
	return r
}

// Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
func (r VideoServiceAPIGetVideosByIdStreamRequest) AudioBitRate(audioBitRate int32) VideoServiceAPIGetVideosByIdStreamRequest {
	r.audioBitRate = &audioBitRate
	return r
}

// Optional. Specify a specific number of audio channels to encode to, e.g. 2
func (r VideoServiceAPIGetVideosByIdStreamRequest) AudioChannels(audioChannels int32) VideoServiceAPIGetVideosByIdStreamRequest {
	r.audioChannels = &audioChannels
	return r
}

// Optional. Specify a maximum number of audio channels to encode to, e.g. 2
func (r VideoServiceAPIGetVideosByIdStreamRequest) MaxAudioChannels(maxAudioChannels int32) VideoServiceAPIGetVideosByIdStreamRequest {
	r.maxAudioChannels = &maxAudioChannels
	return r
}

// Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false
func (r VideoServiceAPIGetVideosByIdStreamRequest) Static(static bool) VideoServiceAPIGetVideosByIdStreamRequest {
	r.static = &static
	return r
}

// Optional. Specify a specific h264 profile, e.g. main, baseline, high.
func (r VideoServiceAPIGetVideosByIdStreamRequest) Profile(profile string) VideoServiceAPIGetVideosByIdStreamRequest {
	r.profile = &profile
	return r
}

// Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
func (r VideoServiceAPIGetVideosByIdStreamRequest) Level(level string) VideoServiceAPIGetVideosByIdStreamRequest {
	r.level = &level
	return r
}

// Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
func (r VideoServiceAPIGetVideosByIdStreamRequest) Framerate(framerate float32) VideoServiceAPIGetVideosByIdStreamRequest {
	r.framerate = &framerate
	return r
}

// Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
func (r VideoServiceAPIGetVideosByIdStreamRequest) MaxFramerate(maxFramerate float32) VideoServiceAPIGetVideosByIdStreamRequest {
	r.maxFramerate = &maxFramerate
	return r
}

// Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
func (r VideoServiceAPIGetVideosByIdStreamRequest) CopyTimestamps(copyTimestamps bool) VideoServiceAPIGetVideosByIdStreamRequest {
	r.copyTimestamps = &copyTimestamps
	return r
}

// Optional. Specify a starting offset, in ticks. 1ms &#x3D; 10000 ticks.
func (r VideoServiceAPIGetVideosByIdStreamRequest) StartTimeTicks(startTimeTicks int64) VideoServiceAPIGetVideosByIdStreamRequest {
	r.startTimeTicks = &startTimeTicks
	return r
}

// Optional. The fixed horizontal resolution of the encoded video.
func (r VideoServiceAPIGetVideosByIdStreamRequest) Width(width int32) VideoServiceAPIGetVideosByIdStreamRequest {
	r.width = &width
	return r
}

// Optional. The fixed vertical resolution of the encoded video.
func (r VideoServiceAPIGetVideosByIdStreamRequest) Height(height int32) VideoServiceAPIGetVideosByIdStreamRequest {
	r.height = &height
	return r
}

// Optional. The maximum horizontal resolution of the encoded video.
func (r VideoServiceAPIGetVideosByIdStreamRequest) MaxWidth(maxWidth int32) VideoServiceAPIGetVideosByIdStreamRequest {
	r.maxWidth = &maxWidth
	return r
}

// Optional. The maximum vertical resolution of the encoded video.
func (r VideoServiceAPIGetVideosByIdStreamRequest) MaxHeight(maxHeight int32) VideoServiceAPIGetVideosByIdStreamRequest {
	r.maxHeight = &maxHeight
	return r
}

// Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
func (r VideoServiceAPIGetVideosByIdStreamRequest) VideoBitRate(videoBitRate int32) VideoServiceAPIGetVideosByIdStreamRequest {
	r.videoBitRate = &videoBitRate
	return r
}

// Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
func (r VideoServiceAPIGetVideosByIdStreamRequest) SubtitleStreamIndex(subtitleStreamIndex int32) VideoServiceAPIGetVideosByIdStreamRequest {
	r.subtitleStreamIndex = &subtitleStreamIndex
	return r
}

// Optional. Specify the subtitle delivery method.
func (r VideoServiceAPIGetVideosByIdStreamRequest) SubtitleMethod(subtitleMethod ModelSubtitleDeliveryMethod) VideoServiceAPIGetVideosByIdStreamRequest {
	r.subtitleMethod = &subtitleMethod
	return r
}

// Optional.
func (r VideoServiceAPIGetVideosByIdStreamRequest) MaxRefFrames(maxRefFrames int32) VideoServiceAPIGetVideosByIdStreamRequest {
	r.maxRefFrames = &maxRefFrames
	return r
}

// Optional.
func (r VideoServiceAPIGetVideosByIdStreamRequest) MaxVideoBitDepth(maxVideoBitDepth int32) VideoServiceAPIGetVideosByIdStreamRequest {
	r.maxVideoBitDepth = &maxVideoBitDepth
	return r
}

// Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension. Options: h264, mpeg4, theora, vpx, wmv.
func (r VideoServiceAPIGetVideosByIdStreamRequest) VideoCodec(videoCodec string) VideoServiceAPIGetVideosByIdStreamRequest {
	r.videoCodec = &videoCodec
	return r
}

// Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
func (r VideoServiceAPIGetVideosByIdStreamRequest) AudioStreamIndex(audioStreamIndex int32) VideoServiceAPIGetVideosByIdStreamRequest {
	r.audioStreamIndex = &audioStreamIndex
	return r
}

// Optional. The index of the video stream to use. If omitted the first video stream will be used.
func (r VideoServiceAPIGetVideosByIdStreamRequest) VideoStreamIndex(videoStreamIndex int32) VideoServiceAPIGetVideosByIdStreamRequest {
	r.videoStreamIndex = &videoStreamIndex
	return r
}

func (r VideoServiceAPIGetVideosByIdStreamRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetVideosByIdStreamExecute(r)
}

/*
GetVideosByIdStream Gets a video stream

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Item Id
 @return VideoServiceAPIGetVideosByIdStreamRequest
*/
func (a *VideoServiceAPIService) GetVideosByIdStream(ctx context.Context, id string) VideoServiceAPIGetVideosByIdStreamRequest {
	return VideoServiceAPIGetVideosByIdStreamRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *VideoServiceAPIService) GetVideosByIdStreamExecute(r VideoServiceAPIGetVideosByIdStreamRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VideoServiceAPIService.GetVideosByIdStream")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Videos/{Id}/stream"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.container == nil {
		return nil, reportError("container is required and must be specified")
	}

	if r.deviceProfileId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "DeviceProfileId", r.deviceProfileId, "")
	}
	if r.deviceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "DeviceId", r.deviceId, "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "Container", r.container, "")
	if r.audioCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioCodec", r.audioCodec, "")
	}
	if r.enableAutoStreamCopy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableAutoStreamCopy", r.enableAutoStreamCopy, "")
	}
	if r.audioSampleRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioSampleRate", r.audioSampleRate, "")
	}
	if r.audioBitRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioBitRate", r.audioBitRate, "")
	}
	if r.audioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioChannels", r.audioChannels, "")
	}
	if r.maxAudioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxAudioChannels", r.maxAudioChannels, "")
	}
	if r.static != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Static", r.static, "")
	}
	if r.profile != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Profile", r.profile, "")
	}
	if r.level != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Level", r.level, "")
	}
	if r.framerate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Framerate", r.framerate, "")
	}
	if r.maxFramerate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxFramerate", r.maxFramerate, "")
	}
	if r.copyTimestamps != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "CopyTimestamps", r.copyTimestamps, "")
	}
	if r.startTimeTicks != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "StartTimeTicks", r.startTimeTicks, "")
	}
	if r.width != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Width", r.width, "")
	}
	if r.height != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Height", r.height, "")
	}
	if r.maxWidth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxWidth", r.maxWidth, "")
	}
	if r.maxHeight != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxHeight", r.maxHeight, "")
	}
	if r.videoBitRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoBitRate", r.videoBitRate, "")
	}
	if r.subtitleStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SubtitleStreamIndex", r.subtitleStreamIndex, "")
	}
	if r.subtitleMethod != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SubtitleMethod", r.subtitleMethod, "")
	}
	if r.maxRefFrames != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxRefFrames", r.maxRefFrames, "")
	}
	if r.maxVideoBitDepth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxVideoBitDepth", r.maxVideoBitDepth, "")
	}
	if r.videoCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoCodec", r.videoCodec, "")
	}
	if r.audioStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioStreamIndex", r.audioStreamIndex, "")
	}
	if r.videoStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoStreamIndex", r.videoStreamIndex, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type VideoServiceAPIGetVideosByIdStreamByContainerRequest struct {
	ctx context.Context
	ApiService *VideoServiceAPIService
	id string
	container string
	deviceProfileId *string
	deviceId *string
	audioCodec *string
	enableAutoStreamCopy *bool
	audioSampleRate *int32
	audioBitRate *int32
	audioChannels *int32
	maxAudioChannels *int32
	static *bool
	profile *string
	level *string
	framerate *float32
	maxFramerate *float32
	copyTimestamps *bool
	startTimeTicks *int64
	width *int32
	height *int32
	maxWidth *int32
	maxHeight *int32
	videoBitRate *int32
	subtitleStreamIndex *int32
	subtitleMethod *ModelSubtitleDeliveryMethod
	maxRefFrames *int32
	maxVideoBitDepth *int32
	videoCodec *string
	audioStreamIndex *int32
	videoStreamIndex *int32
}

// Optional. The dlna device profile id to utilize.
func (r VideoServiceAPIGetVideosByIdStreamByContainerRequest) DeviceProfileId(deviceProfileId string) VideoServiceAPIGetVideosByIdStreamByContainerRequest {
	r.deviceProfileId = &deviceProfileId
	return r
}

// The device id of the client requesting. Used to stop encoding processes when needed.
func (r VideoServiceAPIGetVideosByIdStreamByContainerRequest) DeviceId(deviceId string) VideoServiceAPIGetVideosByIdStreamByContainerRequest {
	r.deviceId = &deviceId
	return r
}

// Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension. Options: aac, mp3, vorbis, wma.
func (r VideoServiceAPIGetVideosByIdStreamByContainerRequest) AudioCodec(audioCodec string) VideoServiceAPIGetVideosByIdStreamByContainerRequest {
	r.audioCodec = &audioCodec
	return r
}

// Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
func (r VideoServiceAPIGetVideosByIdStreamByContainerRequest) EnableAutoStreamCopy(enableAutoStreamCopy bool) VideoServiceAPIGetVideosByIdStreamByContainerRequest {
	r.enableAutoStreamCopy = &enableAutoStreamCopy
	return r
}

// Optional. Specify a specific audio sample rate, e.g. 44100
func (r VideoServiceAPIGetVideosByIdStreamByContainerRequest) AudioSampleRate(audioSampleRate int32) VideoServiceAPIGetVideosByIdStreamByContainerRequest {
	r.audioSampleRate = &audioSampleRate
	return r
}

// Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
func (r VideoServiceAPIGetVideosByIdStreamByContainerRequest) AudioBitRate(audioBitRate int32) VideoServiceAPIGetVideosByIdStreamByContainerRequest {
	r.audioBitRate = &audioBitRate
	return r
}

// Optional. Specify a specific number of audio channels to encode to, e.g. 2
func (r VideoServiceAPIGetVideosByIdStreamByContainerRequest) AudioChannels(audioChannels int32) VideoServiceAPIGetVideosByIdStreamByContainerRequest {
	r.audioChannels = &audioChannels
	return r
}

// Optional. Specify a maximum number of audio channels to encode to, e.g. 2
func (r VideoServiceAPIGetVideosByIdStreamByContainerRequest) MaxAudioChannels(maxAudioChannels int32) VideoServiceAPIGetVideosByIdStreamByContainerRequest {
	r.maxAudioChannels = &maxAudioChannels
	return r
}

// Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false
func (r VideoServiceAPIGetVideosByIdStreamByContainerRequest) Static(static bool) VideoServiceAPIGetVideosByIdStreamByContainerRequest {
	r.static = &static
	return r
}

// Optional. Specify a specific h264 profile, e.g. main, baseline, high.
func (r VideoServiceAPIGetVideosByIdStreamByContainerRequest) Profile(profile string) VideoServiceAPIGetVideosByIdStreamByContainerRequest {
	r.profile = &profile
	return r
}

// Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
func (r VideoServiceAPIGetVideosByIdStreamByContainerRequest) Level(level string) VideoServiceAPIGetVideosByIdStreamByContainerRequest {
	r.level = &level
	return r
}

// Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
func (r VideoServiceAPIGetVideosByIdStreamByContainerRequest) Framerate(framerate float32) VideoServiceAPIGetVideosByIdStreamByContainerRequest {
	r.framerate = &framerate
	return r
}

// Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
func (r VideoServiceAPIGetVideosByIdStreamByContainerRequest) MaxFramerate(maxFramerate float32) VideoServiceAPIGetVideosByIdStreamByContainerRequest {
	r.maxFramerate = &maxFramerate
	return r
}

// Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
func (r VideoServiceAPIGetVideosByIdStreamByContainerRequest) CopyTimestamps(copyTimestamps bool) VideoServiceAPIGetVideosByIdStreamByContainerRequest {
	r.copyTimestamps = &copyTimestamps
	return r
}

// Optional. Specify a starting offset, in ticks. 1ms &#x3D; 10000 ticks.
func (r VideoServiceAPIGetVideosByIdStreamByContainerRequest) StartTimeTicks(startTimeTicks int64) VideoServiceAPIGetVideosByIdStreamByContainerRequest {
	r.startTimeTicks = &startTimeTicks
	return r
}

// Optional. The fixed horizontal resolution of the encoded video.
func (r VideoServiceAPIGetVideosByIdStreamByContainerRequest) Width(width int32) VideoServiceAPIGetVideosByIdStreamByContainerRequest {
	r.width = &width
	return r
}

// Optional. The fixed vertical resolution of the encoded video.
func (r VideoServiceAPIGetVideosByIdStreamByContainerRequest) Height(height int32) VideoServiceAPIGetVideosByIdStreamByContainerRequest {
	r.height = &height
	return r
}

// Optional. The maximum horizontal resolution of the encoded video.
func (r VideoServiceAPIGetVideosByIdStreamByContainerRequest) MaxWidth(maxWidth int32) VideoServiceAPIGetVideosByIdStreamByContainerRequest {
	r.maxWidth = &maxWidth
	return r
}

// Optional. The maximum vertical resolution of the encoded video.
func (r VideoServiceAPIGetVideosByIdStreamByContainerRequest) MaxHeight(maxHeight int32) VideoServiceAPIGetVideosByIdStreamByContainerRequest {
	r.maxHeight = &maxHeight
	return r
}

// Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
func (r VideoServiceAPIGetVideosByIdStreamByContainerRequest) VideoBitRate(videoBitRate int32) VideoServiceAPIGetVideosByIdStreamByContainerRequest {
	r.videoBitRate = &videoBitRate
	return r
}

// Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
func (r VideoServiceAPIGetVideosByIdStreamByContainerRequest) SubtitleStreamIndex(subtitleStreamIndex int32) VideoServiceAPIGetVideosByIdStreamByContainerRequest {
	r.subtitleStreamIndex = &subtitleStreamIndex
	return r
}

// Optional. Specify the subtitle delivery method.
func (r VideoServiceAPIGetVideosByIdStreamByContainerRequest) SubtitleMethod(subtitleMethod ModelSubtitleDeliveryMethod) VideoServiceAPIGetVideosByIdStreamByContainerRequest {
	r.subtitleMethod = &subtitleMethod
	return r
}

// Optional.
func (r VideoServiceAPIGetVideosByIdStreamByContainerRequest) MaxRefFrames(maxRefFrames int32) VideoServiceAPIGetVideosByIdStreamByContainerRequest {
	r.maxRefFrames = &maxRefFrames
	return r
}

// Optional.
func (r VideoServiceAPIGetVideosByIdStreamByContainerRequest) MaxVideoBitDepth(maxVideoBitDepth int32) VideoServiceAPIGetVideosByIdStreamByContainerRequest {
	r.maxVideoBitDepth = &maxVideoBitDepth
	return r
}

// Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension. Options: h264, mpeg4, theora, vpx, wmv.
func (r VideoServiceAPIGetVideosByIdStreamByContainerRequest) VideoCodec(videoCodec string) VideoServiceAPIGetVideosByIdStreamByContainerRequest {
	r.videoCodec = &videoCodec
	return r
}

// Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
func (r VideoServiceAPIGetVideosByIdStreamByContainerRequest) AudioStreamIndex(audioStreamIndex int32) VideoServiceAPIGetVideosByIdStreamByContainerRequest {
	r.audioStreamIndex = &audioStreamIndex
	return r
}

// Optional. The index of the video stream to use. If omitted the first video stream will be used.
func (r VideoServiceAPIGetVideosByIdStreamByContainerRequest) VideoStreamIndex(videoStreamIndex int32) VideoServiceAPIGetVideosByIdStreamByContainerRequest {
	r.videoStreamIndex = &videoStreamIndex
	return r
}

func (r VideoServiceAPIGetVideosByIdStreamByContainerRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetVideosByIdStreamByContainerExecute(r)
}

/*
GetVideosByIdStreamByContainer Gets a video stream

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Item Id
 @param container Container
 @return VideoServiceAPIGetVideosByIdStreamByContainerRequest
*/
func (a *VideoServiceAPIService) GetVideosByIdStreamByContainer(ctx context.Context, id string, container string) VideoServiceAPIGetVideosByIdStreamByContainerRequest {
	return VideoServiceAPIGetVideosByIdStreamByContainerRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		container: container,
	}
}

// Execute executes the request
func (a *VideoServiceAPIService) GetVideosByIdStreamByContainerExecute(r VideoServiceAPIGetVideosByIdStreamByContainerRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VideoServiceAPIService.GetVideosByIdStreamByContainer")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Videos/{Id}/stream.{Container}"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Container"+"}", url.PathEscape(parameterValueToString(r.container, "container")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.deviceProfileId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "DeviceProfileId", r.deviceProfileId, "")
	}
	if r.deviceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "DeviceId", r.deviceId, "")
	}
	if r.audioCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioCodec", r.audioCodec, "")
	}
	if r.enableAutoStreamCopy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableAutoStreamCopy", r.enableAutoStreamCopy, "")
	}
	if r.audioSampleRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioSampleRate", r.audioSampleRate, "")
	}
	if r.audioBitRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioBitRate", r.audioBitRate, "")
	}
	if r.audioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioChannels", r.audioChannels, "")
	}
	if r.maxAudioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxAudioChannels", r.maxAudioChannels, "")
	}
	if r.static != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Static", r.static, "")
	}
	if r.profile != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Profile", r.profile, "")
	}
	if r.level != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Level", r.level, "")
	}
	if r.framerate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Framerate", r.framerate, "")
	}
	if r.maxFramerate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxFramerate", r.maxFramerate, "")
	}
	if r.copyTimestamps != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "CopyTimestamps", r.copyTimestamps, "")
	}
	if r.startTimeTicks != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "StartTimeTicks", r.startTimeTicks, "")
	}
	if r.width != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Width", r.width, "")
	}
	if r.height != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Height", r.height, "")
	}
	if r.maxWidth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxWidth", r.maxWidth, "")
	}
	if r.maxHeight != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxHeight", r.maxHeight, "")
	}
	if r.videoBitRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoBitRate", r.videoBitRate, "")
	}
	if r.subtitleStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SubtitleStreamIndex", r.subtitleStreamIndex, "")
	}
	if r.subtitleMethod != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SubtitleMethod", r.subtitleMethod, "")
	}
	if r.maxRefFrames != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxRefFrames", r.maxRefFrames, "")
	}
	if r.maxVideoBitDepth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxVideoBitDepth", r.maxVideoBitDepth, "")
	}
	if r.videoCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoCodec", r.videoCodec, "")
	}
	if r.audioStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioStreamIndex", r.audioStreamIndex, "")
	}
	if r.videoStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoStreamIndex", r.videoStreamIndex, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type VideoServiceAPIHeadVideosByIdByStreamfilenameRequest struct {
	ctx context.Context
	ApiService *VideoServiceAPIService
	streamFileName string
	id string
	container *string
	deviceProfileId *string
	deviceId *string
	audioCodec *string
	enableAutoStreamCopy *bool
	audioSampleRate *int32
	audioBitRate *int32
	audioChannels *int32
	maxAudioChannels *int32
	static *bool
	profile *string
	level *string
	framerate *float32
	maxFramerate *float32
	copyTimestamps *bool
	startTimeTicks *int64
	width *int32
	height *int32
	maxWidth *int32
	maxHeight *int32
	videoBitRate *int32
	subtitleStreamIndex *int32
	subtitleMethod *ModelSubtitleDeliveryMethod
	maxRefFrames *int32
	maxVideoBitDepth *int32
	videoCodec *string
	audioStreamIndex *int32
	videoStreamIndex *int32
}

// Container
func (r VideoServiceAPIHeadVideosByIdByStreamfilenameRequest) Container(container string) VideoServiceAPIHeadVideosByIdByStreamfilenameRequest {
	r.container = &container
	return r
}

// Optional. The dlna device profile id to utilize.
func (r VideoServiceAPIHeadVideosByIdByStreamfilenameRequest) DeviceProfileId(deviceProfileId string) VideoServiceAPIHeadVideosByIdByStreamfilenameRequest {
	r.deviceProfileId = &deviceProfileId
	return r
}

// The device id of the client requesting. Used to stop encoding processes when needed.
func (r VideoServiceAPIHeadVideosByIdByStreamfilenameRequest) DeviceId(deviceId string) VideoServiceAPIHeadVideosByIdByStreamfilenameRequest {
	r.deviceId = &deviceId
	return r
}

// Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension. Options: aac, mp3, vorbis, wma.
func (r VideoServiceAPIHeadVideosByIdByStreamfilenameRequest) AudioCodec(audioCodec string) VideoServiceAPIHeadVideosByIdByStreamfilenameRequest {
	r.audioCodec = &audioCodec
	return r
}

// Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
func (r VideoServiceAPIHeadVideosByIdByStreamfilenameRequest) EnableAutoStreamCopy(enableAutoStreamCopy bool) VideoServiceAPIHeadVideosByIdByStreamfilenameRequest {
	r.enableAutoStreamCopy = &enableAutoStreamCopy
	return r
}

// Optional. Specify a specific audio sample rate, e.g. 44100
func (r VideoServiceAPIHeadVideosByIdByStreamfilenameRequest) AudioSampleRate(audioSampleRate int32) VideoServiceAPIHeadVideosByIdByStreamfilenameRequest {
	r.audioSampleRate = &audioSampleRate
	return r
}

// Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
func (r VideoServiceAPIHeadVideosByIdByStreamfilenameRequest) AudioBitRate(audioBitRate int32) VideoServiceAPIHeadVideosByIdByStreamfilenameRequest {
	r.audioBitRate = &audioBitRate
	return r
}

// Optional. Specify a specific number of audio channels to encode to, e.g. 2
func (r VideoServiceAPIHeadVideosByIdByStreamfilenameRequest) AudioChannels(audioChannels int32) VideoServiceAPIHeadVideosByIdByStreamfilenameRequest {
	r.audioChannels = &audioChannels
	return r
}

// Optional. Specify a maximum number of audio channels to encode to, e.g. 2
func (r VideoServiceAPIHeadVideosByIdByStreamfilenameRequest) MaxAudioChannels(maxAudioChannels int32) VideoServiceAPIHeadVideosByIdByStreamfilenameRequest {
	r.maxAudioChannels = &maxAudioChannels
	return r
}

// Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false
func (r VideoServiceAPIHeadVideosByIdByStreamfilenameRequest) Static(static bool) VideoServiceAPIHeadVideosByIdByStreamfilenameRequest {
	r.static = &static
	return r
}

// Optional. Specify a specific h264 profile, e.g. main, baseline, high.
func (r VideoServiceAPIHeadVideosByIdByStreamfilenameRequest) Profile(profile string) VideoServiceAPIHeadVideosByIdByStreamfilenameRequest {
	r.profile = &profile
	return r
}

// Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
func (r VideoServiceAPIHeadVideosByIdByStreamfilenameRequest) Level(level string) VideoServiceAPIHeadVideosByIdByStreamfilenameRequest {
	r.level = &level
	return r
}

// Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
func (r VideoServiceAPIHeadVideosByIdByStreamfilenameRequest) Framerate(framerate float32) VideoServiceAPIHeadVideosByIdByStreamfilenameRequest {
	r.framerate = &framerate
	return r
}

// Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
func (r VideoServiceAPIHeadVideosByIdByStreamfilenameRequest) MaxFramerate(maxFramerate float32) VideoServiceAPIHeadVideosByIdByStreamfilenameRequest {
	r.maxFramerate = &maxFramerate
	return r
}

// Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
func (r VideoServiceAPIHeadVideosByIdByStreamfilenameRequest) CopyTimestamps(copyTimestamps bool) VideoServiceAPIHeadVideosByIdByStreamfilenameRequest {
	r.copyTimestamps = &copyTimestamps
	return r
}

// Optional. Specify a starting offset, in ticks. 1ms &#x3D; 10000 ticks.
func (r VideoServiceAPIHeadVideosByIdByStreamfilenameRequest) StartTimeTicks(startTimeTicks int64) VideoServiceAPIHeadVideosByIdByStreamfilenameRequest {
	r.startTimeTicks = &startTimeTicks
	return r
}

// Optional. The fixed horizontal resolution of the encoded video.
func (r VideoServiceAPIHeadVideosByIdByStreamfilenameRequest) Width(width int32) VideoServiceAPIHeadVideosByIdByStreamfilenameRequest {
	r.width = &width
	return r
}

// Optional. The fixed vertical resolution of the encoded video.
func (r VideoServiceAPIHeadVideosByIdByStreamfilenameRequest) Height(height int32) VideoServiceAPIHeadVideosByIdByStreamfilenameRequest {
	r.height = &height
	return r
}

// Optional. The maximum horizontal resolution of the encoded video.
func (r VideoServiceAPIHeadVideosByIdByStreamfilenameRequest) MaxWidth(maxWidth int32) VideoServiceAPIHeadVideosByIdByStreamfilenameRequest {
	r.maxWidth = &maxWidth
	return r
}

// Optional. The maximum vertical resolution of the encoded video.
func (r VideoServiceAPIHeadVideosByIdByStreamfilenameRequest) MaxHeight(maxHeight int32) VideoServiceAPIHeadVideosByIdByStreamfilenameRequest {
	r.maxHeight = &maxHeight
	return r
}

// Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
func (r VideoServiceAPIHeadVideosByIdByStreamfilenameRequest) VideoBitRate(videoBitRate int32) VideoServiceAPIHeadVideosByIdByStreamfilenameRequest {
	r.videoBitRate = &videoBitRate
	return r
}

// Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
func (r VideoServiceAPIHeadVideosByIdByStreamfilenameRequest) SubtitleStreamIndex(subtitleStreamIndex int32) VideoServiceAPIHeadVideosByIdByStreamfilenameRequest {
	r.subtitleStreamIndex = &subtitleStreamIndex
	return r
}

// Optional. Specify the subtitle delivery method.
func (r VideoServiceAPIHeadVideosByIdByStreamfilenameRequest) SubtitleMethod(subtitleMethod ModelSubtitleDeliveryMethod) VideoServiceAPIHeadVideosByIdByStreamfilenameRequest {
	r.subtitleMethod = &subtitleMethod
	return r
}

// Optional.
func (r VideoServiceAPIHeadVideosByIdByStreamfilenameRequest) MaxRefFrames(maxRefFrames int32) VideoServiceAPIHeadVideosByIdByStreamfilenameRequest {
	r.maxRefFrames = &maxRefFrames
	return r
}

// Optional.
func (r VideoServiceAPIHeadVideosByIdByStreamfilenameRequest) MaxVideoBitDepth(maxVideoBitDepth int32) VideoServiceAPIHeadVideosByIdByStreamfilenameRequest {
	r.maxVideoBitDepth = &maxVideoBitDepth
	return r
}

// Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension. Options: h264, mpeg4, theora, vpx, wmv.
func (r VideoServiceAPIHeadVideosByIdByStreamfilenameRequest) VideoCodec(videoCodec string) VideoServiceAPIHeadVideosByIdByStreamfilenameRequest {
	r.videoCodec = &videoCodec
	return r
}

// Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
func (r VideoServiceAPIHeadVideosByIdByStreamfilenameRequest) AudioStreamIndex(audioStreamIndex int32) VideoServiceAPIHeadVideosByIdByStreamfilenameRequest {
	r.audioStreamIndex = &audioStreamIndex
	return r
}

// Optional. The index of the video stream to use. If omitted the first video stream will be used.
func (r VideoServiceAPIHeadVideosByIdByStreamfilenameRequest) VideoStreamIndex(videoStreamIndex int32) VideoServiceAPIHeadVideosByIdByStreamfilenameRequest {
	r.videoStreamIndex = &videoStreamIndex
	return r
}

func (r VideoServiceAPIHeadVideosByIdByStreamfilenameRequest) Execute() (*http.Response, error) {
	return r.ApiService.HeadVideosByIdByStreamfilenameExecute(r)
}

/*
HeadVideosByIdByStreamfilename Gets a video stream

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param streamFileName
 @param id Item Id
 @return VideoServiceAPIHeadVideosByIdByStreamfilenameRequest
*/
func (a *VideoServiceAPIService) HeadVideosByIdByStreamfilename(ctx context.Context, streamFileName string, id string) VideoServiceAPIHeadVideosByIdByStreamfilenameRequest {
	return VideoServiceAPIHeadVideosByIdByStreamfilenameRequest{
		ApiService: a,
		ctx: ctx,
		streamFileName: streamFileName,
		id: id,
	}
}

// Execute executes the request
func (a *VideoServiceAPIService) HeadVideosByIdByStreamfilenameExecute(r VideoServiceAPIHeadVideosByIdByStreamfilenameRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodHead
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VideoServiceAPIService.HeadVideosByIdByStreamfilename")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Videos/{Id}/{StreamFileName}"
	localVarPath = strings.Replace(localVarPath, "{"+"StreamFileName"+"}", url.PathEscape(parameterValueToString(r.streamFileName, "streamFileName")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.container == nil {
		return nil, reportError("container is required and must be specified")
	}

	if r.deviceProfileId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "DeviceProfileId", r.deviceProfileId, "")
	}
	if r.deviceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "DeviceId", r.deviceId, "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "Container", r.container, "")
	if r.audioCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioCodec", r.audioCodec, "")
	}
	if r.enableAutoStreamCopy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableAutoStreamCopy", r.enableAutoStreamCopy, "")
	}
	if r.audioSampleRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioSampleRate", r.audioSampleRate, "")
	}
	if r.audioBitRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioBitRate", r.audioBitRate, "")
	}
	if r.audioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioChannels", r.audioChannels, "")
	}
	if r.maxAudioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxAudioChannels", r.maxAudioChannels, "")
	}
	if r.static != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Static", r.static, "")
	}
	if r.profile != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Profile", r.profile, "")
	}
	if r.level != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Level", r.level, "")
	}
	if r.framerate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Framerate", r.framerate, "")
	}
	if r.maxFramerate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxFramerate", r.maxFramerate, "")
	}
	if r.copyTimestamps != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "CopyTimestamps", r.copyTimestamps, "")
	}
	if r.startTimeTicks != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "StartTimeTicks", r.startTimeTicks, "")
	}
	if r.width != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Width", r.width, "")
	}
	if r.height != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Height", r.height, "")
	}
	if r.maxWidth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxWidth", r.maxWidth, "")
	}
	if r.maxHeight != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxHeight", r.maxHeight, "")
	}
	if r.videoBitRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoBitRate", r.videoBitRate, "")
	}
	if r.subtitleStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SubtitleStreamIndex", r.subtitleStreamIndex, "")
	}
	if r.subtitleMethod != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SubtitleMethod", r.subtitleMethod, "")
	}
	if r.maxRefFrames != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxRefFrames", r.maxRefFrames, "")
	}
	if r.maxVideoBitDepth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxVideoBitDepth", r.maxVideoBitDepth, "")
	}
	if r.videoCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoCodec", r.videoCodec, "")
	}
	if r.audioStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioStreamIndex", r.audioStreamIndex, "")
	}
	if r.videoStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoStreamIndex", r.videoStreamIndex, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type VideoServiceAPIHeadVideosByIdStreamRequest struct {
	ctx context.Context
	ApiService *VideoServiceAPIService
	id string
	container *string
	deviceProfileId *string
	deviceId *string
	audioCodec *string
	enableAutoStreamCopy *bool
	audioSampleRate *int32
	audioBitRate *int32
	audioChannels *int32
	maxAudioChannels *int32
	static *bool
	profile *string
	level *string
	framerate *float32
	maxFramerate *float32
	copyTimestamps *bool
	startTimeTicks *int64
	width *int32
	height *int32
	maxWidth *int32
	maxHeight *int32
	videoBitRate *int32
	subtitleStreamIndex *int32
	subtitleMethod *ModelSubtitleDeliveryMethod
	maxRefFrames *int32
	maxVideoBitDepth *int32
	videoCodec *string
	audioStreamIndex *int32
	videoStreamIndex *int32
}

// Container
func (r VideoServiceAPIHeadVideosByIdStreamRequest) Container(container string) VideoServiceAPIHeadVideosByIdStreamRequest {
	r.container = &container
	return r
}

// Optional. The dlna device profile id to utilize.
func (r VideoServiceAPIHeadVideosByIdStreamRequest) DeviceProfileId(deviceProfileId string) VideoServiceAPIHeadVideosByIdStreamRequest {
	r.deviceProfileId = &deviceProfileId
	return r
}

// The device id of the client requesting. Used to stop encoding processes when needed.
func (r VideoServiceAPIHeadVideosByIdStreamRequest) DeviceId(deviceId string) VideoServiceAPIHeadVideosByIdStreamRequest {
	r.deviceId = &deviceId
	return r
}

// Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension. Options: aac, mp3, vorbis, wma.
func (r VideoServiceAPIHeadVideosByIdStreamRequest) AudioCodec(audioCodec string) VideoServiceAPIHeadVideosByIdStreamRequest {
	r.audioCodec = &audioCodec
	return r
}

// Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
func (r VideoServiceAPIHeadVideosByIdStreamRequest) EnableAutoStreamCopy(enableAutoStreamCopy bool) VideoServiceAPIHeadVideosByIdStreamRequest {
	r.enableAutoStreamCopy = &enableAutoStreamCopy
	return r
}

// Optional. Specify a specific audio sample rate, e.g. 44100
func (r VideoServiceAPIHeadVideosByIdStreamRequest) AudioSampleRate(audioSampleRate int32) VideoServiceAPIHeadVideosByIdStreamRequest {
	r.audioSampleRate = &audioSampleRate
	return r
}

// Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
func (r VideoServiceAPIHeadVideosByIdStreamRequest) AudioBitRate(audioBitRate int32) VideoServiceAPIHeadVideosByIdStreamRequest {
	r.audioBitRate = &audioBitRate
	return r
}

// Optional. Specify a specific number of audio channels to encode to, e.g. 2
func (r VideoServiceAPIHeadVideosByIdStreamRequest) AudioChannels(audioChannels int32) VideoServiceAPIHeadVideosByIdStreamRequest {
	r.audioChannels = &audioChannels
	return r
}

// Optional. Specify a maximum number of audio channels to encode to, e.g. 2
func (r VideoServiceAPIHeadVideosByIdStreamRequest) MaxAudioChannels(maxAudioChannels int32) VideoServiceAPIHeadVideosByIdStreamRequest {
	r.maxAudioChannels = &maxAudioChannels
	return r
}

// Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false
func (r VideoServiceAPIHeadVideosByIdStreamRequest) Static(static bool) VideoServiceAPIHeadVideosByIdStreamRequest {
	r.static = &static
	return r
}

// Optional. Specify a specific h264 profile, e.g. main, baseline, high.
func (r VideoServiceAPIHeadVideosByIdStreamRequest) Profile(profile string) VideoServiceAPIHeadVideosByIdStreamRequest {
	r.profile = &profile
	return r
}

// Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
func (r VideoServiceAPIHeadVideosByIdStreamRequest) Level(level string) VideoServiceAPIHeadVideosByIdStreamRequest {
	r.level = &level
	return r
}

// Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
func (r VideoServiceAPIHeadVideosByIdStreamRequest) Framerate(framerate float32) VideoServiceAPIHeadVideosByIdStreamRequest {
	r.framerate = &framerate
	return r
}

// Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
func (r VideoServiceAPIHeadVideosByIdStreamRequest) MaxFramerate(maxFramerate float32) VideoServiceAPIHeadVideosByIdStreamRequest {
	r.maxFramerate = &maxFramerate
	return r
}

// Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
func (r VideoServiceAPIHeadVideosByIdStreamRequest) CopyTimestamps(copyTimestamps bool) VideoServiceAPIHeadVideosByIdStreamRequest {
	r.copyTimestamps = &copyTimestamps
	return r
}

// Optional. Specify a starting offset, in ticks. 1ms &#x3D; 10000 ticks.
func (r VideoServiceAPIHeadVideosByIdStreamRequest) StartTimeTicks(startTimeTicks int64) VideoServiceAPIHeadVideosByIdStreamRequest {
	r.startTimeTicks = &startTimeTicks
	return r
}

// Optional. The fixed horizontal resolution of the encoded video.
func (r VideoServiceAPIHeadVideosByIdStreamRequest) Width(width int32) VideoServiceAPIHeadVideosByIdStreamRequest {
	r.width = &width
	return r
}

// Optional. The fixed vertical resolution of the encoded video.
func (r VideoServiceAPIHeadVideosByIdStreamRequest) Height(height int32) VideoServiceAPIHeadVideosByIdStreamRequest {
	r.height = &height
	return r
}

// Optional. The maximum horizontal resolution of the encoded video.
func (r VideoServiceAPIHeadVideosByIdStreamRequest) MaxWidth(maxWidth int32) VideoServiceAPIHeadVideosByIdStreamRequest {
	r.maxWidth = &maxWidth
	return r
}

// Optional. The maximum vertical resolution of the encoded video.
func (r VideoServiceAPIHeadVideosByIdStreamRequest) MaxHeight(maxHeight int32) VideoServiceAPIHeadVideosByIdStreamRequest {
	r.maxHeight = &maxHeight
	return r
}

// Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
func (r VideoServiceAPIHeadVideosByIdStreamRequest) VideoBitRate(videoBitRate int32) VideoServiceAPIHeadVideosByIdStreamRequest {
	r.videoBitRate = &videoBitRate
	return r
}

// Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
func (r VideoServiceAPIHeadVideosByIdStreamRequest) SubtitleStreamIndex(subtitleStreamIndex int32) VideoServiceAPIHeadVideosByIdStreamRequest {
	r.subtitleStreamIndex = &subtitleStreamIndex
	return r
}

// Optional. Specify the subtitle delivery method.
func (r VideoServiceAPIHeadVideosByIdStreamRequest) SubtitleMethod(subtitleMethod ModelSubtitleDeliveryMethod) VideoServiceAPIHeadVideosByIdStreamRequest {
	r.subtitleMethod = &subtitleMethod
	return r
}

// Optional.
func (r VideoServiceAPIHeadVideosByIdStreamRequest) MaxRefFrames(maxRefFrames int32) VideoServiceAPIHeadVideosByIdStreamRequest {
	r.maxRefFrames = &maxRefFrames
	return r
}

// Optional.
func (r VideoServiceAPIHeadVideosByIdStreamRequest) MaxVideoBitDepth(maxVideoBitDepth int32) VideoServiceAPIHeadVideosByIdStreamRequest {
	r.maxVideoBitDepth = &maxVideoBitDepth
	return r
}

// Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension. Options: h264, mpeg4, theora, vpx, wmv.
func (r VideoServiceAPIHeadVideosByIdStreamRequest) VideoCodec(videoCodec string) VideoServiceAPIHeadVideosByIdStreamRequest {
	r.videoCodec = &videoCodec
	return r
}

// Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
func (r VideoServiceAPIHeadVideosByIdStreamRequest) AudioStreamIndex(audioStreamIndex int32) VideoServiceAPIHeadVideosByIdStreamRequest {
	r.audioStreamIndex = &audioStreamIndex
	return r
}

// Optional. The index of the video stream to use. If omitted the first video stream will be used.
func (r VideoServiceAPIHeadVideosByIdStreamRequest) VideoStreamIndex(videoStreamIndex int32) VideoServiceAPIHeadVideosByIdStreamRequest {
	r.videoStreamIndex = &videoStreamIndex
	return r
}

func (r VideoServiceAPIHeadVideosByIdStreamRequest) Execute() (*http.Response, error) {
	return r.ApiService.HeadVideosByIdStreamExecute(r)
}

/*
HeadVideosByIdStream Gets a video stream

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Item Id
 @return VideoServiceAPIHeadVideosByIdStreamRequest
*/
func (a *VideoServiceAPIService) HeadVideosByIdStream(ctx context.Context, id string) VideoServiceAPIHeadVideosByIdStreamRequest {
	return VideoServiceAPIHeadVideosByIdStreamRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *VideoServiceAPIService) HeadVideosByIdStreamExecute(r VideoServiceAPIHeadVideosByIdStreamRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodHead
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VideoServiceAPIService.HeadVideosByIdStream")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Videos/{Id}/stream"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.container == nil {
		return nil, reportError("container is required and must be specified")
	}

	if r.deviceProfileId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "DeviceProfileId", r.deviceProfileId, "")
	}
	if r.deviceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "DeviceId", r.deviceId, "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "Container", r.container, "")
	if r.audioCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioCodec", r.audioCodec, "")
	}
	if r.enableAutoStreamCopy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableAutoStreamCopy", r.enableAutoStreamCopy, "")
	}
	if r.audioSampleRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioSampleRate", r.audioSampleRate, "")
	}
	if r.audioBitRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioBitRate", r.audioBitRate, "")
	}
	if r.audioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioChannels", r.audioChannels, "")
	}
	if r.maxAudioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxAudioChannels", r.maxAudioChannels, "")
	}
	if r.static != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Static", r.static, "")
	}
	if r.profile != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Profile", r.profile, "")
	}
	if r.level != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Level", r.level, "")
	}
	if r.framerate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Framerate", r.framerate, "")
	}
	if r.maxFramerate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxFramerate", r.maxFramerate, "")
	}
	if r.copyTimestamps != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "CopyTimestamps", r.copyTimestamps, "")
	}
	if r.startTimeTicks != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "StartTimeTicks", r.startTimeTicks, "")
	}
	if r.width != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Width", r.width, "")
	}
	if r.height != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Height", r.height, "")
	}
	if r.maxWidth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxWidth", r.maxWidth, "")
	}
	if r.maxHeight != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxHeight", r.maxHeight, "")
	}
	if r.videoBitRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoBitRate", r.videoBitRate, "")
	}
	if r.subtitleStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SubtitleStreamIndex", r.subtitleStreamIndex, "")
	}
	if r.subtitleMethod != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SubtitleMethod", r.subtitleMethod, "")
	}
	if r.maxRefFrames != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxRefFrames", r.maxRefFrames, "")
	}
	if r.maxVideoBitDepth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxVideoBitDepth", r.maxVideoBitDepth, "")
	}
	if r.videoCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoCodec", r.videoCodec, "")
	}
	if r.audioStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioStreamIndex", r.audioStreamIndex, "")
	}
	if r.videoStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoStreamIndex", r.videoStreamIndex, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type VideoServiceAPIHeadVideosByIdStreamByContainerRequest struct {
	ctx context.Context
	ApiService *VideoServiceAPIService
	id string
	container string
	deviceProfileId *string
	deviceId *string
	audioCodec *string
	enableAutoStreamCopy *bool
	audioSampleRate *int32
	audioBitRate *int32
	audioChannels *int32
	maxAudioChannels *int32
	static *bool
	profile *string
	level *string
	framerate *float32
	maxFramerate *float32
	copyTimestamps *bool
	startTimeTicks *int64
	width *int32
	height *int32
	maxWidth *int32
	maxHeight *int32
	videoBitRate *int32
	subtitleStreamIndex *int32
	subtitleMethod *ModelSubtitleDeliveryMethod
	maxRefFrames *int32
	maxVideoBitDepth *int32
	videoCodec *string
	audioStreamIndex *int32
	videoStreamIndex *int32
}

// Optional. The dlna device profile id to utilize.
func (r VideoServiceAPIHeadVideosByIdStreamByContainerRequest) DeviceProfileId(deviceProfileId string) VideoServiceAPIHeadVideosByIdStreamByContainerRequest {
	r.deviceProfileId = &deviceProfileId
	return r
}

// The device id of the client requesting. Used to stop encoding processes when needed.
func (r VideoServiceAPIHeadVideosByIdStreamByContainerRequest) DeviceId(deviceId string) VideoServiceAPIHeadVideosByIdStreamByContainerRequest {
	r.deviceId = &deviceId
	return r
}

// Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension. Options: aac, mp3, vorbis, wma.
func (r VideoServiceAPIHeadVideosByIdStreamByContainerRequest) AudioCodec(audioCodec string) VideoServiceAPIHeadVideosByIdStreamByContainerRequest {
	r.audioCodec = &audioCodec
	return r
}

// Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
func (r VideoServiceAPIHeadVideosByIdStreamByContainerRequest) EnableAutoStreamCopy(enableAutoStreamCopy bool) VideoServiceAPIHeadVideosByIdStreamByContainerRequest {
	r.enableAutoStreamCopy = &enableAutoStreamCopy
	return r
}

// Optional. Specify a specific audio sample rate, e.g. 44100
func (r VideoServiceAPIHeadVideosByIdStreamByContainerRequest) AudioSampleRate(audioSampleRate int32) VideoServiceAPIHeadVideosByIdStreamByContainerRequest {
	r.audioSampleRate = &audioSampleRate
	return r
}

// Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
func (r VideoServiceAPIHeadVideosByIdStreamByContainerRequest) AudioBitRate(audioBitRate int32) VideoServiceAPIHeadVideosByIdStreamByContainerRequest {
	r.audioBitRate = &audioBitRate
	return r
}

// Optional. Specify a specific number of audio channels to encode to, e.g. 2
func (r VideoServiceAPIHeadVideosByIdStreamByContainerRequest) AudioChannels(audioChannels int32) VideoServiceAPIHeadVideosByIdStreamByContainerRequest {
	r.audioChannels = &audioChannels
	return r
}

// Optional. Specify a maximum number of audio channels to encode to, e.g. 2
func (r VideoServiceAPIHeadVideosByIdStreamByContainerRequest) MaxAudioChannels(maxAudioChannels int32) VideoServiceAPIHeadVideosByIdStreamByContainerRequest {
	r.maxAudioChannels = &maxAudioChannels
	return r
}

// Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false
func (r VideoServiceAPIHeadVideosByIdStreamByContainerRequest) Static(static bool) VideoServiceAPIHeadVideosByIdStreamByContainerRequest {
	r.static = &static
	return r
}

// Optional. Specify a specific h264 profile, e.g. main, baseline, high.
func (r VideoServiceAPIHeadVideosByIdStreamByContainerRequest) Profile(profile string) VideoServiceAPIHeadVideosByIdStreamByContainerRequest {
	r.profile = &profile
	return r
}

// Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
func (r VideoServiceAPIHeadVideosByIdStreamByContainerRequest) Level(level string) VideoServiceAPIHeadVideosByIdStreamByContainerRequest {
	r.level = &level
	return r
}

// Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
func (r VideoServiceAPIHeadVideosByIdStreamByContainerRequest) Framerate(framerate float32) VideoServiceAPIHeadVideosByIdStreamByContainerRequest {
	r.framerate = &framerate
	return r
}

// Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
func (r VideoServiceAPIHeadVideosByIdStreamByContainerRequest) MaxFramerate(maxFramerate float32) VideoServiceAPIHeadVideosByIdStreamByContainerRequest {
	r.maxFramerate = &maxFramerate
	return r
}

// Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
func (r VideoServiceAPIHeadVideosByIdStreamByContainerRequest) CopyTimestamps(copyTimestamps bool) VideoServiceAPIHeadVideosByIdStreamByContainerRequest {
	r.copyTimestamps = &copyTimestamps
	return r
}

// Optional. Specify a starting offset, in ticks. 1ms &#x3D; 10000 ticks.
func (r VideoServiceAPIHeadVideosByIdStreamByContainerRequest) StartTimeTicks(startTimeTicks int64) VideoServiceAPIHeadVideosByIdStreamByContainerRequest {
	r.startTimeTicks = &startTimeTicks
	return r
}

// Optional. The fixed horizontal resolution of the encoded video.
func (r VideoServiceAPIHeadVideosByIdStreamByContainerRequest) Width(width int32) VideoServiceAPIHeadVideosByIdStreamByContainerRequest {
	r.width = &width
	return r
}

// Optional. The fixed vertical resolution of the encoded video.
func (r VideoServiceAPIHeadVideosByIdStreamByContainerRequest) Height(height int32) VideoServiceAPIHeadVideosByIdStreamByContainerRequest {
	r.height = &height
	return r
}

// Optional. The maximum horizontal resolution of the encoded video.
func (r VideoServiceAPIHeadVideosByIdStreamByContainerRequest) MaxWidth(maxWidth int32) VideoServiceAPIHeadVideosByIdStreamByContainerRequest {
	r.maxWidth = &maxWidth
	return r
}

// Optional. The maximum vertical resolution of the encoded video.
func (r VideoServiceAPIHeadVideosByIdStreamByContainerRequest) MaxHeight(maxHeight int32) VideoServiceAPIHeadVideosByIdStreamByContainerRequest {
	r.maxHeight = &maxHeight
	return r
}

// Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
func (r VideoServiceAPIHeadVideosByIdStreamByContainerRequest) VideoBitRate(videoBitRate int32) VideoServiceAPIHeadVideosByIdStreamByContainerRequest {
	r.videoBitRate = &videoBitRate
	return r
}

// Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
func (r VideoServiceAPIHeadVideosByIdStreamByContainerRequest) SubtitleStreamIndex(subtitleStreamIndex int32) VideoServiceAPIHeadVideosByIdStreamByContainerRequest {
	r.subtitleStreamIndex = &subtitleStreamIndex
	return r
}

// Optional. Specify the subtitle delivery method.
func (r VideoServiceAPIHeadVideosByIdStreamByContainerRequest) SubtitleMethod(subtitleMethod ModelSubtitleDeliveryMethod) VideoServiceAPIHeadVideosByIdStreamByContainerRequest {
	r.subtitleMethod = &subtitleMethod
	return r
}

// Optional.
func (r VideoServiceAPIHeadVideosByIdStreamByContainerRequest) MaxRefFrames(maxRefFrames int32) VideoServiceAPIHeadVideosByIdStreamByContainerRequest {
	r.maxRefFrames = &maxRefFrames
	return r
}

// Optional.
func (r VideoServiceAPIHeadVideosByIdStreamByContainerRequest) MaxVideoBitDepth(maxVideoBitDepth int32) VideoServiceAPIHeadVideosByIdStreamByContainerRequest {
	r.maxVideoBitDepth = &maxVideoBitDepth
	return r
}

// Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension. Options: h264, mpeg4, theora, vpx, wmv.
func (r VideoServiceAPIHeadVideosByIdStreamByContainerRequest) VideoCodec(videoCodec string) VideoServiceAPIHeadVideosByIdStreamByContainerRequest {
	r.videoCodec = &videoCodec
	return r
}

// Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
func (r VideoServiceAPIHeadVideosByIdStreamByContainerRequest) AudioStreamIndex(audioStreamIndex int32) VideoServiceAPIHeadVideosByIdStreamByContainerRequest {
	r.audioStreamIndex = &audioStreamIndex
	return r
}

// Optional. The index of the video stream to use. If omitted the first video stream will be used.
func (r VideoServiceAPIHeadVideosByIdStreamByContainerRequest) VideoStreamIndex(videoStreamIndex int32) VideoServiceAPIHeadVideosByIdStreamByContainerRequest {
	r.videoStreamIndex = &videoStreamIndex
	return r
}

func (r VideoServiceAPIHeadVideosByIdStreamByContainerRequest) Execute() (*http.Response, error) {
	return r.ApiService.HeadVideosByIdStreamByContainerExecute(r)
}

/*
HeadVideosByIdStreamByContainer Gets a video stream

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Item Id
 @param container Container
 @return VideoServiceAPIHeadVideosByIdStreamByContainerRequest
*/
func (a *VideoServiceAPIService) HeadVideosByIdStreamByContainer(ctx context.Context, id string, container string) VideoServiceAPIHeadVideosByIdStreamByContainerRequest {
	return VideoServiceAPIHeadVideosByIdStreamByContainerRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		container: container,
	}
}

// Execute executes the request
func (a *VideoServiceAPIService) HeadVideosByIdStreamByContainerExecute(r VideoServiceAPIHeadVideosByIdStreamByContainerRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodHead
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VideoServiceAPIService.HeadVideosByIdStreamByContainer")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Videos/{Id}/stream.{Container}"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Container"+"}", url.PathEscape(parameterValueToString(r.container, "container")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.deviceProfileId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "DeviceProfileId", r.deviceProfileId, "")
	}
	if r.deviceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "DeviceId", r.deviceId, "")
	}
	if r.audioCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioCodec", r.audioCodec, "")
	}
	if r.enableAutoStreamCopy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableAutoStreamCopy", r.enableAutoStreamCopy, "")
	}
	if r.audioSampleRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioSampleRate", r.audioSampleRate, "")
	}
	if r.audioBitRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioBitRate", r.audioBitRate, "")
	}
	if r.audioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioChannels", r.audioChannels, "")
	}
	if r.maxAudioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxAudioChannels", r.maxAudioChannels, "")
	}
	if r.static != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Static", r.static, "")
	}
	if r.profile != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Profile", r.profile, "")
	}
	if r.level != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Level", r.level, "")
	}
	if r.framerate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Framerate", r.framerate, "")
	}
	if r.maxFramerate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxFramerate", r.maxFramerate, "")
	}
	if r.copyTimestamps != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "CopyTimestamps", r.copyTimestamps, "")
	}
	if r.startTimeTicks != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "StartTimeTicks", r.startTimeTicks, "")
	}
	if r.width != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Width", r.width, "")
	}
	if r.height != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Height", r.height, "")
	}
	if r.maxWidth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxWidth", r.maxWidth, "")
	}
	if r.maxHeight != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxHeight", r.maxHeight, "")
	}
	if r.videoBitRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoBitRate", r.videoBitRate, "")
	}
	if r.subtitleStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SubtitleStreamIndex", r.subtitleStreamIndex, "")
	}
	if r.subtitleMethod != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SubtitleMethod", r.subtitleMethod, "")
	}
	if r.maxRefFrames != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxRefFrames", r.maxRefFrames, "")
	}
	if r.maxVideoBitDepth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxVideoBitDepth", r.maxVideoBitDepth, "")
	}
	if r.videoCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoCodec", r.videoCodec, "")
	}
	if r.audioStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioStreamIndex", r.audioStreamIndex, "")
	}
	if r.videoStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoStreamIndex", r.videoStreamIndex, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
