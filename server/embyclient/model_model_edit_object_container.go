/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"encoding/json"
)

// checks if the ModelEditObjectContainer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelEditObjectContainer{}

// ModelEditObjectContainer struct for ModelEditObjectContainer
type ModelEditObjectContainer struct {
	Object map[string]interface{} `json:"Object,omitempty"`
	DefaultObject map[string]interface{} `json:"DefaultObject,omitempty"`
	TypeName *string `json:"TypeName,omitempty"`
	EditorRoot *ModelEditorsEditorRoot `json:"EditorRoot,omitempty"`
}

// NewModelEditObjectContainer instantiates a new ModelEditObjectContainer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelEditObjectContainer() *ModelEditObjectContainer {
	this := ModelEditObjectContainer{}
	return &this
}

// NewModelEditObjectContainerWithDefaults instantiates a new ModelEditObjectContainer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelEditObjectContainerWithDefaults() *ModelEditObjectContainer {
	this := ModelEditObjectContainer{}
	return &this
}

// GetObject returns the Object field value if set, zero value otherwise.
func (o *ModelEditObjectContainer) GetObject() map[string]interface{} {
	if o == nil || IsNil(o.Object) {
		var ret map[string]interface{}
		return ret
	}
	return o.Object
}

// GetObjectOk returns a tuple with the Object field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelEditObjectContainer) GetObjectOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Object) {
		return map[string]interface{}{}, false
	}
	return o.Object, true
}

// HasObject returns a boolean if a field has been set.
func (o *ModelEditObjectContainer) HasObject() bool {
	if o != nil && !IsNil(o.Object) {
		return true
	}

	return false
}

// SetObject gets a reference to the given map[string]interface{} and assigns it to the Object field.
func (o *ModelEditObjectContainer) SetObject(v map[string]interface{}) {
	o.Object = v
}

// GetDefaultObject returns the DefaultObject field value if set, zero value otherwise.
func (o *ModelEditObjectContainer) GetDefaultObject() map[string]interface{} {
	if o == nil || IsNil(o.DefaultObject) {
		var ret map[string]interface{}
		return ret
	}
	return o.DefaultObject
}

// GetDefaultObjectOk returns a tuple with the DefaultObject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelEditObjectContainer) GetDefaultObjectOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.DefaultObject) {
		return map[string]interface{}{}, false
	}
	return o.DefaultObject, true
}

// HasDefaultObject returns a boolean if a field has been set.
func (o *ModelEditObjectContainer) HasDefaultObject() bool {
	if o != nil && !IsNil(o.DefaultObject) {
		return true
	}

	return false
}

// SetDefaultObject gets a reference to the given map[string]interface{} and assigns it to the DefaultObject field.
func (o *ModelEditObjectContainer) SetDefaultObject(v map[string]interface{}) {
	o.DefaultObject = v
}

// GetTypeName returns the TypeName field value if set, zero value otherwise.
func (o *ModelEditObjectContainer) GetTypeName() string {
	if o == nil || IsNil(o.TypeName) {
		var ret string
		return ret
	}
	return *o.TypeName
}

// GetTypeNameOk returns a tuple with the TypeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelEditObjectContainer) GetTypeNameOk() (*string, bool) {
	if o == nil || IsNil(o.TypeName) {
		return nil, false
	}
	return o.TypeName, true
}

// HasTypeName returns a boolean if a field has been set.
func (o *ModelEditObjectContainer) HasTypeName() bool {
	if o != nil && !IsNil(o.TypeName) {
		return true
	}

	return false
}

// SetTypeName gets a reference to the given string and assigns it to the TypeName field.
func (o *ModelEditObjectContainer) SetTypeName(v string) {
	o.TypeName = &v
}

// GetEditorRoot returns the EditorRoot field value if set, zero value otherwise.
func (o *ModelEditObjectContainer) GetEditorRoot() ModelEditorsEditorRoot {
	if o == nil || IsNil(o.EditorRoot) {
		var ret ModelEditorsEditorRoot
		return ret
	}
	return *o.EditorRoot
}

// GetEditorRootOk returns a tuple with the EditorRoot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelEditObjectContainer) GetEditorRootOk() (*ModelEditorsEditorRoot, bool) {
	if o == nil || IsNil(o.EditorRoot) {
		return nil, false
	}
	return o.EditorRoot, true
}

// HasEditorRoot returns a boolean if a field has been set.
func (o *ModelEditObjectContainer) HasEditorRoot() bool {
	if o != nil && !IsNil(o.EditorRoot) {
		return true
	}

	return false
}

// SetEditorRoot gets a reference to the given ModelEditorsEditorRoot and assigns it to the EditorRoot field.
func (o *ModelEditObjectContainer) SetEditorRoot(v ModelEditorsEditorRoot) {
	o.EditorRoot = &v
}

func (o ModelEditObjectContainer) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelEditObjectContainer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Object) {
		toSerialize["Object"] = o.Object
	}
	if !IsNil(o.DefaultObject) {
		toSerialize["DefaultObject"] = o.DefaultObject
	}
	if !IsNil(o.TypeName) {
		toSerialize["TypeName"] = o.TypeName
	}
	if !IsNil(o.EditorRoot) {
		toSerialize["EditorRoot"] = o.EditorRoot
	}
	return toSerialize, nil
}

type NullableModelEditObjectContainer struct {
	value *ModelEditObjectContainer
	isSet bool
}

func (v NullableModelEditObjectContainer) Get() *ModelEditObjectContainer {
	return v.value
}

func (v *NullableModelEditObjectContainer) Set(val *ModelEditObjectContainer) {
	v.value = val
	v.isSet = true
}

func (v NullableModelEditObjectContainer) IsSet() bool {
	return v.isSet
}

func (v *NullableModelEditObjectContainer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelEditObjectContainer(val *ModelEditObjectContainer) *NullableModelEditObjectContainer {
	return &NullableModelEditObjectContainer{value: val, isSet: true}
}

func (v NullableModelEditObjectContainer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelEditObjectContainer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


