/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"encoding/json"
	"fmt"
)

// ModelIOFileSystemEntryType the model 'ModelIOFileSystemEntryType'
type ModelIOFileSystemEntryType string

// List of IO.FileSystemEntryType
const (
	MODELIOFILESYSTEMENTRYTYPE_FILE ModelIOFileSystemEntryType = "File"
	MODELIOFILESYSTEMENTRYTYPE_DIRECTORY ModelIOFileSystemEntryType = "Directory"
	MODELIOFILESYSTEMENTRYTYPE_NETWORK_COMPUTER ModelIOFileSystemEntryType = "NetworkComputer"
	MODELIOFILESYSTEMENTRYTYPE_NETWORK_SHARE ModelIOFileSystemEntryType = "NetworkShare"
)

// All allowed values of ModelIOFileSystemEntryType enum
var AllowedModelIOFileSystemEntryTypeEnumValues = []ModelIOFileSystemEntryType{
	"File",
	"Directory",
	"NetworkComputer",
	"NetworkShare",
}

func (v *ModelIOFileSystemEntryType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ModelIOFileSystemEntryType(value)
	for _, existing := range AllowedModelIOFileSystemEntryTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ModelIOFileSystemEntryType", value)
}

// NewModelIOFileSystemEntryTypeFromValue returns a pointer to a valid ModelIOFileSystemEntryType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewModelIOFileSystemEntryTypeFromValue(v string) (*ModelIOFileSystemEntryType, error) {
	ev := ModelIOFileSystemEntryType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ModelIOFileSystemEntryType: valid values are %v", v, AllowedModelIOFileSystemEntryTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ModelIOFileSystemEntryType) IsValid() bool {
	for _, existing := range AllowedModelIOFileSystemEntryTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to IO.FileSystemEntryType value
func (v ModelIOFileSystemEntryType) Ptr() *ModelIOFileSystemEntryType {
	return &v
}

type NullableModelIOFileSystemEntryType struct {
	value *ModelIOFileSystemEntryType
	isSet bool
}

func (v NullableModelIOFileSystemEntryType) Get() *ModelIOFileSystemEntryType {
	return v.value
}

func (v *NullableModelIOFileSystemEntryType) Set(val *ModelIOFileSystemEntryType) {
	v.value = val
	v.isSet = true
}

func (v NullableModelIOFileSystemEntryType) IsSet() bool {
	return v.isSet
}

func (v *NullableModelIOFileSystemEntryType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelIOFileSystemEntryType(val *ModelIOFileSystemEntryType) *NullableModelIOFileSystemEntryType {
	return &NullableModelIOFileSystemEntryType{value: val, isSet: true}
}

func (v NullableModelIOFileSystemEntryType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelIOFileSystemEntryType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

