/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"encoding/json"
	"fmt"
)

// ModelDynamicDayOfWeek the model 'ModelDynamicDayOfWeek'
type ModelDynamicDayOfWeek string

// List of DynamicDayOfWeek
const (
	MODELDYNAMICDAYOFWEEK_SUNDAY ModelDynamicDayOfWeek = "Sunday"
	MODELDYNAMICDAYOFWEEK_MONDAY ModelDynamicDayOfWeek = "Monday"
	MODELDYNAMICDAYOFWEEK_TUESDAY ModelDynamicDayOfWeek = "Tuesday"
	MODELDYNAMICDAYOFWEEK_WEDNESDAY ModelDynamicDayOfWeek = "Wednesday"
	MODELDYNAMICDAYOFWEEK_THURSDAY ModelDynamicDayOfWeek = "Thursday"
	MODELDYNAMICDAYOFWEEK_FRIDAY ModelDynamicDayOfWeek = "Friday"
	MODELDYNAMICDAYOFWEEK_SATURDAY ModelDynamicDayOfWeek = "Saturday"
	MODELDYNAMICDAYOFWEEK_EVERYDAY ModelDynamicDayOfWeek = "Everyday"
	MODELDYNAMICDAYOFWEEK_WEEKDAY ModelDynamicDayOfWeek = "Weekday"
	MODELDYNAMICDAYOFWEEK_WEEKEND ModelDynamicDayOfWeek = "Weekend"
)

// All allowed values of ModelDynamicDayOfWeek enum
var AllowedModelDynamicDayOfWeekEnumValues = []ModelDynamicDayOfWeek{
	"Sunday",
	"Monday",
	"Tuesday",
	"Wednesday",
	"Thursday",
	"Friday",
	"Saturday",
	"Everyday",
	"Weekday",
	"Weekend",
}

func (v *ModelDynamicDayOfWeek) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ModelDynamicDayOfWeek(value)
	for _, existing := range AllowedModelDynamicDayOfWeekEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ModelDynamicDayOfWeek", value)
}

// NewModelDynamicDayOfWeekFromValue returns a pointer to a valid ModelDynamicDayOfWeek
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewModelDynamicDayOfWeekFromValue(v string) (*ModelDynamicDayOfWeek, error) {
	ev := ModelDynamicDayOfWeek(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ModelDynamicDayOfWeek: valid values are %v", v, AllowedModelDynamicDayOfWeekEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ModelDynamicDayOfWeek) IsValid() bool {
	for _, existing := range AllowedModelDynamicDayOfWeekEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DynamicDayOfWeek value
func (v ModelDynamicDayOfWeek) Ptr() *ModelDynamicDayOfWeek {
	return &v
}

type NullableModelDynamicDayOfWeek struct {
	value *ModelDynamicDayOfWeek
	isSet bool
}

func (v NullableModelDynamicDayOfWeek) Get() *ModelDynamicDayOfWeek {
	return v.value
}

func (v *NullableModelDynamicDayOfWeek) Set(val *ModelDynamicDayOfWeek) {
	v.value = val
	v.isSet = true
}

func (v NullableModelDynamicDayOfWeek) IsSet() bool {
	return v.isSet
}

func (v *NullableModelDynamicDayOfWeek) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelDynamicDayOfWeek(val *ModelDynamicDayOfWeek) *NullableModelDynamicDayOfWeek {
	return &NullableModelDynamicDayOfWeek{value: val, isSet: true}
}

func (v NullableModelDynamicDayOfWeek) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelDynamicDayOfWeek) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

