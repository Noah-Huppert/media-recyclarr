/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"encoding/json"
)

// checks if the ModelUICommand type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelUICommand{}

// ModelUICommand struct for ModelUICommand
type ModelUICommand struct {
	CommandType *ModelEnumsUICommandType `json:"CommandType,omitempty"`
	CommandId *string `json:"CommandId,omitempty"`
	IsVisible *bool `json:"IsVisible,omitempty"`
	IsEnabled *bool `json:"IsEnabled,omitempty"`
	Caption *string `json:"Caption,omitempty"`
	SetFocus *bool `json:"SetFocus,omitempty"`
	ConfirmationPrompt *string `json:"ConfirmationPrompt,omitempty"`
}

// NewModelUICommand instantiates a new ModelUICommand object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelUICommand() *ModelUICommand {
	this := ModelUICommand{}
	return &this
}

// NewModelUICommandWithDefaults instantiates a new ModelUICommand object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelUICommandWithDefaults() *ModelUICommand {
	this := ModelUICommand{}
	return &this
}

// GetCommandType returns the CommandType field value if set, zero value otherwise.
func (o *ModelUICommand) GetCommandType() ModelEnumsUICommandType {
	if o == nil || IsNil(o.CommandType) {
		var ret ModelEnumsUICommandType
		return ret
	}
	return *o.CommandType
}

// GetCommandTypeOk returns a tuple with the CommandType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUICommand) GetCommandTypeOk() (*ModelEnumsUICommandType, bool) {
	if o == nil || IsNil(o.CommandType) {
		return nil, false
	}
	return o.CommandType, true
}

// HasCommandType returns a boolean if a field has been set.
func (o *ModelUICommand) HasCommandType() bool {
	if o != nil && !IsNil(o.CommandType) {
		return true
	}

	return false
}

// SetCommandType gets a reference to the given ModelEnumsUICommandType and assigns it to the CommandType field.
func (o *ModelUICommand) SetCommandType(v ModelEnumsUICommandType) {
	o.CommandType = &v
}

// GetCommandId returns the CommandId field value if set, zero value otherwise.
func (o *ModelUICommand) GetCommandId() string {
	if o == nil || IsNil(o.CommandId) {
		var ret string
		return ret
	}
	return *o.CommandId
}

// GetCommandIdOk returns a tuple with the CommandId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUICommand) GetCommandIdOk() (*string, bool) {
	if o == nil || IsNil(o.CommandId) {
		return nil, false
	}
	return o.CommandId, true
}

// HasCommandId returns a boolean if a field has been set.
func (o *ModelUICommand) HasCommandId() bool {
	if o != nil && !IsNil(o.CommandId) {
		return true
	}

	return false
}

// SetCommandId gets a reference to the given string and assigns it to the CommandId field.
func (o *ModelUICommand) SetCommandId(v string) {
	o.CommandId = &v
}

// GetIsVisible returns the IsVisible field value if set, zero value otherwise.
func (o *ModelUICommand) GetIsVisible() bool {
	if o == nil || IsNil(o.IsVisible) {
		var ret bool
		return ret
	}
	return *o.IsVisible
}

// GetIsVisibleOk returns a tuple with the IsVisible field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUICommand) GetIsVisibleOk() (*bool, bool) {
	if o == nil || IsNil(o.IsVisible) {
		return nil, false
	}
	return o.IsVisible, true
}

// HasIsVisible returns a boolean if a field has been set.
func (o *ModelUICommand) HasIsVisible() bool {
	if o != nil && !IsNil(o.IsVisible) {
		return true
	}

	return false
}

// SetIsVisible gets a reference to the given bool and assigns it to the IsVisible field.
func (o *ModelUICommand) SetIsVisible(v bool) {
	o.IsVisible = &v
}

// GetIsEnabled returns the IsEnabled field value if set, zero value otherwise.
func (o *ModelUICommand) GetIsEnabled() bool {
	if o == nil || IsNil(o.IsEnabled) {
		var ret bool
		return ret
	}
	return *o.IsEnabled
}

// GetIsEnabledOk returns a tuple with the IsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUICommand) GetIsEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsEnabled) {
		return nil, false
	}
	return o.IsEnabled, true
}

// HasIsEnabled returns a boolean if a field has been set.
func (o *ModelUICommand) HasIsEnabled() bool {
	if o != nil && !IsNil(o.IsEnabled) {
		return true
	}

	return false
}

// SetIsEnabled gets a reference to the given bool and assigns it to the IsEnabled field.
func (o *ModelUICommand) SetIsEnabled(v bool) {
	o.IsEnabled = &v
}

// GetCaption returns the Caption field value if set, zero value otherwise.
func (o *ModelUICommand) GetCaption() string {
	if o == nil || IsNil(o.Caption) {
		var ret string
		return ret
	}
	return *o.Caption
}

// GetCaptionOk returns a tuple with the Caption field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUICommand) GetCaptionOk() (*string, bool) {
	if o == nil || IsNil(o.Caption) {
		return nil, false
	}
	return o.Caption, true
}

// HasCaption returns a boolean if a field has been set.
func (o *ModelUICommand) HasCaption() bool {
	if o != nil && !IsNil(o.Caption) {
		return true
	}

	return false
}

// SetCaption gets a reference to the given string and assigns it to the Caption field.
func (o *ModelUICommand) SetCaption(v string) {
	o.Caption = &v
}

// GetSetFocus returns the SetFocus field value if set, zero value otherwise.
func (o *ModelUICommand) GetSetFocus() bool {
	if o == nil || IsNil(o.SetFocus) {
		var ret bool
		return ret
	}
	return *o.SetFocus
}

// GetSetFocusOk returns a tuple with the SetFocus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUICommand) GetSetFocusOk() (*bool, bool) {
	if o == nil || IsNil(o.SetFocus) {
		return nil, false
	}
	return o.SetFocus, true
}

// HasSetFocus returns a boolean if a field has been set.
func (o *ModelUICommand) HasSetFocus() bool {
	if o != nil && !IsNil(o.SetFocus) {
		return true
	}

	return false
}

// SetSetFocus gets a reference to the given bool and assigns it to the SetFocus field.
func (o *ModelUICommand) SetSetFocus(v bool) {
	o.SetFocus = &v
}

// GetConfirmationPrompt returns the ConfirmationPrompt field value if set, zero value otherwise.
func (o *ModelUICommand) GetConfirmationPrompt() string {
	if o == nil || IsNil(o.ConfirmationPrompt) {
		var ret string
		return ret
	}
	return *o.ConfirmationPrompt
}

// GetConfirmationPromptOk returns a tuple with the ConfirmationPrompt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUICommand) GetConfirmationPromptOk() (*string, bool) {
	if o == nil || IsNil(o.ConfirmationPrompt) {
		return nil, false
	}
	return o.ConfirmationPrompt, true
}

// HasConfirmationPrompt returns a boolean if a field has been set.
func (o *ModelUICommand) HasConfirmationPrompt() bool {
	if o != nil && !IsNil(o.ConfirmationPrompt) {
		return true
	}

	return false
}

// SetConfirmationPrompt gets a reference to the given string and assigns it to the ConfirmationPrompt field.
func (o *ModelUICommand) SetConfirmationPrompt(v string) {
	o.ConfirmationPrompt = &v
}

func (o ModelUICommand) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelUICommand) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CommandType) {
		toSerialize["CommandType"] = o.CommandType
	}
	if !IsNil(o.CommandId) {
		toSerialize["CommandId"] = o.CommandId
	}
	if !IsNil(o.IsVisible) {
		toSerialize["IsVisible"] = o.IsVisible
	}
	if !IsNil(o.IsEnabled) {
		toSerialize["IsEnabled"] = o.IsEnabled
	}
	if !IsNil(o.Caption) {
		toSerialize["Caption"] = o.Caption
	}
	if !IsNil(o.SetFocus) {
		toSerialize["SetFocus"] = o.SetFocus
	}
	if !IsNil(o.ConfirmationPrompt) {
		toSerialize["ConfirmationPrompt"] = o.ConfirmationPrompt
	}
	return toSerialize, nil
}

type NullableModelUICommand struct {
	value *ModelUICommand
	isSet bool
}

func (v NullableModelUICommand) Get() *ModelUICommand {
	return v.value
}

func (v *NullableModelUICommand) Set(val *ModelUICommand) {
	v.value = val
	v.isSet = true
}

func (v NullableModelUICommand) IsSet() bool {
	return v.isSet
}

func (v *NullableModelUICommand) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelUICommand(val *ModelUICommand) *NullableModelUICommand {
	return &NullableModelUICommand{value: val, isSet: true}
}

func (v NullableModelUICommand) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelUICommand) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


