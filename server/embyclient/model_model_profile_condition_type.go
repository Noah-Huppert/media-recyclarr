/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"encoding/json"
	"fmt"
)

// ModelProfileConditionType the model 'ModelProfileConditionType'
type ModelProfileConditionType string

// List of ProfileConditionType
const (
	MODELPROFILECONDITIONTYPE_EQUALS ModelProfileConditionType = "Equals"
	MODELPROFILECONDITIONTYPE_NOT_EQUALS ModelProfileConditionType = "NotEquals"
	MODELPROFILECONDITIONTYPE_LESS_THAN_EQUAL ModelProfileConditionType = "LessThanEqual"
	MODELPROFILECONDITIONTYPE_GREATER_THAN_EQUAL ModelProfileConditionType = "GreaterThanEqual"
	MODELPROFILECONDITIONTYPE_EQUALS_ANY ModelProfileConditionType = "EqualsAny"
)

// All allowed values of ModelProfileConditionType enum
var AllowedModelProfileConditionTypeEnumValues = []ModelProfileConditionType{
	"Equals",
	"NotEquals",
	"LessThanEqual",
	"GreaterThanEqual",
	"EqualsAny",
}

func (v *ModelProfileConditionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ModelProfileConditionType(value)
	for _, existing := range AllowedModelProfileConditionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ModelProfileConditionType", value)
}

// NewModelProfileConditionTypeFromValue returns a pointer to a valid ModelProfileConditionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewModelProfileConditionTypeFromValue(v string) (*ModelProfileConditionType, error) {
	ev := ModelProfileConditionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ModelProfileConditionType: valid values are %v", v, AllowedModelProfileConditionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ModelProfileConditionType) IsValid() bool {
	for _, existing := range AllowedModelProfileConditionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ProfileConditionType value
func (v ModelProfileConditionType) Ptr() *ModelProfileConditionType {
	return &v
}

type NullableModelProfileConditionType struct {
	value *ModelProfileConditionType
	isSet bool
}

func (v NullableModelProfileConditionType) Get() *ModelProfileConditionType {
	return v.value
}

func (v *NullableModelProfileConditionType) Set(val *ModelProfileConditionType) {
	v.value = val
	v.isSet = true
}

func (v NullableModelProfileConditionType) IsSet() bool {
	return v.isSet
}

func (v *NullableModelProfileConditionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelProfileConditionType(val *ModelProfileConditionType) *NullableModelProfileConditionType {
	return &NullableModelProfileConditionType{value: val, isSet: true}
}

func (v NullableModelProfileConditionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelProfileConditionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

