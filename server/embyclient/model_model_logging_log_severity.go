/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"encoding/json"
	"fmt"
)

// ModelLoggingLogSeverity the model 'ModelLoggingLogSeverity'
type ModelLoggingLogSeverity string

// List of Logging.LogSeverity
const (
	MODELLOGGINGLOGSEVERITY_INFO ModelLoggingLogSeverity = "Info"
	MODELLOGGINGLOGSEVERITY_DEBUG ModelLoggingLogSeverity = "Debug"
	MODELLOGGINGLOGSEVERITY_WARN ModelLoggingLogSeverity = "Warn"
	MODELLOGGINGLOGSEVERITY_ERROR ModelLoggingLogSeverity = "Error"
	MODELLOGGINGLOGSEVERITY_FATAL ModelLoggingLogSeverity = "Fatal"
)

// All allowed values of ModelLoggingLogSeverity enum
var AllowedModelLoggingLogSeverityEnumValues = []ModelLoggingLogSeverity{
	"Info",
	"Debug",
	"Warn",
	"Error",
	"Fatal",
}

func (v *ModelLoggingLogSeverity) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ModelLoggingLogSeverity(value)
	for _, existing := range AllowedModelLoggingLogSeverityEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ModelLoggingLogSeverity", value)
}

// NewModelLoggingLogSeverityFromValue returns a pointer to a valid ModelLoggingLogSeverity
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewModelLoggingLogSeverityFromValue(v string) (*ModelLoggingLogSeverity, error) {
	ev := ModelLoggingLogSeverity(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ModelLoggingLogSeverity: valid values are %v", v, AllowedModelLoggingLogSeverityEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ModelLoggingLogSeverity) IsValid() bool {
	for _, existing := range AllowedModelLoggingLogSeverityEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Logging.LogSeverity value
func (v ModelLoggingLogSeverity) Ptr() *ModelLoggingLogSeverity {
	return &v
}

type NullableModelLoggingLogSeverity struct {
	value *ModelLoggingLogSeverity
	isSet bool
}

func (v NullableModelLoggingLogSeverity) Get() *ModelLoggingLogSeverity {
	return v.value
}

func (v *NullableModelLoggingLogSeverity) Set(val *ModelLoggingLogSeverity) {
	v.value = val
	v.isSet = true
}

func (v NullableModelLoggingLogSeverity) IsSet() bool {
	return v.isSet
}

func (v *NullableModelLoggingLogSeverity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelLoggingLogSeverity(val *ModelLoggingLogSeverity) *NullableModelLoggingLogSeverity {
	return &NullableModelLoggingLogSeverity{value: val, isSet: true}
}

func (v NullableModelLoggingLogSeverity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelLoggingLogSeverity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

