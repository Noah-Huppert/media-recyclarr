/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"encoding/json"
)

// checks if the ModelValidatePath type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelValidatePath{}

// ModelValidatePath struct for ModelValidatePath
type ModelValidatePath struct {
	ValidateWriteable *bool `json:"ValidateWriteable,omitempty"`
	IsFile NullableBool `json:"IsFile,omitempty"`
	Username *string `json:"Username,omitempty"`
	Password *string `json:"Password,omitempty"`
}

// NewModelValidatePath instantiates a new ModelValidatePath object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelValidatePath() *ModelValidatePath {
	this := ModelValidatePath{}
	return &this
}

// NewModelValidatePathWithDefaults instantiates a new ModelValidatePath object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelValidatePathWithDefaults() *ModelValidatePath {
	this := ModelValidatePath{}
	return &this
}

// GetValidateWriteable returns the ValidateWriteable field value if set, zero value otherwise.
func (o *ModelValidatePath) GetValidateWriteable() bool {
	if o == nil || IsNil(o.ValidateWriteable) {
		var ret bool
		return ret
	}
	return *o.ValidateWriteable
}

// GetValidateWriteableOk returns a tuple with the ValidateWriteable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelValidatePath) GetValidateWriteableOk() (*bool, bool) {
	if o == nil || IsNil(o.ValidateWriteable) {
		return nil, false
	}
	return o.ValidateWriteable, true
}

// HasValidateWriteable returns a boolean if a field has been set.
func (o *ModelValidatePath) HasValidateWriteable() bool {
	if o != nil && !IsNil(o.ValidateWriteable) {
		return true
	}

	return false
}

// SetValidateWriteable gets a reference to the given bool and assigns it to the ValidateWriteable field.
func (o *ModelValidatePath) SetValidateWriteable(v bool) {
	o.ValidateWriteable = &v
}

// GetIsFile returns the IsFile field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ModelValidatePath) GetIsFile() bool {
	if o == nil || IsNil(o.IsFile.Get()) {
		var ret bool
		return ret
	}
	return *o.IsFile.Get()
}

// GetIsFileOk returns a tuple with the IsFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelValidatePath) GetIsFileOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsFile.Get(), o.IsFile.IsSet()
}

// HasIsFile returns a boolean if a field has been set.
func (o *ModelValidatePath) HasIsFile() bool {
	if o != nil && o.IsFile.IsSet() {
		return true
	}

	return false
}

// SetIsFile gets a reference to the given NullableBool and assigns it to the IsFile field.
func (o *ModelValidatePath) SetIsFile(v bool) {
	o.IsFile.Set(&v)
}
// SetIsFileNil sets the value for IsFile to be an explicit nil
func (o *ModelValidatePath) SetIsFileNil() {
	o.IsFile.Set(nil)
}

// UnsetIsFile ensures that no value is present for IsFile, not even an explicit nil
func (o *ModelValidatePath) UnsetIsFile() {
	o.IsFile.Unset()
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *ModelValidatePath) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelValidatePath) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *ModelValidatePath) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *ModelValidatePath) SetUsername(v string) {
	o.Username = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *ModelValidatePath) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelValidatePath) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *ModelValidatePath) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *ModelValidatePath) SetPassword(v string) {
	o.Password = &v
}

func (o ModelValidatePath) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelValidatePath) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ValidateWriteable) {
		toSerialize["ValidateWriteable"] = o.ValidateWriteable
	}
	if o.IsFile.IsSet() {
		toSerialize["IsFile"] = o.IsFile.Get()
	}
	if !IsNil(o.Username) {
		toSerialize["Username"] = o.Username
	}
	if !IsNil(o.Password) {
		toSerialize["Password"] = o.Password
	}
	return toSerialize, nil
}

type NullableModelValidatePath struct {
	value *ModelValidatePath
	isSet bool
}

func (v NullableModelValidatePath) Get() *ModelValidatePath {
	return v.value
}

func (v *NullableModelValidatePath) Set(val *ModelValidatePath) {
	v.value = val
	v.isSet = true
}

func (v NullableModelValidatePath) IsSet() bool {
	return v.isSet
}

func (v *NullableModelValidatePath) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelValidatePath(val *ModelValidatePath) *NullableModelValidatePath {
	return &NullableModelValidatePath{value: val, isSet: true}
}

func (v NullableModelValidatePath) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelValidatePath) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


