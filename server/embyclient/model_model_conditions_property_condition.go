/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"encoding/json"
)

// checks if the ModelConditionsPropertyCondition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelConditionsPropertyCondition{}

// ModelConditionsPropertyCondition struct for ModelConditionsPropertyCondition
type ModelConditionsPropertyCondition struct {
	AffectedPropertyId *string `json:"AffectedPropertyId,omitempty"`
	ConditionType *ModelConditionsPropertyConditionType `json:"ConditionType,omitempty"`
	TargetPropertyId *string `json:"TargetPropertyId,omitempty"`
	SimpleCondition *ModelAttributesSimpleCondition `json:"SimpleCondition,omitempty"`
	ValueCondition *ModelAttributesValueCondition `json:"ValueCondition,omitempty"`
	Value map[string]interface{} `json:"Value,omitempty"`
}

// NewModelConditionsPropertyCondition instantiates a new ModelConditionsPropertyCondition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelConditionsPropertyCondition() *ModelConditionsPropertyCondition {
	this := ModelConditionsPropertyCondition{}
	return &this
}

// NewModelConditionsPropertyConditionWithDefaults instantiates a new ModelConditionsPropertyCondition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelConditionsPropertyConditionWithDefaults() *ModelConditionsPropertyCondition {
	this := ModelConditionsPropertyCondition{}
	return &this
}

// GetAffectedPropertyId returns the AffectedPropertyId field value if set, zero value otherwise.
func (o *ModelConditionsPropertyCondition) GetAffectedPropertyId() string {
	if o == nil || IsNil(o.AffectedPropertyId) {
		var ret string
		return ret
	}
	return *o.AffectedPropertyId
}

// GetAffectedPropertyIdOk returns a tuple with the AffectedPropertyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelConditionsPropertyCondition) GetAffectedPropertyIdOk() (*string, bool) {
	if o == nil || IsNil(o.AffectedPropertyId) {
		return nil, false
	}
	return o.AffectedPropertyId, true
}

// HasAffectedPropertyId returns a boolean if a field has been set.
func (o *ModelConditionsPropertyCondition) HasAffectedPropertyId() bool {
	if o != nil && !IsNil(o.AffectedPropertyId) {
		return true
	}

	return false
}

// SetAffectedPropertyId gets a reference to the given string and assigns it to the AffectedPropertyId field.
func (o *ModelConditionsPropertyCondition) SetAffectedPropertyId(v string) {
	o.AffectedPropertyId = &v
}

// GetConditionType returns the ConditionType field value if set, zero value otherwise.
func (o *ModelConditionsPropertyCondition) GetConditionType() ModelConditionsPropertyConditionType {
	if o == nil || IsNil(o.ConditionType) {
		var ret ModelConditionsPropertyConditionType
		return ret
	}
	return *o.ConditionType
}

// GetConditionTypeOk returns a tuple with the ConditionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelConditionsPropertyCondition) GetConditionTypeOk() (*ModelConditionsPropertyConditionType, bool) {
	if o == nil || IsNil(o.ConditionType) {
		return nil, false
	}
	return o.ConditionType, true
}

// HasConditionType returns a boolean if a field has been set.
func (o *ModelConditionsPropertyCondition) HasConditionType() bool {
	if o != nil && !IsNil(o.ConditionType) {
		return true
	}

	return false
}

// SetConditionType gets a reference to the given ModelConditionsPropertyConditionType and assigns it to the ConditionType field.
func (o *ModelConditionsPropertyCondition) SetConditionType(v ModelConditionsPropertyConditionType) {
	o.ConditionType = &v
}

// GetTargetPropertyId returns the TargetPropertyId field value if set, zero value otherwise.
func (o *ModelConditionsPropertyCondition) GetTargetPropertyId() string {
	if o == nil || IsNil(o.TargetPropertyId) {
		var ret string
		return ret
	}
	return *o.TargetPropertyId
}

// GetTargetPropertyIdOk returns a tuple with the TargetPropertyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelConditionsPropertyCondition) GetTargetPropertyIdOk() (*string, bool) {
	if o == nil || IsNil(o.TargetPropertyId) {
		return nil, false
	}
	return o.TargetPropertyId, true
}

// HasTargetPropertyId returns a boolean if a field has been set.
func (o *ModelConditionsPropertyCondition) HasTargetPropertyId() bool {
	if o != nil && !IsNil(o.TargetPropertyId) {
		return true
	}

	return false
}

// SetTargetPropertyId gets a reference to the given string and assigns it to the TargetPropertyId field.
func (o *ModelConditionsPropertyCondition) SetTargetPropertyId(v string) {
	o.TargetPropertyId = &v
}

// GetSimpleCondition returns the SimpleCondition field value if set, zero value otherwise.
func (o *ModelConditionsPropertyCondition) GetSimpleCondition() ModelAttributesSimpleCondition {
	if o == nil || IsNil(o.SimpleCondition) {
		var ret ModelAttributesSimpleCondition
		return ret
	}
	return *o.SimpleCondition
}

// GetSimpleConditionOk returns a tuple with the SimpleCondition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelConditionsPropertyCondition) GetSimpleConditionOk() (*ModelAttributesSimpleCondition, bool) {
	if o == nil || IsNil(o.SimpleCondition) {
		return nil, false
	}
	return o.SimpleCondition, true
}

// HasSimpleCondition returns a boolean if a field has been set.
func (o *ModelConditionsPropertyCondition) HasSimpleCondition() bool {
	if o != nil && !IsNil(o.SimpleCondition) {
		return true
	}

	return false
}

// SetSimpleCondition gets a reference to the given ModelAttributesSimpleCondition and assigns it to the SimpleCondition field.
func (o *ModelConditionsPropertyCondition) SetSimpleCondition(v ModelAttributesSimpleCondition) {
	o.SimpleCondition = &v
}

// GetValueCondition returns the ValueCondition field value if set, zero value otherwise.
func (o *ModelConditionsPropertyCondition) GetValueCondition() ModelAttributesValueCondition {
	if o == nil || IsNil(o.ValueCondition) {
		var ret ModelAttributesValueCondition
		return ret
	}
	return *o.ValueCondition
}

// GetValueConditionOk returns a tuple with the ValueCondition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelConditionsPropertyCondition) GetValueConditionOk() (*ModelAttributesValueCondition, bool) {
	if o == nil || IsNil(o.ValueCondition) {
		return nil, false
	}
	return o.ValueCondition, true
}

// HasValueCondition returns a boolean if a field has been set.
func (o *ModelConditionsPropertyCondition) HasValueCondition() bool {
	if o != nil && !IsNil(o.ValueCondition) {
		return true
	}

	return false
}

// SetValueCondition gets a reference to the given ModelAttributesValueCondition and assigns it to the ValueCondition field.
func (o *ModelConditionsPropertyCondition) SetValueCondition(v ModelAttributesValueCondition) {
	o.ValueCondition = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *ModelConditionsPropertyCondition) GetValue() map[string]interface{} {
	if o == nil || IsNil(o.Value) {
		var ret map[string]interface{}
		return ret
	}
	return o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelConditionsPropertyCondition) GetValueOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Value) {
		return map[string]interface{}{}, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *ModelConditionsPropertyCondition) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given map[string]interface{} and assigns it to the Value field.
func (o *ModelConditionsPropertyCondition) SetValue(v map[string]interface{}) {
	o.Value = v
}

func (o ModelConditionsPropertyCondition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelConditionsPropertyCondition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AffectedPropertyId) {
		toSerialize["AffectedPropertyId"] = o.AffectedPropertyId
	}
	if !IsNil(o.ConditionType) {
		toSerialize["ConditionType"] = o.ConditionType
	}
	if !IsNil(o.TargetPropertyId) {
		toSerialize["TargetPropertyId"] = o.TargetPropertyId
	}
	if !IsNil(o.SimpleCondition) {
		toSerialize["SimpleCondition"] = o.SimpleCondition
	}
	if !IsNil(o.ValueCondition) {
		toSerialize["ValueCondition"] = o.ValueCondition
	}
	if !IsNil(o.Value) {
		toSerialize["Value"] = o.Value
	}
	return toSerialize, nil
}

type NullableModelConditionsPropertyCondition struct {
	value *ModelConditionsPropertyCondition
	isSet bool
}

func (v NullableModelConditionsPropertyCondition) Get() *ModelConditionsPropertyCondition {
	return v.value
}

func (v *NullableModelConditionsPropertyCondition) Set(val *ModelConditionsPropertyCondition) {
	v.value = val
	v.isSet = true
}

func (v NullableModelConditionsPropertyCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableModelConditionsPropertyCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelConditionsPropertyCondition(val *ModelConditionsPropertyCondition) *NullableModelConditionsPropertyCondition {
	return &NullableModelConditionsPropertyCondition{value: val, isSet: true}
}

func (v NullableModelConditionsPropertyCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelConditionsPropertyCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


