/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"encoding/json"
	"fmt"
)

// ModelLibraryItemLinkType the model 'ModelLibraryItemLinkType'
type ModelLibraryItemLinkType string

// List of Library.ItemLinkType
const (
	MODELLIBRARYITEMLINKTYPE_ARTISTS ModelLibraryItemLinkType = "Artists"
	MODELLIBRARYITEMLINKTYPE_ALBUM_ARTISTS ModelLibraryItemLinkType = "AlbumArtists"
	MODELLIBRARYITEMLINKTYPE_GENRES ModelLibraryItemLinkType = "Genres"
	MODELLIBRARYITEMLINKTYPE_STUDIOS ModelLibraryItemLinkType = "Studios"
	MODELLIBRARYITEMLINKTYPE_TAGS ModelLibraryItemLinkType = "Tags"
	MODELLIBRARYITEMLINKTYPE_COMPOSERS ModelLibraryItemLinkType = "Composers"
	MODELLIBRARYITEMLINKTYPE_COLLECTIONS ModelLibraryItemLinkType = "Collections"
	MODELLIBRARYITEMLINKTYPE_ALBUMS ModelLibraryItemLinkType = "Albums"
	MODELLIBRARYITEMLINKTYPE_COLLECTION_FOLDERS ModelLibraryItemLinkType = "CollectionFolders"
)

// All allowed values of ModelLibraryItemLinkType enum
var AllowedModelLibraryItemLinkTypeEnumValues = []ModelLibraryItemLinkType{
	"Artists",
	"AlbumArtists",
	"Genres",
	"Studios",
	"Tags",
	"Composers",
	"Collections",
	"Albums",
	"CollectionFolders",
}

func (v *ModelLibraryItemLinkType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ModelLibraryItemLinkType(value)
	for _, existing := range AllowedModelLibraryItemLinkTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ModelLibraryItemLinkType", value)
}

// NewModelLibraryItemLinkTypeFromValue returns a pointer to a valid ModelLibraryItemLinkType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewModelLibraryItemLinkTypeFromValue(v string) (*ModelLibraryItemLinkType, error) {
	ev := ModelLibraryItemLinkType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ModelLibraryItemLinkType: valid values are %v", v, AllowedModelLibraryItemLinkTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ModelLibraryItemLinkType) IsValid() bool {
	for _, existing := range AllowedModelLibraryItemLinkTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Library.ItemLinkType value
func (v ModelLibraryItemLinkType) Ptr() *ModelLibraryItemLinkType {
	return &v
}

type NullableModelLibraryItemLinkType struct {
	value *ModelLibraryItemLinkType
	isSet bool
}

func (v NullableModelLibraryItemLinkType) Get() *ModelLibraryItemLinkType {
	return v.value
}

func (v *NullableModelLibraryItemLinkType) Set(val *ModelLibraryItemLinkType) {
	v.value = val
	v.isSet = true
}

func (v NullableModelLibraryItemLinkType) IsSet() bool {
	return v.isSet
}

func (v *NullableModelLibraryItemLinkType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelLibraryItemLinkType(val *ModelLibraryItemLinkType) *NullableModelLibraryItemLinkType {
	return &NullableModelLibraryItemLinkType{value: val, isSet: true}
}

func (v NullableModelLibraryItemLinkType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelLibraryItemLinkType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

