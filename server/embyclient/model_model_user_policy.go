/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"encoding/json"
)

// checks if the ModelUserPolicy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelUserPolicy{}

// ModelUserPolicy struct for ModelUserPolicy
type ModelUserPolicy struct {
	IsAdministrator *bool `json:"IsAdministrator,omitempty"`
	IsHidden *bool `json:"IsHidden,omitempty"`
	IsHiddenRemotely *bool `json:"IsHiddenRemotely,omitempty"`
	IsHiddenFromUnusedDevices *bool `json:"IsHiddenFromUnusedDevices,omitempty"`
	IsDisabled *bool `json:"IsDisabled,omitempty"`
	LockedOutDate *int64 `json:"LockedOutDate,omitempty"`
	MaxParentalRating NullableInt32 `json:"MaxParentalRating,omitempty"`
	AllowTagOrRating *bool `json:"AllowTagOrRating,omitempty"`
	BlockedTags []string `json:"BlockedTags,omitempty"`
	IsTagBlockingModeInclusive *bool `json:"IsTagBlockingModeInclusive,omitempty"`
	IncludeTags []string `json:"IncludeTags,omitempty"`
	EnableUserPreferenceAccess *bool `json:"EnableUserPreferenceAccess,omitempty"`
	AccessSchedules []ModelAccessSchedule `json:"AccessSchedules,omitempty"`
	BlockUnratedItems []ModelUnratedItem `json:"BlockUnratedItems,omitempty"`
	EnableRemoteControlOfOtherUsers *bool `json:"EnableRemoteControlOfOtherUsers,omitempty"`
	EnableSharedDeviceControl *bool `json:"EnableSharedDeviceControl,omitempty"`
	EnableRemoteAccess *bool `json:"EnableRemoteAccess,omitempty"`
	EnableLiveTvManagement *bool `json:"EnableLiveTvManagement,omitempty"`
	EnableLiveTvAccess *bool `json:"EnableLiveTvAccess,omitempty"`
	EnableMediaPlayback *bool `json:"EnableMediaPlayback,omitempty"`
	EnableAudioPlaybackTranscoding *bool `json:"EnableAudioPlaybackTranscoding,omitempty"`
	EnableVideoPlaybackTranscoding *bool `json:"EnableVideoPlaybackTranscoding,omitempty"`
	EnablePlaybackRemuxing *bool `json:"EnablePlaybackRemuxing,omitempty"`
	EnableContentDeletion *bool `json:"EnableContentDeletion,omitempty"`
	RestrictedFeatures []string `json:"RestrictedFeatures,omitempty"`
	EnableContentDeletionFromFolders []string `json:"EnableContentDeletionFromFolders,omitempty"`
	EnableContentDownloading *bool `json:"EnableContentDownloading,omitempty"`
	EnableSubtitleDownloading *bool `json:"EnableSubtitleDownloading,omitempty"`
	EnableSubtitleManagement *bool `json:"EnableSubtitleManagement,omitempty"`
	EnableSyncTranscoding *bool `json:"EnableSyncTranscoding,omitempty"`
	EnableMediaConversion *bool `json:"EnableMediaConversion,omitempty"`
	EnabledChannels []string `json:"EnabledChannels,omitempty"`
	EnableAllChannels *bool `json:"EnableAllChannels,omitempty"`
	EnabledFolders []string `json:"EnabledFolders,omitempty"`
	EnableAllFolders *bool `json:"EnableAllFolders,omitempty"`
	InvalidLoginAttemptCount *int32 `json:"InvalidLoginAttemptCount,omitempty"`
	EnablePublicSharing *bool `json:"EnablePublicSharing,omitempty"`
	BlockedMediaFolders []string `json:"BlockedMediaFolders,omitempty"`
	RemoteClientBitrateLimit *int32 `json:"RemoteClientBitrateLimit,omitempty"`
	AuthenticationProviderId *string `json:"AuthenticationProviderId,omitempty"`
	ExcludedSubFolders []string `json:"ExcludedSubFolders,omitempty"`
	SimultaneousStreamLimit *int32 `json:"SimultaneousStreamLimit,omitempty"`
	EnabledDevices []string `json:"EnabledDevices,omitempty"`
	EnableAllDevices *bool `json:"EnableAllDevices,omitempty"`
	AllowCameraUpload *bool `json:"AllowCameraUpload,omitempty"`
}

// NewModelUserPolicy instantiates a new ModelUserPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelUserPolicy() *ModelUserPolicy {
	this := ModelUserPolicy{}
	return &this
}

// NewModelUserPolicyWithDefaults instantiates a new ModelUserPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelUserPolicyWithDefaults() *ModelUserPolicy {
	this := ModelUserPolicy{}
	return &this
}

// GetIsAdministrator returns the IsAdministrator field value if set, zero value otherwise.
func (o *ModelUserPolicy) GetIsAdministrator() bool {
	if o == nil || IsNil(o.IsAdministrator) {
		var ret bool
		return ret
	}
	return *o.IsAdministrator
}

// GetIsAdministratorOk returns a tuple with the IsAdministrator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserPolicy) GetIsAdministratorOk() (*bool, bool) {
	if o == nil || IsNil(o.IsAdministrator) {
		return nil, false
	}
	return o.IsAdministrator, true
}

// HasIsAdministrator returns a boolean if a field has been set.
func (o *ModelUserPolicy) HasIsAdministrator() bool {
	if o != nil && !IsNil(o.IsAdministrator) {
		return true
	}

	return false
}

// SetIsAdministrator gets a reference to the given bool and assigns it to the IsAdministrator field.
func (o *ModelUserPolicy) SetIsAdministrator(v bool) {
	o.IsAdministrator = &v
}

// GetIsHidden returns the IsHidden field value if set, zero value otherwise.
func (o *ModelUserPolicy) GetIsHidden() bool {
	if o == nil || IsNil(o.IsHidden) {
		var ret bool
		return ret
	}
	return *o.IsHidden
}

// GetIsHiddenOk returns a tuple with the IsHidden field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserPolicy) GetIsHiddenOk() (*bool, bool) {
	if o == nil || IsNil(o.IsHidden) {
		return nil, false
	}
	return o.IsHidden, true
}

// HasIsHidden returns a boolean if a field has been set.
func (o *ModelUserPolicy) HasIsHidden() bool {
	if o != nil && !IsNil(o.IsHidden) {
		return true
	}

	return false
}

// SetIsHidden gets a reference to the given bool and assigns it to the IsHidden field.
func (o *ModelUserPolicy) SetIsHidden(v bool) {
	o.IsHidden = &v
}

// GetIsHiddenRemotely returns the IsHiddenRemotely field value if set, zero value otherwise.
func (o *ModelUserPolicy) GetIsHiddenRemotely() bool {
	if o == nil || IsNil(o.IsHiddenRemotely) {
		var ret bool
		return ret
	}
	return *o.IsHiddenRemotely
}

// GetIsHiddenRemotelyOk returns a tuple with the IsHiddenRemotely field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserPolicy) GetIsHiddenRemotelyOk() (*bool, bool) {
	if o == nil || IsNil(o.IsHiddenRemotely) {
		return nil, false
	}
	return o.IsHiddenRemotely, true
}

// HasIsHiddenRemotely returns a boolean if a field has been set.
func (o *ModelUserPolicy) HasIsHiddenRemotely() bool {
	if o != nil && !IsNil(o.IsHiddenRemotely) {
		return true
	}

	return false
}

// SetIsHiddenRemotely gets a reference to the given bool and assigns it to the IsHiddenRemotely field.
func (o *ModelUserPolicy) SetIsHiddenRemotely(v bool) {
	o.IsHiddenRemotely = &v
}

// GetIsHiddenFromUnusedDevices returns the IsHiddenFromUnusedDevices field value if set, zero value otherwise.
func (o *ModelUserPolicy) GetIsHiddenFromUnusedDevices() bool {
	if o == nil || IsNil(o.IsHiddenFromUnusedDevices) {
		var ret bool
		return ret
	}
	return *o.IsHiddenFromUnusedDevices
}

// GetIsHiddenFromUnusedDevicesOk returns a tuple with the IsHiddenFromUnusedDevices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserPolicy) GetIsHiddenFromUnusedDevicesOk() (*bool, bool) {
	if o == nil || IsNil(o.IsHiddenFromUnusedDevices) {
		return nil, false
	}
	return o.IsHiddenFromUnusedDevices, true
}

// HasIsHiddenFromUnusedDevices returns a boolean if a field has been set.
func (o *ModelUserPolicy) HasIsHiddenFromUnusedDevices() bool {
	if o != nil && !IsNil(o.IsHiddenFromUnusedDevices) {
		return true
	}

	return false
}

// SetIsHiddenFromUnusedDevices gets a reference to the given bool and assigns it to the IsHiddenFromUnusedDevices field.
func (o *ModelUserPolicy) SetIsHiddenFromUnusedDevices(v bool) {
	o.IsHiddenFromUnusedDevices = &v
}

// GetIsDisabled returns the IsDisabled field value if set, zero value otherwise.
func (o *ModelUserPolicy) GetIsDisabled() bool {
	if o == nil || IsNil(o.IsDisabled) {
		var ret bool
		return ret
	}
	return *o.IsDisabled
}

// GetIsDisabledOk returns a tuple with the IsDisabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserPolicy) GetIsDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDisabled) {
		return nil, false
	}
	return o.IsDisabled, true
}

// HasIsDisabled returns a boolean if a field has been set.
func (o *ModelUserPolicy) HasIsDisabled() bool {
	if o != nil && !IsNil(o.IsDisabled) {
		return true
	}

	return false
}

// SetIsDisabled gets a reference to the given bool and assigns it to the IsDisabled field.
func (o *ModelUserPolicy) SetIsDisabled(v bool) {
	o.IsDisabled = &v
}

// GetLockedOutDate returns the LockedOutDate field value if set, zero value otherwise.
func (o *ModelUserPolicy) GetLockedOutDate() int64 {
	if o == nil || IsNil(o.LockedOutDate) {
		var ret int64
		return ret
	}
	return *o.LockedOutDate
}

// GetLockedOutDateOk returns a tuple with the LockedOutDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserPolicy) GetLockedOutDateOk() (*int64, bool) {
	if o == nil || IsNil(o.LockedOutDate) {
		return nil, false
	}
	return o.LockedOutDate, true
}

// HasLockedOutDate returns a boolean if a field has been set.
func (o *ModelUserPolicy) HasLockedOutDate() bool {
	if o != nil && !IsNil(o.LockedOutDate) {
		return true
	}

	return false
}

// SetLockedOutDate gets a reference to the given int64 and assigns it to the LockedOutDate field.
func (o *ModelUserPolicy) SetLockedOutDate(v int64) {
	o.LockedOutDate = &v
}

// GetMaxParentalRating returns the MaxParentalRating field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ModelUserPolicy) GetMaxParentalRating() int32 {
	if o == nil || IsNil(o.MaxParentalRating.Get()) {
		var ret int32
		return ret
	}
	return *o.MaxParentalRating.Get()
}

// GetMaxParentalRatingOk returns a tuple with the MaxParentalRating field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelUserPolicy) GetMaxParentalRatingOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MaxParentalRating.Get(), o.MaxParentalRating.IsSet()
}

// HasMaxParentalRating returns a boolean if a field has been set.
func (o *ModelUserPolicy) HasMaxParentalRating() bool {
	if o != nil && o.MaxParentalRating.IsSet() {
		return true
	}

	return false
}

// SetMaxParentalRating gets a reference to the given NullableInt32 and assigns it to the MaxParentalRating field.
func (o *ModelUserPolicy) SetMaxParentalRating(v int32) {
	o.MaxParentalRating.Set(&v)
}
// SetMaxParentalRatingNil sets the value for MaxParentalRating to be an explicit nil
func (o *ModelUserPolicy) SetMaxParentalRatingNil() {
	o.MaxParentalRating.Set(nil)
}

// UnsetMaxParentalRating ensures that no value is present for MaxParentalRating, not even an explicit nil
func (o *ModelUserPolicy) UnsetMaxParentalRating() {
	o.MaxParentalRating.Unset()
}

// GetAllowTagOrRating returns the AllowTagOrRating field value if set, zero value otherwise.
func (o *ModelUserPolicy) GetAllowTagOrRating() bool {
	if o == nil || IsNil(o.AllowTagOrRating) {
		var ret bool
		return ret
	}
	return *o.AllowTagOrRating
}

// GetAllowTagOrRatingOk returns a tuple with the AllowTagOrRating field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserPolicy) GetAllowTagOrRatingOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowTagOrRating) {
		return nil, false
	}
	return o.AllowTagOrRating, true
}

// HasAllowTagOrRating returns a boolean if a field has been set.
func (o *ModelUserPolicy) HasAllowTagOrRating() bool {
	if o != nil && !IsNil(o.AllowTagOrRating) {
		return true
	}

	return false
}

// SetAllowTagOrRating gets a reference to the given bool and assigns it to the AllowTagOrRating field.
func (o *ModelUserPolicy) SetAllowTagOrRating(v bool) {
	o.AllowTagOrRating = &v
}

// GetBlockedTags returns the BlockedTags field value if set, zero value otherwise.
func (o *ModelUserPolicy) GetBlockedTags() []string {
	if o == nil || IsNil(o.BlockedTags) {
		var ret []string
		return ret
	}
	return o.BlockedTags
}

// GetBlockedTagsOk returns a tuple with the BlockedTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserPolicy) GetBlockedTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.BlockedTags) {
		return nil, false
	}
	return o.BlockedTags, true
}

// HasBlockedTags returns a boolean if a field has been set.
func (o *ModelUserPolicy) HasBlockedTags() bool {
	if o != nil && !IsNil(o.BlockedTags) {
		return true
	}

	return false
}

// SetBlockedTags gets a reference to the given []string and assigns it to the BlockedTags field.
func (o *ModelUserPolicy) SetBlockedTags(v []string) {
	o.BlockedTags = v
}

// GetIsTagBlockingModeInclusive returns the IsTagBlockingModeInclusive field value if set, zero value otherwise.
func (o *ModelUserPolicy) GetIsTagBlockingModeInclusive() bool {
	if o == nil || IsNil(o.IsTagBlockingModeInclusive) {
		var ret bool
		return ret
	}
	return *o.IsTagBlockingModeInclusive
}

// GetIsTagBlockingModeInclusiveOk returns a tuple with the IsTagBlockingModeInclusive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserPolicy) GetIsTagBlockingModeInclusiveOk() (*bool, bool) {
	if o == nil || IsNil(o.IsTagBlockingModeInclusive) {
		return nil, false
	}
	return o.IsTagBlockingModeInclusive, true
}

// HasIsTagBlockingModeInclusive returns a boolean if a field has been set.
func (o *ModelUserPolicy) HasIsTagBlockingModeInclusive() bool {
	if o != nil && !IsNil(o.IsTagBlockingModeInclusive) {
		return true
	}

	return false
}

// SetIsTagBlockingModeInclusive gets a reference to the given bool and assigns it to the IsTagBlockingModeInclusive field.
func (o *ModelUserPolicy) SetIsTagBlockingModeInclusive(v bool) {
	o.IsTagBlockingModeInclusive = &v
}

// GetIncludeTags returns the IncludeTags field value if set, zero value otherwise.
func (o *ModelUserPolicy) GetIncludeTags() []string {
	if o == nil || IsNil(o.IncludeTags) {
		var ret []string
		return ret
	}
	return o.IncludeTags
}

// GetIncludeTagsOk returns a tuple with the IncludeTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserPolicy) GetIncludeTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.IncludeTags) {
		return nil, false
	}
	return o.IncludeTags, true
}

// HasIncludeTags returns a boolean if a field has been set.
func (o *ModelUserPolicy) HasIncludeTags() bool {
	if o != nil && !IsNil(o.IncludeTags) {
		return true
	}

	return false
}

// SetIncludeTags gets a reference to the given []string and assigns it to the IncludeTags field.
func (o *ModelUserPolicy) SetIncludeTags(v []string) {
	o.IncludeTags = v
}

// GetEnableUserPreferenceAccess returns the EnableUserPreferenceAccess field value if set, zero value otherwise.
func (o *ModelUserPolicy) GetEnableUserPreferenceAccess() bool {
	if o == nil || IsNil(o.EnableUserPreferenceAccess) {
		var ret bool
		return ret
	}
	return *o.EnableUserPreferenceAccess
}

// GetEnableUserPreferenceAccessOk returns a tuple with the EnableUserPreferenceAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserPolicy) GetEnableUserPreferenceAccessOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableUserPreferenceAccess) {
		return nil, false
	}
	return o.EnableUserPreferenceAccess, true
}

// HasEnableUserPreferenceAccess returns a boolean if a field has been set.
func (o *ModelUserPolicy) HasEnableUserPreferenceAccess() bool {
	if o != nil && !IsNil(o.EnableUserPreferenceAccess) {
		return true
	}

	return false
}

// SetEnableUserPreferenceAccess gets a reference to the given bool and assigns it to the EnableUserPreferenceAccess field.
func (o *ModelUserPolicy) SetEnableUserPreferenceAccess(v bool) {
	o.EnableUserPreferenceAccess = &v
}

// GetAccessSchedules returns the AccessSchedules field value if set, zero value otherwise.
func (o *ModelUserPolicy) GetAccessSchedules() []ModelAccessSchedule {
	if o == nil || IsNil(o.AccessSchedules) {
		var ret []ModelAccessSchedule
		return ret
	}
	return o.AccessSchedules
}

// GetAccessSchedulesOk returns a tuple with the AccessSchedules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserPolicy) GetAccessSchedulesOk() ([]ModelAccessSchedule, bool) {
	if o == nil || IsNil(o.AccessSchedules) {
		return nil, false
	}
	return o.AccessSchedules, true
}

// HasAccessSchedules returns a boolean if a field has been set.
func (o *ModelUserPolicy) HasAccessSchedules() bool {
	if o != nil && !IsNil(o.AccessSchedules) {
		return true
	}

	return false
}

// SetAccessSchedules gets a reference to the given []ModelAccessSchedule and assigns it to the AccessSchedules field.
func (o *ModelUserPolicy) SetAccessSchedules(v []ModelAccessSchedule) {
	o.AccessSchedules = v
}

// GetBlockUnratedItems returns the BlockUnratedItems field value if set, zero value otherwise.
func (o *ModelUserPolicy) GetBlockUnratedItems() []ModelUnratedItem {
	if o == nil || IsNil(o.BlockUnratedItems) {
		var ret []ModelUnratedItem
		return ret
	}
	return o.BlockUnratedItems
}

// GetBlockUnratedItemsOk returns a tuple with the BlockUnratedItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserPolicy) GetBlockUnratedItemsOk() ([]ModelUnratedItem, bool) {
	if o == nil || IsNil(o.BlockUnratedItems) {
		return nil, false
	}
	return o.BlockUnratedItems, true
}

// HasBlockUnratedItems returns a boolean if a field has been set.
func (o *ModelUserPolicy) HasBlockUnratedItems() bool {
	if o != nil && !IsNil(o.BlockUnratedItems) {
		return true
	}

	return false
}

// SetBlockUnratedItems gets a reference to the given []ModelUnratedItem and assigns it to the BlockUnratedItems field.
func (o *ModelUserPolicy) SetBlockUnratedItems(v []ModelUnratedItem) {
	o.BlockUnratedItems = v
}

// GetEnableRemoteControlOfOtherUsers returns the EnableRemoteControlOfOtherUsers field value if set, zero value otherwise.
func (o *ModelUserPolicy) GetEnableRemoteControlOfOtherUsers() bool {
	if o == nil || IsNil(o.EnableRemoteControlOfOtherUsers) {
		var ret bool
		return ret
	}
	return *o.EnableRemoteControlOfOtherUsers
}

// GetEnableRemoteControlOfOtherUsersOk returns a tuple with the EnableRemoteControlOfOtherUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserPolicy) GetEnableRemoteControlOfOtherUsersOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableRemoteControlOfOtherUsers) {
		return nil, false
	}
	return o.EnableRemoteControlOfOtherUsers, true
}

// HasEnableRemoteControlOfOtherUsers returns a boolean if a field has been set.
func (o *ModelUserPolicy) HasEnableRemoteControlOfOtherUsers() bool {
	if o != nil && !IsNil(o.EnableRemoteControlOfOtherUsers) {
		return true
	}

	return false
}

// SetEnableRemoteControlOfOtherUsers gets a reference to the given bool and assigns it to the EnableRemoteControlOfOtherUsers field.
func (o *ModelUserPolicy) SetEnableRemoteControlOfOtherUsers(v bool) {
	o.EnableRemoteControlOfOtherUsers = &v
}

// GetEnableSharedDeviceControl returns the EnableSharedDeviceControl field value if set, zero value otherwise.
func (o *ModelUserPolicy) GetEnableSharedDeviceControl() bool {
	if o == nil || IsNil(o.EnableSharedDeviceControl) {
		var ret bool
		return ret
	}
	return *o.EnableSharedDeviceControl
}

// GetEnableSharedDeviceControlOk returns a tuple with the EnableSharedDeviceControl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserPolicy) GetEnableSharedDeviceControlOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableSharedDeviceControl) {
		return nil, false
	}
	return o.EnableSharedDeviceControl, true
}

// HasEnableSharedDeviceControl returns a boolean if a field has been set.
func (o *ModelUserPolicy) HasEnableSharedDeviceControl() bool {
	if o != nil && !IsNil(o.EnableSharedDeviceControl) {
		return true
	}

	return false
}

// SetEnableSharedDeviceControl gets a reference to the given bool and assigns it to the EnableSharedDeviceControl field.
func (o *ModelUserPolicy) SetEnableSharedDeviceControl(v bool) {
	o.EnableSharedDeviceControl = &v
}

// GetEnableRemoteAccess returns the EnableRemoteAccess field value if set, zero value otherwise.
func (o *ModelUserPolicy) GetEnableRemoteAccess() bool {
	if o == nil || IsNil(o.EnableRemoteAccess) {
		var ret bool
		return ret
	}
	return *o.EnableRemoteAccess
}

// GetEnableRemoteAccessOk returns a tuple with the EnableRemoteAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserPolicy) GetEnableRemoteAccessOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableRemoteAccess) {
		return nil, false
	}
	return o.EnableRemoteAccess, true
}

// HasEnableRemoteAccess returns a boolean if a field has been set.
func (o *ModelUserPolicy) HasEnableRemoteAccess() bool {
	if o != nil && !IsNil(o.EnableRemoteAccess) {
		return true
	}

	return false
}

// SetEnableRemoteAccess gets a reference to the given bool and assigns it to the EnableRemoteAccess field.
func (o *ModelUserPolicy) SetEnableRemoteAccess(v bool) {
	o.EnableRemoteAccess = &v
}

// GetEnableLiveTvManagement returns the EnableLiveTvManagement field value if set, zero value otherwise.
func (o *ModelUserPolicy) GetEnableLiveTvManagement() bool {
	if o == nil || IsNil(o.EnableLiveTvManagement) {
		var ret bool
		return ret
	}
	return *o.EnableLiveTvManagement
}

// GetEnableLiveTvManagementOk returns a tuple with the EnableLiveTvManagement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserPolicy) GetEnableLiveTvManagementOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableLiveTvManagement) {
		return nil, false
	}
	return o.EnableLiveTvManagement, true
}

// HasEnableLiveTvManagement returns a boolean if a field has been set.
func (o *ModelUserPolicy) HasEnableLiveTvManagement() bool {
	if o != nil && !IsNil(o.EnableLiveTvManagement) {
		return true
	}

	return false
}

// SetEnableLiveTvManagement gets a reference to the given bool and assigns it to the EnableLiveTvManagement field.
func (o *ModelUserPolicy) SetEnableLiveTvManagement(v bool) {
	o.EnableLiveTvManagement = &v
}

// GetEnableLiveTvAccess returns the EnableLiveTvAccess field value if set, zero value otherwise.
func (o *ModelUserPolicy) GetEnableLiveTvAccess() bool {
	if o == nil || IsNil(o.EnableLiveTvAccess) {
		var ret bool
		return ret
	}
	return *o.EnableLiveTvAccess
}

// GetEnableLiveTvAccessOk returns a tuple with the EnableLiveTvAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserPolicy) GetEnableLiveTvAccessOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableLiveTvAccess) {
		return nil, false
	}
	return o.EnableLiveTvAccess, true
}

// HasEnableLiveTvAccess returns a boolean if a field has been set.
func (o *ModelUserPolicy) HasEnableLiveTvAccess() bool {
	if o != nil && !IsNil(o.EnableLiveTvAccess) {
		return true
	}

	return false
}

// SetEnableLiveTvAccess gets a reference to the given bool and assigns it to the EnableLiveTvAccess field.
func (o *ModelUserPolicy) SetEnableLiveTvAccess(v bool) {
	o.EnableLiveTvAccess = &v
}

// GetEnableMediaPlayback returns the EnableMediaPlayback field value if set, zero value otherwise.
func (o *ModelUserPolicy) GetEnableMediaPlayback() bool {
	if o == nil || IsNil(o.EnableMediaPlayback) {
		var ret bool
		return ret
	}
	return *o.EnableMediaPlayback
}

// GetEnableMediaPlaybackOk returns a tuple with the EnableMediaPlayback field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserPolicy) GetEnableMediaPlaybackOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableMediaPlayback) {
		return nil, false
	}
	return o.EnableMediaPlayback, true
}

// HasEnableMediaPlayback returns a boolean if a field has been set.
func (o *ModelUserPolicy) HasEnableMediaPlayback() bool {
	if o != nil && !IsNil(o.EnableMediaPlayback) {
		return true
	}

	return false
}

// SetEnableMediaPlayback gets a reference to the given bool and assigns it to the EnableMediaPlayback field.
func (o *ModelUserPolicy) SetEnableMediaPlayback(v bool) {
	o.EnableMediaPlayback = &v
}

// GetEnableAudioPlaybackTranscoding returns the EnableAudioPlaybackTranscoding field value if set, zero value otherwise.
func (o *ModelUserPolicy) GetEnableAudioPlaybackTranscoding() bool {
	if o == nil || IsNil(o.EnableAudioPlaybackTranscoding) {
		var ret bool
		return ret
	}
	return *o.EnableAudioPlaybackTranscoding
}

// GetEnableAudioPlaybackTranscodingOk returns a tuple with the EnableAudioPlaybackTranscoding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserPolicy) GetEnableAudioPlaybackTranscodingOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableAudioPlaybackTranscoding) {
		return nil, false
	}
	return o.EnableAudioPlaybackTranscoding, true
}

// HasEnableAudioPlaybackTranscoding returns a boolean if a field has been set.
func (o *ModelUserPolicy) HasEnableAudioPlaybackTranscoding() bool {
	if o != nil && !IsNil(o.EnableAudioPlaybackTranscoding) {
		return true
	}

	return false
}

// SetEnableAudioPlaybackTranscoding gets a reference to the given bool and assigns it to the EnableAudioPlaybackTranscoding field.
func (o *ModelUserPolicy) SetEnableAudioPlaybackTranscoding(v bool) {
	o.EnableAudioPlaybackTranscoding = &v
}

// GetEnableVideoPlaybackTranscoding returns the EnableVideoPlaybackTranscoding field value if set, zero value otherwise.
func (o *ModelUserPolicy) GetEnableVideoPlaybackTranscoding() bool {
	if o == nil || IsNil(o.EnableVideoPlaybackTranscoding) {
		var ret bool
		return ret
	}
	return *o.EnableVideoPlaybackTranscoding
}

// GetEnableVideoPlaybackTranscodingOk returns a tuple with the EnableVideoPlaybackTranscoding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserPolicy) GetEnableVideoPlaybackTranscodingOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableVideoPlaybackTranscoding) {
		return nil, false
	}
	return o.EnableVideoPlaybackTranscoding, true
}

// HasEnableVideoPlaybackTranscoding returns a boolean if a field has been set.
func (o *ModelUserPolicy) HasEnableVideoPlaybackTranscoding() bool {
	if o != nil && !IsNil(o.EnableVideoPlaybackTranscoding) {
		return true
	}

	return false
}

// SetEnableVideoPlaybackTranscoding gets a reference to the given bool and assigns it to the EnableVideoPlaybackTranscoding field.
func (o *ModelUserPolicy) SetEnableVideoPlaybackTranscoding(v bool) {
	o.EnableVideoPlaybackTranscoding = &v
}

// GetEnablePlaybackRemuxing returns the EnablePlaybackRemuxing field value if set, zero value otherwise.
func (o *ModelUserPolicy) GetEnablePlaybackRemuxing() bool {
	if o == nil || IsNil(o.EnablePlaybackRemuxing) {
		var ret bool
		return ret
	}
	return *o.EnablePlaybackRemuxing
}

// GetEnablePlaybackRemuxingOk returns a tuple with the EnablePlaybackRemuxing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserPolicy) GetEnablePlaybackRemuxingOk() (*bool, bool) {
	if o == nil || IsNil(o.EnablePlaybackRemuxing) {
		return nil, false
	}
	return o.EnablePlaybackRemuxing, true
}

// HasEnablePlaybackRemuxing returns a boolean if a field has been set.
func (o *ModelUserPolicy) HasEnablePlaybackRemuxing() bool {
	if o != nil && !IsNil(o.EnablePlaybackRemuxing) {
		return true
	}

	return false
}

// SetEnablePlaybackRemuxing gets a reference to the given bool and assigns it to the EnablePlaybackRemuxing field.
func (o *ModelUserPolicy) SetEnablePlaybackRemuxing(v bool) {
	o.EnablePlaybackRemuxing = &v
}

// GetEnableContentDeletion returns the EnableContentDeletion field value if set, zero value otherwise.
func (o *ModelUserPolicy) GetEnableContentDeletion() bool {
	if o == nil || IsNil(o.EnableContentDeletion) {
		var ret bool
		return ret
	}
	return *o.EnableContentDeletion
}

// GetEnableContentDeletionOk returns a tuple with the EnableContentDeletion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserPolicy) GetEnableContentDeletionOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableContentDeletion) {
		return nil, false
	}
	return o.EnableContentDeletion, true
}

// HasEnableContentDeletion returns a boolean if a field has been set.
func (o *ModelUserPolicy) HasEnableContentDeletion() bool {
	if o != nil && !IsNil(o.EnableContentDeletion) {
		return true
	}

	return false
}

// SetEnableContentDeletion gets a reference to the given bool and assigns it to the EnableContentDeletion field.
func (o *ModelUserPolicy) SetEnableContentDeletion(v bool) {
	o.EnableContentDeletion = &v
}

// GetRestrictedFeatures returns the RestrictedFeatures field value if set, zero value otherwise.
func (o *ModelUserPolicy) GetRestrictedFeatures() []string {
	if o == nil || IsNil(o.RestrictedFeatures) {
		var ret []string
		return ret
	}
	return o.RestrictedFeatures
}

// GetRestrictedFeaturesOk returns a tuple with the RestrictedFeatures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserPolicy) GetRestrictedFeaturesOk() ([]string, bool) {
	if o == nil || IsNil(o.RestrictedFeatures) {
		return nil, false
	}
	return o.RestrictedFeatures, true
}

// HasRestrictedFeatures returns a boolean if a field has been set.
func (o *ModelUserPolicy) HasRestrictedFeatures() bool {
	if o != nil && !IsNil(o.RestrictedFeatures) {
		return true
	}

	return false
}

// SetRestrictedFeatures gets a reference to the given []string and assigns it to the RestrictedFeatures field.
func (o *ModelUserPolicy) SetRestrictedFeatures(v []string) {
	o.RestrictedFeatures = v
}

// GetEnableContentDeletionFromFolders returns the EnableContentDeletionFromFolders field value if set, zero value otherwise.
func (o *ModelUserPolicy) GetEnableContentDeletionFromFolders() []string {
	if o == nil || IsNil(o.EnableContentDeletionFromFolders) {
		var ret []string
		return ret
	}
	return o.EnableContentDeletionFromFolders
}

// GetEnableContentDeletionFromFoldersOk returns a tuple with the EnableContentDeletionFromFolders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserPolicy) GetEnableContentDeletionFromFoldersOk() ([]string, bool) {
	if o == nil || IsNil(o.EnableContentDeletionFromFolders) {
		return nil, false
	}
	return o.EnableContentDeletionFromFolders, true
}

// HasEnableContentDeletionFromFolders returns a boolean if a field has been set.
func (o *ModelUserPolicy) HasEnableContentDeletionFromFolders() bool {
	if o != nil && !IsNil(o.EnableContentDeletionFromFolders) {
		return true
	}

	return false
}

// SetEnableContentDeletionFromFolders gets a reference to the given []string and assigns it to the EnableContentDeletionFromFolders field.
func (o *ModelUserPolicy) SetEnableContentDeletionFromFolders(v []string) {
	o.EnableContentDeletionFromFolders = v
}

// GetEnableContentDownloading returns the EnableContentDownloading field value if set, zero value otherwise.
func (o *ModelUserPolicy) GetEnableContentDownloading() bool {
	if o == nil || IsNil(o.EnableContentDownloading) {
		var ret bool
		return ret
	}
	return *o.EnableContentDownloading
}

// GetEnableContentDownloadingOk returns a tuple with the EnableContentDownloading field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserPolicy) GetEnableContentDownloadingOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableContentDownloading) {
		return nil, false
	}
	return o.EnableContentDownloading, true
}

// HasEnableContentDownloading returns a boolean if a field has been set.
func (o *ModelUserPolicy) HasEnableContentDownloading() bool {
	if o != nil && !IsNil(o.EnableContentDownloading) {
		return true
	}

	return false
}

// SetEnableContentDownloading gets a reference to the given bool and assigns it to the EnableContentDownloading field.
func (o *ModelUserPolicy) SetEnableContentDownloading(v bool) {
	o.EnableContentDownloading = &v
}

// GetEnableSubtitleDownloading returns the EnableSubtitleDownloading field value if set, zero value otherwise.
func (o *ModelUserPolicy) GetEnableSubtitleDownloading() bool {
	if o == nil || IsNil(o.EnableSubtitleDownloading) {
		var ret bool
		return ret
	}
	return *o.EnableSubtitleDownloading
}

// GetEnableSubtitleDownloadingOk returns a tuple with the EnableSubtitleDownloading field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserPolicy) GetEnableSubtitleDownloadingOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableSubtitleDownloading) {
		return nil, false
	}
	return o.EnableSubtitleDownloading, true
}

// HasEnableSubtitleDownloading returns a boolean if a field has been set.
func (o *ModelUserPolicy) HasEnableSubtitleDownloading() bool {
	if o != nil && !IsNil(o.EnableSubtitleDownloading) {
		return true
	}

	return false
}

// SetEnableSubtitleDownloading gets a reference to the given bool and assigns it to the EnableSubtitleDownloading field.
func (o *ModelUserPolicy) SetEnableSubtitleDownloading(v bool) {
	o.EnableSubtitleDownloading = &v
}

// GetEnableSubtitleManagement returns the EnableSubtitleManagement field value if set, zero value otherwise.
func (o *ModelUserPolicy) GetEnableSubtitleManagement() bool {
	if o == nil || IsNil(o.EnableSubtitleManagement) {
		var ret bool
		return ret
	}
	return *o.EnableSubtitleManagement
}

// GetEnableSubtitleManagementOk returns a tuple with the EnableSubtitleManagement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserPolicy) GetEnableSubtitleManagementOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableSubtitleManagement) {
		return nil, false
	}
	return o.EnableSubtitleManagement, true
}

// HasEnableSubtitleManagement returns a boolean if a field has been set.
func (o *ModelUserPolicy) HasEnableSubtitleManagement() bool {
	if o != nil && !IsNil(o.EnableSubtitleManagement) {
		return true
	}

	return false
}

// SetEnableSubtitleManagement gets a reference to the given bool and assigns it to the EnableSubtitleManagement field.
func (o *ModelUserPolicy) SetEnableSubtitleManagement(v bool) {
	o.EnableSubtitleManagement = &v
}

// GetEnableSyncTranscoding returns the EnableSyncTranscoding field value if set, zero value otherwise.
func (o *ModelUserPolicy) GetEnableSyncTranscoding() bool {
	if o == nil || IsNil(o.EnableSyncTranscoding) {
		var ret bool
		return ret
	}
	return *o.EnableSyncTranscoding
}

// GetEnableSyncTranscodingOk returns a tuple with the EnableSyncTranscoding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserPolicy) GetEnableSyncTranscodingOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableSyncTranscoding) {
		return nil, false
	}
	return o.EnableSyncTranscoding, true
}

// HasEnableSyncTranscoding returns a boolean if a field has been set.
func (o *ModelUserPolicy) HasEnableSyncTranscoding() bool {
	if o != nil && !IsNil(o.EnableSyncTranscoding) {
		return true
	}

	return false
}

// SetEnableSyncTranscoding gets a reference to the given bool and assigns it to the EnableSyncTranscoding field.
func (o *ModelUserPolicy) SetEnableSyncTranscoding(v bool) {
	o.EnableSyncTranscoding = &v
}

// GetEnableMediaConversion returns the EnableMediaConversion field value if set, zero value otherwise.
func (o *ModelUserPolicy) GetEnableMediaConversion() bool {
	if o == nil || IsNil(o.EnableMediaConversion) {
		var ret bool
		return ret
	}
	return *o.EnableMediaConversion
}

// GetEnableMediaConversionOk returns a tuple with the EnableMediaConversion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserPolicy) GetEnableMediaConversionOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableMediaConversion) {
		return nil, false
	}
	return o.EnableMediaConversion, true
}

// HasEnableMediaConversion returns a boolean if a field has been set.
func (o *ModelUserPolicy) HasEnableMediaConversion() bool {
	if o != nil && !IsNil(o.EnableMediaConversion) {
		return true
	}

	return false
}

// SetEnableMediaConversion gets a reference to the given bool and assigns it to the EnableMediaConversion field.
func (o *ModelUserPolicy) SetEnableMediaConversion(v bool) {
	o.EnableMediaConversion = &v
}

// GetEnabledChannels returns the EnabledChannels field value if set, zero value otherwise.
func (o *ModelUserPolicy) GetEnabledChannels() []string {
	if o == nil || IsNil(o.EnabledChannels) {
		var ret []string
		return ret
	}
	return o.EnabledChannels
}

// GetEnabledChannelsOk returns a tuple with the EnabledChannels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserPolicy) GetEnabledChannelsOk() ([]string, bool) {
	if o == nil || IsNil(o.EnabledChannels) {
		return nil, false
	}
	return o.EnabledChannels, true
}

// HasEnabledChannels returns a boolean if a field has been set.
func (o *ModelUserPolicy) HasEnabledChannels() bool {
	if o != nil && !IsNil(o.EnabledChannels) {
		return true
	}

	return false
}

// SetEnabledChannels gets a reference to the given []string and assigns it to the EnabledChannels field.
func (o *ModelUserPolicy) SetEnabledChannels(v []string) {
	o.EnabledChannels = v
}

// GetEnableAllChannels returns the EnableAllChannels field value if set, zero value otherwise.
func (o *ModelUserPolicy) GetEnableAllChannels() bool {
	if o == nil || IsNil(o.EnableAllChannels) {
		var ret bool
		return ret
	}
	return *o.EnableAllChannels
}

// GetEnableAllChannelsOk returns a tuple with the EnableAllChannels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserPolicy) GetEnableAllChannelsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableAllChannels) {
		return nil, false
	}
	return o.EnableAllChannels, true
}

// HasEnableAllChannels returns a boolean if a field has been set.
func (o *ModelUserPolicy) HasEnableAllChannels() bool {
	if o != nil && !IsNil(o.EnableAllChannels) {
		return true
	}

	return false
}

// SetEnableAllChannels gets a reference to the given bool and assigns it to the EnableAllChannels field.
func (o *ModelUserPolicy) SetEnableAllChannels(v bool) {
	o.EnableAllChannels = &v
}

// GetEnabledFolders returns the EnabledFolders field value if set, zero value otherwise.
func (o *ModelUserPolicy) GetEnabledFolders() []string {
	if o == nil || IsNil(o.EnabledFolders) {
		var ret []string
		return ret
	}
	return o.EnabledFolders
}

// GetEnabledFoldersOk returns a tuple with the EnabledFolders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserPolicy) GetEnabledFoldersOk() ([]string, bool) {
	if o == nil || IsNil(o.EnabledFolders) {
		return nil, false
	}
	return o.EnabledFolders, true
}

// HasEnabledFolders returns a boolean if a field has been set.
func (o *ModelUserPolicy) HasEnabledFolders() bool {
	if o != nil && !IsNil(o.EnabledFolders) {
		return true
	}

	return false
}

// SetEnabledFolders gets a reference to the given []string and assigns it to the EnabledFolders field.
func (o *ModelUserPolicy) SetEnabledFolders(v []string) {
	o.EnabledFolders = v
}

// GetEnableAllFolders returns the EnableAllFolders field value if set, zero value otherwise.
func (o *ModelUserPolicy) GetEnableAllFolders() bool {
	if o == nil || IsNil(o.EnableAllFolders) {
		var ret bool
		return ret
	}
	return *o.EnableAllFolders
}

// GetEnableAllFoldersOk returns a tuple with the EnableAllFolders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserPolicy) GetEnableAllFoldersOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableAllFolders) {
		return nil, false
	}
	return o.EnableAllFolders, true
}

// HasEnableAllFolders returns a boolean if a field has been set.
func (o *ModelUserPolicy) HasEnableAllFolders() bool {
	if o != nil && !IsNil(o.EnableAllFolders) {
		return true
	}

	return false
}

// SetEnableAllFolders gets a reference to the given bool and assigns it to the EnableAllFolders field.
func (o *ModelUserPolicy) SetEnableAllFolders(v bool) {
	o.EnableAllFolders = &v
}

// GetInvalidLoginAttemptCount returns the InvalidLoginAttemptCount field value if set, zero value otherwise.
func (o *ModelUserPolicy) GetInvalidLoginAttemptCount() int32 {
	if o == nil || IsNil(o.InvalidLoginAttemptCount) {
		var ret int32
		return ret
	}
	return *o.InvalidLoginAttemptCount
}

// GetInvalidLoginAttemptCountOk returns a tuple with the InvalidLoginAttemptCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserPolicy) GetInvalidLoginAttemptCountOk() (*int32, bool) {
	if o == nil || IsNil(o.InvalidLoginAttemptCount) {
		return nil, false
	}
	return o.InvalidLoginAttemptCount, true
}

// HasInvalidLoginAttemptCount returns a boolean if a field has been set.
func (o *ModelUserPolicy) HasInvalidLoginAttemptCount() bool {
	if o != nil && !IsNil(o.InvalidLoginAttemptCount) {
		return true
	}

	return false
}

// SetInvalidLoginAttemptCount gets a reference to the given int32 and assigns it to the InvalidLoginAttemptCount field.
func (o *ModelUserPolicy) SetInvalidLoginAttemptCount(v int32) {
	o.InvalidLoginAttemptCount = &v
}

// GetEnablePublicSharing returns the EnablePublicSharing field value if set, zero value otherwise.
func (o *ModelUserPolicy) GetEnablePublicSharing() bool {
	if o == nil || IsNil(o.EnablePublicSharing) {
		var ret bool
		return ret
	}
	return *o.EnablePublicSharing
}

// GetEnablePublicSharingOk returns a tuple with the EnablePublicSharing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserPolicy) GetEnablePublicSharingOk() (*bool, bool) {
	if o == nil || IsNil(o.EnablePublicSharing) {
		return nil, false
	}
	return o.EnablePublicSharing, true
}

// HasEnablePublicSharing returns a boolean if a field has been set.
func (o *ModelUserPolicy) HasEnablePublicSharing() bool {
	if o != nil && !IsNil(o.EnablePublicSharing) {
		return true
	}

	return false
}

// SetEnablePublicSharing gets a reference to the given bool and assigns it to the EnablePublicSharing field.
func (o *ModelUserPolicy) SetEnablePublicSharing(v bool) {
	o.EnablePublicSharing = &v
}

// GetBlockedMediaFolders returns the BlockedMediaFolders field value if set, zero value otherwise.
func (o *ModelUserPolicy) GetBlockedMediaFolders() []string {
	if o == nil || IsNil(o.BlockedMediaFolders) {
		var ret []string
		return ret
	}
	return o.BlockedMediaFolders
}

// GetBlockedMediaFoldersOk returns a tuple with the BlockedMediaFolders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserPolicy) GetBlockedMediaFoldersOk() ([]string, bool) {
	if o == nil || IsNil(o.BlockedMediaFolders) {
		return nil, false
	}
	return o.BlockedMediaFolders, true
}

// HasBlockedMediaFolders returns a boolean if a field has been set.
func (o *ModelUserPolicy) HasBlockedMediaFolders() bool {
	if o != nil && !IsNil(o.BlockedMediaFolders) {
		return true
	}

	return false
}

// SetBlockedMediaFolders gets a reference to the given []string and assigns it to the BlockedMediaFolders field.
func (o *ModelUserPolicy) SetBlockedMediaFolders(v []string) {
	o.BlockedMediaFolders = v
}

// GetRemoteClientBitrateLimit returns the RemoteClientBitrateLimit field value if set, zero value otherwise.
func (o *ModelUserPolicy) GetRemoteClientBitrateLimit() int32 {
	if o == nil || IsNil(o.RemoteClientBitrateLimit) {
		var ret int32
		return ret
	}
	return *o.RemoteClientBitrateLimit
}

// GetRemoteClientBitrateLimitOk returns a tuple with the RemoteClientBitrateLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserPolicy) GetRemoteClientBitrateLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.RemoteClientBitrateLimit) {
		return nil, false
	}
	return o.RemoteClientBitrateLimit, true
}

// HasRemoteClientBitrateLimit returns a boolean if a field has been set.
func (o *ModelUserPolicy) HasRemoteClientBitrateLimit() bool {
	if o != nil && !IsNil(o.RemoteClientBitrateLimit) {
		return true
	}

	return false
}

// SetRemoteClientBitrateLimit gets a reference to the given int32 and assigns it to the RemoteClientBitrateLimit field.
func (o *ModelUserPolicy) SetRemoteClientBitrateLimit(v int32) {
	o.RemoteClientBitrateLimit = &v
}

// GetAuthenticationProviderId returns the AuthenticationProviderId field value if set, zero value otherwise.
func (o *ModelUserPolicy) GetAuthenticationProviderId() string {
	if o == nil || IsNil(o.AuthenticationProviderId) {
		var ret string
		return ret
	}
	return *o.AuthenticationProviderId
}

// GetAuthenticationProviderIdOk returns a tuple with the AuthenticationProviderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserPolicy) GetAuthenticationProviderIdOk() (*string, bool) {
	if o == nil || IsNil(o.AuthenticationProviderId) {
		return nil, false
	}
	return o.AuthenticationProviderId, true
}

// HasAuthenticationProviderId returns a boolean if a field has been set.
func (o *ModelUserPolicy) HasAuthenticationProviderId() bool {
	if o != nil && !IsNil(o.AuthenticationProviderId) {
		return true
	}

	return false
}

// SetAuthenticationProviderId gets a reference to the given string and assigns it to the AuthenticationProviderId field.
func (o *ModelUserPolicy) SetAuthenticationProviderId(v string) {
	o.AuthenticationProviderId = &v
}

// GetExcludedSubFolders returns the ExcludedSubFolders field value if set, zero value otherwise.
func (o *ModelUserPolicy) GetExcludedSubFolders() []string {
	if o == nil || IsNil(o.ExcludedSubFolders) {
		var ret []string
		return ret
	}
	return o.ExcludedSubFolders
}

// GetExcludedSubFoldersOk returns a tuple with the ExcludedSubFolders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserPolicy) GetExcludedSubFoldersOk() ([]string, bool) {
	if o == nil || IsNil(o.ExcludedSubFolders) {
		return nil, false
	}
	return o.ExcludedSubFolders, true
}

// HasExcludedSubFolders returns a boolean if a field has been set.
func (o *ModelUserPolicy) HasExcludedSubFolders() bool {
	if o != nil && !IsNil(o.ExcludedSubFolders) {
		return true
	}

	return false
}

// SetExcludedSubFolders gets a reference to the given []string and assigns it to the ExcludedSubFolders field.
func (o *ModelUserPolicy) SetExcludedSubFolders(v []string) {
	o.ExcludedSubFolders = v
}

// GetSimultaneousStreamLimit returns the SimultaneousStreamLimit field value if set, zero value otherwise.
func (o *ModelUserPolicy) GetSimultaneousStreamLimit() int32 {
	if o == nil || IsNil(o.SimultaneousStreamLimit) {
		var ret int32
		return ret
	}
	return *o.SimultaneousStreamLimit
}

// GetSimultaneousStreamLimitOk returns a tuple with the SimultaneousStreamLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserPolicy) GetSimultaneousStreamLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.SimultaneousStreamLimit) {
		return nil, false
	}
	return o.SimultaneousStreamLimit, true
}

// HasSimultaneousStreamLimit returns a boolean if a field has been set.
func (o *ModelUserPolicy) HasSimultaneousStreamLimit() bool {
	if o != nil && !IsNil(o.SimultaneousStreamLimit) {
		return true
	}

	return false
}

// SetSimultaneousStreamLimit gets a reference to the given int32 and assigns it to the SimultaneousStreamLimit field.
func (o *ModelUserPolicy) SetSimultaneousStreamLimit(v int32) {
	o.SimultaneousStreamLimit = &v
}

// GetEnabledDevices returns the EnabledDevices field value if set, zero value otherwise.
func (o *ModelUserPolicy) GetEnabledDevices() []string {
	if o == nil || IsNil(o.EnabledDevices) {
		var ret []string
		return ret
	}
	return o.EnabledDevices
}

// GetEnabledDevicesOk returns a tuple with the EnabledDevices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserPolicy) GetEnabledDevicesOk() ([]string, bool) {
	if o == nil || IsNil(o.EnabledDevices) {
		return nil, false
	}
	return o.EnabledDevices, true
}

// HasEnabledDevices returns a boolean if a field has been set.
func (o *ModelUserPolicy) HasEnabledDevices() bool {
	if o != nil && !IsNil(o.EnabledDevices) {
		return true
	}

	return false
}

// SetEnabledDevices gets a reference to the given []string and assigns it to the EnabledDevices field.
func (o *ModelUserPolicy) SetEnabledDevices(v []string) {
	o.EnabledDevices = v
}

// GetEnableAllDevices returns the EnableAllDevices field value if set, zero value otherwise.
func (o *ModelUserPolicy) GetEnableAllDevices() bool {
	if o == nil || IsNil(o.EnableAllDevices) {
		var ret bool
		return ret
	}
	return *o.EnableAllDevices
}

// GetEnableAllDevicesOk returns a tuple with the EnableAllDevices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserPolicy) GetEnableAllDevicesOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableAllDevices) {
		return nil, false
	}
	return o.EnableAllDevices, true
}

// HasEnableAllDevices returns a boolean if a field has been set.
func (o *ModelUserPolicy) HasEnableAllDevices() bool {
	if o != nil && !IsNil(o.EnableAllDevices) {
		return true
	}

	return false
}

// SetEnableAllDevices gets a reference to the given bool and assigns it to the EnableAllDevices field.
func (o *ModelUserPolicy) SetEnableAllDevices(v bool) {
	o.EnableAllDevices = &v
}

// GetAllowCameraUpload returns the AllowCameraUpload field value if set, zero value otherwise.
func (o *ModelUserPolicy) GetAllowCameraUpload() bool {
	if o == nil || IsNil(o.AllowCameraUpload) {
		var ret bool
		return ret
	}
	return *o.AllowCameraUpload
}

// GetAllowCameraUploadOk returns a tuple with the AllowCameraUpload field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserPolicy) GetAllowCameraUploadOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowCameraUpload) {
		return nil, false
	}
	return o.AllowCameraUpload, true
}

// HasAllowCameraUpload returns a boolean if a field has been set.
func (o *ModelUserPolicy) HasAllowCameraUpload() bool {
	if o != nil && !IsNil(o.AllowCameraUpload) {
		return true
	}

	return false
}

// SetAllowCameraUpload gets a reference to the given bool and assigns it to the AllowCameraUpload field.
func (o *ModelUserPolicy) SetAllowCameraUpload(v bool) {
	o.AllowCameraUpload = &v
}

func (o ModelUserPolicy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelUserPolicy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IsAdministrator) {
		toSerialize["IsAdministrator"] = o.IsAdministrator
	}
	if !IsNil(o.IsHidden) {
		toSerialize["IsHidden"] = o.IsHidden
	}
	if !IsNil(o.IsHiddenRemotely) {
		toSerialize["IsHiddenRemotely"] = o.IsHiddenRemotely
	}
	if !IsNil(o.IsHiddenFromUnusedDevices) {
		toSerialize["IsHiddenFromUnusedDevices"] = o.IsHiddenFromUnusedDevices
	}
	if !IsNil(o.IsDisabled) {
		toSerialize["IsDisabled"] = o.IsDisabled
	}
	if !IsNil(o.LockedOutDate) {
		toSerialize["LockedOutDate"] = o.LockedOutDate
	}
	if o.MaxParentalRating.IsSet() {
		toSerialize["MaxParentalRating"] = o.MaxParentalRating.Get()
	}
	if !IsNil(o.AllowTagOrRating) {
		toSerialize["AllowTagOrRating"] = o.AllowTagOrRating
	}
	if !IsNil(o.BlockedTags) {
		toSerialize["BlockedTags"] = o.BlockedTags
	}
	if !IsNil(o.IsTagBlockingModeInclusive) {
		toSerialize["IsTagBlockingModeInclusive"] = o.IsTagBlockingModeInclusive
	}
	if !IsNil(o.IncludeTags) {
		toSerialize["IncludeTags"] = o.IncludeTags
	}
	if !IsNil(o.EnableUserPreferenceAccess) {
		toSerialize["EnableUserPreferenceAccess"] = o.EnableUserPreferenceAccess
	}
	if !IsNil(o.AccessSchedules) {
		toSerialize["AccessSchedules"] = o.AccessSchedules
	}
	if !IsNil(o.BlockUnratedItems) {
		toSerialize["BlockUnratedItems"] = o.BlockUnratedItems
	}
	if !IsNil(o.EnableRemoteControlOfOtherUsers) {
		toSerialize["EnableRemoteControlOfOtherUsers"] = o.EnableRemoteControlOfOtherUsers
	}
	if !IsNil(o.EnableSharedDeviceControl) {
		toSerialize["EnableSharedDeviceControl"] = o.EnableSharedDeviceControl
	}
	if !IsNil(o.EnableRemoteAccess) {
		toSerialize["EnableRemoteAccess"] = o.EnableRemoteAccess
	}
	if !IsNil(o.EnableLiveTvManagement) {
		toSerialize["EnableLiveTvManagement"] = o.EnableLiveTvManagement
	}
	if !IsNil(o.EnableLiveTvAccess) {
		toSerialize["EnableLiveTvAccess"] = o.EnableLiveTvAccess
	}
	if !IsNil(o.EnableMediaPlayback) {
		toSerialize["EnableMediaPlayback"] = o.EnableMediaPlayback
	}
	if !IsNil(o.EnableAudioPlaybackTranscoding) {
		toSerialize["EnableAudioPlaybackTranscoding"] = o.EnableAudioPlaybackTranscoding
	}
	if !IsNil(o.EnableVideoPlaybackTranscoding) {
		toSerialize["EnableVideoPlaybackTranscoding"] = o.EnableVideoPlaybackTranscoding
	}
	if !IsNil(o.EnablePlaybackRemuxing) {
		toSerialize["EnablePlaybackRemuxing"] = o.EnablePlaybackRemuxing
	}
	if !IsNil(o.EnableContentDeletion) {
		toSerialize["EnableContentDeletion"] = o.EnableContentDeletion
	}
	if !IsNil(o.RestrictedFeatures) {
		toSerialize["RestrictedFeatures"] = o.RestrictedFeatures
	}
	if !IsNil(o.EnableContentDeletionFromFolders) {
		toSerialize["EnableContentDeletionFromFolders"] = o.EnableContentDeletionFromFolders
	}
	if !IsNil(o.EnableContentDownloading) {
		toSerialize["EnableContentDownloading"] = o.EnableContentDownloading
	}
	if !IsNil(o.EnableSubtitleDownloading) {
		toSerialize["EnableSubtitleDownloading"] = o.EnableSubtitleDownloading
	}
	if !IsNil(o.EnableSubtitleManagement) {
		toSerialize["EnableSubtitleManagement"] = o.EnableSubtitleManagement
	}
	if !IsNil(o.EnableSyncTranscoding) {
		toSerialize["EnableSyncTranscoding"] = o.EnableSyncTranscoding
	}
	if !IsNil(o.EnableMediaConversion) {
		toSerialize["EnableMediaConversion"] = o.EnableMediaConversion
	}
	if !IsNil(o.EnabledChannels) {
		toSerialize["EnabledChannels"] = o.EnabledChannels
	}
	if !IsNil(o.EnableAllChannels) {
		toSerialize["EnableAllChannels"] = o.EnableAllChannels
	}
	if !IsNil(o.EnabledFolders) {
		toSerialize["EnabledFolders"] = o.EnabledFolders
	}
	if !IsNil(o.EnableAllFolders) {
		toSerialize["EnableAllFolders"] = o.EnableAllFolders
	}
	if !IsNil(o.InvalidLoginAttemptCount) {
		toSerialize["InvalidLoginAttemptCount"] = o.InvalidLoginAttemptCount
	}
	if !IsNil(o.EnablePublicSharing) {
		toSerialize["EnablePublicSharing"] = o.EnablePublicSharing
	}
	if !IsNil(o.BlockedMediaFolders) {
		toSerialize["BlockedMediaFolders"] = o.BlockedMediaFolders
	}
	if !IsNil(o.RemoteClientBitrateLimit) {
		toSerialize["RemoteClientBitrateLimit"] = o.RemoteClientBitrateLimit
	}
	if !IsNil(o.AuthenticationProviderId) {
		toSerialize["AuthenticationProviderId"] = o.AuthenticationProviderId
	}
	if !IsNil(o.ExcludedSubFolders) {
		toSerialize["ExcludedSubFolders"] = o.ExcludedSubFolders
	}
	if !IsNil(o.SimultaneousStreamLimit) {
		toSerialize["SimultaneousStreamLimit"] = o.SimultaneousStreamLimit
	}
	if !IsNil(o.EnabledDevices) {
		toSerialize["EnabledDevices"] = o.EnabledDevices
	}
	if !IsNil(o.EnableAllDevices) {
		toSerialize["EnableAllDevices"] = o.EnableAllDevices
	}
	if !IsNil(o.AllowCameraUpload) {
		toSerialize["AllowCameraUpload"] = o.AllowCameraUpload
	}
	return toSerialize, nil
}

type NullableModelUserPolicy struct {
	value *ModelUserPolicy
	isSet bool
}

func (v NullableModelUserPolicy) Get() *ModelUserPolicy {
	return v.value
}

func (v *NullableModelUserPolicy) Set(val *ModelUserPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableModelUserPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableModelUserPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelUserPolicy(val *ModelUserPolicy) *NullableModelUserPolicy {
	return &NullableModelUserPolicy{value: val, isSet: true}
}

func (v NullableModelUserPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelUserPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


