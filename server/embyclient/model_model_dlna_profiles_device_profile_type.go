/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"encoding/json"
	"fmt"
)

// ModelDlnaProfilesDeviceProfileType the model 'ModelDlnaProfilesDeviceProfileType'
type ModelDlnaProfilesDeviceProfileType string

// List of Dlna.Profiles.DeviceProfileType
const (
	MODELDLNAPROFILESDEVICEPROFILETYPE_SYSTEM ModelDlnaProfilesDeviceProfileType = "System"
	MODELDLNAPROFILESDEVICEPROFILETYPE_USER ModelDlnaProfilesDeviceProfileType = "User"
)

// All allowed values of ModelDlnaProfilesDeviceProfileType enum
var AllowedModelDlnaProfilesDeviceProfileTypeEnumValues = []ModelDlnaProfilesDeviceProfileType{
	"System",
	"User",
}

func (v *ModelDlnaProfilesDeviceProfileType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ModelDlnaProfilesDeviceProfileType(value)
	for _, existing := range AllowedModelDlnaProfilesDeviceProfileTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ModelDlnaProfilesDeviceProfileType", value)
}

// NewModelDlnaProfilesDeviceProfileTypeFromValue returns a pointer to a valid ModelDlnaProfilesDeviceProfileType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewModelDlnaProfilesDeviceProfileTypeFromValue(v string) (*ModelDlnaProfilesDeviceProfileType, error) {
	ev := ModelDlnaProfilesDeviceProfileType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ModelDlnaProfilesDeviceProfileType: valid values are %v", v, AllowedModelDlnaProfilesDeviceProfileTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ModelDlnaProfilesDeviceProfileType) IsValid() bool {
	for _, existing := range AllowedModelDlnaProfilesDeviceProfileTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Dlna.Profiles.DeviceProfileType value
func (v ModelDlnaProfilesDeviceProfileType) Ptr() *ModelDlnaProfilesDeviceProfileType {
	return &v
}

type NullableModelDlnaProfilesDeviceProfileType struct {
	value *ModelDlnaProfilesDeviceProfileType
	isSet bool
}

func (v NullableModelDlnaProfilesDeviceProfileType) Get() *ModelDlnaProfilesDeviceProfileType {
	return v.value
}

func (v *NullableModelDlnaProfilesDeviceProfileType) Set(val *ModelDlnaProfilesDeviceProfileType) {
	v.value = val
	v.isSet = true
}

func (v NullableModelDlnaProfilesDeviceProfileType) IsSet() bool {
	return v.isSet
}

func (v *NullableModelDlnaProfilesDeviceProfileType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelDlnaProfilesDeviceProfileType(val *ModelDlnaProfilesDeviceProfileType) *NullableModelDlnaProfilesDeviceProfileType {
	return &NullableModelDlnaProfilesDeviceProfileType{value: val, isSet: true}
}

func (v NullableModelDlnaProfilesDeviceProfileType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelDlnaProfilesDeviceProfileType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

