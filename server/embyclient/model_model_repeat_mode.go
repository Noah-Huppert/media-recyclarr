/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"encoding/json"
	"fmt"
)

// ModelRepeatMode the model 'ModelRepeatMode'
type ModelRepeatMode string

// List of RepeatMode
const (
	MODELREPEATMODE_REPEAT_NONE ModelRepeatMode = "RepeatNone"
	MODELREPEATMODE_REPEAT_ALL ModelRepeatMode = "RepeatAll"
	MODELREPEATMODE_REPEAT_ONE ModelRepeatMode = "RepeatOne"
)

// All allowed values of ModelRepeatMode enum
var AllowedModelRepeatModeEnumValues = []ModelRepeatMode{
	"RepeatNone",
	"RepeatAll",
	"RepeatOne",
}

func (v *ModelRepeatMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ModelRepeatMode(value)
	for _, existing := range AllowedModelRepeatModeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ModelRepeatMode", value)
}

// NewModelRepeatModeFromValue returns a pointer to a valid ModelRepeatMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewModelRepeatModeFromValue(v string) (*ModelRepeatMode, error) {
	ev := ModelRepeatMode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ModelRepeatMode: valid values are %v", v, AllowedModelRepeatModeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ModelRepeatMode) IsValid() bool {
	for _, existing := range AllowedModelRepeatModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RepeatMode value
func (v ModelRepeatMode) Ptr() *ModelRepeatMode {
	return &v
}

type NullableModelRepeatMode struct {
	value *ModelRepeatMode
	isSet bool
}

func (v NullableModelRepeatMode) Get() *ModelRepeatMode {
	return v.value
}

func (v *NullableModelRepeatMode) Set(val *ModelRepeatMode) {
	v.value = val
	v.isSet = true
}

func (v NullableModelRepeatMode) IsSet() bool {
	return v.isSet
}

func (v *NullableModelRepeatMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelRepeatMode(val *ModelRepeatMode) *NullableModelRepeatMode {
	return &NullableModelRepeatMode{value: val, isSet: true}
}

func (v NullableModelRepeatMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelRepeatMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

