/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// GenericUIApiServiceAPIService GenericUIApiServiceAPI service
type GenericUIApiServiceAPIService service

type GenericUIApiServiceAPIGetUIViewRequest struct {
	ctx context.Context
	ApiService *GenericUIApiServiceAPIService
	pageId *string
	clientLocale *string
}

// Id of the page controller
func (r GenericUIApiServiceAPIGetUIViewRequest) PageId(pageId string) GenericUIApiServiceAPIGetUIViewRequest {
	r.pageId = &pageId
	return r
}

// Locale identifier of the client
func (r GenericUIApiServiceAPIGetUIViewRequest) ClientLocale(clientLocale string) GenericUIApiServiceAPIGetUIViewRequest {
	r.clientLocale = &clientLocale
	return r
}

func (r GenericUIApiServiceAPIGetUIViewRequest) Execute() (*ModelUIViewInfo, *http.Response, error) {
	return r.ApiService.GetUIViewExecute(r)
}

/*
GetUIView Gets UI view data

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return GenericUIApiServiceAPIGetUIViewRequest
*/
func (a *GenericUIApiServiceAPIService) GetUIView(ctx context.Context) GenericUIApiServiceAPIGetUIViewRequest {
	return GenericUIApiServiceAPIGetUIViewRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ModelUIViewInfo
func (a *GenericUIApiServiceAPIService) GetUIViewExecute(r GenericUIApiServiceAPIGetUIViewRequest) (*ModelUIViewInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ModelUIViewInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GenericUIApiServiceAPIService.GetUIView")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/UI/View"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.pageId == nil {
		return localVarReturnValue, nil, reportError("pageId is required and must be specified")
	}
	if r.clientLocale == nil {
		return localVarReturnValue, nil, reportError("clientLocale is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "PageId", r.pageId, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "ClientLocale", r.clientLocale, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type GenericUIApiServiceAPIPostUICommandRequest struct {
	ctx context.Context
	ApiService *GenericUIApiServiceAPIService
	modelRunUICommand *ModelRunUICommand
}

// RunUICommand
func (r GenericUIApiServiceAPIPostUICommandRequest) ModelRunUICommand(modelRunUICommand ModelRunUICommand) GenericUIApiServiceAPIPostUICommandRequest {
	r.modelRunUICommand = &modelRunUICommand
	return r
}

func (r GenericUIApiServiceAPIPostUICommandRequest) Execute() (*ModelUIViewInfo, *http.Response, error) {
	return r.ApiService.PostUICommandExecute(r)
}

/*
PostUICommand Execute a command in the context of tv setup

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return GenericUIApiServiceAPIPostUICommandRequest
*/
func (a *GenericUIApiServiceAPIService) PostUICommand(ctx context.Context) GenericUIApiServiceAPIPostUICommandRequest {
	return GenericUIApiServiceAPIPostUICommandRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ModelUIViewInfo
func (a *GenericUIApiServiceAPIService) PostUICommandExecute(r GenericUIApiServiceAPIPostUICommandRequest) (*ModelUIViewInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ModelUIViewInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GenericUIApiServiceAPIService.PostUICommand")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/UI/Command"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.modelRunUICommand == nil {
		return localVarReturnValue, nil, reportError("modelRunUICommand is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.modelRunUICommand
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
