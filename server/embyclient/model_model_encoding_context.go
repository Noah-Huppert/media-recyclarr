/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"encoding/json"
	"fmt"
)

// ModelEncodingContext the model 'ModelEncodingContext'
type ModelEncodingContext string

// List of EncodingContext
const (
	MODELENCODINGCONTEXT_STREAMING ModelEncodingContext = "Streaming"
	MODELENCODINGCONTEXT_STATIC ModelEncodingContext = "Static"
)

// All allowed values of ModelEncodingContext enum
var AllowedModelEncodingContextEnumValues = []ModelEncodingContext{
	"Streaming",
	"Static",
}

func (v *ModelEncodingContext) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ModelEncodingContext(value)
	for _, existing := range AllowedModelEncodingContextEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ModelEncodingContext", value)
}

// NewModelEncodingContextFromValue returns a pointer to a valid ModelEncodingContext
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewModelEncodingContextFromValue(v string) (*ModelEncodingContext, error) {
	ev := ModelEncodingContext(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ModelEncodingContext: valid values are %v", v, AllowedModelEncodingContextEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ModelEncodingContext) IsValid() bool {
	for _, existing := range AllowedModelEncodingContextEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EncodingContext value
func (v ModelEncodingContext) Ptr() *ModelEncodingContext {
	return &v
}

type NullableModelEncodingContext struct {
	value *ModelEncodingContext
	isSet bool
}

func (v NullableModelEncodingContext) Get() *ModelEncodingContext {
	return v.value
}

func (v *NullableModelEncodingContext) Set(val *ModelEncodingContext) {
	v.value = val
	v.isSet = true
}

func (v NullableModelEncodingContext) IsSet() bool {
	return v.isSet
}

func (v *NullableModelEncodingContext) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelEncodingContext(val *ModelEncodingContext) *NullableModelEncodingContext {
	return &NullableModelEncodingContext{value: val, isSet: true}
}

func (v NullableModelEncodingContext) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelEncodingContext) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

