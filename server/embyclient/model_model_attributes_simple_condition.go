/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"encoding/json"
	"fmt"
)

// ModelAttributesSimpleCondition the model 'ModelAttributesSimpleCondition'
type ModelAttributesSimpleCondition string

// List of Attributes.SimpleCondition
const (
	MODELATTRIBUTESSIMPLECONDITION_IS_TRUE ModelAttributesSimpleCondition = "IsTrue"
	MODELATTRIBUTESSIMPLECONDITION_IS_FALSE ModelAttributesSimpleCondition = "IsFalse"
	MODELATTRIBUTESSIMPLECONDITION_IS_NULL ModelAttributesSimpleCondition = "IsNull"
	MODELATTRIBUTESSIMPLECONDITION_IS_NOT_NULL_OR_EMPTY ModelAttributesSimpleCondition = "IsNotNullOrEmpty"
)

// All allowed values of ModelAttributesSimpleCondition enum
var AllowedModelAttributesSimpleConditionEnumValues = []ModelAttributesSimpleCondition{
	"IsTrue",
	"IsFalse",
	"IsNull",
	"IsNotNullOrEmpty",
}

func (v *ModelAttributesSimpleCondition) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ModelAttributesSimpleCondition(value)
	for _, existing := range AllowedModelAttributesSimpleConditionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ModelAttributesSimpleCondition", value)
}

// NewModelAttributesSimpleConditionFromValue returns a pointer to a valid ModelAttributesSimpleCondition
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewModelAttributesSimpleConditionFromValue(v string) (*ModelAttributesSimpleCondition, error) {
	ev := ModelAttributesSimpleCondition(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ModelAttributesSimpleCondition: valid values are %v", v, AllowedModelAttributesSimpleConditionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ModelAttributesSimpleCondition) IsValid() bool {
	for _, existing := range AllowedModelAttributesSimpleConditionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Attributes.SimpleCondition value
func (v ModelAttributesSimpleCondition) Ptr() *ModelAttributesSimpleCondition {
	return &v
}

type NullableModelAttributesSimpleCondition struct {
	value *ModelAttributesSimpleCondition
	isSet bool
}

func (v NullableModelAttributesSimpleCondition) Get() *ModelAttributesSimpleCondition {
	return v.value
}

func (v *NullableModelAttributesSimpleCondition) Set(val *ModelAttributesSimpleCondition) {
	v.value = val
	v.isSet = true
}

func (v NullableModelAttributesSimpleCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableModelAttributesSimpleCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelAttributesSimpleCondition(val *ModelAttributesSimpleCondition) *NullableModelAttributesSimpleCondition {
	return &NullableModelAttributesSimpleCondition{value: val, isSet: true}
}

func (v NullableModelAttributesSimpleCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelAttributesSimpleCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

