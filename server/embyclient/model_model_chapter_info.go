/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"encoding/json"
)

// checks if the ModelChapterInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelChapterInfo{}

// ModelChapterInfo struct for ModelChapterInfo
type ModelChapterInfo struct {
	StartPositionTicks *int64 `json:"StartPositionTicks,omitempty"`
	Name *string `json:"Name,omitempty"`
	ImageTag *string `json:"ImageTag,omitempty"`
	MarkerType *ModelMarkerType `json:"MarkerType,omitempty"`
	ChapterIndex *int32 `json:"ChapterIndex,omitempty"`
}

// NewModelChapterInfo instantiates a new ModelChapterInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelChapterInfo() *ModelChapterInfo {
	this := ModelChapterInfo{}
	return &this
}

// NewModelChapterInfoWithDefaults instantiates a new ModelChapterInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelChapterInfoWithDefaults() *ModelChapterInfo {
	this := ModelChapterInfo{}
	return &this
}

// GetStartPositionTicks returns the StartPositionTicks field value if set, zero value otherwise.
func (o *ModelChapterInfo) GetStartPositionTicks() int64 {
	if o == nil || IsNil(o.StartPositionTicks) {
		var ret int64
		return ret
	}
	return *o.StartPositionTicks
}

// GetStartPositionTicksOk returns a tuple with the StartPositionTicks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelChapterInfo) GetStartPositionTicksOk() (*int64, bool) {
	if o == nil || IsNil(o.StartPositionTicks) {
		return nil, false
	}
	return o.StartPositionTicks, true
}

// HasStartPositionTicks returns a boolean if a field has been set.
func (o *ModelChapterInfo) HasStartPositionTicks() bool {
	if o != nil && !IsNil(o.StartPositionTicks) {
		return true
	}

	return false
}

// SetStartPositionTicks gets a reference to the given int64 and assigns it to the StartPositionTicks field.
func (o *ModelChapterInfo) SetStartPositionTicks(v int64) {
	o.StartPositionTicks = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ModelChapterInfo) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelChapterInfo) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ModelChapterInfo) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ModelChapterInfo) SetName(v string) {
	o.Name = &v
}

// GetImageTag returns the ImageTag field value if set, zero value otherwise.
func (o *ModelChapterInfo) GetImageTag() string {
	if o == nil || IsNil(o.ImageTag) {
		var ret string
		return ret
	}
	return *o.ImageTag
}

// GetImageTagOk returns a tuple with the ImageTag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelChapterInfo) GetImageTagOk() (*string, bool) {
	if o == nil || IsNil(o.ImageTag) {
		return nil, false
	}
	return o.ImageTag, true
}

// HasImageTag returns a boolean if a field has been set.
func (o *ModelChapterInfo) HasImageTag() bool {
	if o != nil && !IsNil(o.ImageTag) {
		return true
	}

	return false
}

// SetImageTag gets a reference to the given string and assigns it to the ImageTag field.
func (o *ModelChapterInfo) SetImageTag(v string) {
	o.ImageTag = &v
}

// GetMarkerType returns the MarkerType field value if set, zero value otherwise.
func (o *ModelChapterInfo) GetMarkerType() ModelMarkerType {
	if o == nil || IsNil(o.MarkerType) {
		var ret ModelMarkerType
		return ret
	}
	return *o.MarkerType
}

// GetMarkerTypeOk returns a tuple with the MarkerType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelChapterInfo) GetMarkerTypeOk() (*ModelMarkerType, bool) {
	if o == nil || IsNil(o.MarkerType) {
		return nil, false
	}
	return o.MarkerType, true
}

// HasMarkerType returns a boolean if a field has been set.
func (o *ModelChapterInfo) HasMarkerType() bool {
	if o != nil && !IsNil(o.MarkerType) {
		return true
	}

	return false
}

// SetMarkerType gets a reference to the given ModelMarkerType and assigns it to the MarkerType field.
func (o *ModelChapterInfo) SetMarkerType(v ModelMarkerType) {
	o.MarkerType = &v
}

// GetChapterIndex returns the ChapterIndex field value if set, zero value otherwise.
func (o *ModelChapterInfo) GetChapterIndex() int32 {
	if o == nil || IsNil(o.ChapterIndex) {
		var ret int32
		return ret
	}
	return *o.ChapterIndex
}

// GetChapterIndexOk returns a tuple with the ChapterIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelChapterInfo) GetChapterIndexOk() (*int32, bool) {
	if o == nil || IsNil(o.ChapterIndex) {
		return nil, false
	}
	return o.ChapterIndex, true
}

// HasChapterIndex returns a boolean if a field has been set.
func (o *ModelChapterInfo) HasChapterIndex() bool {
	if o != nil && !IsNil(o.ChapterIndex) {
		return true
	}

	return false
}

// SetChapterIndex gets a reference to the given int32 and assigns it to the ChapterIndex field.
func (o *ModelChapterInfo) SetChapterIndex(v int32) {
	o.ChapterIndex = &v
}

func (o ModelChapterInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelChapterInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.StartPositionTicks) {
		toSerialize["StartPositionTicks"] = o.StartPositionTicks
	}
	if !IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if !IsNil(o.ImageTag) {
		toSerialize["ImageTag"] = o.ImageTag
	}
	if !IsNil(o.MarkerType) {
		toSerialize["MarkerType"] = o.MarkerType
	}
	if !IsNil(o.ChapterIndex) {
		toSerialize["ChapterIndex"] = o.ChapterIndex
	}
	return toSerialize, nil
}

type NullableModelChapterInfo struct {
	value *ModelChapterInfo
	isSet bool
}

func (v NullableModelChapterInfo) Get() *ModelChapterInfo {
	return v.value
}

func (v *NullableModelChapterInfo) Set(val *ModelChapterInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableModelChapterInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableModelChapterInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelChapterInfo(val *ModelChapterInfo) *NullableModelChapterInfo {
	return &NullableModelChapterInfo{value: val, isSet: true}
}

func (v NullableModelChapterInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelChapterInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


