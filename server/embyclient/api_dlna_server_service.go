/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"os"
)


// DlnaServerServiceAPIService DlnaServerServiceAPI service
type DlnaServerServiceAPIService service

type DlnaServerServiceAPIGetDlnaByUuidConnectionmanagerConnectionmanagerRequest struct {
	ctx context.Context
	ApiService *DlnaServerServiceAPIService
	uuId string
}

func (r DlnaServerServiceAPIGetDlnaByUuidConnectionmanagerConnectionmanagerRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetDlnaByUuidConnectionmanagerConnectionmanagerExecute(r)
}

/*
GetDlnaByUuidConnectionmanagerConnectionmanager Gets dlna connection manager xml

No authentication required

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param uuId Server UuId
 @return DlnaServerServiceAPIGetDlnaByUuidConnectionmanagerConnectionmanagerRequest
*/
func (a *DlnaServerServiceAPIService) GetDlnaByUuidConnectionmanagerConnectionmanager(ctx context.Context, uuId string) DlnaServerServiceAPIGetDlnaByUuidConnectionmanagerConnectionmanagerRequest {
	return DlnaServerServiceAPIGetDlnaByUuidConnectionmanagerConnectionmanagerRequest{
		ApiService: a,
		ctx: ctx,
		uuId: uuId,
	}
}

// Execute executes the request
func (a *DlnaServerServiceAPIService) GetDlnaByUuidConnectionmanagerConnectionmanagerExecute(r DlnaServerServiceAPIGetDlnaByUuidConnectionmanagerConnectionmanagerRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DlnaServerServiceAPIService.GetDlnaByUuidConnectionmanagerConnectionmanager")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Dlna/{UuId}/connectionmanager/connectionmanager"
	localVarPath = strings.Replace(localVarPath, "{"+"UuId"+"}", url.PathEscape(parameterValueToString(r.uuId, "uuId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type DlnaServerServiceAPIGetDlnaByUuidConnectionmanagerConnectionmanagerXmlRequest struct {
	ctx context.Context
	ApiService *DlnaServerServiceAPIService
	uuId string
}

func (r DlnaServerServiceAPIGetDlnaByUuidConnectionmanagerConnectionmanagerXmlRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetDlnaByUuidConnectionmanagerConnectionmanagerXmlExecute(r)
}

/*
GetDlnaByUuidConnectionmanagerConnectionmanagerXml Gets dlna connection manager xml

No authentication required

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param uuId Server UuId
 @return DlnaServerServiceAPIGetDlnaByUuidConnectionmanagerConnectionmanagerXmlRequest
*/
func (a *DlnaServerServiceAPIService) GetDlnaByUuidConnectionmanagerConnectionmanagerXml(ctx context.Context, uuId string) DlnaServerServiceAPIGetDlnaByUuidConnectionmanagerConnectionmanagerXmlRequest {
	return DlnaServerServiceAPIGetDlnaByUuidConnectionmanagerConnectionmanagerXmlRequest{
		ApiService: a,
		ctx: ctx,
		uuId: uuId,
	}
}

// Execute executes the request
func (a *DlnaServerServiceAPIService) GetDlnaByUuidConnectionmanagerConnectionmanagerXmlExecute(r DlnaServerServiceAPIGetDlnaByUuidConnectionmanagerConnectionmanagerXmlRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DlnaServerServiceAPIService.GetDlnaByUuidConnectionmanagerConnectionmanagerXml")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Dlna/{UuId}/connectionmanager/connectionmanager.xml"
	localVarPath = strings.Replace(localVarPath, "{"+"UuId"+"}", url.PathEscape(parameterValueToString(r.uuId, "uuId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type DlnaServerServiceAPIGetDlnaByUuidContentdirectoryContentdirectoryRequest struct {
	ctx context.Context
	ApiService *DlnaServerServiceAPIService
	uuId string
}

func (r DlnaServerServiceAPIGetDlnaByUuidContentdirectoryContentdirectoryRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetDlnaByUuidContentdirectoryContentdirectoryExecute(r)
}

/*
GetDlnaByUuidContentdirectoryContentdirectory Gets dlna content directory xml

No authentication required

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param uuId Server UuId
 @return DlnaServerServiceAPIGetDlnaByUuidContentdirectoryContentdirectoryRequest
*/
func (a *DlnaServerServiceAPIService) GetDlnaByUuidContentdirectoryContentdirectory(ctx context.Context, uuId string) DlnaServerServiceAPIGetDlnaByUuidContentdirectoryContentdirectoryRequest {
	return DlnaServerServiceAPIGetDlnaByUuidContentdirectoryContentdirectoryRequest{
		ApiService: a,
		ctx: ctx,
		uuId: uuId,
	}
}

// Execute executes the request
func (a *DlnaServerServiceAPIService) GetDlnaByUuidContentdirectoryContentdirectoryExecute(r DlnaServerServiceAPIGetDlnaByUuidContentdirectoryContentdirectoryRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DlnaServerServiceAPIService.GetDlnaByUuidContentdirectoryContentdirectory")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Dlna/{UuId}/contentdirectory/contentdirectory"
	localVarPath = strings.Replace(localVarPath, "{"+"UuId"+"}", url.PathEscape(parameterValueToString(r.uuId, "uuId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type DlnaServerServiceAPIGetDlnaByUuidContentdirectoryContentdirectoryXmlRequest struct {
	ctx context.Context
	ApiService *DlnaServerServiceAPIService
	uuId string
}

func (r DlnaServerServiceAPIGetDlnaByUuidContentdirectoryContentdirectoryXmlRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetDlnaByUuidContentdirectoryContentdirectoryXmlExecute(r)
}

/*
GetDlnaByUuidContentdirectoryContentdirectoryXml Gets dlna content directory xml

No authentication required

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param uuId Server UuId
 @return DlnaServerServiceAPIGetDlnaByUuidContentdirectoryContentdirectoryXmlRequest
*/
func (a *DlnaServerServiceAPIService) GetDlnaByUuidContentdirectoryContentdirectoryXml(ctx context.Context, uuId string) DlnaServerServiceAPIGetDlnaByUuidContentdirectoryContentdirectoryXmlRequest {
	return DlnaServerServiceAPIGetDlnaByUuidContentdirectoryContentdirectoryXmlRequest{
		ApiService: a,
		ctx: ctx,
		uuId: uuId,
	}
}

// Execute executes the request
func (a *DlnaServerServiceAPIService) GetDlnaByUuidContentdirectoryContentdirectoryXmlExecute(r DlnaServerServiceAPIGetDlnaByUuidContentdirectoryContentdirectoryXmlRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DlnaServerServiceAPIService.GetDlnaByUuidContentdirectoryContentdirectoryXml")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Dlna/{UuId}/contentdirectory/contentdirectory.xml"
	localVarPath = strings.Replace(localVarPath, "{"+"UuId"+"}", url.PathEscape(parameterValueToString(r.uuId, "uuId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type DlnaServerServiceAPIGetDlnaByUuidDescriptionRequest struct {
	ctx context.Context
	ApiService *DlnaServerServiceAPIService
	uuId string
}

func (r DlnaServerServiceAPIGetDlnaByUuidDescriptionRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetDlnaByUuidDescriptionExecute(r)
}

/*
GetDlnaByUuidDescription Gets dlna server info

No authentication required

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param uuId Server UuId
 @return DlnaServerServiceAPIGetDlnaByUuidDescriptionRequest
*/
func (a *DlnaServerServiceAPIService) GetDlnaByUuidDescription(ctx context.Context, uuId string) DlnaServerServiceAPIGetDlnaByUuidDescriptionRequest {
	return DlnaServerServiceAPIGetDlnaByUuidDescriptionRequest{
		ApiService: a,
		ctx: ctx,
		uuId: uuId,
	}
}

// Execute executes the request
func (a *DlnaServerServiceAPIService) GetDlnaByUuidDescriptionExecute(r DlnaServerServiceAPIGetDlnaByUuidDescriptionRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DlnaServerServiceAPIService.GetDlnaByUuidDescription")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Dlna/{UuId}/description"
	localVarPath = strings.Replace(localVarPath, "{"+"UuId"+"}", url.PathEscape(parameterValueToString(r.uuId, "uuId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type DlnaServerServiceAPIGetDlnaByUuidDescriptionXmlRequest struct {
	ctx context.Context
	ApiService *DlnaServerServiceAPIService
	uuId string
}

func (r DlnaServerServiceAPIGetDlnaByUuidDescriptionXmlRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetDlnaByUuidDescriptionXmlExecute(r)
}

/*
GetDlnaByUuidDescriptionXml Gets dlna server info

No authentication required

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param uuId Server UuId
 @return DlnaServerServiceAPIGetDlnaByUuidDescriptionXmlRequest
*/
func (a *DlnaServerServiceAPIService) GetDlnaByUuidDescriptionXml(ctx context.Context, uuId string) DlnaServerServiceAPIGetDlnaByUuidDescriptionXmlRequest {
	return DlnaServerServiceAPIGetDlnaByUuidDescriptionXmlRequest{
		ApiService: a,
		ctx: ctx,
		uuId: uuId,
	}
}

// Execute executes the request
func (a *DlnaServerServiceAPIService) GetDlnaByUuidDescriptionXmlExecute(r DlnaServerServiceAPIGetDlnaByUuidDescriptionXmlRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DlnaServerServiceAPIService.GetDlnaByUuidDescriptionXml")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Dlna/{UuId}/description.xml"
	localVarPath = strings.Replace(localVarPath, "{"+"UuId"+"}", url.PathEscape(parameterValueToString(r.uuId, "uuId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type DlnaServerServiceAPIGetDlnaByUuidIconsByFilenameRequest struct {
	ctx context.Context
	ApiService *DlnaServerServiceAPIService
	uuId string
	filename string
}

func (r DlnaServerServiceAPIGetDlnaByUuidIconsByFilenameRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetDlnaByUuidIconsByFilenameExecute(r)
}

/*
GetDlnaByUuidIconsByFilename Gets a server icon

No authentication required

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param uuId Server UuId
 @param filename The icon filename
 @return DlnaServerServiceAPIGetDlnaByUuidIconsByFilenameRequest
*/
func (a *DlnaServerServiceAPIService) GetDlnaByUuidIconsByFilename(ctx context.Context, uuId string, filename string) DlnaServerServiceAPIGetDlnaByUuidIconsByFilenameRequest {
	return DlnaServerServiceAPIGetDlnaByUuidIconsByFilenameRequest{
		ApiService: a,
		ctx: ctx,
		uuId: uuId,
		filename: filename,
	}
}

// Execute executes the request
func (a *DlnaServerServiceAPIService) GetDlnaByUuidIconsByFilenameExecute(r DlnaServerServiceAPIGetDlnaByUuidIconsByFilenameRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DlnaServerServiceAPIService.GetDlnaByUuidIconsByFilename")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Dlna/{UuId}/icons/{Filename}"
	localVarPath = strings.Replace(localVarPath, "{"+"UuId"+"}", url.PathEscape(parameterValueToString(r.uuId, "uuId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Filename"+"}", url.PathEscape(parameterValueToString(r.filename, "filename")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type DlnaServerServiceAPIGetDlnaIconsByFilenameRequest struct {
	ctx context.Context
	ApiService *DlnaServerServiceAPIService
	filename string
	uuId *string
}

// Server UuId
func (r DlnaServerServiceAPIGetDlnaIconsByFilenameRequest) UuId(uuId string) DlnaServerServiceAPIGetDlnaIconsByFilenameRequest {
	r.uuId = &uuId
	return r
}

func (r DlnaServerServiceAPIGetDlnaIconsByFilenameRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetDlnaIconsByFilenameExecute(r)
}

/*
GetDlnaIconsByFilename Gets a server icon

No authentication required

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param filename The icon filename
 @return DlnaServerServiceAPIGetDlnaIconsByFilenameRequest
*/
func (a *DlnaServerServiceAPIService) GetDlnaIconsByFilename(ctx context.Context, filename string) DlnaServerServiceAPIGetDlnaIconsByFilenameRequest {
	return DlnaServerServiceAPIGetDlnaIconsByFilenameRequest{
		ApiService: a,
		ctx: ctx,
		filename: filename,
	}
}

// Execute executes the request
func (a *DlnaServerServiceAPIService) GetDlnaIconsByFilenameExecute(r DlnaServerServiceAPIGetDlnaIconsByFilenameRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DlnaServerServiceAPIService.GetDlnaIconsByFilename")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Dlna/icons/{Filename}"
	localVarPath = strings.Replace(localVarPath, "{"+"Filename"+"}", url.PathEscape(parameterValueToString(r.filename, "filename")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.uuId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "UuId", r.uuId, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type DlnaServerServiceAPIHeadDlnaByUuidConnectionmanagerConnectionmanagerRequest struct {
	ctx context.Context
	ApiService *DlnaServerServiceAPIService
	uuId string
}

func (r DlnaServerServiceAPIHeadDlnaByUuidConnectionmanagerConnectionmanagerRequest) Execute() (*http.Response, error) {
	return r.ApiService.HeadDlnaByUuidConnectionmanagerConnectionmanagerExecute(r)
}

/*
HeadDlnaByUuidConnectionmanagerConnectionmanager Gets dlna connection manager xml

No authentication required

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param uuId Server UuId
 @return DlnaServerServiceAPIHeadDlnaByUuidConnectionmanagerConnectionmanagerRequest
*/
func (a *DlnaServerServiceAPIService) HeadDlnaByUuidConnectionmanagerConnectionmanager(ctx context.Context, uuId string) DlnaServerServiceAPIHeadDlnaByUuidConnectionmanagerConnectionmanagerRequest {
	return DlnaServerServiceAPIHeadDlnaByUuidConnectionmanagerConnectionmanagerRequest{
		ApiService: a,
		ctx: ctx,
		uuId: uuId,
	}
}

// Execute executes the request
func (a *DlnaServerServiceAPIService) HeadDlnaByUuidConnectionmanagerConnectionmanagerExecute(r DlnaServerServiceAPIHeadDlnaByUuidConnectionmanagerConnectionmanagerRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodHead
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DlnaServerServiceAPIService.HeadDlnaByUuidConnectionmanagerConnectionmanager")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Dlna/{UuId}/connectionmanager/connectionmanager"
	localVarPath = strings.Replace(localVarPath, "{"+"UuId"+"}", url.PathEscape(parameterValueToString(r.uuId, "uuId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type DlnaServerServiceAPIHeadDlnaByUuidConnectionmanagerConnectionmanagerXmlRequest struct {
	ctx context.Context
	ApiService *DlnaServerServiceAPIService
	uuId string
}

func (r DlnaServerServiceAPIHeadDlnaByUuidConnectionmanagerConnectionmanagerXmlRequest) Execute() (*http.Response, error) {
	return r.ApiService.HeadDlnaByUuidConnectionmanagerConnectionmanagerXmlExecute(r)
}

/*
HeadDlnaByUuidConnectionmanagerConnectionmanagerXml Gets dlna connection manager xml

No authentication required

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param uuId Server UuId
 @return DlnaServerServiceAPIHeadDlnaByUuidConnectionmanagerConnectionmanagerXmlRequest
*/
func (a *DlnaServerServiceAPIService) HeadDlnaByUuidConnectionmanagerConnectionmanagerXml(ctx context.Context, uuId string) DlnaServerServiceAPIHeadDlnaByUuidConnectionmanagerConnectionmanagerXmlRequest {
	return DlnaServerServiceAPIHeadDlnaByUuidConnectionmanagerConnectionmanagerXmlRequest{
		ApiService: a,
		ctx: ctx,
		uuId: uuId,
	}
}

// Execute executes the request
func (a *DlnaServerServiceAPIService) HeadDlnaByUuidConnectionmanagerConnectionmanagerXmlExecute(r DlnaServerServiceAPIHeadDlnaByUuidConnectionmanagerConnectionmanagerXmlRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodHead
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DlnaServerServiceAPIService.HeadDlnaByUuidConnectionmanagerConnectionmanagerXml")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Dlna/{UuId}/connectionmanager/connectionmanager.xml"
	localVarPath = strings.Replace(localVarPath, "{"+"UuId"+"}", url.PathEscape(parameterValueToString(r.uuId, "uuId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type DlnaServerServiceAPIHeadDlnaByUuidContentdirectoryContentdirectoryRequest struct {
	ctx context.Context
	ApiService *DlnaServerServiceAPIService
	uuId string
}

func (r DlnaServerServiceAPIHeadDlnaByUuidContentdirectoryContentdirectoryRequest) Execute() (*http.Response, error) {
	return r.ApiService.HeadDlnaByUuidContentdirectoryContentdirectoryExecute(r)
}

/*
HeadDlnaByUuidContentdirectoryContentdirectory Gets dlna content directory xml

No authentication required

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param uuId Server UuId
 @return DlnaServerServiceAPIHeadDlnaByUuidContentdirectoryContentdirectoryRequest
*/
func (a *DlnaServerServiceAPIService) HeadDlnaByUuidContentdirectoryContentdirectory(ctx context.Context, uuId string) DlnaServerServiceAPIHeadDlnaByUuidContentdirectoryContentdirectoryRequest {
	return DlnaServerServiceAPIHeadDlnaByUuidContentdirectoryContentdirectoryRequest{
		ApiService: a,
		ctx: ctx,
		uuId: uuId,
	}
}

// Execute executes the request
func (a *DlnaServerServiceAPIService) HeadDlnaByUuidContentdirectoryContentdirectoryExecute(r DlnaServerServiceAPIHeadDlnaByUuidContentdirectoryContentdirectoryRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodHead
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DlnaServerServiceAPIService.HeadDlnaByUuidContentdirectoryContentdirectory")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Dlna/{UuId}/contentdirectory/contentdirectory"
	localVarPath = strings.Replace(localVarPath, "{"+"UuId"+"}", url.PathEscape(parameterValueToString(r.uuId, "uuId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type DlnaServerServiceAPIHeadDlnaByUuidContentdirectoryContentdirectoryXmlRequest struct {
	ctx context.Context
	ApiService *DlnaServerServiceAPIService
	uuId string
}

func (r DlnaServerServiceAPIHeadDlnaByUuidContentdirectoryContentdirectoryXmlRequest) Execute() (*http.Response, error) {
	return r.ApiService.HeadDlnaByUuidContentdirectoryContentdirectoryXmlExecute(r)
}

/*
HeadDlnaByUuidContentdirectoryContentdirectoryXml Gets dlna content directory xml

No authentication required

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param uuId Server UuId
 @return DlnaServerServiceAPIHeadDlnaByUuidContentdirectoryContentdirectoryXmlRequest
*/
func (a *DlnaServerServiceAPIService) HeadDlnaByUuidContentdirectoryContentdirectoryXml(ctx context.Context, uuId string) DlnaServerServiceAPIHeadDlnaByUuidContentdirectoryContentdirectoryXmlRequest {
	return DlnaServerServiceAPIHeadDlnaByUuidContentdirectoryContentdirectoryXmlRequest{
		ApiService: a,
		ctx: ctx,
		uuId: uuId,
	}
}

// Execute executes the request
func (a *DlnaServerServiceAPIService) HeadDlnaByUuidContentdirectoryContentdirectoryXmlExecute(r DlnaServerServiceAPIHeadDlnaByUuidContentdirectoryContentdirectoryXmlRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodHead
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DlnaServerServiceAPIService.HeadDlnaByUuidContentdirectoryContentdirectoryXml")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Dlna/{UuId}/contentdirectory/contentdirectory.xml"
	localVarPath = strings.Replace(localVarPath, "{"+"UuId"+"}", url.PathEscape(parameterValueToString(r.uuId, "uuId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type DlnaServerServiceAPIHeadDlnaByUuidDescriptionRequest struct {
	ctx context.Context
	ApiService *DlnaServerServiceAPIService
	uuId string
}

func (r DlnaServerServiceAPIHeadDlnaByUuidDescriptionRequest) Execute() (*http.Response, error) {
	return r.ApiService.HeadDlnaByUuidDescriptionExecute(r)
}

/*
HeadDlnaByUuidDescription Gets dlna server info

No authentication required

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param uuId Server UuId
 @return DlnaServerServiceAPIHeadDlnaByUuidDescriptionRequest
*/
func (a *DlnaServerServiceAPIService) HeadDlnaByUuidDescription(ctx context.Context, uuId string) DlnaServerServiceAPIHeadDlnaByUuidDescriptionRequest {
	return DlnaServerServiceAPIHeadDlnaByUuidDescriptionRequest{
		ApiService: a,
		ctx: ctx,
		uuId: uuId,
	}
}

// Execute executes the request
func (a *DlnaServerServiceAPIService) HeadDlnaByUuidDescriptionExecute(r DlnaServerServiceAPIHeadDlnaByUuidDescriptionRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodHead
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DlnaServerServiceAPIService.HeadDlnaByUuidDescription")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Dlna/{UuId}/description"
	localVarPath = strings.Replace(localVarPath, "{"+"UuId"+"}", url.PathEscape(parameterValueToString(r.uuId, "uuId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type DlnaServerServiceAPIHeadDlnaByUuidDescriptionXmlRequest struct {
	ctx context.Context
	ApiService *DlnaServerServiceAPIService
	uuId string
}

func (r DlnaServerServiceAPIHeadDlnaByUuidDescriptionXmlRequest) Execute() (*http.Response, error) {
	return r.ApiService.HeadDlnaByUuidDescriptionXmlExecute(r)
}

/*
HeadDlnaByUuidDescriptionXml Gets dlna server info

No authentication required

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param uuId Server UuId
 @return DlnaServerServiceAPIHeadDlnaByUuidDescriptionXmlRequest
*/
func (a *DlnaServerServiceAPIService) HeadDlnaByUuidDescriptionXml(ctx context.Context, uuId string) DlnaServerServiceAPIHeadDlnaByUuidDescriptionXmlRequest {
	return DlnaServerServiceAPIHeadDlnaByUuidDescriptionXmlRequest{
		ApiService: a,
		ctx: ctx,
		uuId: uuId,
	}
}

// Execute executes the request
func (a *DlnaServerServiceAPIService) HeadDlnaByUuidDescriptionXmlExecute(r DlnaServerServiceAPIHeadDlnaByUuidDescriptionXmlRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodHead
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DlnaServerServiceAPIService.HeadDlnaByUuidDescriptionXml")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Dlna/{UuId}/description.xml"
	localVarPath = strings.Replace(localVarPath, "{"+"UuId"+"}", url.PathEscape(parameterValueToString(r.uuId, "uuId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type DlnaServerServiceAPIPostDlnaByUuidConnectionmanagerControlRequest struct {
	ctx context.Context
	ApiService *DlnaServerServiceAPIService
	uuId string
	body *os.File
}

// Binary stream
func (r DlnaServerServiceAPIPostDlnaByUuidConnectionmanagerControlRequest) Body(body *os.File) DlnaServerServiceAPIPostDlnaByUuidConnectionmanagerControlRequest {
	r.body = body
	return r
}

func (r DlnaServerServiceAPIPostDlnaByUuidConnectionmanagerControlRequest) Execute() (*http.Response, error) {
	return r.ApiService.PostDlnaByUuidConnectionmanagerControlExecute(r)
}

/*
PostDlnaByUuidConnectionmanagerControl Processes a control request

No authentication required

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param uuId Server UuId
 @return DlnaServerServiceAPIPostDlnaByUuidConnectionmanagerControlRequest
*/
func (a *DlnaServerServiceAPIService) PostDlnaByUuidConnectionmanagerControl(ctx context.Context, uuId string) DlnaServerServiceAPIPostDlnaByUuidConnectionmanagerControlRequest {
	return DlnaServerServiceAPIPostDlnaByUuidConnectionmanagerControlRequest{
		ApiService: a,
		ctx: ctx,
		uuId: uuId,
	}
}

// Execute executes the request
func (a *DlnaServerServiceAPIService) PostDlnaByUuidConnectionmanagerControlExecute(r DlnaServerServiceAPIPostDlnaByUuidConnectionmanagerControlRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DlnaServerServiceAPIService.PostDlnaByUuidConnectionmanagerControl")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Dlna/{UuId}/connectionmanager/control"
	localVarPath = strings.Replace(localVarPath, "{"+"UuId"+"}", url.PathEscape(parameterValueToString(r.uuId, "uuId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/octet-stream"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type DlnaServerServiceAPIPostDlnaByUuidContentdirectoryControlRequest struct {
	ctx context.Context
	ApiService *DlnaServerServiceAPIService
	uuId string
	body *os.File
}

// Binary stream
func (r DlnaServerServiceAPIPostDlnaByUuidContentdirectoryControlRequest) Body(body *os.File) DlnaServerServiceAPIPostDlnaByUuidContentdirectoryControlRequest {
	r.body = body
	return r
}

func (r DlnaServerServiceAPIPostDlnaByUuidContentdirectoryControlRequest) Execute() (*http.Response, error) {
	return r.ApiService.PostDlnaByUuidContentdirectoryControlExecute(r)
}

/*
PostDlnaByUuidContentdirectoryControl Processes a control request

No authentication required

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param uuId Server UuId
 @return DlnaServerServiceAPIPostDlnaByUuidContentdirectoryControlRequest
*/
func (a *DlnaServerServiceAPIService) PostDlnaByUuidContentdirectoryControl(ctx context.Context, uuId string) DlnaServerServiceAPIPostDlnaByUuidContentdirectoryControlRequest {
	return DlnaServerServiceAPIPostDlnaByUuidContentdirectoryControlRequest{
		ApiService: a,
		ctx: ctx,
		uuId: uuId,
	}
}

// Execute executes the request
func (a *DlnaServerServiceAPIService) PostDlnaByUuidContentdirectoryControlExecute(r DlnaServerServiceAPIPostDlnaByUuidContentdirectoryControlRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DlnaServerServiceAPIService.PostDlnaByUuidContentdirectoryControl")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Dlna/{UuId}/contentdirectory/control"
	localVarPath = strings.Replace(localVarPath, "{"+"UuId"+"}", url.PathEscape(parameterValueToString(r.uuId, "uuId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/octet-stream"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
