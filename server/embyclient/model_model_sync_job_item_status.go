/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"encoding/json"
	"fmt"
)

// ModelSyncJobItemStatus the model 'ModelSyncJobItemStatus'
type ModelSyncJobItemStatus string

// List of SyncJobItemStatus
const (
	MODELSYNCJOBITEMSTATUS_QUEUED ModelSyncJobItemStatus = "Queued"
	MODELSYNCJOBITEMSTATUS_CONVERTING ModelSyncJobItemStatus = "Converting"
	MODELSYNCJOBITEMSTATUS_READY_TO_TRANSFER ModelSyncJobItemStatus = "ReadyToTransfer"
	MODELSYNCJOBITEMSTATUS_TRANSFERRING ModelSyncJobItemStatus = "Transferring"
	MODELSYNCJOBITEMSTATUS_SYNCED ModelSyncJobItemStatus = "Synced"
	MODELSYNCJOBITEMSTATUS_FAILED ModelSyncJobItemStatus = "Failed"
)

// All allowed values of ModelSyncJobItemStatus enum
var AllowedModelSyncJobItemStatusEnumValues = []ModelSyncJobItemStatus{
	"Queued",
	"Converting",
	"ReadyToTransfer",
	"Transferring",
	"Synced",
	"Failed",
}

func (v *ModelSyncJobItemStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ModelSyncJobItemStatus(value)
	for _, existing := range AllowedModelSyncJobItemStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ModelSyncJobItemStatus", value)
}

// NewModelSyncJobItemStatusFromValue returns a pointer to a valid ModelSyncJobItemStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewModelSyncJobItemStatusFromValue(v string) (*ModelSyncJobItemStatus, error) {
	ev := ModelSyncJobItemStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ModelSyncJobItemStatus: valid values are %v", v, AllowedModelSyncJobItemStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ModelSyncJobItemStatus) IsValid() bool {
	for _, existing := range AllowedModelSyncJobItemStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SyncJobItemStatus value
func (v ModelSyncJobItemStatus) Ptr() *ModelSyncJobItemStatus {
	return &v
}

type NullableModelSyncJobItemStatus struct {
	value *ModelSyncJobItemStatus
	isSet bool
}

func (v NullableModelSyncJobItemStatus) Get() *ModelSyncJobItemStatus {
	return v.value
}

func (v *NullableModelSyncJobItemStatus) Set(val *ModelSyncJobItemStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableModelSyncJobItemStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableModelSyncJobItemStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelSyncJobItemStatus(val *ModelSyncJobItemStatus) *NullableModelSyncJobItemStatus {
	return &NullableModelSyncJobItemStatus{value: val, isSet: true}
}

func (v NullableModelSyncJobItemStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelSyncJobItemStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

