/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// SubtitleServiceAPIService SubtitleServiceAPI service
type SubtitleServiceAPIService service

type SubtitleServiceAPIDeleteItemsByIdSubtitlesByIndexRequest struct {
	ctx context.Context
	ApiService *SubtitleServiceAPIService
	id string
	mediaSourceId *string
	index int32
}

// MediaSourceId
func (r SubtitleServiceAPIDeleteItemsByIdSubtitlesByIndexRequest) MediaSourceId(mediaSourceId string) SubtitleServiceAPIDeleteItemsByIdSubtitlesByIndexRequest {
	r.mediaSourceId = &mediaSourceId
	return r
}

func (r SubtitleServiceAPIDeleteItemsByIdSubtitlesByIndexRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteItemsByIdSubtitlesByIndexExecute(r)
}

/*
DeleteItemsByIdSubtitlesByIndex Deletes an external subtitle file

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Item Id
 @param index The subtitle stream index
 @return SubtitleServiceAPIDeleteItemsByIdSubtitlesByIndexRequest
*/
func (a *SubtitleServiceAPIService) DeleteItemsByIdSubtitlesByIndex(ctx context.Context, id string, index int32) SubtitleServiceAPIDeleteItemsByIdSubtitlesByIndexRequest {
	return SubtitleServiceAPIDeleteItemsByIdSubtitlesByIndexRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		index: index,
	}
}

// Execute executes the request
func (a *SubtitleServiceAPIService) DeleteItemsByIdSubtitlesByIndexExecute(r SubtitleServiceAPIDeleteItemsByIdSubtitlesByIndexRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubtitleServiceAPIService.DeleteItemsByIdSubtitlesByIndex")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Items/{Id}/Subtitles/{Index}"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Index"+"}", url.PathEscape(parameterValueToString(r.index, "index")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.mediaSourceId == nil {
		return nil, reportError("mediaSourceId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "MediaSourceId", r.mediaSourceId, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type SubtitleServiceAPIDeleteVideosByIdSubtitlesByIndexRequest struct {
	ctx context.Context
	ApiService *SubtitleServiceAPIService
	id string
	mediaSourceId *string
	index int32
}

// MediaSourceId
func (r SubtitleServiceAPIDeleteVideosByIdSubtitlesByIndexRequest) MediaSourceId(mediaSourceId string) SubtitleServiceAPIDeleteVideosByIdSubtitlesByIndexRequest {
	r.mediaSourceId = &mediaSourceId
	return r
}

func (r SubtitleServiceAPIDeleteVideosByIdSubtitlesByIndexRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteVideosByIdSubtitlesByIndexExecute(r)
}

/*
DeleteVideosByIdSubtitlesByIndex Deletes an external subtitle file

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Item Id
 @param index The subtitle stream index
 @return SubtitleServiceAPIDeleteVideosByIdSubtitlesByIndexRequest
*/
func (a *SubtitleServiceAPIService) DeleteVideosByIdSubtitlesByIndex(ctx context.Context, id string, index int32) SubtitleServiceAPIDeleteVideosByIdSubtitlesByIndexRequest {
	return SubtitleServiceAPIDeleteVideosByIdSubtitlesByIndexRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		index: index,
	}
}

// Execute executes the request
func (a *SubtitleServiceAPIService) DeleteVideosByIdSubtitlesByIndexExecute(r SubtitleServiceAPIDeleteVideosByIdSubtitlesByIndexRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubtitleServiceAPIService.DeleteVideosByIdSubtitlesByIndex")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Videos/{Id}/Subtitles/{Index}"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Index"+"}", url.PathEscape(parameterValueToString(r.index, "index")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.mediaSourceId == nil {
		return nil, reportError("mediaSourceId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "MediaSourceId", r.mediaSourceId, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type SubtitleServiceAPIGetItemsByIdByMediasourceidSubtitlesByIndexByStartpositionticksStreamByFormatRequest struct {
	ctx context.Context
	ApiService *SubtitleServiceAPIService
	id string
	mediaSourceId string
	index int32
	format string
	startPositionTicks int64
	endPositionTicks *int64
	copyTimestamps *bool
}

// EndPositionTicks
func (r SubtitleServiceAPIGetItemsByIdByMediasourceidSubtitlesByIndexByStartpositionticksStreamByFormatRequest) EndPositionTicks(endPositionTicks int64) SubtitleServiceAPIGetItemsByIdByMediasourceidSubtitlesByIndexByStartpositionticksStreamByFormatRequest {
	r.endPositionTicks = &endPositionTicks
	return r
}

// CopyTimestamps
func (r SubtitleServiceAPIGetItemsByIdByMediasourceidSubtitlesByIndexByStartpositionticksStreamByFormatRequest) CopyTimestamps(copyTimestamps bool) SubtitleServiceAPIGetItemsByIdByMediasourceidSubtitlesByIndexByStartpositionticksStreamByFormatRequest {
	r.copyTimestamps = &copyTimestamps
	return r
}

func (r SubtitleServiceAPIGetItemsByIdByMediasourceidSubtitlesByIndexByStartpositionticksStreamByFormatRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetItemsByIdByMediasourceidSubtitlesByIndexByStartpositionticksStreamByFormatExecute(r)
}

/*
GetItemsByIdByMediasourceidSubtitlesByIndexByStartpositionticksStreamByFormat Gets subtitles in a specified format.

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Item Id
 @param mediaSourceId MediaSourceId
 @param index The subtitle stream index
 @param format Format
 @param startPositionTicks StartPositionTicks
 @return SubtitleServiceAPIGetItemsByIdByMediasourceidSubtitlesByIndexByStartpositionticksStreamByFormatRequest
*/
func (a *SubtitleServiceAPIService) GetItemsByIdByMediasourceidSubtitlesByIndexByStartpositionticksStreamByFormat(ctx context.Context, id string, mediaSourceId string, index int32, format string, startPositionTicks int64) SubtitleServiceAPIGetItemsByIdByMediasourceidSubtitlesByIndexByStartpositionticksStreamByFormatRequest {
	return SubtitleServiceAPIGetItemsByIdByMediasourceidSubtitlesByIndexByStartpositionticksStreamByFormatRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		mediaSourceId: mediaSourceId,
		index: index,
		format: format,
		startPositionTicks: startPositionTicks,
	}
}

// Execute executes the request
func (a *SubtitleServiceAPIService) GetItemsByIdByMediasourceidSubtitlesByIndexByStartpositionticksStreamByFormatExecute(r SubtitleServiceAPIGetItemsByIdByMediasourceidSubtitlesByIndexByStartpositionticksStreamByFormatRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubtitleServiceAPIService.GetItemsByIdByMediasourceidSubtitlesByIndexByStartpositionticksStreamByFormat")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Items/{Id}/{MediaSourceId}/Subtitles/{Index}/{StartPositionTicks}/Stream.{Format}"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"MediaSourceId"+"}", url.PathEscape(parameterValueToString(r.mediaSourceId, "mediaSourceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Index"+"}", url.PathEscape(parameterValueToString(r.index, "index")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Format"+"}", url.PathEscape(parameterValueToString(r.format, "format")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"StartPositionTicks"+"}", url.PathEscape(parameterValueToString(r.startPositionTicks, "startPositionTicks")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.endPositionTicks != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EndPositionTicks", r.endPositionTicks, "")
	}
	if r.copyTimestamps != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "CopyTimestamps", r.copyTimestamps, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type SubtitleServiceAPIGetItemsByIdByMediasourceidSubtitlesByIndexStreamByFormatRequest struct {
	ctx context.Context
	ApiService *SubtitleServiceAPIService
	id string
	mediaSourceId string
	index int32
	format string
	startPositionTicks *int64
	endPositionTicks *int64
	copyTimestamps *bool
}

// StartPositionTicks
func (r SubtitleServiceAPIGetItemsByIdByMediasourceidSubtitlesByIndexStreamByFormatRequest) StartPositionTicks(startPositionTicks int64) SubtitleServiceAPIGetItemsByIdByMediasourceidSubtitlesByIndexStreamByFormatRequest {
	r.startPositionTicks = &startPositionTicks
	return r
}

// EndPositionTicks
func (r SubtitleServiceAPIGetItemsByIdByMediasourceidSubtitlesByIndexStreamByFormatRequest) EndPositionTicks(endPositionTicks int64) SubtitleServiceAPIGetItemsByIdByMediasourceidSubtitlesByIndexStreamByFormatRequest {
	r.endPositionTicks = &endPositionTicks
	return r
}

// CopyTimestamps
func (r SubtitleServiceAPIGetItemsByIdByMediasourceidSubtitlesByIndexStreamByFormatRequest) CopyTimestamps(copyTimestamps bool) SubtitleServiceAPIGetItemsByIdByMediasourceidSubtitlesByIndexStreamByFormatRequest {
	r.copyTimestamps = &copyTimestamps
	return r
}

func (r SubtitleServiceAPIGetItemsByIdByMediasourceidSubtitlesByIndexStreamByFormatRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetItemsByIdByMediasourceidSubtitlesByIndexStreamByFormatExecute(r)
}

/*
GetItemsByIdByMediasourceidSubtitlesByIndexStreamByFormat Gets subtitles in a specified format.

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Item Id
 @param mediaSourceId MediaSourceId
 @param index The subtitle stream index
 @param format Format
 @return SubtitleServiceAPIGetItemsByIdByMediasourceidSubtitlesByIndexStreamByFormatRequest
*/
func (a *SubtitleServiceAPIService) GetItemsByIdByMediasourceidSubtitlesByIndexStreamByFormat(ctx context.Context, id string, mediaSourceId string, index int32, format string) SubtitleServiceAPIGetItemsByIdByMediasourceidSubtitlesByIndexStreamByFormatRequest {
	return SubtitleServiceAPIGetItemsByIdByMediasourceidSubtitlesByIndexStreamByFormatRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		mediaSourceId: mediaSourceId,
		index: index,
		format: format,
	}
}

// Execute executes the request
func (a *SubtitleServiceAPIService) GetItemsByIdByMediasourceidSubtitlesByIndexStreamByFormatExecute(r SubtitleServiceAPIGetItemsByIdByMediasourceidSubtitlesByIndexStreamByFormatRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubtitleServiceAPIService.GetItemsByIdByMediasourceidSubtitlesByIndexStreamByFormat")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Items/{Id}/{MediaSourceId}/Subtitles/{Index}/Stream.{Format}"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"MediaSourceId"+"}", url.PathEscape(parameterValueToString(r.mediaSourceId, "mediaSourceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Index"+"}", url.PathEscape(parameterValueToString(r.index, "index")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Format"+"}", url.PathEscape(parameterValueToString(r.format, "format")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startPositionTicks != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "StartPositionTicks", r.startPositionTicks, "")
	}
	if r.endPositionTicks != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EndPositionTicks", r.endPositionTicks, "")
	}
	if r.copyTimestamps != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "CopyTimestamps", r.copyTimestamps, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type SubtitleServiceAPIGetItemsByIdRemotesearchSubtitlesByLanguageRequest struct {
	ctx context.Context
	ApiService *SubtitleServiceAPIService
	id string
	mediaSourceId *string
	language string
	isPerfectMatch *bool
	isForced *bool
	isHearingImpaired *bool
}

// MediaSourceId
func (r SubtitleServiceAPIGetItemsByIdRemotesearchSubtitlesByLanguageRequest) MediaSourceId(mediaSourceId string) SubtitleServiceAPIGetItemsByIdRemotesearchSubtitlesByLanguageRequest {
	r.mediaSourceId = &mediaSourceId
	return r
}

// IsPerfectMatch
func (r SubtitleServiceAPIGetItemsByIdRemotesearchSubtitlesByLanguageRequest) IsPerfectMatch(isPerfectMatch bool) SubtitleServiceAPIGetItemsByIdRemotesearchSubtitlesByLanguageRequest {
	r.isPerfectMatch = &isPerfectMatch
	return r
}

// IsForced
func (r SubtitleServiceAPIGetItemsByIdRemotesearchSubtitlesByLanguageRequest) IsForced(isForced bool) SubtitleServiceAPIGetItemsByIdRemotesearchSubtitlesByLanguageRequest {
	r.isForced = &isForced
	return r
}

// IsHearingImpaired
func (r SubtitleServiceAPIGetItemsByIdRemotesearchSubtitlesByLanguageRequest) IsHearingImpaired(isHearingImpaired bool) SubtitleServiceAPIGetItemsByIdRemotesearchSubtitlesByLanguageRequest {
	r.isHearingImpaired = &isHearingImpaired
	return r
}

func (r SubtitleServiceAPIGetItemsByIdRemotesearchSubtitlesByLanguageRequest) Execute() ([]ModelRemoteSubtitleInfo, *http.Response, error) {
	return r.ApiService.GetItemsByIdRemotesearchSubtitlesByLanguageExecute(r)
}

/*
GetItemsByIdRemotesearchSubtitlesByLanguage Method for GetItemsByIdRemotesearchSubtitlesByLanguage

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Item Id
 @param language Language
 @return SubtitleServiceAPIGetItemsByIdRemotesearchSubtitlesByLanguageRequest
*/
func (a *SubtitleServiceAPIService) GetItemsByIdRemotesearchSubtitlesByLanguage(ctx context.Context, id string, language string) SubtitleServiceAPIGetItemsByIdRemotesearchSubtitlesByLanguageRequest {
	return SubtitleServiceAPIGetItemsByIdRemotesearchSubtitlesByLanguageRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		language: language,
	}
}

// Execute executes the request
//  @return []ModelRemoteSubtitleInfo
func (a *SubtitleServiceAPIService) GetItemsByIdRemotesearchSubtitlesByLanguageExecute(r SubtitleServiceAPIGetItemsByIdRemotesearchSubtitlesByLanguageRequest) ([]ModelRemoteSubtitleInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ModelRemoteSubtitleInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubtitleServiceAPIService.GetItemsByIdRemotesearchSubtitlesByLanguage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Items/{Id}/RemoteSearch/Subtitles/{Language}"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Language"+"}", url.PathEscape(parameterValueToString(r.language, "language")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.mediaSourceId == nil {
		return localVarReturnValue, nil, reportError("mediaSourceId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "MediaSourceId", r.mediaSourceId, "")
	if r.isPerfectMatch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IsPerfectMatch", r.isPerfectMatch, "")
	}
	if r.isForced != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IsForced", r.isForced, "")
	}
	if r.isHearingImpaired != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IsHearingImpaired", r.isHearingImpaired, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SubtitleServiceAPIGetProvidersSubtitlesSubtitlesByIdRequest struct {
	ctx context.Context
	ApiService *SubtitleServiceAPIService
	id string
}

func (r SubtitleServiceAPIGetProvidersSubtitlesSubtitlesByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetProvidersSubtitlesSubtitlesByIdExecute(r)
}

/*
GetProvidersSubtitlesSubtitlesById Method for GetProvidersSubtitlesSubtitlesById

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Item Id
 @return SubtitleServiceAPIGetProvidersSubtitlesSubtitlesByIdRequest
*/
func (a *SubtitleServiceAPIService) GetProvidersSubtitlesSubtitlesById(ctx context.Context, id string) SubtitleServiceAPIGetProvidersSubtitlesSubtitlesByIdRequest {
	return SubtitleServiceAPIGetProvidersSubtitlesSubtitlesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *SubtitleServiceAPIService) GetProvidersSubtitlesSubtitlesByIdExecute(r SubtitleServiceAPIGetProvidersSubtitlesSubtitlesByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubtitleServiceAPIService.GetProvidersSubtitlesSubtitlesById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Providers/Subtitles/Subtitles/{Id}"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type SubtitleServiceAPIGetVideosByIdByMediasourceidSubtitlesByIndexByStartpositionticksStreamByFormatRequest struct {
	ctx context.Context
	ApiService *SubtitleServiceAPIService
	id string
	mediaSourceId string
	index int32
	format string
	startPositionTicks int64
	endPositionTicks *int64
	copyTimestamps *bool
}

// EndPositionTicks
func (r SubtitleServiceAPIGetVideosByIdByMediasourceidSubtitlesByIndexByStartpositionticksStreamByFormatRequest) EndPositionTicks(endPositionTicks int64) SubtitleServiceAPIGetVideosByIdByMediasourceidSubtitlesByIndexByStartpositionticksStreamByFormatRequest {
	r.endPositionTicks = &endPositionTicks
	return r
}

// CopyTimestamps
func (r SubtitleServiceAPIGetVideosByIdByMediasourceidSubtitlesByIndexByStartpositionticksStreamByFormatRequest) CopyTimestamps(copyTimestamps bool) SubtitleServiceAPIGetVideosByIdByMediasourceidSubtitlesByIndexByStartpositionticksStreamByFormatRequest {
	r.copyTimestamps = &copyTimestamps
	return r
}

func (r SubtitleServiceAPIGetVideosByIdByMediasourceidSubtitlesByIndexByStartpositionticksStreamByFormatRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetVideosByIdByMediasourceidSubtitlesByIndexByStartpositionticksStreamByFormatExecute(r)
}

/*
GetVideosByIdByMediasourceidSubtitlesByIndexByStartpositionticksStreamByFormat Gets subtitles in a specified format.

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Item Id
 @param mediaSourceId MediaSourceId
 @param index The subtitle stream index
 @param format Format
 @param startPositionTicks StartPositionTicks
 @return SubtitleServiceAPIGetVideosByIdByMediasourceidSubtitlesByIndexByStartpositionticksStreamByFormatRequest
*/
func (a *SubtitleServiceAPIService) GetVideosByIdByMediasourceidSubtitlesByIndexByStartpositionticksStreamByFormat(ctx context.Context, id string, mediaSourceId string, index int32, format string, startPositionTicks int64) SubtitleServiceAPIGetVideosByIdByMediasourceidSubtitlesByIndexByStartpositionticksStreamByFormatRequest {
	return SubtitleServiceAPIGetVideosByIdByMediasourceidSubtitlesByIndexByStartpositionticksStreamByFormatRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		mediaSourceId: mediaSourceId,
		index: index,
		format: format,
		startPositionTicks: startPositionTicks,
	}
}

// Execute executes the request
func (a *SubtitleServiceAPIService) GetVideosByIdByMediasourceidSubtitlesByIndexByStartpositionticksStreamByFormatExecute(r SubtitleServiceAPIGetVideosByIdByMediasourceidSubtitlesByIndexByStartpositionticksStreamByFormatRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubtitleServiceAPIService.GetVideosByIdByMediasourceidSubtitlesByIndexByStartpositionticksStreamByFormat")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Videos/{Id}/{MediaSourceId}/Subtitles/{Index}/{StartPositionTicks}/Stream.{Format}"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"MediaSourceId"+"}", url.PathEscape(parameterValueToString(r.mediaSourceId, "mediaSourceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Index"+"}", url.PathEscape(parameterValueToString(r.index, "index")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Format"+"}", url.PathEscape(parameterValueToString(r.format, "format")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"StartPositionTicks"+"}", url.PathEscape(parameterValueToString(r.startPositionTicks, "startPositionTicks")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.endPositionTicks != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EndPositionTicks", r.endPositionTicks, "")
	}
	if r.copyTimestamps != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "CopyTimestamps", r.copyTimestamps, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type SubtitleServiceAPIGetVideosByIdByMediasourceidSubtitlesByIndexStreamByFormatRequest struct {
	ctx context.Context
	ApiService *SubtitleServiceAPIService
	id string
	mediaSourceId string
	index int32
	format string
	startPositionTicks *int64
	endPositionTicks *int64
	copyTimestamps *bool
}

// StartPositionTicks
func (r SubtitleServiceAPIGetVideosByIdByMediasourceidSubtitlesByIndexStreamByFormatRequest) StartPositionTicks(startPositionTicks int64) SubtitleServiceAPIGetVideosByIdByMediasourceidSubtitlesByIndexStreamByFormatRequest {
	r.startPositionTicks = &startPositionTicks
	return r
}

// EndPositionTicks
func (r SubtitleServiceAPIGetVideosByIdByMediasourceidSubtitlesByIndexStreamByFormatRequest) EndPositionTicks(endPositionTicks int64) SubtitleServiceAPIGetVideosByIdByMediasourceidSubtitlesByIndexStreamByFormatRequest {
	r.endPositionTicks = &endPositionTicks
	return r
}

// CopyTimestamps
func (r SubtitleServiceAPIGetVideosByIdByMediasourceidSubtitlesByIndexStreamByFormatRequest) CopyTimestamps(copyTimestamps bool) SubtitleServiceAPIGetVideosByIdByMediasourceidSubtitlesByIndexStreamByFormatRequest {
	r.copyTimestamps = &copyTimestamps
	return r
}

func (r SubtitleServiceAPIGetVideosByIdByMediasourceidSubtitlesByIndexStreamByFormatRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetVideosByIdByMediasourceidSubtitlesByIndexStreamByFormatExecute(r)
}

/*
GetVideosByIdByMediasourceidSubtitlesByIndexStreamByFormat Gets subtitles in a specified format.

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Item Id
 @param mediaSourceId MediaSourceId
 @param index The subtitle stream index
 @param format Format
 @return SubtitleServiceAPIGetVideosByIdByMediasourceidSubtitlesByIndexStreamByFormatRequest
*/
func (a *SubtitleServiceAPIService) GetVideosByIdByMediasourceidSubtitlesByIndexStreamByFormat(ctx context.Context, id string, mediaSourceId string, index int32, format string) SubtitleServiceAPIGetVideosByIdByMediasourceidSubtitlesByIndexStreamByFormatRequest {
	return SubtitleServiceAPIGetVideosByIdByMediasourceidSubtitlesByIndexStreamByFormatRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		mediaSourceId: mediaSourceId,
		index: index,
		format: format,
	}
}

// Execute executes the request
func (a *SubtitleServiceAPIService) GetVideosByIdByMediasourceidSubtitlesByIndexStreamByFormatExecute(r SubtitleServiceAPIGetVideosByIdByMediasourceidSubtitlesByIndexStreamByFormatRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubtitleServiceAPIService.GetVideosByIdByMediasourceidSubtitlesByIndexStreamByFormat")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Videos/{Id}/{MediaSourceId}/Subtitles/{Index}/Stream.{Format}"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"MediaSourceId"+"}", url.PathEscape(parameterValueToString(r.mediaSourceId, "mediaSourceId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Index"+"}", url.PathEscape(parameterValueToString(r.index, "index")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Format"+"}", url.PathEscape(parameterValueToString(r.format, "format")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startPositionTicks != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "StartPositionTicks", r.startPositionTicks, "")
	}
	if r.endPositionTicks != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EndPositionTicks", r.endPositionTicks, "")
	}
	if r.copyTimestamps != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "CopyTimestamps", r.copyTimestamps, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type SubtitleServiceAPIPostItemsByIdRemotesearchSubtitlesBySubtitleidRequest struct {
	ctx context.Context
	ApiService *SubtitleServiceAPIService
	id string
	mediaSourceId *string
	subtitleId string
}

// MediaSourceId
func (r SubtitleServiceAPIPostItemsByIdRemotesearchSubtitlesBySubtitleidRequest) MediaSourceId(mediaSourceId string) SubtitleServiceAPIPostItemsByIdRemotesearchSubtitlesBySubtitleidRequest {
	r.mediaSourceId = &mediaSourceId
	return r
}

func (r SubtitleServiceAPIPostItemsByIdRemotesearchSubtitlesBySubtitleidRequest) Execute() (*ModelSubtitlesSubtitleDownloadResult, *http.Response, error) {
	return r.ApiService.PostItemsByIdRemotesearchSubtitlesBySubtitleidExecute(r)
}

/*
PostItemsByIdRemotesearchSubtitlesBySubtitleid Method for PostItemsByIdRemotesearchSubtitlesBySubtitleid

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Item Id
 @param subtitleId SubtitleId
 @return SubtitleServiceAPIPostItemsByIdRemotesearchSubtitlesBySubtitleidRequest
*/
func (a *SubtitleServiceAPIService) PostItemsByIdRemotesearchSubtitlesBySubtitleid(ctx context.Context, id string, subtitleId string) SubtitleServiceAPIPostItemsByIdRemotesearchSubtitlesBySubtitleidRequest {
	return SubtitleServiceAPIPostItemsByIdRemotesearchSubtitlesBySubtitleidRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		subtitleId: subtitleId,
	}
}

// Execute executes the request
//  @return ModelSubtitlesSubtitleDownloadResult
func (a *SubtitleServiceAPIService) PostItemsByIdRemotesearchSubtitlesBySubtitleidExecute(r SubtitleServiceAPIPostItemsByIdRemotesearchSubtitlesBySubtitleidRequest) (*ModelSubtitlesSubtitleDownloadResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ModelSubtitlesSubtitleDownloadResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubtitleServiceAPIService.PostItemsByIdRemotesearchSubtitlesBySubtitleid")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Items/{Id}/RemoteSearch/Subtitles/{SubtitleId}"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"SubtitleId"+"}", url.PathEscape(parameterValueToString(r.subtitleId, "subtitleId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.mediaSourceId == nil {
		return localVarReturnValue, nil, reportError("mediaSourceId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "MediaSourceId", r.mediaSourceId, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type SubtitleServiceAPIPostItemsByIdSubtitlesByIndexDeleteRequest struct {
	ctx context.Context
	ApiService *SubtitleServiceAPIService
	id string
	mediaSourceId *string
	index int32
}

// MediaSourceId
func (r SubtitleServiceAPIPostItemsByIdSubtitlesByIndexDeleteRequest) MediaSourceId(mediaSourceId string) SubtitleServiceAPIPostItemsByIdSubtitlesByIndexDeleteRequest {
	r.mediaSourceId = &mediaSourceId
	return r
}

func (r SubtitleServiceAPIPostItemsByIdSubtitlesByIndexDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.PostItemsByIdSubtitlesByIndexDeleteExecute(r)
}

/*
PostItemsByIdSubtitlesByIndexDelete Deletes an external subtitle file

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Item Id
 @param index The subtitle stream index
 @return SubtitleServiceAPIPostItemsByIdSubtitlesByIndexDeleteRequest
*/
func (a *SubtitleServiceAPIService) PostItemsByIdSubtitlesByIndexDelete(ctx context.Context, id string, index int32) SubtitleServiceAPIPostItemsByIdSubtitlesByIndexDeleteRequest {
	return SubtitleServiceAPIPostItemsByIdSubtitlesByIndexDeleteRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		index: index,
	}
}

// Execute executes the request
func (a *SubtitleServiceAPIService) PostItemsByIdSubtitlesByIndexDeleteExecute(r SubtitleServiceAPIPostItemsByIdSubtitlesByIndexDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubtitleServiceAPIService.PostItemsByIdSubtitlesByIndexDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Items/{Id}/Subtitles/{Index}/Delete"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Index"+"}", url.PathEscape(parameterValueToString(r.index, "index")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.mediaSourceId == nil {
		return nil, reportError("mediaSourceId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "MediaSourceId", r.mediaSourceId, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type SubtitleServiceAPIPostVideosByIdSubtitlesByIndexDeleteRequest struct {
	ctx context.Context
	ApiService *SubtitleServiceAPIService
	id string
	mediaSourceId *string
	index int32
}

// MediaSourceId
func (r SubtitleServiceAPIPostVideosByIdSubtitlesByIndexDeleteRequest) MediaSourceId(mediaSourceId string) SubtitleServiceAPIPostVideosByIdSubtitlesByIndexDeleteRequest {
	r.mediaSourceId = &mediaSourceId
	return r
}

func (r SubtitleServiceAPIPostVideosByIdSubtitlesByIndexDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.PostVideosByIdSubtitlesByIndexDeleteExecute(r)
}

/*
PostVideosByIdSubtitlesByIndexDelete Deletes an external subtitle file

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Item Id
 @param index The subtitle stream index
 @return SubtitleServiceAPIPostVideosByIdSubtitlesByIndexDeleteRequest
*/
func (a *SubtitleServiceAPIService) PostVideosByIdSubtitlesByIndexDelete(ctx context.Context, id string, index int32) SubtitleServiceAPIPostVideosByIdSubtitlesByIndexDeleteRequest {
	return SubtitleServiceAPIPostVideosByIdSubtitlesByIndexDeleteRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		index: index,
	}
}

// Execute executes the request
func (a *SubtitleServiceAPIService) PostVideosByIdSubtitlesByIndexDeleteExecute(r SubtitleServiceAPIPostVideosByIdSubtitlesByIndexDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubtitleServiceAPIService.PostVideosByIdSubtitlesByIndexDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Videos/{Id}/Subtitles/{Index}/Delete"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Index"+"}", url.PathEscape(parameterValueToString(r.index, "index")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.mediaSourceId == nil {
		return nil, reportError("mediaSourceId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "MediaSourceId", r.mediaSourceId, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
