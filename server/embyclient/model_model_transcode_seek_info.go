/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"encoding/json"
	"fmt"
)

// ModelTranscodeSeekInfo the model 'ModelTranscodeSeekInfo'
type ModelTranscodeSeekInfo string

// List of TranscodeSeekInfo
const (
	MODELTRANSCODESEEKINFO_AUTO ModelTranscodeSeekInfo = "Auto"
	MODELTRANSCODESEEKINFO_BYTES ModelTranscodeSeekInfo = "Bytes"
)

// All allowed values of ModelTranscodeSeekInfo enum
var AllowedModelTranscodeSeekInfoEnumValues = []ModelTranscodeSeekInfo{
	"Auto",
	"Bytes",
}

func (v *ModelTranscodeSeekInfo) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ModelTranscodeSeekInfo(value)
	for _, existing := range AllowedModelTranscodeSeekInfoEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ModelTranscodeSeekInfo", value)
}

// NewModelTranscodeSeekInfoFromValue returns a pointer to a valid ModelTranscodeSeekInfo
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewModelTranscodeSeekInfoFromValue(v string) (*ModelTranscodeSeekInfo, error) {
	ev := ModelTranscodeSeekInfo(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ModelTranscodeSeekInfo: valid values are %v", v, AllowedModelTranscodeSeekInfoEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ModelTranscodeSeekInfo) IsValid() bool {
	for _, existing := range AllowedModelTranscodeSeekInfoEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TranscodeSeekInfo value
func (v ModelTranscodeSeekInfo) Ptr() *ModelTranscodeSeekInfo {
	return &v
}

type NullableModelTranscodeSeekInfo struct {
	value *ModelTranscodeSeekInfo
	isSet bool
}

func (v NullableModelTranscodeSeekInfo) Get() *ModelTranscodeSeekInfo {
	return v.value
}

func (v *NullableModelTranscodeSeekInfo) Set(val *ModelTranscodeSeekInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableModelTranscodeSeekInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableModelTranscodeSeekInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelTranscodeSeekInfo(val *ModelTranscodeSeekInfo) *NullableModelTranscodeSeekInfo {
	return &NullableModelTranscodeSeekInfo{value: val, isSet: true}
}

func (v NullableModelTranscodeSeekInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelTranscodeSeekInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

