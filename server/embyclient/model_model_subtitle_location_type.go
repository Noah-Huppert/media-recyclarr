/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"encoding/json"
	"fmt"
)

// ModelSubtitleLocationType the model 'ModelSubtitleLocationType'
type ModelSubtitleLocationType string

// List of SubtitleLocationType
const (
	MODELSUBTITLELOCATIONTYPE_INTERNAL_STREAM ModelSubtitleLocationType = "InternalStream"
	MODELSUBTITLELOCATIONTYPE_VIDEO_SIDE_DATA ModelSubtitleLocationType = "VideoSideData"
)

// All allowed values of ModelSubtitleLocationType enum
var AllowedModelSubtitleLocationTypeEnumValues = []ModelSubtitleLocationType{
	"InternalStream",
	"VideoSideData",
}

func (v *ModelSubtitleLocationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ModelSubtitleLocationType(value)
	for _, existing := range AllowedModelSubtitleLocationTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ModelSubtitleLocationType", value)
}

// NewModelSubtitleLocationTypeFromValue returns a pointer to a valid ModelSubtitleLocationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewModelSubtitleLocationTypeFromValue(v string) (*ModelSubtitleLocationType, error) {
	ev := ModelSubtitleLocationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ModelSubtitleLocationType: valid values are %v", v, AllowedModelSubtitleLocationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ModelSubtitleLocationType) IsValid() bool {
	for _, existing := range AllowedModelSubtitleLocationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SubtitleLocationType value
func (v ModelSubtitleLocationType) Ptr() *ModelSubtitleLocationType {
	return &v
}

type NullableModelSubtitleLocationType struct {
	value *ModelSubtitleLocationType
	isSet bool
}

func (v NullableModelSubtitleLocationType) Get() *ModelSubtitleLocationType {
	return v.value
}

func (v *NullableModelSubtitleLocationType) Set(val *ModelSubtitleLocationType) {
	v.value = val
	v.isSet = true
}

func (v NullableModelSubtitleLocationType) IsSet() bool {
	return v.isSet
}

func (v *NullableModelSubtitleLocationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelSubtitleLocationType(val *ModelSubtitleLocationType) *NullableModelSubtitleLocationType {
	return &NullableModelSubtitleLocationType{value: val, isSet: true}
}

func (v NullableModelSubtitleLocationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelSubtitleLocationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

