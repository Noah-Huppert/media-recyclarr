/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"encoding/json"
	"fmt"
)

// ModelSeriesDisplayOrder the model 'ModelSeriesDisplayOrder'
type ModelSeriesDisplayOrder string

// List of SeriesDisplayOrder
const (
	MODELSERIESDISPLAYORDER_AIRED ModelSeriesDisplayOrder = "Aired"
	MODELSERIESDISPLAYORDER_DVD ModelSeriesDisplayOrder = "Dvd"
	MODELSERIESDISPLAYORDER_ABSOLUTE ModelSeriesDisplayOrder = "Absolute"
)

// All allowed values of ModelSeriesDisplayOrder enum
var AllowedModelSeriesDisplayOrderEnumValues = []ModelSeriesDisplayOrder{
	"Aired",
	"Dvd",
	"Absolute",
}

func (v *ModelSeriesDisplayOrder) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ModelSeriesDisplayOrder(value)
	for _, existing := range AllowedModelSeriesDisplayOrderEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ModelSeriesDisplayOrder", value)
}

// NewModelSeriesDisplayOrderFromValue returns a pointer to a valid ModelSeriesDisplayOrder
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewModelSeriesDisplayOrderFromValue(v string) (*ModelSeriesDisplayOrder, error) {
	ev := ModelSeriesDisplayOrder(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ModelSeriesDisplayOrder: valid values are %v", v, AllowedModelSeriesDisplayOrderEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ModelSeriesDisplayOrder) IsValid() bool {
	for _, existing := range AllowedModelSeriesDisplayOrderEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SeriesDisplayOrder value
func (v ModelSeriesDisplayOrder) Ptr() *ModelSeriesDisplayOrder {
	return &v
}

type NullableModelSeriesDisplayOrder struct {
	value *ModelSeriesDisplayOrder
	isSet bool
}

func (v NullableModelSeriesDisplayOrder) Get() *ModelSeriesDisplayOrder {
	return v.value
}

func (v *NullableModelSeriesDisplayOrder) Set(val *ModelSeriesDisplayOrder) {
	v.value = val
	v.isSet = true
}

func (v NullableModelSeriesDisplayOrder) IsSet() bool {
	return v.isSet
}

func (v *NullableModelSeriesDisplayOrder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelSeriesDisplayOrder(val *ModelSeriesDisplayOrder) *NullableModelSeriesDisplayOrder {
	return &NullableModelSeriesDisplayOrder{value: val, isSet: true}
}

func (v NullableModelSeriesDisplayOrder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelSeriesDisplayOrder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

