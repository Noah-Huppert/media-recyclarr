/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"encoding/json"
)

// checks if the ModelUserNotificationInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelUserNotificationInfo{}

// ModelUserNotificationInfo struct for ModelUserNotificationInfo
type ModelUserNotificationInfo struct {
	NotifierKey *string `json:"NotifierKey,omitempty"`
	SetupModuleUrl *string `json:"SetupModuleUrl,omitempty"`
	ServiceName *string `json:"ServiceName,omitempty"`
	PluginId *string `json:"PluginId,omitempty"`
	FriendlyName *string `json:"FriendlyName,omitempty"`
	Id *string `json:"Id,omitempty"`
	Enabled *bool `json:"Enabled,omitempty"`
	UserIds []string `json:"UserIds,omitempty"`
	DeviceIds []string `json:"DeviceIds,omitempty"`
	LibraryIds []string `json:"LibraryIds,omitempty"`
	EventIds []string `json:"EventIds,omitempty"`
	UserId *string `json:"UserId,omitempty"`
	IsSelfNotification *bool `json:"IsSelfNotification,omitempty"`
	Options *map[string]string `json:"Options,omitempty"`
}

// NewModelUserNotificationInfo instantiates a new ModelUserNotificationInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelUserNotificationInfo() *ModelUserNotificationInfo {
	this := ModelUserNotificationInfo{}
	return &this
}

// NewModelUserNotificationInfoWithDefaults instantiates a new ModelUserNotificationInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelUserNotificationInfoWithDefaults() *ModelUserNotificationInfo {
	this := ModelUserNotificationInfo{}
	return &this
}

// GetNotifierKey returns the NotifierKey field value if set, zero value otherwise.
func (o *ModelUserNotificationInfo) GetNotifierKey() string {
	if o == nil || IsNil(o.NotifierKey) {
		var ret string
		return ret
	}
	return *o.NotifierKey
}

// GetNotifierKeyOk returns a tuple with the NotifierKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserNotificationInfo) GetNotifierKeyOk() (*string, bool) {
	if o == nil || IsNil(o.NotifierKey) {
		return nil, false
	}
	return o.NotifierKey, true
}

// HasNotifierKey returns a boolean if a field has been set.
func (o *ModelUserNotificationInfo) HasNotifierKey() bool {
	if o != nil && !IsNil(o.NotifierKey) {
		return true
	}

	return false
}

// SetNotifierKey gets a reference to the given string and assigns it to the NotifierKey field.
func (o *ModelUserNotificationInfo) SetNotifierKey(v string) {
	o.NotifierKey = &v
}

// GetSetupModuleUrl returns the SetupModuleUrl field value if set, zero value otherwise.
func (o *ModelUserNotificationInfo) GetSetupModuleUrl() string {
	if o == nil || IsNil(o.SetupModuleUrl) {
		var ret string
		return ret
	}
	return *o.SetupModuleUrl
}

// GetSetupModuleUrlOk returns a tuple with the SetupModuleUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserNotificationInfo) GetSetupModuleUrlOk() (*string, bool) {
	if o == nil || IsNil(o.SetupModuleUrl) {
		return nil, false
	}
	return o.SetupModuleUrl, true
}

// HasSetupModuleUrl returns a boolean if a field has been set.
func (o *ModelUserNotificationInfo) HasSetupModuleUrl() bool {
	if o != nil && !IsNil(o.SetupModuleUrl) {
		return true
	}

	return false
}

// SetSetupModuleUrl gets a reference to the given string and assigns it to the SetupModuleUrl field.
func (o *ModelUserNotificationInfo) SetSetupModuleUrl(v string) {
	o.SetupModuleUrl = &v
}

// GetServiceName returns the ServiceName field value if set, zero value otherwise.
func (o *ModelUserNotificationInfo) GetServiceName() string {
	if o == nil || IsNil(o.ServiceName) {
		var ret string
		return ret
	}
	return *o.ServiceName
}

// GetServiceNameOk returns a tuple with the ServiceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserNotificationInfo) GetServiceNameOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceName) {
		return nil, false
	}
	return o.ServiceName, true
}

// HasServiceName returns a boolean if a field has been set.
func (o *ModelUserNotificationInfo) HasServiceName() bool {
	if o != nil && !IsNil(o.ServiceName) {
		return true
	}

	return false
}

// SetServiceName gets a reference to the given string and assigns it to the ServiceName field.
func (o *ModelUserNotificationInfo) SetServiceName(v string) {
	o.ServiceName = &v
}

// GetPluginId returns the PluginId field value if set, zero value otherwise.
func (o *ModelUserNotificationInfo) GetPluginId() string {
	if o == nil || IsNil(o.PluginId) {
		var ret string
		return ret
	}
	return *o.PluginId
}

// GetPluginIdOk returns a tuple with the PluginId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserNotificationInfo) GetPluginIdOk() (*string, bool) {
	if o == nil || IsNil(o.PluginId) {
		return nil, false
	}
	return o.PluginId, true
}

// HasPluginId returns a boolean if a field has been set.
func (o *ModelUserNotificationInfo) HasPluginId() bool {
	if o != nil && !IsNil(o.PluginId) {
		return true
	}

	return false
}

// SetPluginId gets a reference to the given string and assigns it to the PluginId field.
func (o *ModelUserNotificationInfo) SetPluginId(v string) {
	o.PluginId = &v
}

// GetFriendlyName returns the FriendlyName field value if set, zero value otherwise.
func (o *ModelUserNotificationInfo) GetFriendlyName() string {
	if o == nil || IsNil(o.FriendlyName) {
		var ret string
		return ret
	}
	return *o.FriendlyName
}

// GetFriendlyNameOk returns a tuple with the FriendlyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserNotificationInfo) GetFriendlyNameOk() (*string, bool) {
	if o == nil || IsNil(o.FriendlyName) {
		return nil, false
	}
	return o.FriendlyName, true
}

// HasFriendlyName returns a boolean if a field has been set.
func (o *ModelUserNotificationInfo) HasFriendlyName() bool {
	if o != nil && !IsNil(o.FriendlyName) {
		return true
	}

	return false
}

// SetFriendlyName gets a reference to the given string and assigns it to the FriendlyName field.
func (o *ModelUserNotificationInfo) SetFriendlyName(v string) {
	o.FriendlyName = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ModelUserNotificationInfo) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserNotificationInfo) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ModelUserNotificationInfo) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ModelUserNotificationInfo) SetId(v string) {
	o.Id = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *ModelUserNotificationInfo) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserNotificationInfo) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *ModelUserNotificationInfo) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *ModelUserNotificationInfo) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetUserIds returns the UserIds field value if set, zero value otherwise.
func (o *ModelUserNotificationInfo) GetUserIds() []string {
	if o == nil || IsNil(o.UserIds) {
		var ret []string
		return ret
	}
	return o.UserIds
}

// GetUserIdsOk returns a tuple with the UserIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserNotificationInfo) GetUserIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.UserIds) {
		return nil, false
	}
	return o.UserIds, true
}

// HasUserIds returns a boolean if a field has been set.
func (o *ModelUserNotificationInfo) HasUserIds() bool {
	if o != nil && !IsNil(o.UserIds) {
		return true
	}

	return false
}

// SetUserIds gets a reference to the given []string and assigns it to the UserIds field.
func (o *ModelUserNotificationInfo) SetUserIds(v []string) {
	o.UserIds = v
}

// GetDeviceIds returns the DeviceIds field value if set, zero value otherwise.
func (o *ModelUserNotificationInfo) GetDeviceIds() []string {
	if o == nil || IsNil(o.DeviceIds) {
		var ret []string
		return ret
	}
	return o.DeviceIds
}

// GetDeviceIdsOk returns a tuple with the DeviceIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserNotificationInfo) GetDeviceIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.DeviceIds) {
		return nil, false
	}
	return o.DeviceIds, true
}

// HasDeviceIds returns a boolean if a field has been set.
func (o *ModelUserNotificationInfo) HasDeviceIds() bool {
	if o != nil && !IsNil(o.DeviceIds) {
		return true
	}

	return false
}

// SetDeviceIds gets a reference to the given []string and assigns it to the DeviceIds field.
func (o *ModelUserNotificationInfo) SetDeviceIds(v []string) {
	o.DeviceIds = v
}

// GetLibraryIds returns the LibraryIds field value if set, zero value otherwise.
func (o *ModelUserNotificationInfo) GetLibraryIds() []string {
	if o == nil || IsNil(o.LibraryIds) {
		var ret []string
		return ret
	}
	return o.LibraryIds
}

// GetLibraryIdsOk returns a tuple with the LibraryIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserNotificationInfo) GetLibraryIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.LibraryIds) {
		return nil, false
	}
	return o.LibraryIds, true
}

// HasLibraryIds returns a boolean if a field has been set.
func (o *ModelUserNotificationInfo) HasLibraryIds() bool {
	if o != nil && !IsNil(o.LibraryIds) {
		return true
	}

	return false
}

// SetLibraryIds gets a reference to the given []string and assigns it to the LibraryIds field.
func (o *ModelUserNotificationInfo) SetLibraryIds(v []string) {
	o.LibraryIds = v
}

// GetEventIds returns the EventIds field value if set, zero value otherwise.
func (o *ModelUserNotificationInfo) GetEventIds() []string {
	if o == nil || IsNil(o.EventIds) {
		var ret []string
		return ret
	}
	return o.EventIds
}

// GetEventIdsOk returns a tuple with the EventIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserNotificationInfo) GetEventIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.EventIds) {
		return nil, false
	}
	return o.EventIds, true
}

// HasEventIds returns a boolean if a field has been set.
func (o *ModelUserNotificationInfo) HasEventIds() bool {
	if o != nil && !IsNil(o.EventIds) {
		return true
	}

	return false
}

// SetEventIds gets a reference to the given []string and assigns it to the EventIds field.
func (o *ModelUserNotificationInfo) SetEventIds(v []string) {
	o.EventIds = v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *ModelUserNotificationInfo) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserNotificationInfo) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *ModelUserNotificationInfo) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *ModelUserNotificationInfo) SetUserId(v string) {
	o.UserId = &v
}

// GetIsSelfNotification returns the IsSelfNotification field value if set, zero value otherwise.
func (o *ModelUserNotificationInfo) GetIsSelfNotification() bool {
	if o == nil || IsNil(o.IsSelfNotification) {
		var ret bool
		return ret
	}
	return *o.IsSelfNotification
}

// GetIsSelfNotificationOk returns a tuple with the IsSelfNotification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserNotificationInfo) GetIsSelfNotificationOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSelfNotification) {
		return nil, false
	}
	return o.IsSelfNotification, true
}

// HasIsSelfNotification returns a boolean if a field has been set.
func (o *ModelUserNotificationInfo) HasIsSelfNotification() bool {
	if o != nil && !IsNil(o.IsSelfNotification) {
		return true
	}

	return false
}

// SetIsSelfNotification gets a reference to the given bool and assigns it to the IsSelfNotification field.
func (o *ModelUserNotificationInfo) SetIsSelfNotification(v bool) {
	o.IsSelfNotification = &v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *ModelUserNotificationInfo) GetOptions() map[string]string {
	if o == nil || IsNil(o.Options) {
		var ret map[string]string
		return ret
	}
	return *o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelUserNotificationInfo) GetOptionsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *ModelUserNotificationInfo) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given map[string]string and assigns it to the Options field.
func (o *ModelUserNotificationInfo) SetOptions(v map[string]string) {
	o.Options = &v
}

func (o ModelUserNotificationInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelUserNotificationInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NotifierKey) {
		toSerialize["NotifierKey"] = o.NotifierKey
	}
	if !IsNil(o.SetupModuleUrl) {
		toSerialize["SetupModuleUrl"] = o.SetupModuleUrl
	}
	if !IsNil(o.ServiceName) {
		toSerialize["ServiceName"] = o.ServiceName
	}
	if !IsNil(o.PluginId) {
		toSerialize["PluginId"] = o.PluginId
	}
	if !IsNil(o.FriendlyName) {
		toSerialize["FriendlyName"] = o.FriendlyName
	}
	if !IsNil(o.Id) {
		toSerialize["Id"] = o.Id
	}
	if !IsNil(o.Enabled) {
		toSerialize["Enabled"] = o.Enabled
	}
	if !IsNil(o.UserIds) {
		toSerialize["UserIds"] = o.UserIds
	}
	if !IsNil(o.DeviceIds) {
		toSerialize["DeviceIds"] = o.DeviceIds
	}
	if !IsNil(o.LibraryIds) {
		toSerialize["LibraryIds"] = o.LibraryIds
	}
	if !IsNil(o.EventIds) {
		toSerialize["EventIds"] = o.EventIds
	}
	if !IsNil(o.UserId) {
		toSerialize["UserId"] = o.UserId
	}
	if !IsNil(o.IsSelfNotification) {
		toSerialize["IsSelfNotification"] = o.IsSelfNotification
	}
	if !IsNil(o.Options) {
		toSerialize["Options"] = o.Options
	}
	return toSerialize, nil
}

type NullableModelUserNotificationInfo struct {
	value *ModelUserNotificationInfo
	isSet bool
}

func (v NullableModelUserNotificationInfo) Get() *ModelUserNotificationInfo {
	return v.value
}

func (v *NullableModelUserNotificationInfo) Set(val *ModelUserNotificationInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableModelUserNotificationInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableModelUserNotificationInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelUserNotificationInfo(val *ModelUserNotificationInfo) *NullableModelUserNotificationInfo {
	return &NullableModelUserNotificationInfo{value: val, isSet: true}
}

func (v NullableModelUserNotificationInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelUserNotificationInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


