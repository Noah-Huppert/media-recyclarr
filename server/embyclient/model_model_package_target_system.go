/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"encoding/json"
	"fmt"
)

// ModelPackageTargetSystem the model 'ModelPackageTargetSystem'
type ModelPackageTargetSystem string

// List of PackageTargetSystem
const (
	MODELPACKAGETARGETSYSTEM_SERVER ModelPackageTargetSystem = "Server"
	MODELPACKAGETARGETSYSTEM_MB_THEATER ModelPackageTargetSystem = "MBTheater"
	MODELPACKAGETARGETSYSTEM_MB_CLASSIC ModelPackageTargetSystem = "MBClassic"
	MODELPACKAGETARGETSYSTEM_OTHER ModelPackageTargetSystem = "Other"
)

// All allowed values of ModelPackageTargetSystem enum
var AllowedModelPackageTargetSystemEnumValues = []ModelPackageTargetSystem{
	"Server",
	"MBTheater",
	"MBClassic",
	"Other",
}

func (v *ModelPackageTargetSystem) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ModelPackageTargetSystem(value)
	for _, existing := range AllowedModelPackageTargetSystemEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ModelPackageTargetSystem", value)
}

// NewModelPackageTargetSystemFromValue returns a pointer to a valid ModelPackageTargetSystem
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewModelPackageTargetSystemFromValue(v string) (*ModelPackageTargetSystem, error) {
	ev := ModelPackageTargetSystem(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ModelPackageTargetSystem: valid values are %v", v, AllowedModelPackageTargetSystemEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ModelPackageTargetSystem) IsValid() bool {
	for _, existing := range AllowedModelPackageTargetSystemEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PackageTargetSystem value
func (v ModelPackageTargetSystem) Ptr() *ModelPackageTargetSystem {
	return &v
}

type NullableModelPackageTargetSystem struct {
	value *ModelPackageTargetSystem
	isSet bool
}

func (v NullableModelPackageTargetSystem) Get() *ModelPackageTargetSystem {
	return v.value
}

func (v *NullableModelPackageTargetSystem) Set(val *ModelPackageTargetSystem) {
	v.value = val
	v.isSet = true
}

func (v NullableModelPackageTargetSystem) IsSet() bool {
	return v.isSet
}

func (v *NullableModelPackageTargetSystem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelPackageTargetSystem(val *ModelPackageTargetSystem) *NullableModelPackageTargetSystem {
	return &NullableModelPackageTargetSystem{value: val, isSet: true}
}

func (v NullableModelPackageTargetSystem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelPackageTargetSystem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

