/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// DynamicHlsServiceAPIService DynamicHlsServiceAPI service
type DynamicHlsServiceAPIService service

type DynamicHlsServiceAPIGetAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest struct {
	ctx context.Context
	ApiService *DynamicHlsServiceAPIService
	segmentContainer string
	segmentId string
	id string
	playlistId string
}

func (r DynamicHlsServiceAPIGetAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerExecute(r)
}

/*
GetAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainer Method for GetAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainer

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param segmentContainer
 @param segmentId
 @param id
 @param playlistId
 @return DynamicHlsServiceAPIGetAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest
*/
func (a *DynamicHlsServiceAPIService) GetAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainer(ctx context.Context, segmentContainer string, segmentId string, id string, playlistId string) DynamicHlsServiceAPIGetAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	return DynamicHlsServiceAPIGetAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest{
		ApiService: a,
		ctx: ctx,
		segmentContainer: segmentContainer,
		segmentId: segmentId,
		id: id,
		playlistId: playlistId,
	}
}

// Execute executes the request
func (a *DynamicHlsServiceAPIService) GetAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerExecute(r DynamicHlsServiceAPIGetAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DynamicHlsServiceAPIService.GetAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainer")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Audio/{Id}/hls1/{PlaylistId}/{SegmentId}.{SegmentContainer}"
	localVarPath = strings.Replace(localVarPath, "{"+"SegmentContainer"+"}", url.PathEscape(parameterValueToString(r.segmentContainer, "segmentContainer")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"SegmentId"+"}", url.PathEscape(parameterValueToString(r.segmentId, "segmentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"PlaylistId"+"}", url.PathEscape(parameterValueToString(r.playlistId, "playlistId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type DynamicHlsServiceAPIGetAudioByIdMainM3u8Request struct {
	ctx context.Context
	ApiService *DynamicHlsServiceAPIService
	id string
	container *string
	deviceProfileId *string
	deviceId *string
	audioCodec *string
	enableAutoStreamCopy *bool
	audioSampleRate *int32
	audioBitRate *int32
	audioChannels *int32
	maxAudioChannels *int32
	static *bool
	profile *string
	level *string
	framerate *float32
	maxFramerate *float32
	copyTimestamps *bool
	startTimeTicks *int64
	width *int32
	height *int32
	maxWidth *int32
	maxHeight *int32
	videoBitRate *int32
	subtitleStreamIndex *int32
	subtitleMethod *ModelSubtitleDeliveryMethod
	maxRefFrames *int32
	maxVideoBitDepth *int32
	videoCodec *string
	audioStreamIndex *int32
	videoStreamIndex *int32
}

// Container
func (r DynamicHlsServiceAPIGetAudioByIdMainM3u8Request) Container(container string) DynamicHlsServiceAPIGetAudioByIdMainM3u8Request {
	r.container = &container
	return r
}

// Optional. The dlna device profile id to utilize.
func (r DynamicHlsServiceAPIGetAudioByIdMainM3u8Request) DeviceProfileId(deviceProfileId string) DynamicHlsServiceAPIGetAudioByIdMainM3u8Request {
	r.deviceProfileId = &deviceProfileId
	return r
}

// The device id of the client requesting. Used to stop encoding processes when needed.
func (r DynamicHlsServiceAPIGetAudioByIdMainM3u8Request) DeviceId(deviceId string) DynamicHlsServiceAPIGetAudioByIdMainM3u8Request {
	r.deviceId = &deviceId
	return r
}

// Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension. Options: aac, mp3, vorbis, wma.
func (r DynamicHlsServiceAPIGetAudioByIdMainM3u8Request) AudioCodec(audioCodec string) DynamicHlsServiceAPIGetAudioByIdMainM3u8Request {
	r.audioCodec = &audioCodec
	return r
}

// Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
func (r DynamicHlsServiceAPIGetAudioByIdMainM3u8Request) EnableAutoStreamCopy(enableAutoStreamCopy bool) DynamicHlsServiceAPIGetAudioByIdMainM3u8Request {
	r.enableAutoStreamCopy = &enableAutoStreamCopy
	return r
}

// Optional. Specify a specific audio sample rate, e.g. 44100
func (r DynamicHlsServiceAPIGetAudioByIdMainM3u8Request) AudioSampleRate(audioSampleRate int32) DynamicHlsServiceAPIGetAudioByIdMainM3u8Request {
	r.audioSampleRate = &audioSampleRate
	return r
}

// Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
func (r DynamicHlsServiceAPIGetAudioByIdMainM3u8Request) AudioBitRate(audioBitRate int32) DynamicHlsServiceAPIGetAudioByIdMainM3u8Request {
	r.audioBitRate = &audioBitRate
	return r
}

// Optional. Specify a specific number of audio channels to encode to, e.g. 2
func (r DynamicHlsServiceAPIGetAudioByIdMainM3u8Request) AudioChannels(audioChannels int32) DynamicHlsServiceAPIGetAudioByIdMainM3u8Request {
	r.audioChannels = &audioChannels
	return r
}

// Optional. Specify a maximum number of audio channels to encode to, e.g. 2
func (r DynamicHlsServiceAPIGetAudioByIdMainM3u8Request) MaxAudioChannels(maxAudioChannels int32) DynamicHlsServiceAPIGetAudioByIdMainM3u8Request {
	r.maxAudioChannels = &maxAudioChannels
	return r
}

// Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false
func (r DynamicHlsServiceAPIGetAudioByIdMainM3u8Request) Static(static bool) DynamicHlsServiceAPIGetAudioByIdMainM3u8Request {
	r.static = &static
	return r
}

// Optional. Specify a specific h264 profile, e.g. main, baseline, high.
func (r DynamicHlsServiceAPIGetAudioByIdMainM3u8Request) Profile(profile string) DynamicHlsServiceAPIGetAudioByIdMainM3u8Request {
	r.profile = &profile
	return r
}

// Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
func (r DynamicHlsServiceAPIGetAudioByIdMainM3u8Request) Level(level string) DynamicHlsServiceAPIGetAudioByIdMainM3u8Request {
	r.level = &level
	return r
}

// Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
func (r DynamicHlsServiceAPIGetAudioByIdMainM3u8Request) Framerate(framerate float32) DynamicHlsServiceAPIGetAudioByIdMainM3u8Request {
	r.framerate = &framerate
	return r
}

// Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
func (r DynamicHlsServiceAPIGetAudioByIdMainM3u8Request) MaxFramerate(maxFramerate float32) DynamicHlsServiceAPIGetAudioByIdMainM3u8Request {
	r.maxFramerate = &maxFramerate
	return r
}

// Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
func (r DynamicHlsServiceAPIGetAudioByIdMainM3u8Request) CopyTimestamps(copyTimestamps bool) DynamicHlsServiceAPIGetAudioByIdMainM3u8Request {
	r.copyTimestamps = &copyTimestamps
	return r
}

// Optional. Specify a starting offset, in ticks. 1ms &#x3D; 10000 ticks.
func (r DynamicHlsServiceAPIGetAudioByIdMainM3u8Request) StartTimeTicks(startTimeTicks int64) DynamicHlsServiceAPIGetAudioByIdMainM3u8Request {
	r.startTimeTicks = &startTimeTicks
	return r
}

// Optional. The fixed horizontal resolution of the encoded video.
func (r DynamicHlsServiceAPIGetAudioByIdMainM3u8Request) Width(width int32) DynamicHlsServiceAPIGetAudioByIdMainM3u8Request {
	r.width = &width
	return r
}

// Optional. The fixed vertical resolution of the encoded video.
func (r DynamicHlsServiceAPIGetAudioByIdMainM3u8Request) Height(height int32) DynamicHlsServiceAPIGetAudioByIdMainM3u8Request {
	r.height = &height
	return r
}

// Optional. The maximum horizontal resolution of the encoded video.
func (r DynamicHlsServiceAPIGetAudioByIdMainM3u8Request) MaxWidth(maxWidth int32) DynamicHlsServiceAPIGetAudioByIdMainM3u8Request {
	r.maxWidth = &maxWidth
	return r
}

// Optional. The maximum vertical resolution of the encoded video.
func (r DynamicHlsServiceAPIGetAudioByIdMainM3u8Request) MaxHeight(maxHeight int32) DynamicHlsServiceAPIGetAudioByIdMainM3u8Request {
	r.maxHeight = &maxHeight
	return r
}

// Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
func (r DynamicHlsServiceAPIGetAudioByIdMainM3u8Request) VideoBitRate(videoBitRate int32) DynamicHlsServiceAPIGetAudioByIdMainM3u8Request {
	r.videoBitRate = &videoBitRate
	return r
}

// Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
func (r DynamicHlsServiceAPIGetAudioByIdMainM3u8Request) SubtitleStreamIndex(subtitleStreamIndex int32) DynamicHlsServiceAPIGetAudioByIdMainM3u8Request {
	r.subtitleStreamIndex = &subtitleStreamIndex
	return r
}

// Optional. Specify the subtitle delivery method.
func (r DynamicHlsServiceAPIGetAudioByIdMainM3u8Request) SubtitleMethod(subtitleMethod ModelSubtitleDeliveryMethod) DynamicHlsServiceAPIGetAudioByIdMainM3u8Request {
	r.subtitleMethod = &subtitleMethod
	return r
}

// Optional.
func (r DynamicHlsServiceAPIGetAudioByIdMainM3u8Request) MaxRefFrames(maxRefFrames int32) DynamicHlsServiceAPIGetAudioByIdMainM3u8Request {
	r.maxRefFrames = &maxRefFrames
	return r
}

// Optional.
func (r DynamicHlsServiceAPIGetAudioByIdMainM3u8Request) MaxVideoBitDepth(maxVideoBitDepth int32) DynamicHlsServiceAPIGetAudioByIdMainM3u8Request {
	r.maxVideoBitDepth = &maxVideoBitDepth
	return r
}

// Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension. Options: h264, mpeg4, theora, vpx, wmv.
func (r DynamicHlsServiceAPIGetAudioByIdMainM3u8Request) VideoCodec(videoCodec string) DynamicHlsServiceAPIGetAudioByIdMainM3u8Request {
	r.videoCodec = &videoCodec
	return r
}

// Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
func (r DynamicHlsServiceAPIGetAudioByIdMainM3u8Request) AudioStreamIndex(audioStreamIndex int32) DynamicHlsServiceAPIGetAudioByIdMainM3u8Request {
	r.audioStreamIndex = &audioStreamIndex
	return r
}

// Optional. The index of the video stream to use. If omitted the first video stream will be used.
func (r DynamicHlsServiceAPIGetAudioByIdMainM3u8Request) VideoStreamIndex(videoStreamIndex int32) DynamicHlsServiceAPIGetAudioByIdMainM3u8Request {
	r.videoStreamIndex = &videoStreamIndex
	return r
}

func (r DynamicHlsServiceAPIGetAudioByIdMainM3u8Request) Execute() (*http.Response, error) {
	return r.ApiService.GetAudioByIdMainM3u8Execute(r)
}

/*
GetAudioByIdMainM3u8 Gets an audio stream using HTTP live streaming.

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Item Id
 @return DynamicHlsServiceAPIGetAudioByIdMainM3u8Request
*/
func (a *DynamicHlsServiceAPIService) GetAudioByIdMainM3u8(ctx context.Context, id string) DynamicHlsServiceAPIGetAudioByIdMainM3u8Request {
	return DynamicHlsServiceAPIGetAudioByIdMainM3u8Request{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *DynamicHlsServiceAPIService) GetAudioByIdMainM3u8Execute(r DynamicHlsServiceAPIGetAudioByIdMainM3u8Request) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DynamicHlsServiceAPIService.GetAudioByIdMainM3u8")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Audio/{Id}/main.m3u8"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.container == nil {
		return nil, reportError("container is required and must be specified")
	}

	if r.deviceProfileId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "DeviceProfileId", r.deviceProfileId, "")
	}
	if r.deviceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "DeviceId", r.deviceId, "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "Container", r.container, "")
	if r.audioCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioCodec", r.audioCodec, "")
	}
	if r.enableAutoStreamCopy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableAutoStreamCopy", r.enableAutoStreamCopy, "")
	}
	if r.audioSampleRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioSampleRate", r.audioSampleRate, "")
	}
	if r.audioBitRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioBitRate", r.audioBitRate, "")
	}
	if r.audioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioChannels", r.audioChannels, "")
	}
	if r.maxAudioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxAudioChannels", r.maxAudioChannels, "")
	}
	if r.static != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Static", r.static, "")
	}
	if r.profile != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Profile", r.profile, "")
	}
	if r.level != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Level", r.level, "")
	}
	if r.framerate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Framerate", r.framerate, "")
	}
	if r.maxFramerate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxFramerate", r.maxFramerate, "")
	}
	if r.copyTimestamps != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "CopyTimestamps", r.copyTimestamps, "")
	}
	if r.startTimeTicks != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "StartTimeTicks", r.startTimeTicks, "")
	}
	if r.width != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Width", r.width, "")
	}
	if r.height != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Height", r.height, "")
	}
	if r.maxWidth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxWidth", r.maxWidth, "")
	}
	if r.maxHeight != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxHeight", r.maxHeight, "")
	}
	if r.videoBitRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoBitRate", r.videoBitRate, "")
	}
	if r.subtitleStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SubtitleStreamIndex", r.subtitleStreamIndex, "")
	}
	if r.subtitleMethod != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SubtitleMethod", r.subtitleMethod, "")
	}
	if r.maxRefFrames != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxRefFrames", r.maxRefFrames, "")
	}
	if r.maxVideoBitDepth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxVideoBitDepth", r.maxVideoBitDepth, "")
	}
	if r.videoCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoCodec", r.videoCodec, "")
	}
	if r.audioStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioStreamIndex", r.audioStreamIndex, "")
	}
	if r.videoStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoStreamIndex", r.videoStreamIndex, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type DynamicHlsServiceAPIGetAudioByIdMasterM3u8Request struct {
	ctx context.Context
	ApiService *DynamicHlsServiceAPIService
	id string
	container *string
	deviceProfileId *string
	deviceId *string
	audioCodec *string
	enableAutoStreamCopy *bool
	audioSampleRate *int32
	audioBitRate *int32
	audioChannels *int32
	maxAudioChannels *int32
	static *bool
	profile *string
	level *string
	framerate *float32
	maxFramerate *float32
	copyTimestamps *bool
	startTimeTicks *int64
	width *int32
	height *int32
	maxWidth *int32
	maxHeight *int32
	videoBitRate *int32
	subtitleStreamIndex *int32
	subtitleMethod *ModelSubtitleDeliveryMethod
	maxRefFrames *int32
	maxVideoBitDepth *int32
	videoCodec *string
	audioStreamIndex *int32
	videoStreamIndex *int32
}

// Container
func (r DynamicHlsServiceAPIGetAudioByIdMasterM3u8Request) Container(container string) DynamicHlsServiceAPIGetAudioByIdMasterM3u8Request {
	r.container = &container
	return r
}

// Optional. The dlna device profile id to utilize.
func (r DynamicHlsServiceAPIGetAudioByIdMasterM3u8Request) DeviceProfileId(deviceProfileId string) DynamicHlsServiceAPIGetAudioByIdMasterM3u8Request {
	r.deviceProfileId = &deviceProfileId
	return r
}

// The device id of the client requesting. Used to stop encoding processes when needed.
func (r DynamicHlsServiceAPIGetAudioByIdMasterM3u8Request) DeviceId(deviceId string) DynamicHlsServiceAPIGetAudioByIdMasterM3u8Request {
	r.deviceId = &deviceId
	return r
}

// Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension. Options: aac, mp3, vorbis, wma.
func (r DynamicHlsServiceAPIGetAudioByIdMasterM3u8Request) AudioCodec(audioCodec string) DynamicHlsServiceAPIGetAudioByIdMasterM3u8Request {
	r.audioCodec = &audioCodec
	return r
}

// Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
func (r DynamicHlsServiceAPIGetAudioByIdMasterM3u8Request) EnableAutoStreamCopy(enableAutoStreamCopy bool) DynamicHlsServiceAPIGetAudioByIdMasterM3u8Request {
	r.enableAutoStreamCopy = &enableAutoStreamCopy
	return r
}

// Optional. Specify a specific audio sample rate, e.g. 44100
func (r DynamicHlsServiceAPIGetAudioByIdMasterM3u8Request) AudioSampleRate(audioSampleRate int32) DynamicHlsServiceAPIGetAudioByIdMasterM3u8Request {
	r.audioSampleRate = &audioSampleRate
	return r
}

// Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
func (r DynamicHlsServiceAPIGetAudioByIdMasterM3u8Request) AudioBitRate(audioBitRate int32) DynamicHlsServiceAPIGetAudioByIdMasterM3u8Request {
	r.audioBitRate = &audioBitRate
	return r
}

// Optional. Specify a specific number of audio channels to encode to, e.g. 2
func (r DynamicHlsServiceAPIGetAudioByIdMasterM3u8Request) AudioChannels(audioChannels int32) DynamicHlsServiceAPIGetAudioByIdMasterM3u8Request {
	r.audioChannels = &audioChannels
	return r
}

// Optional. Specify a maximum number of audio channels to encode to, e.g. 2
func (r DynamicHlsServiceAPIGetAudioByIdMasterM3u8Request) MaxAudioChannels(maxAudioChannels int32) DynamicHlsServiceAPIGetAudioByIdMasterM3u8Request {
	r.maxAudioChannels = &maxAudioChannels
	return r
}

// Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false
func (r DynamicHlsServiceAPIGetAudioByIdMasterM3u8Request) Static(static bool) DynamicHlsServiceAPIGetAudioByIdMasterM3u8Request {
	r.static = &static
	return r
}

// Optional. Specify a specific h264 profile, e.g. main, baseline, high.
func (r DynamicHlsServiceAPIGetAudioByIdMasterM3u8Request) Profile(profile string) DynamicHlsServiceAPIGetAudioByIdMasterM3u8Request {
	r.profile = &profile
	return r
}

// Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
func (r DynamicHlsServiceAPIGetAudioByIdMasterM3u8Request) Level(level string) DynamicHlsServiceAPIGetAudioByIdMasterM3u8Request {
	r.level = &level
	return r
}

// Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
func (r DynamicHlsServiceAPIGetAudioByIdMasterM3u8Request) Framerate(framerate float32) DynamicHlsServiceAPIGetAudioByIdMasterM3u8Request {
	r.framerate = &framerate
	return r
}

// Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
func (r DynamicHlsServiceAPIGetAudioByIdMasterM3u8Request) MaxFramerate(maxFramerate float32) DynamicHlsServiceAPIGetAudioByIdMasterM3u8Request {
	r.maxFramerate = &maxFramerate
	return r
}

// Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
func (r DynamicHlsServiceAPIGetAudioByIdMasterM3u8Request) CopyTimestamps(copyTimestamps bool) DynamicHlsServiceAPIGetAudioByIdMasterM3u8Request {
	r.copyTimestamps = &copyTimestamps
	return r
}

// Optional. Specify a starting offset, in ticks. 1ms &#x3D; 10000 ticks.
func (r DynamicHlsServiceAPIGetAudioByIdMasterM3u8Request) StartTimeTicks(startTimeTicks int64) DynamicHlsServiceAPIGetAudioByIdMasterM3u8Request {
	r.startTimeTicks = &startTimeTicks
	return r
}

// Optional. The fixed horizontal resolution of the encoded video.
func (r DynamicHlsServiceAPIGetAudioByIdMasterM3u8Request) Width(width int32) DynamicHlsServiceAPIGetAudioByIdMasterM3u8Request {
	r.width = &width
	return r
}

// Optional. The fixed vertical resolution of the encoded video.
func (r DynamicHlsServiceAPIGetAudioByIdMasterM3u8Request) Height(height int32) DynamicHlsServiceAPIGetAudioByIdMasterM3u8Request {
	r.height = &height
	return r
}

// Optional. The maximum horizontal resolution of the encoded video.
func (r DynamicHlsServiceAPIGetAudioByIdMasterM3u8Request) MaxWidth(maxWidth int32) DynamicHlsServiceAPIGetAudioByIdMasterM3u8Request {
	r.maxWidth = &maxWidth
	return r
}

// Optional. The maximum vertical resolution of the encoded video.
func (r DynamicHlsServiceAPIGetAudioByIdMasterM3u8Request) MaxHeight(maxHeight int32) DynamicHlsServiceAPIGetAudioByIdMasterM3u8Request {
	r.maxHeight = &maxHeight
	return r
}

// Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
func (r DynamicHlsServiceAPIGetAudioByIdMasterM3u8Request) VideoBitRate(videoBitRate int32) DynamicHlsServiceAPIGetAudioByIdMasterM3u8Request {
	r.videoBitRate = &videoBitRate
	return r
}

// Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
func (r DynamicHlsServiceAPIGetAudioByIdMasterM3u8Request) SubtitleStreamIndex(subtitleStreamIndex int32) DynamicHlsServiceAPIGetAudioByIdMasterM3u8Request {
	r.subtitleStreamIndex = &subtitleStreamIndex
	return r
}

// Optional. Specify the subtitle delivery method.
func (r DynamicHlsServiceAPIGetAudioByIdMasterM3u8Request) SubtitleMethod(subtitleMethod ModelSubtitleDeliveryMethod) DynamicHlsServiceAPIGetAudioByIdMasterM3u8Request {
	r.subtitleMethod = &subtitleMethod
	return r
}

// Optional.
func (r DynamicHlsServiceAPIGetAudioByIdMasterM3u8Request) MaxRefFrames(maxRefFrames int32) DynamicHlsServiceAPIGetAudioByIdMasterM3u8Request {
	r.maxRefFrames = &maxRefFrames
	return r
}

// Optional.
func (r DynamicHlsServiceAPIGetAudioByIdMasterM3u8Request) MaxVideoBitDepth(maxVideoBitDepth int32) DynamicHlsServiceAPIGetAudioByIdMasterM3u8Request {
	r.maxVideoBitDepth = &maxVideoBitDepth
	return r
}

// Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension. Options: h264, mpeg4, theora, vpx, wmv.
func (r DynamicHlsServiceAPIGetAudioByIdMasterM3u8Request) VideoCodec(videoCodec string) DynamicHlsServiceAPIGetAudioByIdMasterM3u8Request {
	r.videoCodec = &videoCodec
	return r
}

// Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
func (r DynamicHlsServiceAPIGetAudioByIdMasterM3u8Request) AudioStreamIndex(audioStreamIndex int32) DynamicHlsServiceAPIGetAudioByIdMasterM3u8Request {
	r.audioStreamIndex = &audioStreamIndex
	return r
}

// Optional. The index of the video stream to use. If omitted the first video stream will be used.
func (r DynamicHlsServiceAPIGetAudioByIdMasterM3u8Request) VideoStreamIndex(videoStreamIndex int32) DynamicHlsServiceAPIGetAudioByIdMasterM3u8Request {
	r.videoStreamIndex = &videoStreamIndex
	return r
}

func (r DynamicHlsServiceAPIGetAudioByIdMasterM3u8Request) Execute() (*http.Response, error) {
	return r.ApiService.GetAudioByIdMasterM3u8Execute(r)
}

/*
GetAudioByIdMasterM3u8 Gets an audio stream using HTTP live streaming.

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Item Id
 @return DynamicHlsServiceAPIGetAudioByIdMasterM3u8Request
*/
func (a *DynamicHlsServiceAPIService) GetAudioByIdMasterM3u8(ctx context.Context, id string) DynamicHlsServiceAPIGetAudioByIdMasterM3u8Request {
	return DynamicHlsServiceAPIGetAudioByIdMasterM3u8Request{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *DynamicHlsServiceAPIService) GetAudioByIdMasterM3u8Execute(r DynamicHlsServiceAPIGetAudioByIdMasterM3u8Request) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DynamicHlsServiceAPIService.GetAudioByIdMasterM3u8")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Audio/{Id}/master.m3u8"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.container == nil {
		return nil, reportError("container is required and must be specified")
	}

	if r.deviceProfileId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "DeviceProfileId", r.deviceProfileId, "")
	}
	if r.deviceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "DeviceId", r.deviceId, "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "Container", r.container, "")
	if r.audioCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioCodec", r.audioCodec, "")
	}
	if r.enableAutoStreamCopy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableAutoStreamCopy", r.enableAutoStreamCopy, "")
	}
	if r.audioSampleRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioSampleRate", r.audioSampleRate, "")
	}
	if r.audioBitRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioBitRate", r.audioBitRate, "")
	}
	if r.audioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioChannels", r.audioChannels, "")
	}
	if r.maxAudioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxAudioChannels", r.maxAudioChannels, "")
	}
	if r.static != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Static", r.static, "")
	}
	if r.profile != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Profile", r.profile, "")
	}
	if r.level != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Level", r.level, "")
	}
	if r.framerate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Framerate", r.framerate, "")
	}
	if r.maxFramerate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxFramerate", r.maxFramerate, "")
	}
	if r.copyTimestamps != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "CopyTimestamps", r.copyTimestamps, "")
	}
	if r.startTimeTicks != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "StartTimeTicks", r.startTimeTicks, "")
	}
	if r.width != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Width", r.width, "")
	}
	if r.height != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Height", r.height, "")
	}
	if r.maxWidth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxWidth", r.maxWidth, "")
	}
	if r.maxHeight != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxHeight", r.maxHeight, "")
	}
	if r.videoBitRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoBitRate", r.videoBitRate, "")
	}
	if r.subtitleStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SubtitleStreamIndex", r.subtitleStreamIndex, "")
	}
	if r.subtitleMethod != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SubtitleMethod", r.subtitleMethod, "")
	}
	if r.maxRefFrames != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxRefFrames", r.maxRefFrames, "")
	}
	if r.maxVideoBitDepth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxVideoBitDepth", r.maxVideoBitDepth, "")
	}
	if r.videoCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoCodec", r.videoCodec, "")
	}
	if r.audioStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioStreamIndex", r.audioStreamIndex, "")
	}
	if r.videoStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoStreamIndex", r.videoStreamIndex, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type DynamicHlsServiceAPIGetVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest struct {
	ctx context.Context
	ApiService *DynamicHlsServiceAPIService
	segmentContainer string
	segmentId string
	id string
	playlistId string
}

func (r DynamicHlsServiceAPIGetVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerExecute(r)
}

/*
GetVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainer Method for GetVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainer

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param segmentContainer
 @param segmentId
 @param id
 @param playlistId
 @return DynamicHlsServiceAPIGetVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest
*/
func (a *DynamicHlsServiceAPIService) GetVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainer(ctx context.Context, segmentContainer string, segmentId string, id string, playlistId string) DynamicHlsServiceAPIGetVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	return DynamicHlsServiceAPIGetVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest{
		ApiService: a,
		ctx: ctx,
		segmentContainer: segmentContainer,
		segmentId: segmentId,
		id: id,
		playlistId: playlistId,
	}
}

// Execute executes the request
func (a *DynamicHlsServiceAPIService) GetVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerExecute(r DynamicHlsServiceAPIGetVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DynamicHlsServiceAPIService.GetVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainer")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Videos/{Id}/hls1/{PlaylistId}/{SegmentId}.{SegmentContainer}"
	localVarPath = strings.Replace(localVarPath, "{"+"SegmentContainer"+"}", url.PathEscape(parameterValueToString(r.segmentContainer, "segmentContainer")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"SegmentId"+"}", url.PathEscape(parameterValueToString(r.segmentId, "segmentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"PlaylistId"+"}", url.PathEscape(parameterValueToString(r.playlistId, "playlistId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type DynamicHlsServiceAPIGetVideosByIdLiveSubtitlesM3u8Request struct {
	ctx context.Context
	ApiService *DynamicHlsServiceAPIService
	id string
	subtitleSegmentLength *int32
	manifestSubtitles *string
}

// The subtitle segment length
func (r DynamicHlsServiceAPIGetVideosByIdLiveSubtitlesM3u8Request) SubtitleSegmentLength(subtitleSegmentLength int32) DynamicHlsServiceAPIGetVideosByIdLiveSubtitlesM3u8Request {
	r.subtitleSegmentLength = &subtitleSegmentLength
	return r
}

// The subtitle segment format
func (r DynamicHlsServiceAPIGetVideosByIdLiveSubtitlesM3u8Request) ManifestSubtitles(manifestSubtitles string) DynamicHlsServiceAPIGetVideosByIdLiveSubtitlesM3u8Request {
	r.manifestSubtitles = &manifestSubtitles
	return r
}

func (r DynamicHlsServiceAPIGetVideosByIdLiveSubtitlesM3u8Request) Execute() (*http.Response, error) {
	return r.ApiService.GetVideosByIdLiveSubtitlesM3u8Execute(r)
}

/*
GetVideosByIdLiveSubtitlesM3u8 Gets an HLS subtitle playlist.

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Item Id
 @return DynamicHlsServiceAPIGetVideosByIdLiveSubtitlesM3u8Request
*/
func (a *DynamicHlsServiceAPIService) GetVideosByIdLiveSubtitlesM3u8(ctx context.Context, id string) DynamicHlsServiceAPIGetVideosByIdLiveSubtitlesM3u8Request {
	return DynamicHlsServiceAPIGetVideosByIdLiveSubtitlesM3u8Request{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *DynamicHlsServiceAPIService) GetVideosByIdLiveSubtitlesM3u8Execute(r DynamicHlsServiceAPIGetVideosByIdLiveSubtitlesM3u8Request) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DynamicHlsServiceAPIService.GetVideosByIdLiveSubtitlesM3u8")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Videos/{Id}/live_subtitles.m3u8"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.subtitleSegmentLength == nil {
		return nil, reportError("subtitleSegmentLength is required and must be specified")
	}
	if r.manifestSubtitles == nil {
		return nil, reportError("manifestSubtitles is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "SubtitleSegmentLength", r.subtitleSegmentLength, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "ManifestSubtitles", r.manifestSubtitles, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type DynamicHlsServiceAPIGetVideosByIdMainM3u8Request struct {
	ctx context.Context
	ApiService *DynamicHlsServiceAPIService
	id string
	container *string
	deviceProfileId *string
	deviceId *string
	audioCodec *string
	enableAutoStreamCopy *bool
	audioSampleRate *int32
	audioBitRate *int32
	audioChannels *int32
	maxAudioChannels *int32
	static *bool
	profile *string
	level *string
	framerate *float32
	maxFramerate *float32
	copyTimestamps *bool
	startTimeTicks *int64
	width *int32
	height *int32
	maxWidth *int32
	maxHeight *int32
	videoBitRate *int32
	subtitleStreamIndex *int32
	subtitleMethod *ModelSubtitleDeliveryMethod
	maxRefFrames *int32
	maxVideoBitDepth *int32
	videoCodec *string
	audioStreamIndex *int32
	videoStreamIndex *int32
}

// Container
func (r DynamicHlsServiceAPIGetVideosByIdMainM3u8Request) Container(container string) DynamicHlsServiceAPIGetVideosByIdMainM3u8Request {
	r.container = &container
	return r
}

// Optional. The dlna device profile id to utilize.
func (r DynamicHlsServiceAPIGetVideosByIdMainM3u8Request) DeviceProfileId(deviceProfileId string) DynamicHlsServiceAPIGetVideosByIdMainM3u8Request {
	r.deviceProfileId = &deviceProfileId
	return r
}

// The device id of the client requesting. Used to stop encoding processes when needed.
func (r DynamicHlsServiceAPIGetVideosByIdMainM3u8Request) DeviceId(deviceId string) DynamicHlsServiceAPIGetVideosByIdMainM3u8Request {
	r.deviceId = &deviceId
	return r
}

// Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension. Options: aac, mp3, vorbis, wma.
func (r DynamicHlsServiceAPIGetVideosByIdMainM3u8Request) AudioCodec(audioCodec string) DynamicHlsServiceAPIGetVideosByIdMainM3u8Request {
	r.audioCodec = &audioCodec
	return r
}

// Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
func (r DynamicHlsServiceAPIGetVideosByIdMainM3u8Request) EnableAutoStreamCopy(enableAutoStreamCopy bool) DynamicHlsServiceAPIGetVideosByIdMainM3u8Request {
	r.enableAutoStreamCopy = &enableAutoStreamCopy
	return r
}

// Optional. Specify a specific audio sample rate, e.g. 44100
func (r DynamicHlsServiceAPIGetVideosByIdMainM3u8Request) AudioSampleRate(audioSampleRate int32) DynamicHlsServiceAPIGetVideosByIdMainM3u8Request {
	r.audioSampleRate = &audioSampleRate
	return r
}

// Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
func (r DynamicHlsServiceAPIGetVideosByIdMainM3u8Request) AudioBitRate(audioBitRate int32) DynamicHlsServiceAPIGetVideosByIdMainM3u8Request {
	r.audioBitRate = &audioBitRate
	return r
}

// Optional. Specify a specific number of audio channels to encode to, e.g. 2
func (r DynamicHlsServiceAPIGetVideosByIdMainM3u8Request) AudioChannels(audioChannels int32) DynamicHlsServiceAPIGetVideosByIdMainM3u8Request {
	r.audioChannels = &audioChannels
	return r
}

// Optional. Specify a maximum number of audio channels to encode to, e.g. 2
func (r DynamicHlsServiceAPIGetVideosByIdMainM3u8Request) MaxAudioChannels(maxAudioChannels int32) DynamicHlsServiceAPIGetVideosByIdMainM3u8Request {
	r.maxAudioChannels = &maxAudioChannels
	return r
}

// Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false
func (r DynamicHlsServiceAPIGetVideosByIdMainM3u8Request) Static(static bool) DynamicHlsServiceAPIGetVideosByIdMainM3u8Request {
	r.static = &static
	return r
}

// Optional. Specify a specific h264 profile, e.g. main, baseline, high.
func (r DynamicHlsServiceAPIGetVideosByIdMainM3u8Request) Profile(profile string) DynamicHlsServiceAPIGetVideosByIdMainM3u8Request {
	r.profile = &profile
	return r
}

// Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
func (r DynamicHlsServiceAPIGetVideosByIdMainM3u8Request) Level(level string) DynamicHlsServiceAPIGetVideosByIdMainM3u8Request {
	r.level = &level
	return r
}

// Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
func (r DynamicHlsServiceAPIGetVideosByIdMainM3u8Request) Framerate(framerate float32) DynamicHlsServiceAPIGetVideosByIdMainM3u8Request {
	r.framerate = &framerate
	return r
}

// Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
func (r DynamicHlsServiceAPIGetVideosByIdMainM3u8Request) MaxFramerate(maxFramerate float32) DynamicHlsServiceAPIGetVideosByIdMainM3u8Request {
	r.maxFramerate = &maxFramerate
	return r
}

// Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
func (r DynamicHlsServiceAPIGetVideosByIdMainM3u8Request) CopyTimestamps(copyTimestamps bool) DynamicHlsServiceAPIGetVideosByIdMainM3u8Request {
	r.copyTimestamps = &copyTimestamps
	return r
}

// Optional. Specify a starting offset, in ticks. 1ms &#x3D; 10000 ticks.
func (r DynamicHlsServiceAPIGetVideosByIdMainM3u8Request) StartTimeTicks(startTimeTicks int64) DynamicHlsServiceAPIGetVideosByIdMainM3u8Request {
	r.startTimeTicks = &startTimeTicks
	return r
}

// Optional. The fixed horizontal resolution of the encoded video.
func (r DynamicHlsServiceAPIGetVideosByIdMainM3u8Request) Width(width int32) DynamicHlsServiceAPIGetVideosByIdMainM3u8Request {
	r.width = &width
	return r
}

// Optional. The fixed vertical resolution of the encoded video.
func (r DynamicHlsServiceAPIGetVideosByIdMainM3u8Request) Height(height int32) DynamicHlsServiceAPIGetVideosByIdMainM3u8Request {
	r.height = &height
	return r
}

// Optional. The maximum horizontal resolution of the encoded video.
func (r DynamicHlsServiceAPIGetVideosByIdMainM3u8Request) MaxWidth(maxWidth int32) DynamicHlsServiceAPIGetVideosByIdMainM3u8Request {
	r.maxWidth = &maxWidth
	return r
}

// Optional. The maximum vertical resolution of the encoded video.
func (r DynamicHlsServiceAPIGetVideosByIdMainM3u8Request) MaxHeight(maxHeight int32) DynamicHlsServiceAPIGetVideosByIdMainM3u8Request {
	r.maxHeight = &maxHeight
	return r
}

// Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
func (r DynamicHlsServiceAPIGetVideosByIdMainM3u8Request) VideoBitRate(videoBitRate int32) DynamicHlsServiceAPIGetVideosByIdMainM3u8Request {
	r.videoBitRate = &videoBitRate
	return r
}

// Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
func (r DynamicHlsServiceAPIGetVideosByIdMainM3u8Request) SubtitleStreamIndex(subtitleStreamIndex int32) DynamicHlsServiceAPIGetVideosByIdMainM3u8Request {
	r.subtitleStreamIndex = &subtitleStreamIndex
	return r
}

// Optional. Specify the subtitle delivery method.
func (r DynamicHlsServiceAPIGetVideosByIdMainM3u8Request) SubtitleMethod(subtitleMethod ModelSubtitleDeliveryMethod) DynamicHlsServiceAPIGetVideosByIdMainM3u8Request {
	r.subtitleMethod = &subtitleMethod
	return r
}

// Optional.
func (r DynamicHlsServiceAPIGetVideosByIdMainM3u8Request) MaxRefFrames(maxRefFrames int32) DynamicHlsServiceAPIGetVideosByIdMainM3u8Request {
	r.maxRefFrames = &maxRefFrames
	return r
}

// Optional.
func (r DynamicHlsServiceAPIGetVideosByIdMainM3u8Request) MaxVideoBitDepth(maxVideoBitDepth int32) DynamicHlsServiceAPIGetVideosByIdMainM3u8Request {
	r.maxVideoBitDepth = &maxVideoBitDepth
	return r
}

// Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension. Options: h264, mpeg4, theora, vpx, wmv.
func (r DynamicHlsServiceAPIGetVideosByIdMainM3u8Request) VideoCodec(videoCodec string) DynamicHlsServiceAPIGetVideosByIdMainM3u8Request {
	r.videoCodec = &videoCodec
	return r
}

// Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
func (r DynamicHlsServiceAPIGetVideosByIdMainM3u8Request) AudioStreamIndex(audioStreamIndex int32) DynamicHlsServiceAPIGetVideosByIdMainM3u8Request {
	r.audioStreamIndex = &audioStreamIndex
	return r
}

// Optional. The index of the video stream to use. If omitted the first video stream will be used.
func (r DynamicHlsServiceAPIGetVideosByIdMainM3u8Request) VideoStreamIndex(videoStreamIndex int32) DynamicHlsServiceAPIGetVideosByIdMainM3u8Request {
	r.videoStreamIndex = &videoStreamIndex
	return r
}

func (r DynamicHlsServiceAPIGetVideosByIdMainM3u8Request) Execute() (*http.Response, error) {
	return r.ApiService.GetVideosByIdMainM3u8Execute(r)
}

/*
GetVideosByIdMainM3u8 Gets a video stream using HTTP live streaming.

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Item Id
 @return DynamicHlsServiceAPIGetVideosByIdMainM3u8Request
*/
func (a *DynamicHlsServiceAPIService) GetVideosByIdMainM3u8(ctx context.Context, id string) DynamicHlsServiceAPIGetVideosByIdMainM3u8Request {
	return DynamicHlsServiceAPIGetVideosByIdMainM3u8Request{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *DynamicHlsServiceAPIService) GetVideosByIdMainM3u8Execute(r DynamicHlsServiceAPIGetVideosByIdMainM3u8Request) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DynamicHlsServiceAPIService.GetVideosByIdMainM3u8")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Videos/{Id}/main.m3u8"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.container == nil {
		return nil, reportError("container is required and must be specified")
	}

	if r.deviceProfileId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "DeviceProfileId", r.deviceProfileId, "")
	}
	if r.deviceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "DeviceId", r.deviceId, "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "Container", r.container, "")
	if r.audioCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioCodec", r.audioCodec, "")
	}
	if r.enableAutoStreamCopy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableAutoStreamCopy", r.enableAutoStreamCopy, "")
	}
	if r.audioSampleRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioSampleRate", r.audioSampleRate, "")
	}
	if r.audioBitRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioBitRate", r.audioBitRate, "")
	}
	if r.audioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioChannels", r.audioChannels, "")
	}
	if r.maxAudioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxAudioChannels", r.maxAudioChannels, "")
	}
	if r.static != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Static", r.static, "")
	}
	if r.profile != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Profile", r.profile, "")
	}
	if r.level != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Level", r.level, "")
	}
	if r.framerate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Framerate", r.framerate, "")
	}
	if r.maxFramerate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxFramerate", r.maxFramerate, "")
	}
	if r.copyTimestamps != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "CopyTimestamps", r.copyTimestamps, "")
	}
	if r.startTimeTicks != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "StartTimeTicks", r.startTimeTicks, "")
	}
	if r.width != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Width", r.width, "")
	}
	if r.height != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Height", r.height, "")
	}
	if r.maxWidth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxWidth", r.maxWidth, "")
	}
	if r.maxHeight != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxHeight", r.maxHeight, "")
	}
	if r.videoBitRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoBitRate", r.videoBitRate, "")
	}
	if r.subtitleStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SubtitleStreamIndex", r.subtitleStreamIndex, "")
	}
	if r.subtitleMethod != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SubtitleMethod", r.subtitleMethod, "")
	}
	if r.maxRefFrames != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxRefFrames", r.maxRefFrames, "")
	}
	if r.maxVideoBitDepth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxVideoBitDepth", r.maxVideoBitDepth, "")
	}
	if r.videoCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoCodec", r.videoCodec, "")
	}
	if r.audioStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioStreamIndex", r.audioStreamIndex, "")
	}
	if r.videoStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoStreamIndex", r.videoStreamIndex, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type DynamicHlsServiceAPIGetVideosByIdMasterM3u8Request struct {
	ctx context.Context
	ApiService *DynamicHlsServiceAPIService
	id string
	container *string
	deviceProfileId *string
	deviceId *string
	audioCodec *string
	enableAutoStreamCopy *bool
	audioSampleRate *int32
	audioBitRate *int32
	audioChannels *int32
	maxAudioChannels *int32
	static *bool
	profile *string
	level *string
	framerate *float32
	maxFramerate *float32
	copyTimestamps *bool
	startTimeTicks *int64
	width *int32
	height *int32
	maxWidth *int32
	maxHeight *int32
	videoBitRate *int32
	subtitleStreamIndex *int32
	subtitleMethod *ModelSubtitleDeliveryMethod
	maxRefFrames *int32
	maxVideoBitDepth *int32
	videoCodec *string
	audioStreamIndex *int32
	videoStreamIndex *int32
}

// Container
func (r DynamicHlsServiceAPIGetVideosByIdMasterM3u8Request) Container(container string) DynamicHlsServiceAPIGetVideosByIdMasterM3u8Request {
	r.container = &container
	return r
}

// Optional. The dlna device profile id to utilize.
func (r DynamicHlsServiceAPIGetVideosByIdMasterM3u8Request) DeviceProfileId(deviceProfileId string) DynamicHlsServiceAPIGetVideosByIdMasterM3u8Request {
	r.deviceProfileId = &deviceProfileId
	return r
}

// The device id of the client requesting. Used to stop encoding processes when needed.
func (r DynamicHlsServiceAPIGetVideosByIdMasterM3u8Request) DeviceId(deviceId string) DynamicHlsServiceAPIGetVideosByIdMasterM3u8Request {
	r.deviceId = &deviceId
	return r
}

// Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension. Options: aac, mp3, vorbis, wma.
func (r DynamicHlsServiceAPIGetVideosByIdMasterM3u8Request) AudioCodec(audioCodec string) DynamicHlsServiceAPIGetVideosByIdMasterM3u8Request {
	r.audioCodec = &audioCodec
	return r
}

// Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
func (r DynamicHlsServiceAPIGetVideosByIdMasterM3u8Request) EnableAutoStreamCopy(enableAutoStreamCopy bool) DynamicHlsServiceAPIGetVideosByIdMasterM3u8Request {
	r.enableAutoStreamCopy = &enableAutoStreamCopy
	return r
}

// Optional. Specify a specific audio sample rate, e.g. 44100
func (r DynamicHlsServiceAPIGetVideosByIdMasterM3u8Request) AudioSampleRate(audioSampleRate int32) DynamicHlsServiceAPIGetVideosByIdMasterM3u8Request {
	r.audioSampleRate = &audioSampleRate
	return r
}

// Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
func (r DynamicHlsServiceAPIGetVideosByIdMasterM3u8Request) AudioBitRate(audioBitRate int32) DynamicHlsServiceAPIGetVideosByIdMasterM3u8Request {
	r.audioBitRate = &audioBitRate
	return r
}

// Optional. Specify a specific number of audio channels to encode to, e.g. 2
func (r DynamicHlsServiceAPIGetVideosByIdMasterM3u8Request) AudioChannels(audioChannels int32) DynamicHlsServiceAPIGetVideosByIdMasterM3u8Request {
	r.audioChannels = &audioChannels
	return r
}

// Optional. Specify a maximum number of audio channels to encode to, e.g. 2
func (r DynamicHlsServiceAPIGetVideosByIdMasterM3u8Request) MaxAudioChannels(maxAudioChannels int32) DynamicHlsServiceAPIGetVideosByIdMasterM3u8Request {
	r.maxAudioChannels = &maxAudioChannels
	return r
}

// Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false
func (r DynamicHlsServiceAPIGetVideosByIdMasterM3u8Request) Static(static bool) DynamicHlsServiceAPIGetVideosByIdMasterM3u8Request {
	r.static = &static
	return r
}

// Optional. Specify a specific h264 profile, e.g. main, baseline, high.
func (r DynamicHlsServiceAPIGetVideosByIdMasterM3u8Request) Profile(profile string) DynamicHlsServiceAPIGetVideosByIdMasterM3u8Request {
	r.profile = &profile
	return r
}

// Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
func (r DynamicHlsServiceAPIGetVideosByIdMasterM3u8Request) Level(level string) DynamicHlsServiceAPIGetVideosByIdMasterM3u8Request {
	r.level = &level
	return r
}

// Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
func (r DynamicHlsServiceAPIGetVideosByIdMasterM3u8Request) Framerate(framerate float32) DynamicHlsServiceAPIGetVideosByIdMasterM3u8Request {
	r.framerate = &framerate
	return r
}

// Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
func (r DynamicHlsServiceAPIGetVideosByIdMasterM3u8Request) MaxFramerate(maxFramerate float32) DynamicHlsServiceAPIGetVideosByIdMasterM3u8Request {
	r.maxFramerate = &maxFramerate
	return r
}

// Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
func (r DynamicHlsServiceAPIGetVideosByIdMasterM3u8Request) CopyTimestamps(copyTimestamps bool) DynamicHlsServiceAPIGetVideosByIdMasterM3u8Request {
	r.copyTimestamps = &copyTimestamps
	return r
}

// Optional. Specify a starting offset, in ticks. 1ms &#x3D; 10000 ticks.
func (r DynamicHlsServiceAPIGetVideosByIdMasterM3u8Request) StartTimeTicks(startTimeTicks int64) DynamicHlsServiceAPIGetVideosByIdMasterM3u8Request {
	r.startTimeTicks = &startTimeTicks
	return r
}

// Optional. The fixed horizontal resolution of the encoded video.
func (r DynamicHlsServiceAPIGetVideosByIdMasterM3u8Request) Width(width int32) DynamicHlsServiceAPIGetVideosByIdMasterM3u8Request {
	r.width = &width
	return r
}

// Optional. The fixed vertical resolution of the encoded video.
func (r DynamicHlsServiceAPIGetVideosByIdMasterM3u8Request) Height(height int32) DynamicHlsServiceAPIGetVideosByIdMasterM3u8Request {
	r.height = &height
	return r
}

// Optional. The maximum horizontal resolution of the encoded video.
func (r DynamicHlsServiceAPIGetVideosByIdMasterM3u8Request) MaxWidth(maxWidth int32) DynamicHlsServiceAPIGetVideosByIdMasterM3u8Request {
	r.maxWidth = &maxWidth
	return r
}

// Optional. The maximum vertical resolution of the encoded video.
func (r DynamicHlsServiceAPIGetVideosByIdMasterM3u8Request) MaxHeight(maxHeight int32) DynamicHlsServiceAPIGetVideosByIdMasterM3u8Request {
	r.maxHeight = &maxHeight
	return r
}

// Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
func (r DynamicHlsServiceAPIGetVideosByIdMasterM3u8Request) VideoBitRate(videoBitRate int32) DynamicHlsServiceAPIGetVideosByIdMasterM3u8Request {
	r.videoBitRate = &videoBitRate
	return r
}

// Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
func (r DynamicHlsServiceAPIGetVideosByIdMasterM3u8Request) SubtitleStreamIndex(subtitleStreamIndex int32) DynamicHlsServiceAPIGetVideosByIdMasterM3u8Request {
	r.subtitleStreamIndex = &subtitleStreamIndex
	return r
}

// Optional. Specify the subtitle delivery method.
func (r DynamicHlsServiceAPIGetVideosByIdMasterM3u8Request) SubtitleMethod(subtitleMethod ModelSubtitleDeliveryMethod) DynamicHlsServiceAPIGetVideosByIdMasterM3u8Request {
	r.subtitleMethod = &subtitleMethod
	return r
}

// Optional.
func (r DynamicHlsServiceAPIGetVideosByIdMasterM3u8Request) MaxRefFrames(maxRefFrames int32) DynamicHlsServiceAPIGetVideosByIdMasterM3u8Request {
	r.maxRefFrames = &maxRefFrames
	return r
}

// Optional.
func (r DynamicHlsServiceAPIGetVideosByIdMasterM3u8Request) MaxVideoBitDepth(maxVideoBitDepth int32) DynamicHlsServiceAPIGetVideosByIdMasterM3u8Request {
	r.maxVideoBitDepth = &maxVideoBitDepth
	return r
}

// Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension. Options: h264, mpeg4, theora, vpx, wmv.
func (r DynamicHlsServiceAPIGetVideosByIdMasterM3u8Request) VideoCodec(videoCodec string) DynamicHlsServiceAPIGetVideosByIdMasterM3u8Request {
	r.videoCodec = &videoCodec
	return r
}

// Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
func (r DynamicHlsServiceAPIGetVideosByIdMasterM3u8Request) AudioStreamIndex(audioStreamIndex int32) DynamicHlsServiceAPIGetVideosByIdMasterM3u8Request {
	r.audioStreamIndex = &audioStreamIndex
	return r
}

// Optional. The index of the video stream to use. If omitted the first video stream will be used.
func (r DynamicHlsServiceAPIGetVideosByIdMasterM3u8Request) VideoStreamIndex(videoStreamIndex int32) DynamicHlsServiceAPIGetVideosByIdMasterM3u8Request {
	r.videoStreamIndex = &videoStreamIndex
	return r
}

func (r DynamicHlsServiceAPIGetVideosByIdMasterM3u8Request) Execute() (*http.Response, error) {
	return r.ApiService.GetVideosByIdMasterM3u8Execute(r)
}

/*
GetVideosByIdMasterM3u8 Gets a video stream using HTTP live streaming.

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Item Id
 @return DynamicHlsServiceAPIGetVideosByIdMasterM3u8Request
*/
func (a *DynamicHlsServiceAPIService) GetVideosByIdMasterM3u8(ctx context.Context, id string) DynamicHlsServiceAPIGetVideosByIdMasterM3u8Request {
	return DynamicHlsServiceAPIGetVideosByIdMasterM3u8Request{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *DynamicHlsServiceAPIService) GetVideosByIdMasterM3u8Execute(r DynamicHlsServiceAPIGetVideosByIdMasterM3u8Request) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DynamicHlsServiceAPIService.GetVideosByIdMasterM3u8")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Videos/{Id}/master.m3u8"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.container == nil {
		return nil, reportError("container is required and must be specified")
	}

	if r.deviceProfileId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "DeviceProfileId", r.deviceProfileId, "")
	}
	if r.deviceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "DeviceId", r.deviceId, "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "Container", r.container, "")
	if r.audioCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioCodec", r.audioCodec, "")
	}
	if r.enableAutoStreamCopy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableAutoStreamCopy", r.enableAutoStreamCopy, "")
	}
	if r.audioSampleRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioSampleRate", r.audioSampleRate, "")
	}
	if r.audioBitRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioBitRate", r.audioBitRate, "")
	}
	if r.audioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioChannels", r.audioChannels, "")
	}
	if r.maxAudioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxAudioChannels", r.maxAudioChannels, "")
	}
	if r.static != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Static", r.static, "")
	}
	if r.profile != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Profile", r.profile, "")
	}
	if r.level != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Level", r.level, "")
	}
	if r.framerate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Framerate", r.framerate, "")
	}
	if r.maxFramerate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxFramerate", r.maxFramerate, "")
	}
	if r.copyTimestamps != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "CopyTimestamps", r.copyTimestamps, "")
	}
	if r.startTimeTicks != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "StartTimeTicks", r.startTimeTicks, "")
	}
	if r.width != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Width", r.width, "")
	}
	if r.height != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Height", r.height, "")
	}
	if r.maxWidth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxWidth", r.maxWidth, "")
	}
	if r.maxHeight != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxHeight", r.maxHeight, "")
	}
	if r.videoBitRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoBitRate", r.videoBitRate, "")
	}
	if r.subtitleStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SubtitleStreamIndex", r.subtitleStreamIndex, "")
	}
	if r.subtitleMethod != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SubtitleMethod", r.subtitleMethod, "")
	}
	if r.maxRefFrames != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxRefFrames", r.maxRefFrames, "")
	}
	if r.maxVideoBitDepth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxVideoBitDepth", r.maxVideoBitDepth, "")
	}
	if r.videoCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoCodec", r.videoCodec, "")
	}
	if r.audioStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioStreamIndex", r.audioStreamIndex, "")
	}
	if r.videoStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoStreamIndex", r.videoStreamIndex, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type DynamicHlsServiceAPIGetVideosByIdSubtitlesM3u8Request struct {
	ctx context.Context
	ApiService *DynamicHlsServiceAPIService
	id string
	subtitleSegmentLength *int32
	manifestSubtitles *string
}

// The subtitle segment length
func (r DynamicHlsServiceAPIGetVideosByIdSubtitlesM3u8Request) SubtitleSegmentLength(subtitleSegmentLength int32) DynamicHlsServiceAPIGetVideosByIdSubtitlesM3u8Request {
	r.subtitleSegmentLength = &subtitleSegmentLength
	return r
}

// The subtitle segment format
func (r DynamicHlsServiceAPIGetVideosByIdSubtitlesM3u8Request) ManifestSubtitles(manifestSubtitles string) DynamicHlsServiceAPIGetVideosByIdSubtitlesM3u8Request {
	r.manifestSubtitles = &manifestSubtitles
	return r
}

func (r DynamicHlsServiceAPIGetVideosByIdSubtitlesM3u8Request) Execute() (*http.Response, error) {
	return r.ApiService.GetVideosByIdSubtitlesM3u8Execute(r)
}

/*
GetVideosByIdSubtitlesM3u8 Gets an HLS subtitle playlist.

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Item Id
 @return DynamicHlsServiceAPIGetVideosByIdSubtitlesM3u8Request
*/
func (a *DynamicHlsServiceAPIService) GetVideosByIdSubtitlesM3u8(ctx context.Context, id string) DynamicHlsServiceAPIGetVideosByIdSubtitlesM3u8Request {
	return DynamicHlsServiceAPIGetVideosByIdSubtitlesM3u8Request{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *DynamicHlsServiceAPIService) GetVideosByIdSubtitlesM3u8Execute(r DynamicHlsServiceAPIGetVideosByIdSubtitlesM3u8Request) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DynamicHlsServiceAPIService.GetVideosByIdSubtitlesM3u8")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Videos/{Id}/subtitles.m3u8"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.subtitleSegmentLength == nil {
		return nil, reportError("subtitleSegmentLength is required and must be specified")
	}
	if r.manifestSubtitles == nil {
		return nil, reportError("manifestSubtitles is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "SubtitleSegmentLength", r.subtitleSegmentLength, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "ManifestSubtitles", r.manifestSubtitles, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type DynamicHlsServiceAPIHeadAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest struct {
	ctx context.Context
	ApiService *DynamicHlsServiceAPIService
	segmentContainer string
	segmentId string
	id string
	playlistId string
}

func (r DynamicHlsServiceAPIHeadAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) Execute() (*http.Response, error) {
	return r.ApiService.HeadAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerExecute(r)
}

/*
HeadAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainer Method for HeadAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainer

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param segmentContainer
 @param segmentId
 @param id
 @param playlistId
 @return DynamicHlsServiceAPIHeadAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest
*/
func (a *DynamicHlsServiceAPIService) HeadAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainer(ctx context.Context, segmentContainer string, segmentId string, id string, playlistId string) DynamicHlsServiceAPIHeadAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	return DynamicHlsServiceAPIHeadAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest{
		ApiService: a,
		ctx: ctx,
		segmentContainer: segmentContainer,
		segmentId: segmentId,
		id: id,
		playlistId: playlistId,
	}
}

// Execute executes the request
func (a *DynamicHlsServiceAPIService) HeadAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerExecute(r DynamicHlsServiceAPIHeadAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodHead
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DynamicHlsServiceAPIService.HeadAudioByIdHls1ByPlaylistidBySegmentidBySegmentcontainer")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Audio/{Id}/hls1/{PlaylistId}/{SegmentId}.{SegmentContainer}"
	localVarPath = strings.Replace(localVarPath, "{"+"SegmentContainer"+"}", url.PathEscape(parameterValueToString(r.segmentContainer, "segmentContainer")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"SegmentId"+"}", url.PathEscape(parameterValueToString(r.segmentId, "segmentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"PlaylistId"+"}", url.PathEscape(parameterValueToString(r.playlistId, "playlistId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type DynamicHlsServiceAPIHeadAudioByIdMasterM3u8Request struct {
	ctx context.Context
	ApiService *DynamicHlsServiceAPIService
	id string
	container *string
	deviceProfileId *string
	deviceId *string
	audioCodec *string
	enableAutoStreamCopy *bool
	audioSampleRate *int32
	audioBitRate *int32
	audioChannels *int32
	maxAudioChannels *int32
	static *bool
	profile *string
	level *string
	framerate *float32
	maxFramerate *float32
	copyTimestamps *bool
	startTimeTicks *int64
	width *int32
	height *int32
	maxWidth *int32
	maxHeight *int32
	videoBitRate *int32
	subtitleStreamIndex *int32
	subtitleMethod *ModelSubtitleDeliveryMethod
	maxRefFrames *int32
	maxVideoBitDepth *int32
	videoCodec *string
	audioStreamIndex *int32
	videoStreamIndex *int32
}

// Container
func (r DynamicHlsServiceAPIHeadAudioByIdMasterM3u8Request) Container(container string) DynamicHlsServiceAPIHeadAudioByIdMasterM3u8Request {
	r.container = &container
	return r
}

// Optional. The dlna device profile id to utilize.
func (r DynamicHlsServiceAPIHeadAudioByIdMasterM3u8Request) DeviceProfileId(deviceProfileId string) DynamicHlsServiceAPIHeadAudioByIdMasterM3u8Request {
	r.deviceProfileId = &deviceProfileId
	return r
}

// The device id of the client requesting. Used to stop encoding processes when needed.
func (r DynamicHlsServiceAPIHeadAudioByIdMasterM3u8Request) DeviceId(deviceId string) DynamicHlsServiceAPIHeadAudioByIdMasterM3u8Request {
	r.deviceId = &deviceId
	return r
}

// Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension. Options: aac, mp3, vorbis, wma.
func (r DynamicHlsServiceAPIHeadAudioByIdMasterM3u8Request) AudioCodec(audioCodec string) DynamicHlsServiceAPIHeadAudioByIdMasterM3u8Request {
	r.audioCodec = &audioCodec
	return r
}

// Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
func (r DynamicHlsServiceAPIHeadAudioByIdMasterM3u8Request) EnableAutoStreamCopy(enableAutoStreamCopy bool) DynamicHlsServiceAPIHeadAudioByIdMasterM3u8Request {
	r.enableAutoStreamCopy = &enableAutoStreamCopy
	return r
}

// Optional. Specify a specific audio sample rate, e.g. 44100
func (r DynamicHlsServiceAPIHeadAudioByIdMasterM3u8Request) AudioSampleRate(audioSampleRate int32) DynamicHlsServiceAPIHeadAudioByIdMasterM3u8Request {
	r.audioSampleRate = &audioSampleRate
	return r
}

// Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
func (r DynamicHlsServiceAPIHeadAudioByIdMasterM3u8Request) AudioBitRate(audioBitRate int32) DynamicHlsServiceAPIHeadAudioByIdMasterM3u8Request {
	r.audioBitRate = &audioBitRate
	return r
}

// Optional. Specify a specific number of audio channels to encode to, e.g. 2
func (r DynamicHlsServiceAPIHeadAudioByIdMasterM3u8Request) AudioChannels(audioChannels int32) DynamicHlsServiceAPIHeadAudioByIdMasterM3u8Request {
	r.audioChannels = &audioChannels
	return r
}

// Optional. Specify a maximum number of audio channels to encode to, e.g. 2
func (r DynamicHlsServiceAPIHeadAudioByIdMasterM3u8Request) MaxAudioChannels(maxAudioChannels int32) DynamicHlsServiceAPIHeadAudioByIdMasterM3u8Request {
	r.maxAudioChannels = &maxAudioChannels
	return r
}

// Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false
func (r DynamicHlsServiceAPIHeadAudioByIdMasterM3u8Request) Static(static bool) DynamicHlsServiceAPIHeadAudioByIdMasterM3u8Request {
	r.static = &static
	return r
}

// Optional. Specify a specific h264 profile, e.g. main, baseline, high.
func (r DynamicHlsServiceAPIHeadAudioByIdMasterM3u8Request) Profile(profile string) DynamicHlsServiceAPIHeadAudioByIdMasterM3u8Request {
	r.profile = &profile
	return r
}

// Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
func (r DynamicHlsServiceAPIHeadAudioByIdMasterM3u8Request) Level(level string) DynamicHlsServiceAPIHeadAudioByIdMasterM3u8Request {
	r.level = &level
	return r
}

// Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
func (r DynamicHlsServiceAPIHeadAudioByIdMasterM3u8Request) Framerate(framerate float32) DynamicHlsServiceAPIHeadAudioByIdMasterM3u8Request {
	r.framerate = &framerate
	return r
}

// Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
func (r DynamicHlsServiceAPIHeadAudioByIdMasterM3u8Request) MaxFramerate(maxFramerate float32) DynamicHlsServiceAPIHeadAudioByIdMasterM3u8Request {
	r.maxFramerate = &maxFramerate
	return r
}

// Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
func (r DynamicHlsServiceAPIHeadAudioByIdMasterM3u8Request) CopyTimestamps(copyTimestamps bool) DynamicHlsServiceAPIHeadAudioByIdMasterM3u8Request {
	r.copyTimestamps = &copyTimestamps
	return r
}

// Optional. Specify a starting offset, in ticks. 1ms &#x3D; 10000 ticks.
func (r DynamicHlsServiceAPIHeadAudioByIdMasterM3u8Request) StartTimeTicks(startTimeTicks int64) DynamicHlsServiceAPIHeadAudioByIdMasterM3u8Request {
	r.startTimeTicks = &startTimeTicks
	return r
}

// Optional. The fixed horizontal resolution of the encoded video.
func (r DynamicHlsServiceAPIHeadAudioByIdMasterM3u8Request) Width(width int32) DynamicHlsServiceAPIHeadAudioByIdMasterM3u8Request {
	r.width = &width
	return r
}

// Optional. The fixed vertical resolution of the encoded video.
func (r DynamicHlsServiceAPIHeadAudioByIdMasterM3u8Request) Height(height int32) DynamicHlsServiceAPIHeadAudioByIdMasterM3u8Request {
	r.height = &height
	return r
}

// Optional. The maximum horizontal resolution of the encoded video.
func (r DynamicHlsServiceAPIHeadAudioByIdMasterM3u8Request) MaxWidth(maxWidth int32) DynamicHlsServiceAPIHeadAudioByIdMasterM3u8Request {
	r.maxWidth = &maxWidth
	return r
}

// Optional. The maximum vertical resolution of the encoded video.
func (r DynamicHlsServiceAPIHeadAudioByIdMasterM3u8Request) MaxHeight(maxHeight int32) DynamicHlsServiceAPIHeadAudioByIdMasterM3u8Request {
	r.maxHeight = &maxHeight
	return r
}

// Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
func (r DynamicHlsServiceAPIHeadAudioByIdMasterM3u8Request) VideoBitRate(videoBitRate int32) DynamicHlsServiceAPIHeadAudioByIdMasterM3u8Request {
	r.videoBitRate = &videoBitRate
	return r
}

// Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
func (r DynamicHlsServiceAPIHeadAudioByIdMasterM3u8Request) SubtitleStreamIndex(subtitleStreamIndex int32) DynamicHlsServiceAPIHeadAudioByIdMasterM3u8Request {
	r.subtitleStreamIndex = &subtitleStreamIndex
	return r
}

// Optional. Specify the subtitle delivery method.
func (r DynamicHlsServiceAPIHeadAudioByIdMasterM3u8Request) SubtitleMethod(subtitleMethod ModelSubtitleDeliveryMethod) DynamicHlsServiceAPIHeadAudioByIdMasterM3u8Request {
	r.subtitleMethod = &subtitleMethod
	return r
}

// Optional.
func (r DynamicHlsServiceAPIHeadAudioByIdMasterM3u8Request) MaxRefFrames(maxRefFrames int32) DynamicHlsServiceAPIHeadAudioByIdMasterM3u8Request {
	r.maxRefFrames = &maxRefFrames
	return r
}

// Optional.
func (r DynamicHlsServiceAPIHeadAudioByIdMasterM3u8Request) MaxVideoBitDepth(maxVideoBitDepth int32) DynamicHlsServiceAPIHeadAudioByIdMasterM3u8Request {
	r.maxVideoBitDepth = &maxVideoBitDepth
	return r
}

// Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension. Options: h264, mpeg4, theora, vpx, wmv.
func (r DynamicHlsServiceAPIHeadAudioByIdMasterM3u8Request) VideoCodec(videoCodec string) DynamicHlsServiceAPIHeadAudioByIdMasterM3u8Request {
	r.videoCodec = &videoCodec
	return r
}

// Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
func (r DynamicHlsServiceAPIHeadAudioByIdMasterM3u8Request) AudioStreamIndex(audioStreamIndex int32) DynamicHlsServiceAPIHeadAudioByIdMasterM3u8Request {
	r.audioStreamIndex = &audioStreamIndex
	return r
}

// Optional. The index of the video stream to use. If omitted the first video stream will be used.
func (r DynamicHlsServiceAPIHeadAudioByIdMasterM3u8Request) VideoStreamIndex(videoStreamIndex int32) DynamicHlsServiceAPIHeadAudioByIdMasterM3u8Request {
	r.videoStreamIndex = &videoStreamIndex
	return r
}

func (r DynamicHlsServiceAPIHeadAudioByIdMasterM3u8Request) Execute() (*http.Response, error) {
	return r.ApiService.HeadAudioByIdMasterM3u8Execute(r)
}

/*
HeadAudioByIdMasterM3u8 Gets an audio stream using HTTP live streaming.

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Item Id
 @return DynamicHlsServiceAPIHeadAudioByIdMasterM3u8Request
*/
func (a *DynamicHlsServiceAPIService) HeadAudioByIdMasterM3u8(ctx context.Context, id string) DynamicHlsServiceAPIHeadAudioByIdMasterM3u8Request {
	return DynamicHlsServiceAPIHeadAudioByIdMasterM3u8Request{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *DynamicHlsServiceAPIService) HeadAudioByIdMasterM3u8Execute(r DynamicHlsServiceAPIHeadAudioByIdMasterM3u8Request) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodHead
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DynamicHlsServiceAPIService.HeadAudioByIdMasterM3u8")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Audio/{Id}/master.m3u8"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.container == nil {
		return nil, reportError("container is required and must be specified")
	}

	if r.deviceProfileId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "DeviceProfileId", r.deviceProfileId, "")
	}
	if r.deviceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "DeviceId", r.deviceId, "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "Container", r.container, "")
	if r.audioCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioCodec", r.audioCodec, "")
	}
	if r.enableAutoStreamCopy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableAutoStreamCopy", r.enableAutoStreamCopy, "")
	}
	if r.audioSampleRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioSampleRate", r.audioSampleRate, "")
	}
	if r.audioBitRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioBitRate", r.audioBitRate, "")
	}
	if r.audioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioChannels", r.audioChannels, "")
	}
	if r.maxAudioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxAudioChannels", r.maxAudioChannels, "")
	}
	if r.static != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Static", r.static, "")
	}
	if r.profile != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Profile", r.profile, "")
	}
	if r.level != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Level", r.level, "")
	}
	if r.framerate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Framerate", r.framerate, "")
	}
	if r.maxFramerate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxFramerate", r.maxFramerate, "")
	}
	if r.copyTimestamps != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "CopyTimestamps", r.copyTimestamps, "")
	}
	if r.startTimeTicks != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "StartTimeTicks", r.startTimeTicks, "")
	}
	if r.width != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Width", r.width, "")
	}
	if r.height != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Height", r.height, "")
	}
	if r.maxWidth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxWidth", r.maxWidth, "")
	}
	if r.maxHeight != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxHeight", r.maxHeight, "")
	}
	if r.videoBitRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoBitRate", r.videoBitRate, "")
	}
	if r.subtitleStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SubtitleStreamIndex", r.subtitleStreamIndex, "")
	}
	if r.subtitleMethod != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SubtitleMethod", r.subtitleMethod, "")
	}
	if r.maxRefFrames != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxRefFrames", r.maxRefFrames, "")
	}
	if r.maxVideoBitDepth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxVideoBitDepth", r.maxVideoBitDepth, "")
	}
	if r.videoCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoCodec", r.videoCodec, "")
	}
	if r.audioStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioStreamIndex", r.audioStreamIndex, "")
	}
	if r.videoStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoStreamIndex", r.videoStreamIndex, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type DynamicHlsServiceAPIHeadVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest struct {
	ctx context.Context
	ApiService *DynamicHlsServiceAPIService
	segmentContainer string
	segmentId string
	id string
	playlistId string
}

func (r DynamicHlsServiceAPIHeadVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) Execute() (*http.Response, error) {
	return r.ApiService.HeadVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerExecute(r)
}

/*
HeadVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainer Method for HeadVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainer

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param segmentContainer
 @param segmentId
 @param id
 @param playlistId
 @return DynamicHlsServiceAPIHeadVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest
*/
func (a *DynamicHlsServiceAPIService) HeadVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainer(ctx context.Context, segmentContainer string, segmentId string, id string, playlistId string) DynamicHlsServiceAPIHeadVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest {
	return DynamicHlsServiceAPIHeadVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest{
		ApiService: a,
		ctx: ctx,
		segmentContainer: segmentContainer,
		segmentId: segmentId,
		id: id,
		playlistId: playlistId,
	}
}

// Execute executes the request
func (a *DynamicHlsServiceAPIService) HeadVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerExecute(r DynamicHlsServiceAPIHeadVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainerRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodHead
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DynamicHlsServiceAPIService.HeadVideosByIdHls1ByPlaylistidBySegmentidBySegmentcontainer")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Videos/{Id}/hls1/{PlaylistId}/{SegmentId}.{SegmentContainer}"
	localVarPath = strings.Replace(localVarPath, "{"+"SegmentContainer"+"}", url.PathEscape(parameterValueToString(r.segmentContainer, "segmentContainer")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"SegmentId"+"}", url.PathEscape(parameterValueToString(r.segmentId, "segmentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"PlaylistId"+"}", url.PathEscape(parameterValueToString(r.playlistId, "playlistId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type DynamicHlsServiceAPIHeadVideosByIdMasterM3u8Request struct {
	ctx context.Context
	ApiService *DynamicHlsServiceAPIService
	id string
	container *string
	deviceProfileId *string
	deviceId *string
	audioCodec *string
	enableAutoStreamCopy *bool
	audioSampleRate *int32
	audioBitRate *int32
	audioChannels *int32
	maxAudioChannels *int32
	static *bool
	profile *string
	level *string
	framerate *float32
	maxFramerate *float32
	copyTimestamps *bool
	startTimeTicks *int64
	width *int32
	height *int32
	maxWidth *int32
	maxHeight *int32
	videoBitRate *int32
	subtitleStreamIndex *int32
	subtitleMethod *ModelSubtitleDeliveryMethod
	maxRefFrames *int32
	maxVideoBitDepth *int32
	videoCodec *string
	audioStreamIndex *int32
	videoStreamIndex *int32
}

// Container
func (r DynamicHlsServiceAPIHeadVideosByIdMasterM3u8Request) Container(container string) DynamicHlsServiceAPIHeadVideosByIdMasterM3u8Request {
	r.container = &container
	return r
}

// Optional. The dlna device profile id to utilize.
func (r DynamicHlsServiceAPIHeadVideosByIdMasterM3u8Request) DeviceProfileId(deviceProfileId string) DynamicHlsServiceAPIHeadVideosByIdMasterM3u8Request {
	r.deviceProfileId = &deviceProfileId
	return r
}

// The device id of the client requesting. Used to stop encoding processes when needed.
func (r DynamicHlsServiceAPIHeadVideosByIdMasterM3u8Request) DeviceId(deviceId string) DynamicHlsServiceAPIHeadVideosByIdMasterM3u8Request {
	r.deviceId = &deviceId
	return r
}

// Optional. Specify a audio codec to encode to, e.g. mp3. If omitted the server will auto-select using the url&#39;s extension. Options: aac, mp3, vorbis, wma.
func (r DynamicHlsServiceAPIHeadVideosByIdMasterM3u8Request) AudioCodec(audioCodec string) DynamicHlsServiceAPIHeadVideosByIdMasterM3u8Request {
	r.audioCodec = &audioCodec
	return r
}

// Whether or not to allow automatic stream copy if requested values match the original source. Defaults to true.
func (r DynamicHlsServiceAPIHeadVideosByIdMasterM3u8Request) EnableAutoStreamCopy(enableAutoStreamCopy bool) DynamicHlsServiceAPIHeadVideosByIdMasterM3u8Request {
	r.enableAutoStreamCopy = &enableAutoStreamCopy
	return r
}

// Optional. Specify a specific audio sample rate, e.g. 44100
func (r DynamicHlsServiceAPIHeadVideosByIdMasterM3u8Request) AudioSampleRate(audioSampleRate int32) DynamicHlsServiceAPIHeadVideosByIdMasterM3u8Request {
	r.audioSampleRate = &audioSampleRate
	return r
}

// Optional. Specify an audio bitrate to encode to, e.g. 128000. If omitted this will be left to encoder defaults.
func (r DynamicHlsServiceAPIHeadVideosByIdMasterM3u8Request) AudioBitRate(audioBitRate int32) DynamicHlsServiceAPIHeadVideosByIdMasterM3u8Request {
	r.audioBitRate = &audioBitRate
	return r
}

// Optional. Specify a specific number of audio channels to encode to, e.g. 2
func (r DynamicHlsServiceAPIHeadVideosByIdMasterM3u8Request) AudioChannels(audioChannels int32) DynamicHlsServiceAPIHeadVideosByIdMasterM3u8Request {
	r.audioChannels = &audioChannels
	return r
}

// Optional. Specify a maximum number of audio channels to encode to, e.g. 2
func (r DynamicHlsServiceAPIHeadVideosByIdMasterM3u8Request) MaxAudioChannels(maxAudioChannels int32) DynamicHlsServiceAPIHeadVideosByIdMasterM3u8Request {
	r.maxAudioChannels = &maxAudioChannels
	return r
}

// Optional. If true, the original file will be streamed statically without any encoding. Use either no url extension or the original file extension. true/false
func (r DynamicHlsServiceAPIHeadVideosByIdMasterM3u8Request) Static(static bool) DynamicHlsServiceAPIHeadVideosByIdMasterM3u8Request {
	r.static = &static
	return r
}

// Optional. Specify a specific h264 profile, e.g. main, baseline, high.
func (r DynamicHlsServiceAPIHeadVideosByIdMasterM3u8Request) Profile(profile string) DynamicHlsServiceAPIHeadVideosByIdMasterM3u8Request {
	r.profile = &profile
	return r
}

// Optional. Specify a level for the h264 profile, e.g. 3, 3.1.
func (r DynamicHlsServiceAPIHeadVideosByIdMasterM3u8Request) Level(level string) DynamicHlsServiceAPIHeadVideosByIdMasterM3u8Request {
	r.level = &level
	return r
}

// Optional. A specific video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
func (r DynamicHlsServiceAPIHeadVideosByIdMasterM3u8Request) Framerate(framerate float32) DynamicHlsServiceAPIHeadVideosByIdMasterM3u8Request {
	r.framerate = &framerate
	return r
}

// Optional. A specific maximum video framerate to encode to, e.g. 23.976. Generally this should be omitted unless the device has specific requirements.
func (r DynamicHlsServiceAPIHeadVideosByIdMasterM3u8Request) MaxFramerate(maxFramerate float32) DynamicHlsServiceAPIHeadVideosByIdMasterM3u8Request {
	r.maxFramerate = &maxFramerate
	return r
}

// Whether or not to copy timestamps when transcoding with an offset. Defaults to false.
func (r DynamicHlsServiceAPIHeadVideosByIdMasterM3u8Request) CopyTimestamps(copyTimestamps bool) DynamicHlsServiceAPIHeadVideosByIdMasterM3u8Request {
	r.copyTimestamps = &copyTimestamps
	return r
}

// Optional. Specify a starting offset, in ticks. 1ms &#x3D; 10000 ticks.
func (r DynamicHlsServiceAPIHeadVideosByIdMasterM3u8Request) StartTimeTicks(startTimeTicks int64) DynamicHlsServiceAPIHeadVideosByIdMasterM3u8Request {
	r.startTimeTicks = &startTimeTicks
	return r
}

// Optional. The fixed horizontal resolution of the encoded video.
func (r DynamicHlsServiceAPIHeadVideosByIdMasterM3u8Request) Width(width int32) DynamicHlsServiceAPIHeadVideosByIdMasterM3u8Request {
	r.width = &width
	return r
}

// Optional. The fixed vertical resolution of the encoded video.
func (r DynamicHlsServiceAPIHeadVideosByIdMasterM3u8Request) Height(height int32) DynamicHlsServiceAPIHeadVideosByIdMasterM3u8Request {
	r.height = &height
	return r
}

// Optional. The maximum horizontal resolution of the encoded video.
func (r DynamicHlsServiceAPIHeadVideosByIdMasterM3u8Request) MaxWidth(maxWidth int32) DynamicHlsServiceAPIHeadVideosByIdMasterM3u8Request {
	r.maxWidth = &maxWidth
	return r
}

// Optional. The maximum vertical resolution of the encoded video.
func (r DynamicHlsServiceAPIHeadVideosByIdMasterM3u8Request) MaxHeight(maxHeight int32) DynamicHlsServiceAPIHeadVideosByIdMasterM3u8Request {
	r.maxHeight = &maxHeight
	return r
}

// Optional. Specify a video bitrate to encode to, e.g. 500000. If omitted this will be left to encoder defaults.
func (r DynamicHlsServiceAPIHeadVideosByIdMasterM3u8Request) VideoBitRate(videoBitRate int32) DynamicHlsServiceAPIHeadVideosByIdMasterM3u8Request {
	r.videoBitRate = &videoBitRate
	return r
}

// Optional. The index of the subtitle stream to use. If omitted no subtitles will be used.
func (r DynamicHlsServiceAPIHeadVideosByIdMasterM3u8Request) SubtitleStreamIndex(subtitleStreamIndex int32) DynamicHlsServiceAPIHeadVideosByIdMasterM3u8Request {
	r.subtitleStreamIndex = &subtitleStreamIndex
	return r
}

// Optional. Specify the subtitle delivery method.
func (r DynamicHlsServiceAPIHeadVideosByIdMasterM3u8Request) SubtitleMethod(subtitleMethod ModelSubtitleDeliveryMethod) DynamicHlsServiceAPIHeadVideosByIdMasterM3u8Request {
	r.subtitleMethod = &subtitleMethod
	return r
}

// Optional.
func (r DynamicHlsServiceAPIHeadVideosByIdMasterM3u8Request) MaxRefFrames(maxRefFrames int32) DynamicHlsServiceAPIHeadVideosByIdMasterM3u8Request {
	r.maxRefFrames = &maxRefFrames
	return r
}

// Optional.
func (r DynamicHlsServiceAPIHeadVideosByIdMasterM3u8Request) MaxVideoBitDepth(maxVideoBitDepth int32) DynamicHlsServiceAPIHeadVideosByIdMasterM3u8Request {
	r.maxVideoBitDepth = &maxVideoBitDepth
	return r
}

// Optional. Specify a video codec to encode to, e.g. h264. If omitted the server will auto-select using the url&#39;s extension. Options: h264, mpeg4, theora, vpx, wmv.
func (r DynamicHlsServiceAPIHeadVideosByIdMasterM3u8Request) VideoCodec(videoCodec string) DynamicHlsServiceAPIHeadVideosByIdMasterM3u8Request {
	r.videoCodec = &videoCodec
	return r
}

// Optional. The index of the audio stream to use. If omitted the first audio stream will be used.
func (r DynamicHlsServiceAPIHeadVideosByIdMasterM3u8Request) AudioStreamIndex(audioStreamIndex int32) DynamicHlsServiceAPIHeadVideosByIdMasterM3u8Request {
	r.audioStreamIndex = &audioStreamIndex
	return r
}

// Optional. The index of the video stream to use. If omitted the first video stream will be used.
func (r DynamicHlsServiceAPIHeadVideosByIdMasterM3u8Request) VideoStreamIndex(videoStreamIndex int32) DynamicHlsServiceAPIHeadVideosByIdMasterM3u8Request {
	r.videoStreamIndex = &videoStreamIndex
	return r
}

func (r DynamicHlsServiceAPIHeadVideosByIdMasterM3u8Request) Execute() (*http.Response, error) {
	return r.ApiService.HeadVideosByIdMasterM3u8Execute(r)
}

/*
HeadVideosByIdMasterM3u8 Gets a video stream using HTTP live streaming.

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Item Id
 @return DynamicHlsServiceAPIHeadVideosByIdMasterM3u8Request
*/
func (a *DynamicHlsServiceAPIService) HeadVideosByIdMasterM3u8(ctx context.Context, id string) DynamicHlsServiceAPIHeadVideosByIdMasterM3u8Request {
	return DynamicHlsServiceAPIHeadVideosByIdMasterM3u8Request{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *DynamicHlsServiceAPIService) HeadVideosByIdMasterM3u8Execute(r DynamicHlsServiceAPIHeadVideosByIdMasterM3u8Request) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodHead
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DynamicHlsServiceAPIService.HeadVideosByIdMasterM3u8")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Videos/{Id}/master.m3u8"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.container == nil {
		return nil, reportError("container is required and must be specified")
	}

	if r.deviceProfileId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "DeviceProfileId", r.deviceProfileId, "")
	}
	if r.deviceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "DeviceId", r.deviceId, "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "Container", r.container, "")
	if r.audioCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioCodec", r.audioCodec, "")
	}
	if r.enableAutoStreamCopy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableAutoStreamCopy", r.enableAutoStreamCopy, "")
	}
	if r.audioSampleRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioSampleRate", r.audioSampleRate, "")
	}
	if r.audioBitRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioBitRate", r.audioBitRate, "")
	}
	if r.audioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioChannels", r.audioChannels, "")
	}
	if r.maxAudioChannels != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxAudioChannels", r.maxAudioChannels, "")
	}
	if r.static != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Static", r.static, "")
	}
	if r.profile != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Profile", r.profile, "")
	}
	if r.level != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Level", r.level, "")
	}
	if r.framerate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Framerate", r.framerate, "")
	}
	if r.maxFramerate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxFramerate", r.maxFramerate, "")
	}
	if r.copyTimestamps != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "CopyTimestamps", r.copyTimestamps, "")
	}
	if r.startTimeTicks != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "StartTimeTicks", r.startTimeTicks, "")
	}
	if r.width != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Width", r.width, "")
	}
	if r.height != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Height", r.height, "")
	}
	if r.maxWidth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxWidth", r.maxWidth, "")
	}
	if r.maxHeight != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxHeight", r.maxHeight, "")
	}
	if r.videoBitRate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoBitRate", r.videoBitRate, "")
	}
	if r.subtitleStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SubtitleStreamIndex", r.subtitleStreamIndex, "")
	}
	if r.subtitleMethod != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "SubtitleMethod", r.subtitleMethod, "")
	}
	if r.maxRefFrames != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxRefFrames", r.maxRefFrames, "")
	}
	if r.maxVideoBitDepth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MaxVideoBitDepth", r.maxVideoBitDepth, "")
	}
	if r.videoCodec != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoCodec", r.videoCodec, "")
	}
	if r.audioStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AudioStreamIndex", r.audioStreamIndex, "")
	}
	if r.videoStreamIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "VideoStreamIndex", r.videoStreamIndex, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
