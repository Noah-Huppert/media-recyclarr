/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"os"
)


// CodecParameterServiceAPIService CodecParameterServiceAPI service
type CodecParameterServiceAPIService service

type CodecParameterServiceAPIGetEncodingCodecparametersRequest struct {
	ctx context.Context
	ApiService *CodecParameterServiceAPIService
	codecId *string
	parameterContext *ModelMediaEncodingCodecParameterContext
}

// Codec Id
func (r CodecParameterServiceAPIGetEncodingCodecparametersRequest) CodecId(codecId string) CodecParameterServiceAPIGetEncodingCodecparametersRequest {
	r.codecId = &codecId
	return r
}

// Parameter Context
func (r CodecParameterServiceAPIGetEncodingCodecparametersRequest) ParameterContext(parameterContext ModelMediaEncodingCodecParameterContext) CodecParameterServiceAPIGetEncodingCodecparametersRequest {
	r.parameterContext = &parameterContext
	return r
}

func (r CodecParameterServiceAPIGetEncodingCodecparametersRequest) Execute() (*ModelEditObjectContainer, *http.Response, error) {
	return r.ApiService.GetEncodingCodecparametersExecute(r)
}

/*
GetEncodingCodecparameters Gets the parameters for a specified codec.

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return CodecParameterServiceAPIGetEncodingCodecparametersRequest
*/
func (a *CodecParameterServiceAPIService) GetEncodingCodecparameters(ctx context.Context) CodecParameterServiceAPIGetEncodingCodecparametersRequest {
	return CodecParameterServiceAPIGetEncodingCodecparametersRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ModelEditObjectContainer
func (a *CodecParameterServiceAPIService) GetEncodingCodecparametersExecute(r CodecParameterServiceAPIGetEncodingCodecparametersRequest) (*ModelEditObjectContainer, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ModelEditObjectContainer
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CodecParameterServiceAPIService.GetEncodingCodecparameters")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Encoding/CodecParameters"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.codecId == nil {
		return localVarReturnValue, nil, reportError("codecId is required and must be specified")
	}
	if r.parameterContext == nil {
		return localVarReturnValue, nil, reportError("parameterContext is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "CodecId", r.codecId, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "ParameterContext", r.parameterContext, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type CodecParameterServiceAPIPostEncodingCodecparametersRequest struct {
	ctx context.Context
	ApiService *CodecParameterServiceAPIService
	codecId *string
	parameterContext *ModelMediaEncodingCodecParameterContext
	body *os.File
}

// Codec Id
func (r CodecParameterServiceAPIPostEncodingCodecparametersRequest) CodecId(codecId string) CodecParameterServiceAPIPostEncodingCodecparametersRequest {
	r.codecId = &codecId
	return r
}

// Parameter Context
func (r CodecParameterServiceAPIPostEncodingCodecparametersRequest) ParameterContext(parameterContext ModelMediaEncodingCodecParameterContext) CodecParameterServiceAPIPostEncodingCodecparametersRequest {
	r.parameterContext = &parameterContext
	return r
}

// Binary stream
func (r CodecParameterServiceAPIPostEncodingCodecparametersRequest) Body(body *os.File) CodecParameterServiceAPIPostEncodingCodecparametersRequest {
	r.body = body
	return r
}

func (r CodecParameterServiceAPIPostEncodingCodecparametersRequest) Execute() (*http.Response, error) {
	return r.ApiService.PostEncodingCodecparametersExecute(r)
}

/*
PostEncodingCodecparameters Updates the parameters for a specified codec.

Requires authentication as administrator

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return CodecParameterServiceAPIPostEncodingCodecparametersRequest
*/
func (a *CodecParameterServiceAPIService) PostEncodingCodecparameters(ctx context.Context) CodecParameterServiceAPIPostEncodingCodecparametersRequest {
	return CodecParameterServiceAPIPostEncodingCodecparametersRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *CodecParameterServiceAPIService) PostEncodingCodecparametersExecute(r CodecParameterServiceAPIPostEncodingCodecparametersRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CodecParameterServiceAPIService.PostEncodingCodecparameters")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Encoding/CodecParameters"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.codecId == nil {
		return nil, reportError("codecId is required and must be specified")
	}
	if r.parameterContext == nil {
		return nil, reportError("parameterContext is required and must be specified")
	}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "CodecId", r.codecId, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "ParameterContext", r.parameterContext, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/octet-stream"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
