/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"encoding/json"
	"fmt"
)

// ModelCodecKinds the model 'ModelCodecKinds'
type ModelCodecKinds string

// List of CodecKinds
const (
	MODELCODECKINDS_AUDIO ModelCodecKinds = "Audio"
	MODELCODECKINDS_VIDEO ModelCodecKinds = "Video"
	MODELCODECKINDS_SUB_TITLES ModelCodecKinds = "SubTitles"
)

// All allowed values of ModelCodecKinds enum
var AllowedModelCodecKindsEnumValues = []ModelCodecKinds{
	"Audio",
	"Video",
	"SubTitles",
}

func (v *ModelCodecKinds) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ModelCodecKinds(value)
	for _, existing := range AllowedModelCodecKindsEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ModelCodecKinds", value)
}

// NewModelCodecKindsFromValue returns a pointer to a valid ModelCodecKinds
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewModelCodecKindsFromValue(v string) (*ModelCodecKinds, error) {
	ev := ModelCodecKinds(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ModelCodecKinds: valid values are %v", v, AllowedModelCodecKindsEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ModelCodecKinds) IsValid() bool {
	for _, existing := range AllowedModelCodecKindsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CodecKinds value
func (v ModelCodecKinds) Ptr() *ModelCodecKinds {
	return &v
}

type NullableModelCodecKinds struct {
	value *ModelCodecKinds
	isSet bool
}

func (v NullableModelCodecKinds) Get() *ModelCodecKinds {
	return v.value
}

func (v *NullableModelCodecKinds) Set(val *ModelCodecKinds) {
	v.value = val
	v.isSet = true
}

func (v NullableModelCodecKinds) IsSet() bool {
	return v.isSet
}

func (v *NullableModelCodecKinds) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelCodecKinds(val *ModelCodecKinds) *NullableModelCodecKinds {
	return &NullableModelCodecKinds{value: val, isSet: true}
}

func (v NullableModelCodecKinds) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelCodecKinds) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

