/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// MoviesServiceAPIService MoviesServiceAPI service
type MoviesServiceAPIService service

type MoviesServiceAPIGetMoviesRecommendationsRequest struct {
	ctx context.Context
	ApiService *MoviesServiceAPIService
	categoryLimit *int32
	itemLimit *int32
	userId *string
	parentId *string
	enableImages *bool
	enableUserData *bool
	imageTypeLimit *int32
	enableImageTypes *string
}

// The max number of categories to return
func (r MoviesServiceAPIGetMoviesRecommendationsRequest) CategoryLimit(categoryLimit int32) MoviesServiceAPIGetMoviesRecommendationsRequest {
	r.categoryLimit = &categoryLimit
	return r
}

// The max number of items to return per category
func (r MoviesServiceAPIGetMoviesRecommendationsRequest) ItemLimit(itemLimit int32) MoviesServiceAPIGetMoviesRecommendationsRequest {
	r.itemLimit = &itemLimit
	return r
}

// Optional. Filter by user id, and attach user data
func (r MoviesServiceAPIGetMoviesRecommendationsRequest) UserId(userId string) MoviesServiceAPIGetMoviesRecommendationsRequest {
	r.userId = &userId
	return r
}

// Specify this to localize the search to a specific item or folder. Omit to use the root
func (r MoviesServiceAPIGetMoviesRecommendationsRequest) ParentId(parentId string) MoviesServiceAPIGetMoviesRecommendationsRequest {
	r.parentId = &parentId
	return r
}

// Optional, include image information in output
func (r MoviesServiceAPIGetMoviesRecommendationsRequest) EnableImages(enableImages bool) MoviesServiceAPIGetMoviesRecommendationsRequest {
	r.enableImages = &enableImages
	return r
}

// Optional, include user data
func (r MoviesServiceAPIGetMoviesRecommendationsRequest) EnableUserData(enableUserData bool) MoviesServiceAPIGetMoviesRecommendationsRequest {
	r.enableUserData = &enableUserData
	return r
}

// Optional, the max number of images to return, per image type
func (r MoviesServiceAPIGetMoviesRecommendationsRequest) ImageTypeLimit(imageTypeLimit int32) MoviesServiceAPIGetMoviesRecommendationsRequest {
	r.imageTypeLimit = &imageTypeLimit
	return r
}

// Optional. The image types to include in the output.
func (r MoviesServiceAPIGetMoviesRecommendationsRequest) EnableImageTypes(enableImageTypes string) MoviesServiceAPIGetMoviesRecommendationsRequest {
	r.enableImageTypes = &enableImageTypes
	return r
}

func (r MoviesServiceAPIGetMoviesRecommendationsRequest) Execute() ([]ModelRecommendationDto, *http.Response, error) {
	return r.ApiService.GetMoviesRecommendationsExecute(r)
}

/*
GetMoviesRecommendations Gets movie recommendations

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MoviesServiceAPIGetMoviesRecommendationsRequest
*/
func (a *MoviesServiceAPIService) GetMoviesRecommendations(ctx context.Context) MoviesServiceAPIGetMoviesRecommendationsRequest {
	return MoviesServiceAPIGetMoviesRecommendationsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ModelRecommendationDto
func (a *MoviesServiceAPIService) GetMoviesRecommendationsExecute(r MoviesServiceAPIGetMoviesRecommendationsRequest) ([]ModelRecommendationDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ModelRecommendationDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MoviesServiceAPIService.GetMoviesRecommendations")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Movies/Recommendations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.categoryLimit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "CategoryLimit", r.categoryLimit, "")
	}
	if r.itemLimit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ItemLimit", r.itemLimit, "")
	}
	if r.userId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "UserId", r.userId, "")
	}
	if r.parentId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ParentId", r.parentId, "")
	}
	if r.enableImages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImages", r.enableImages, "")
	}
	if r.enableUserData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableUserData", r.enableUserData, "")
	}
	if r.imageTypeLimit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ImageTypeLimit", r.imageTypeLimit, "")
	}
	if r.enableImageTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImageTypes", r.enableImageTypes, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
