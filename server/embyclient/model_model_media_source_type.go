/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"encoding/json"
	"fmt"
)

// ModelMediaSourceType the model 'ModelMediaSourceType'
type ModelMediaSourceType string

// List of MediaSourceType
const (
	MODELMEDIASOURCETYPE_DEFAULT ModelMediaSourceType = "Default"
	MODELMEDIASOURCETYPE_GROUPING ModelMediaSourceType = "Grouping"
	MODELMEDIASOURCETYPE_PLACEHOLDER ModelMediaSourceType = "Placeholder"
)

// All allowed values of ModelMediaSourceType enum
var AllowedModelMediaSourceTypeEnumValues = []ModelMediaSourceType{
	"Default",
	"Grouping",
	"Placeholder",
}

func (v *ModelMediaSourceType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ModelMediaSourceType(value)
	for _, existing := range AllowedModelMediaSourceTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ModelMediaSourceType", value)
}

// NewModelMediaSourceTypeFromValue returns a pointer to a valid ModelMediaSourceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewModelMediaSourceTypeFromValue(v string) (*ModelMediaSourceType, error) {
	ev := ModelMediaSourceType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ModelMediaSourceType: valid values are %v", v, AllowedModelMediaSourceTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ModelMediaSourceType) IsValid() bool {
	for _, existing := range AllowedModelMediaSourceTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MediaSourceType value
func (v ModelMediaSourceType) Ptr() *ModelMediaSourceType {
	return &v
}

type NullableModelMediaSourceType struct {
	value *ModelMediaSourceType
	isSet bool
}

func (v NullableModelMediaSourceType) Get() *ModelMediaSourceType {
	return v.value
}

func (v *NullableModelMediaSourceType) Set(val *ModelMediaSourceType) {
	v.value = val
	v.isSet = true
}

func (v NullableModelMediaSourceType) IsSet() bool {
	return v.isSet
}

func (v *NullableModelMediaSourceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelMediaSourceType(val *ModelMediaSourceType) *NullableModelMediaSourceType {
	return &NullableModelMediaSourceType{value: val, isSet: true}
}

func (v NullableModelMediaSourceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelMediaSourceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

