/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"encoding/json"
	"fmt"
)

// ModelDayOfWeek the model 'ModelDayOfWeek'
type ModelDayOfWeek string

// List of DayOfWeek
const (
	MODELDAYOFWEEK_SUNDAY ModelDayOfWeek = "Sunday"
	MODELDAYOFWEEK_MONDAY ModelDayOfWeek = "Monday"
	MODELDAYOFWEEK_TUESDAY ModelDayOfWeek = "Tuesday"
	MODELDAYOFWEEK_WEDNESDAY ModelDayOfWeek = "Wednesday"
	MODELDAYOFWEEK_THURSDAY ModelDayOfWeek = "Thursday"
	MODELDAYOFWEEK_FRIDAY ModelDayOfWeek = "Friday"
	MODELDAYOFWEEK_SATURDAY ModelDayOfWeek = "Saturday"
)

// All allowed values of ModelDayOfWeek enum
var AllowedModelDayOfWeekEnumValues = []ModelDayOfWeek{
	"Sunday",
	"Monday",
	"Tuesday",
	"Wednesday",
	"Thursday",
	"Friday",
	"Saturday",
}

func (v *ModelDayOfWeek) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ModelDayOfWeek(value)
	for _, existing := range AllowedModelDayOfWeekEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ModelDayOfWeek", value)
}

// NewModelDayOfWeekFromValue returns a pointer to a valid ModelDayOfWeek
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewModelDayOfWeekFromValue(v string) (*ModelDayOfWeek, error) {
	ev := ModelDayOfWeek(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ModelDayOfWeek: valid values are %v", v, AllowedModelDayOfWeekEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ModelDayOfWeek) IsValid() bool {
	for _, existing := range AllowedModelDayOfWeekEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DayOfWeek value
func (v ModelDayOfWeek) Ptr() *ModelDayOfWeek {
	return &v
}

type NullableModelDayOfWeek struct {
	value *ModelDayOfWeek
	isSet bool
}

func (v NullableModelDayOfWeek) Get() *ModelDayOfWeek {
	return v.value
}

func (v *NullableModelDayOfWeek) Set(val *ModelDayOfWeek) {
	v.value = val
	v.isSet = true
}

func (v NullableModelDayOfWeek) IsSet() bool {
	return v.isSet
}

func (v *NullableModelDayOfWeek) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelDayOfWeek(val *ModelDayOfWeek) *NullableModelDayOfWeek {
	return &NullableModelDayOfWeek{value: val, isSet: true}
}

func (v NullableModelDayOfWeek) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelDayOfWeek) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

