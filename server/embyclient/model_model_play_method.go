/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"encoding/json"
	"fmt"
)

// ModelPlayMethod the model 'ModelPlayMethod'
type ModelPlayMethod string

// List of PlayMethod
const (
	MODELPLAYMETHOD_TRANSCODE ModelPlayMethod = "Transcode"
	MODELPLAYMETHOD_DIRECT_STREAM ModelPlayMethod = "DirectStream"
	MODELPLAYMETHOD_DIRECT_PLAY ModelPlayMethod = "DirectPlay"
)

// All allowed values of ModelPlayMethod enum
var AllowedModelPlayMethodEnumValues = []ModelPlayMethod{
	"Transcode",
	"DirectStream",
	"DirectPlay",
}

func (v *ModelPlayMethod) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ModelPlayMethod(value)
	for _, existing := range AllowedModelPlayMethodEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ModelPlayMethod", value)
}

// NewModelPlayMethodFromValue returns a pointer to a valid ModelPlayMethod
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewModelPlayMethodFromValue(v string) (*ModelPlayMethod, error) {
	ev := ModelPlayMethod(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ModelPlayMethod: valid values are %v", v, AllowedModelPlayMethodEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ModelPlayMethod) IsValid() bool {
	for _, existing := range AllowedModelPlayMethodEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PlayMethod value
func (v ModelPlayMethod) Ptr() *ModelPlayMethod {
	return &v
}

type NullableModelPlayMethod struct {
	value *ModelPlayMethod
	isSet bool
}

func (v NullableModelPlayMethod) Get() *ModelPlayMethod {
	return v.value
}

func (v *NullableModelPlayMethod) Set(val *ModelPlayMethod) {
	v.value = val
	v.isSet = true
}

func (v NullableModelPlayMethod) IsSet() bool {
	return v.isSet
}

func (v *NullableModelPlayMethod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelPlayMethod(val *ModelPlayMethod) *NullableModelPlayMethod {
	return &NullableModelPlayMethod{value: val, isSet: true}
}

func (v NullableModelPlayMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelPlayMethod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

