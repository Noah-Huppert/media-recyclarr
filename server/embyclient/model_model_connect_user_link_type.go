/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"encoding/json"
	"fmt"
)

// ModelConnectUserLinkType the model 'ModelConnectUserLinkType'
type ModelConnectUserLinkType string

// List of Connect.UserLinkType
const (
	MODELCONNECTUSERLINKTYPE_LINKED_USER ModelConnectUserLinkType = "LinkedUser"
	MODELCONNECTUSERLINKTYPE_GUEST ModelConnectUserLinkType = "Guest"
)

// All allowed values of ModelConnectUserLinkType enum
var AllowedModelConnectUserLinkTypeEnumValues = []ModelConnectUserLinkType{
	"LinkedUser",
	"Guest",
}

func (v *ModelConnectUserLinkType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ModelConnectUserLinkType(value)
	for _, existing := range AllowedModelConnectUserLinkTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ModelConnectUserLinkType", value)
}

// NewModelConnectUserLinkTypeFromValue returns a pointer to a valid ModelConnectUserLinkType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewModelConnectUserLinkTypeFromValue(v string) (*ModelConnectUserLinkType, error) {
	ev := ModelConnectUserLinkType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ModelConnectUserLinkType: valid values are %v", v, AllowedModelConnectUserLinkTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ModelConnectUserLinkType) IsValid() bool {
	for _, existing := range AllowedModelConnectUserLinkTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Connect.UserLinkType value
func (v ModelConnectUserLinkType) Ptr() *ModelConnectUserLinkType {
	return &v
}

type NullableModelConnectUserLinkType struct {
	value *ModelConnectUserLinkType
	isSet bool
}

func (v NullableModelConnectUserLinkType) Get() *ModelConnectUserLinkType {
	return v.value
}

func (v *NullableModelConnectUserLinkType) Set(val *ModelConnectUserLinkType) {
	v.value = val
	v.isSet = true
}

func (v NullableModelConnectUserLinkType) IsSet() bool {
	return v.isSet
}

func (v *NullableModelConnectUserLinkType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelConnectUserLinkType(val *ModelConnectUserLinkType) *NullableModelConnectUserLinkType {
	return &NullableModelConnectUserLinkType{value: val, isSet: true}
}

func (v NullableModelConnectUserLinkType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelConnectUserLinkType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

