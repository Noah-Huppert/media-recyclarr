/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"encoding/json"
)

// checks if the ModelNotificationCategoryInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelNotificationCategoryInfo{}

// ModelNotificationCategoryInfo struct for ModelNotificationCategoryInfo
type ModelNotificationCategoryInfo struct {
	Name *string `json:"Name,omitempty"`
	Id *string `json:"Id,omitempty"`
	Events []ModelNotificationTypeInfo `json:"Events,omitempty"`
}

// NewModelNotificationCategoryInfo instantiates a new ModelNotificationCategoryInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelNotificationCategoryInfo() *ModelNotificationCategoryInfo {
	this := ModelNotificationCategoryInfo{}
	return &this
}

// NewModelNotificationCategoryInfoWithDefaults instantiates a new ModelNotificationCategoryInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelNotificationCategoryInfoWithDefaults() *ModelNotificationCategoryInfo {
	this := ModelNotificationCategoryInfo{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ModelNotificationCategoryInfo) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelNotificationCategoryInfo) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ModelNotificationCategoryInfo) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ModelNotificationCategoryInfo) SetName(v string) {
	o.Name = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ModelNotificationCategoryInfo) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelNotificationCategoryInfo) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ModelNotificationCategoryInfo) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ModelNotificationCategoryInfo) SetId(v string) {
	o.Id = &v
}

// GetEvents returns the Events field value if set, zero value otherwise.
func (o *ModelNotificationCategoryInfo) GetEvents() []ModelNotificationTypeInfo {
	if o == nil || IsNil(o.Events) {
		var ret []ModelNotificationTypeInfo
		return ret
	}
	return o.Events
}

// GetEventsOk returns a tuple with the Events field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelNotificationCategoryInfo) GetEventsOk() ([]ModelNotificationTypeInfo, bool) {
	if o == nil || IsNil(o.Events) {
		return nil, false
	}
	return o.Events, true
}

// HasEvents returns a boolean if a field has been set.
func (o *ModelNotificationCategoryInfo) HasEvents() bool {
	if o != nil && !IsNil(o.Events) {
		return true
	}

	return false
}

// SetEvents gets a reference to the given []ModelNotificationTypeInfo and assigns it to the Events field.
func (o *ModelNotificationCategoryInfo) SetEvents(v []ModelNotificationTypeInfo) {
	o.Events = v
}

func (o ModelNotificationCategoryInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelNotificationCategoryInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if !IsNil(o.Id) {
		toSerialize["Id"] = o.Id
	}
	if !IsNil(o.Events) {
		toSerialize["Events"] = o.Events
	}
	return toSerialize, nil
}

type NullableModelNotificationCategoryInfo struct {
	value *ModelNotificationCategoryInfo
	isSet bool
}

func (v NullableModelNotificationCategoryInfo) Get() *ModelNotificationCategoryInfo {
	return v.value
}

func (v *NullableModelNotificationCategoryInfo) Set(val *ModelNotificationCategoryInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableModelNotificationCategoryInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableModelNotificationCategoryInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelNotificationCategoryInfo(val *ModelNotificationCategoryInfo) *NullableModelNotificationCategoryInfo {
	return &NullableModelNotificationCategoryInfo{value: val, isSet: true}
}

func (v NullableModelNotificationCategoryInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelNotificationCategoryInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


