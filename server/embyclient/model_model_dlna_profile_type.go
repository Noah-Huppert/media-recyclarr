/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"encoding/json"
	"fmt"
)

// ModelDlnaProfileType the model 'ModelDlnaProfileType'
type ModelDlnaProfileType string

// List of DlnaProfileType
const (
	MODELDLNAPROFILETYPE_AUDIO ModelDlnaProfileType = "Audio"
	MODELDLNAPROFILETYPE_VIDEO ModelDlnaProfileType = "Video"
	MODELDLNAPROFILETYPE_PHOTO ModelDlnaProfileType = "Photo"
)

// All allowed values of ModelDlnaProfileType enum
var AllowedModelDlnaProfileTypeEnumValues = []ModelDlnaProfileType{
	"Audio",
	"Video",
	"Photo",
}

func (v *ModelDlnaProfileType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ModelDlnaProfileType(value)
	for _, existing := range AllowedModelDlnaProfileTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ModelDlnaProfileType", value)
}

// NewModelDlnaProfileTypeFromValue returns a pointer to a valid ModelDlnaProfileType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewModelDlnaProfileTypeFromValue(v string) (*ModelDlnaProfileType, error) {
	ev := ModelDlnaProfileType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ModelDlnaProfileType: valid values are %v", v, AllowedModelDlnaProfileTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ModelDlnaProfileType) IsValid() bool {
	for _, existing := range AllowedModelDlnaProfileTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DlnaProfileType value
func (v ModelDlnaProfileType) Ptr() *ModelDlnaProfileType {
	return &v
}

type NullableModelDlnaProfileType struct {
	value *ModelDlnaProfileType
	isSet bool
}

func (v NullableModelDlnaProfileType) Get() *ModelDlnaProfileType {
	return v.value
}

func (v *NullableModelDlnaProfileType) Set(val *ModelDlnaProfileType) {
	v.value = val
	v.isSet = true
}

func (v NullableModelDlnaProfileType) IsSet() bool {
	return v.isSet
}

func (v *NullableModelDlnaProfileType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelDlnaProfileType(val *ModelDlnaProfileType) *NullableModelDlnaProfileType {
	return &NullableModelDlnaProfileType{value: val, isSet: true}
}

func (v NullableModelDlnaProfileType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelDlnaProfileType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

