/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"encoding/json"
	"fmt"
)

// ModelDlnaProfilesHeaderMatchType the model 'ModelDlnaProfilesHeaderMatchType'
type ModelDlnaProfilesHeaderMatchType string

// List of Dlna.Profiles.HeaderMatchType
const (
	MODELDLNAPROFILESHEADERMATCHTYPE_EQUALS ModelDlnaProfilesHeaderMatchType = "Equals"
	MODELDLNAPROFILESHEADERMATCHTYPE_REGEX ModelDlnaProfilesHeaderMatchType = "Regex"
	MODELDLNAPROFILESHEADERMATCHTYPE_SUBSTRING ModelDlnaProfilesHeaderMatchType = "Substring"
)

// All allowed values of ModelDlnaProfilesHeaderMatchType enum
var AllowedModelDlnaProfilesHeaderMatchTypeEnumValues = []ModelDlnaProfilesHeaderMatchType{
	"Equals",
	"Regex",
	"Substring",
}

func (v *ModelDlnaProfilesHeaderMatchType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ModelDlnaProfilesHeaderMatchType(value)
	for _, existing := range AllowedModelDlnaProfilesHeaderMatchTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ModelDlnaProfilesHeaderMatchType", value)
}

// NewModelDlnaProfilesHeaderMatchTypeFromValue returns a pointer to a valid ModelDlnaProfilesHeaderMatchType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewModelDlnaProfilesHeaderMatchTypeFromValue(v string) (*ModelDlnaProfilesHeaderMatchType, error) {
	ev := ModelDlnaProfilesHeaderMatchType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ModelDlnaProfilesHeaderMatchType: valid values are %v", v, AllowedModelDlnaProfilesHeaderMatchTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ModelDlnaProfilesHeaderMatchType) IsValid() bool {
	for _, existing := range AllowedModelDlnaProfilesHeaderMatchTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Dlna.Profiles.HeaderMatchType value
func (v ModelDlnaProfilesHeaderMatchType) Ptr() *ModelDlnaProfilesHeaderMatchType {
	return &v
}

type NullableModelDlnaProfilesHeaderMatchType struct {
	value *ModelDlnaProfilesHeaderMatchType
	isSet bool
}

func (v NullableModelDlnaProfilesHeaderMatchType) Get() *ModelDlnaProfilesHeaderMatchType {
	return v.value
}

func (v *NullableModelDlnaProfilesHeaderMatchType) Set(val *ModelDlnaProfilesHeaderMatchType) {
	v.value = val
	v.isSet = true
}

func (v NullableModelDlnaProfilesHeaderMatchType) IsSet() bool {
	return v.isSet
}

func (v *NullableModelDlnaProfilesHeaderMatchType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelDlnaProfilesHeaderMatchType(val *ModelDlnaProfilesHeaderMatchType) *NullableModelDlnaProfilesHeaderMatchType {
	return &NullableModelDlnaProfilesHeaderMatchType{value: val, isSet: true}
}

func (v NullableModelDlnaProfilesHeaderMatchType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelDlnaProfilesHeaderMatchType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

