/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"encoding/json"
	"fmt"
)

// ModelLiveTvRecordingStatus the model 'ModelLiveTvRecordingStatus'
type ModelLiveTvRecordingStatus string

// List of LiveTv.RecordingStatus
const (
	MODELLIVETVRECORDINGSTATUS_NEW ModelLiveTvRecordingStatus = "New"
	MODELLIVETVRECORDINGSTATUS_IN_PROGRESS ModelLiveTvRecordingStatus = "InProgress"
	MODELLIVETVRECORDINGSTATUS_COMPLETED ModelLiveTvRecordingStatus = "Completed"
	MODELLIVETVRECORDINGSTATUS_CANCELLED ModelLiveTvRecordingStatus = "Cancelled"
	MODELLIVETVRECORDINGSTATUS_CONFLICTED_OK ModelLiveTvRecordingStatus = "ConflictedOk"
	MODELLIVETVRECORDINGSTATUS_CONFLICTED_NOT_OK ModelLiveTvRecordingStatus = "ConflictedNotOk"
	MODELLIVETVRECORDINGSTATUS_ERROR ModelLiveTvRecordingStatus = "Error"
)

// All allowed values of ModelLiveTvRecordingStatus enum
var AllowedModelLiveTvRecordingStatusEnumValues = []ModelLiveTvRecordingStatus{
	"New",
	"InProgress",
	"Completed",
	"Cancelled",
	"ConflictedOk",
	"ConflictedNotOk",
	"Error",
}

func (v *ModelLiveTvRecordingStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ModelLiveTvRecordingStatus(value)
	for _, existing := range AllowedModelLiveTvRecordingStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ModelLiveTvRecordingStatus", value)
}

// NewModelLiveTvRecordingStatusFromValue returns a pointer to a valid ModelLiveTvRecordingStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewModelLiveTvRecordingStatusFromValue(v string) (*ModelLiveTvRecordingStatus, error) {
	ev := ModelLiveTvRecordingStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ModelLiveTvRecordingStatus: valid values are %v", v, AllowedModelLiveTvRecordingStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ModelLiveTvRecordingStatus) IsValid() bool {
	for _, existing := range AllowedModelLiveTvRecordingStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LiveTv.RecordingStatus value
func (v ModelLiveTvRecordingStatus) Ptr() *ModelLiveTvRecordingStatus {
	return &v
}

type NullableModelLiveTvRecordingStatus struct {
	value *ModelLiveTvRecordingStatus
	isSet bool
}

func (v NullableModelLiveTvRecordingStatus) Get() *ModelLiveTvRecordingStatus {
	return v.value
}

func (v *NullableModelLiveTvRecordingStatus) Set(val *ModelLiveTvRecordingStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableModelLiveTvRecordingStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableModelLiveTvRecordingStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelLiveTvRecordingStatus(val *ModelLiveTvRecordingStatus) *NullableModelLiveTvRecordingStatus {
	return &NullableModelLiveTvRecordingStatus{value: val, isSet: true}
}

func (v NullableModelLiveTvRecordingStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelLiveTvRecordingStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

