/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"encoding/json"
	"fmt"
)

// ModelTaskState the model 'ModelTaskState'
type ModelTaskState string

// List of TaskState
const (
	MODELTASKSTATE_IDLE ModelTaskState = "Idle"
	MODELTASKSTATE_CANCELLING ModelTaskState = "Cancelling"
	MODELTASKSTATE_RUNNING ModelTaskState = "Running"
)

// All allowed values of ModelTaskState enum
var AllowedModelTaskStateEnumValues = []ModelTaskState{
	"Idle",
	"Cancelling",
	"Running",
}

func (v *ModelTaskState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ModelTaskState(value)
	for _, existing := range AllowedModelTaskStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ModelTaskState", value)
}

// NewModelTaskStateFromValue returns a pointer to a valid ModelTaskState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewModelTaskStateFromValue(v string) (*ModelTaskState, error) {
	ev := ModelTaskState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ModelTaskState: valid values are %v", v, AllowedModelTaskStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ModelTaskState) IsValid() bool {
	for _, existing := range AllowedModelTaskStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TaskState value
func (v ModelTaskState) Ptr() *ModelTaskState {
	return &v
}

type NullableModelTaskState struct {
	value *ModelTaskState
	isSet bool
}

func (v NullableModelTaskState) Get() *ModelTaskState {
	return v.value
}

func (v *NullableModelTaskState) Set(val *ModelTaskState) {
	v.value = val
	v.isSet = true
}

func (v NullableModelTaskState) IsSet() bool {
	return v.isSet
}

func (v *NullableModelTaskState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelTaskState(val *ModelTaskState) *NullableModelTaskState {
	return &NullableModelTaskState{value: val, isSet: true}
}

func (v NullableModelTaskState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelTaskState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

