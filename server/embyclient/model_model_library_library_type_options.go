/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"encoding/json"
)

// checks if the ModelLibraryLibraryTypeOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelLibraryLibraryTypeOptions{}

// ModelLibraryLibraryTypeOptions struct for ModelLibraryLibraryTypeOptions
type ModelLibraryLibraryTypeOptions struct {
	Type *string `json:"Type,omitempty"`
	MetadataFetchers []ModelLibraryLibraryOptionInfo `json:"MetadataFetchers,omitempty"`
	ImageFetchers []ModelLibraryLibraryOptionInfo `json:"ImageFetchers,omitempty"`
	SupportedImageTypes []ModelImageType `json:"SupportedImageTypes,omitempty"`
	DefaultImageOptions []ModelImageOption `json:"DefaultImageOptions,omitempty"`
}

// NewModelLibraryLibraryTypeOptions instantiates a new ModelLibraryLibraryTypeOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelLibraryLibraryTypeOptions() *ModelLibraryLibraryTypeOptions {
	this := ModelLibraryLibraryTypeOptions{}
	return &this
}

// NewModelLibraryLibraryTypeOptionsWithDefaults instantiates a new ModelLibraryLibraryTypeOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelLibraryLibraryTypeOptionsWithDefaults() *ModelLibraryLibraryTypeOptions {
	this := ModelLibraryLibraryTypeOptions{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ModelLibraryLibraryTypeOptions) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelLibraryLibraryTypeOptions) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ModelLibraryLibraryTypeOptions) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ModelLibraryLibraryTypeOptions) SetType(v string) {
	o.Type = &v
}

// GetMetadataFetchers returns the MetadataFetchers field value if set, zero value otherwise.
func (o *ModelLibraryLibraryTypeOptions) GetMetadataFetchers() []ModelLibraryLibraryOptionInfo {
	if o == nil || IsNil(o.MetadataFetchers) {
		var ret []ModelLibraryLibraryOptionInfo
		return ret
	}
	return o.MetadataFetchers
}

// GetMetadataFetchersOk returns a tuple with the MetadataFetchers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelLibraryLibraryTypeOptions) GetMetadataFetchersOk() ([]ModelLibraryLibraryOptionInfo, bool) {
	if o == nil || IsNil(o.MetadataFetchers) {
		return nil, false
	}
	return o.MetadataFetchers, true
}

// HasMetadataFetchers returns a boolean if a field has been set.
func (o *ModelLibraryLibraryTypeOptions) HasMetadataFetchers() bool {
	if o != nil && !IsNil(o.MetadataFetchers) {
		return true
	}

	return false
}

// SetMetadataFetchers gets a reference to the given []ModelLibraryLibraryOptionInfo and assigns it to the MetadataFetchers field.
func (o *ModelLibraryLibraryTypeOptions) SetMetadataFetchers(v []ModelLibraryLibraryOptionInfo) {
	o.MetadataFetchers = v
}

// GetImageFetchers returns the ImageFetchers field value if set, zero value otherwise.
func (o *ModelLibraryLibraryTypeOptions) GetImageFetchers() []ModelLibraryLibraryOptionInfo {
	if o == nil || IsNil(o.ImageFetchers) {
		var ret []ModelLibraryLibraryOptionInfo
		return ret
	}
	return o.ImageFetchers
}

// GetImageFetchersOk returns a tuple with the ImageFetchers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelLibraryLibraryTypeOptions) GetImageFetchersOk() ([]ModelLibraryLibraryOptionInfo, bool) {
	if o == nil || IsNil(o.ImageFetchers) {
		return nil, false
	}
	return o.ImageFetchers, true
}

// HasImageFetchers returns a boolean if a field has been set.
func (o *ModelLibraryLibraryTypeOptions) HasImageFetchers() bool {
	if o != nil && !IsNil(o.ImageFetchers) {
		return true
	}

	return false
}

// SetImageFetchers gets a reference to the given []ModelLibraryLibraryOptionInfo and assigns it to the ImageFetchers field.
func (o *ModelLibraryLibraryTypeOptions) SetImageFetchers(v []ModelLibraryLibraryOptionInfo) {
	o.ImageFetchers = v
}

// GetSupportedImageTypes returns the SupportedImageTypes field value if set, zero value otherwise.
func (o *ModelLibraryLibraryTypeOptions) GetSupportedImageTypes() []ModelImageType {
	if o == nil || IsNil(o.SupportedImageTypes) {
		var ret []ModelImageType
		return ret
	}
	return o.SupportedImageTypes
}

// GetSupportedImageTypesOk returns a tuple with the SupportedImageTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelLibraryLibraryTypeOptions) GetSupportedImageTypesOk() ([]ModelImageType, bool) {
	if o == nil || IsNil(o.SupportedImageTypes) {
		return nil, false
	}
	return o.SupportedImageTypes, true
}

// HasSupportedImageTypes returns a boolean if a field has been set.
func (o *ModelLibraryLibraryTypeOptions) HasSupportedImageTypes() bool {
	if o != nil && !IsNil(o.SupportedImageTypes) {
		return true
	}

	return false
}

// SetSupportedImageTypes gets a reference to the given []ModelImageType and assigns it to the SupportedImageTypes field.
func (o *ModelLibraryLibraryTypeOptions) SetSupportedImageTypes(v []ModelImageType) {
	o.SupportedImageTypes = v
}

// GetDefaultImageOptions returns the DefaultImageOptions field value if set, zero value otherwise.
func (o *ModelLibraryLibraryTypeOptions) GetDefaultImageOptions() []ModelImageOption {
	if o == nil || IsNil(o.DefaultImageOptions) {
		var ret []ModelImageOption
		return ret
	}
	return o.DefaultImageOptions
}

// GetDefaultImageOptionsOk returns a tuple with the DefaultImageOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelLibraryLibraryTypeOptions) GetDefaultImageOptionsOk() ([]ModelImageOption, bool) {
	if o == nil || IsNil(o.DefaultImageOptions) {
		return nil, false
	}
	return o.DefaultImageOptions, true
}

// HasDefaultImageOptions returns a boolean if a field has been set.
func (o *ModelLibraryLibraryTypeOptions) HasDefaultImageOptions() bool {
	if o != nil && !IsNil(o.DefaultImageOptions) {
		return true
	}

	return false
}

// SetDefaultImageOptions gets a reference to the given []ModelImageOption and assigns it to the DefaultImageOptions field.
func (o *ModelLibraryLibraryTypeOptions) SetDefaultImageOptions(v []ModelImageOption) {
	o.DefaultImageOptions = v
}

func (o ModelLibraryLibraryTypeOptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelLibraryLibraryTypeOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["Type"] = o.Type
	}
	if !IsNil(o.MetadataFetchers) {
		toSerialize["MetadataFetchers"] = o.MetadataFetchers
	}
	if !IsNil(o.ImageFetchers) {
		toSerialize["ImageFetchers"] = o.ImageFetchers
	}
	if !IsNil(o.SupportedImageTypes) {
		toSerialize["SupportedImageTypes"] = o.SupportedImageTypes
	}
	if !IsNil(o.DefaultImageOptions) {
		toSerialize["DefaultImageOptions"] = o.DefaultImageOptions
	}
	return toSerialize, nil
}

type NullableModelLibraryLibraryTypeOptions struct {
	value *ModelLibraryLibraryTypeOptions
	isSet bool
}

func (v NullableModelLibraryLibraryTypeOptions) Get() *ModelLibraryLibraryTypeOptions {
	return v.value
}

func (v *NullableModelLibraryLibraryTypeOptions) Set(val *ModelLibraryLibraryTypeOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableModelLibraryLibraryTypeOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableModelLibraryLibraryTypeOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelLibraryLibraryTypeOptions(val *ModelLibraryLibraryTypeOptions) *NullableModelLibraryLibraryTypeOptions {
	return &NullableModelLibraryLibraryTypeOptions{value: val, isSet: true}
}

func (v NullableModelLibraryLibraryTypeOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelLibraryLibraryTypeOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


