/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// MediaInfoServiceAPIService MediaInfoServiceAPI service
type MediaInfoServiceAPIService service

type MediaInfoServiceAPIGetItemsByIdPlaybackinfoRequest struct {
	ctx context.Context
	ApiService *MediaInfoServiceAPIService
	id string
	userId *string
}

// User Id
func (r MediaInfoServiceAPIGetItemsByIdPlaybackinfoRequest) UserId(userId string) MediaInfoServiceAPIGetItemsByIdPlaybackinfoRequest {
	r.userId = &userId
	return r
}

func (r MediaInfoServiceAPIGetItemsByIdPlaybackinfoRequest) Execute() (*ModelPlaybackInfoResponse, *http.Response, error) {
	return r.ApiService.GetItemsByIdPlaybackinfoExecute(r)
}

/*
GetItemsByIdPlaybackinfo Gets live playback media info for an item

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Item Id
 @return MediaInfoServiceAPIGetItemsByIdPlaybackinfoRequest
*/
func (a *MediaInfoServiceAPIService) GetItemsByIdPlaybackinfo(ctx context.Context, id string) MediaInfoServiceAPIGetItemsByIdPlaybackinfoRequest {
	return MediaInfoServiceAPIGetItemsByIdPlaybackinfoRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ModelPlaybackInfoResponse
func (a *MediaInfoServiceAPIService) GetItemsByIdPlaybackinfoExecute(r MediaInfoServiceAPIGetItemsByIdPlaybackinfoRequest) (*ModelPlaybackInfoResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ModelPlaybackInfoResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MediaInfoServiceAPIService.GetItemsByIdPlaybackinfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Items/{Id}/PlaybackInfo"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.userId == nil {
		return localVarReturnValue, nil, reportError("userId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "UserId", r.userId, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MediaInfoServiceAPIGetPlaybackBitratetestRequest struct {
	ctx context.Context
	ApiService *MediaInfoServiceAPIService
	size *int64
}

// Size
func (r MediaInfoServiceAPIGetPlaybackBitratetestRequest) Size(size int64) MediaInfoServiceAPIGetPlaybackBitratetestRequest {
	r.size = &size
	return r
}

func (r MediaInfoServiceAPIGetPlaybackBitratetestRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetPlaybackBitratetestExecute(r)
}

/*
GetPlaybackBitratetest Method for GetPlaybackBitratetest

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MediaInfoServiceAPIGetPlaybackBitratetestRequest
*/
func (a *MediaInfoServiceAPIService) GetPlaybackBitratetest(ctx context.Context) MediaInfoServiceAPIGetPlaybackBitratetestRequest {
	return MediaInfoServiceAPIGetPlaybackBitratetestRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *MediaInfoServiceAPIService) GetPlaybackBitratetestExecute(r MediaInfoServiceAPIGetPlaybackBitratetestRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MediaInfoServiceAPIService.GetPlaybackBitratetest")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Playback/BitrateTest"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.size == nil {
		return nil, reportError("size is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "Size", r.size, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type MediaInfoServiceAPIPostItemsByIdPlaybackinfoRequest struct {
	ctx context.Context
	ApiService *MediaInfoServiceAPIService
	id string
	modelPlaybackInfoRequest *ModelPlaybackInfoRequest
}

// PlaybackInfoRequest: 
func (r MediaInfoServiceAPIPostItemsByIdPlaybackinfoRequest) ModelPlaybackInfoRequest(modelPlaybackInfoRequest ModelPlaybackInfoRequest) MediaInfoServiceAPIPostItemsByIdPlaybackinfoRequest {
	r.modelPlaybackInfoRequest = &modelPlaybackInfoRequest
	return r
}

func (r MediaInfoServiceAPIPostItemsByIdPlaybackinfoRequest) Execute() (*ModelPlaybackInfoResponse, *http.Response, error) {
	return r.ApiService.PostItemsByIdPlaybackinfoExecute(r)
}

/*
PostItemsByIdPlaybackinfo Gets live playback media info for an item

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return MediaInfoServiceAPIPostItemsByIdPlaybackinfoRequest
*/
func (a *MediaInfoServiceAPIService) PostItemsByIdPlaybackinfo(ctx context.Context, id string) MediaInfoServiceAPIPostItemsByIdPlaybackinfoRequest {
	return MediaInfoServiceAPIPostItemsByIdPlaybackinfoRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ModelPlaybackInfoResponse
func (a *MediaInfoServiceAPIService) PostItemsByIdPlaybackinfoExecute(r MediaInfoServiceAPIPostItemsByIdPlaybackinfoRequest) (*ModelPlaybackInfoResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ModelPlaybackInfoResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MediaInfoServiceAPIService.PostItemsByIdPlaybackinfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Items/{Id}/PlaybackInfo"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.modelPlaybackInfoRequest == nil {
		return localVarReturnValue, nil, reportError("modelPlaybackInfoRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.modelPlaybackInfoRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type MediaInfoServiceAPIPostLivestreamsCloseRequest struct {
	ctx context.Context
	ApiService *MediaInfoServiceAPIService
	liveStreamId *string
}

// LiveStreamId
func (r MediaInfoServiceAPIPostLivestreamsCloseRequest) LiveStreamId(liveStreamId string) MediaInfoServiceAPIPostLivestreamsCloseRequest {
	r.liveStreamId = &liveStreamId
	return r
}

func (r MediaInfoServiceAPIPostLivestreamsCloseRequest) Execute() (*http.Response, error) {
	return r.ApiService.PostLivestreamsCloseExecute(r)
}

/*
PostLivestreamsClose Closes a media source

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MediaInfoServiceAPIPostLivestreamsCloseRequest
*/
func (a *MediaInfoServiceAPIService) PostLivestreamsClose(ctx context.Context) MediaInfoServiceAPIPostLivestreamsCloseRequest {
	return MediaInfoServiceAPIPostLivestreamsCloseRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *MediaInfoServiceAPIService) PostLivestreamsCloseExecute(r MediaInfoServiceAPIPostLivestreamsCloseRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MediaInfoServiceAPIService.PostLivestreamsClose")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/LiveStreams/Close"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.liveStreamId == nil {
		return nil, reportError("liveStreamId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "LiveStreamId", r.liveStreamId, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type MediaInfoServiceAPIPostLivestreamsMediainfoRequest struct {
	ctx context.Context
	ApiService *MediaInfoServiceAPIService
	liveStreamId *string
}

// LiveStreamId
func (r MediaInfoServiceAPIPostLivestreamsMediainfoRequest) LiveStreamId(liveStreamId string) MediaInfoServiceAPIPostLivestreamsMediainfoRequest {
	r.liveStreamId = &liveStreamId
	return r
}

func (r MediaInfoServiceAPIPostLivestreamsMediainfoRequest) Execute() (*http.Response, error) {
	return r.ApiService.PostLivestreamsMediainfoExecute(r)
}

/*
PostLivestreamsMediainfo Closes a media source

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MediaInfoServiceAPIPostLivestreamsMediainfoRequest
*/
func (a *MediaInfoServiceAPIService) PostLivestreamsMediainfo(ctx context.Context) MediaInfoServiceAPIPostLivestreamsMediainfoRequest {
	return MediaInfoServiceAPIPostLivestreamsMediainfoRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *MediaInfoServiceAPIService) PostLivestreamsMediainfoExecute(r MediaInfoServiceAPIPostLivestreamsMediainfoRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MediaInfoServiceAPIService.PostLivestreamsMediainfo")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/LiveStreams/MediaInfo"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.liveStreamId == nil {
		return nil, reportError("liveStreamId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "LiveStreamId", r.liveStreamId, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type MediaInfoServiceAPIPostLivestreamsOpenRequest struct {
	ctx context.Context
	ApiService *MediaInfoServiceAPIService
	modelLiveStreamRequest *ModelLiveStreamRequest
}

// LiveStreamRequest: 
func (r MediaInfoServiceAPIPostLivestreamsOpenRequest) ModelLiveStreamRequest(modelLiveStreamRequest ModelLiveStreamRequest) MediaInfoServiceAPIPostLivestreamsOpenRequest {
	r.modelLiveStreamRequest = &modelLiveStreamRequest
	return r
}

func (r MediaInfoServiceAPIPostLivestreamsOpenRequest) Execute() (*ModelLiveStreamResponse, *http.Response, error) {
	return r.ApiService.PostLivestreamsOpenExecute(r)
}

/*
PostLivestreamsOpen Opens a media source

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return MediaInfoServiceAPIPostLivestreamsOpenRequest
*/
func (a *MediaInfoServiceAPIService) PostLivestreamsOpen(ctx context.Context) MediaInfoServiceAPIPostLivestreamsOpenRequest {
	return MediaInfoServiceAPIPostLivestreamsOpenRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ModelLiveStreamResponse
func (a *MediaInfoServiceAPIService) PostLivestreamsOpenExecute(r MediaInfoServiceAPIPostLivestreamsOpenRequest) (*ModelLiveStreamResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ModelLiveStreamResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MediaInfoServiceAPIService.PostLivestreamsOpen")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/LiveStreams/Open"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.modelLiveStreamRequest == nil {
		return localVarReturnValue, nil, reportError("modelLiveStreamRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.modelLiveStreamRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
