/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"encoding/json"
	"fmt"
)

// ModelCodecDirections the model 'ModelCodecDirections'
type ModelCodecDirections string

// List of CodecDirections
const (
	MODELCODECDIRECTIONS_ENCODER ModelCodecDirections = "Encoder"
	MODELCODECDIRECTIONS_DECODER ModelCodecDirections = "Decoder"
)

// All allowed values of ModelCodecDirections enum
var AllowedModelCodecDirectionsEnumValues = []ModelCodecDirections{
	"Encoder",
	"Decoder",
}

func (v *ModelCodecDirections) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ModelCodecDirections(value)
	for _, existing := range AllowedModelCodecDirectionsEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ModelCodecDirections", value)
}

// NewModelCodecDirectionsFromValue returns a pointer to a valid ModelCodecDirections
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewModelCodecDirectionsFromValue(v string) (*ModelCodecDirections, error) {
	ev := ModelCodecDirections(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ModelCodecDirections: valid values are %v", v, AllowedModelCodecDirectionsEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ModelCodecDirections) IsValid() bool {
	for _, existing := range AllowedModelCodecDirectionsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CodecDirections value
func (v ModelCodecDirections) Ptr() *ModelCodecDirections {
	return &v
}

type NullableModelCodecDirections struct {
	value *ModelCodecDirections
	isSet bool
}

func (v NullableModelCodecDirections) Get() *ModelCodecDirections {
	return v.value
}

func (v *NullableModelCodecDirections) Set(val *ModelCodecDirections) {
	v.value = val
	v.isSet = true
}

func (v NullableModelCodecDirections) IsSet() bool {
	return v.isSet
}

func (v *NullableModelCodecDirections) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelCodecDirections(val *ModelCodecDirections) *NullableModelCodecDirections {
	return &NullableModelCodecDirections{value: val, isSet: true}
}

func (v NullableModelCodecDirections) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelCodecDirections) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

