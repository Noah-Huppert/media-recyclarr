/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// RemoteImageServiceAPIService RemoteImageServiceAPI service
type RemoteImageServiceAPIService service

type RemoteImageServiceAPIGetImagesRemoteRequest struct {
	ctx context.Context
	ApiService *RemoteImageServiceAPIService
	imageUrl *string
}

// The image url
func (r RemoteImageServiceAPIGetImagesRemoteRequest) ImageUrl(imageUrl string) RemoteImageServiceAPIGetImagesRemoteRequest {
	r.imageUrl = &imageUrl
	return r
}

func (r RemoteImageServiceAPIGetImagesRemoteRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetImagesRemoteExecute(r)
}

/*
GetImagesRemote Gets a remote image

Requires authentication as administrator

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return RemoteImageServiceAPIGetImagesRemoteRequest
*/
func (a *RemoteImageServiceAPIService) GetImagesRemote(ctx context.Context) RemoteImageServiceAPIGetImagesRemoteRequest {
	return RemoteImageServiceAPIGetImagesRemoteRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *RemoteImageServiceAPIService) GetImagesRemoteExecute(r RemoteImageServiceAPIGetImagesRemoteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RemoteImageServiceAPIService.GetImagesRemote")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Images/Remote"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.imageUrl == nil {
		return nil, reportError("imageUrl is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "ImageUrl", r.imageUrl, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type RemoteImageServiceAPIGetItemsByIdRemoteimagesRequest struct {
	ctx context.Context
	ApiService *RemoteImageServiceAPIService
	id string
	type_ *ModelImageType
	startIndex *int32
	limit *int32
	providerName *string
	includeAllLanguages *bool
}

// The image type
func (r RemoteImageServiceAPIGetItemsByIdRemoteimagesRequest) Type_(type_ ModelImageType) RemoteImageServiceAPIGetItemsByIdRemoteimagesRequest {
	r.type_ = &type_
	return r
}

// Optional. The record index to start at. All items with a lower index will be dropped from the results.
func (r RemoteImageServiceAPIGetItemsByIdRemoteimagesRequest) StartIndex(startIndex int32) RemoteImageServiceAPIGetItemsByIdRemoteimagesRequest {
	r.startIndex = &startIndex
	return r
}

// Optional. The maximum number of records to return
func (r RemoteImageServiceAPIGetItemsByIdRemoteimagesRequest) Limit(limit int32) RemoteImageServiceAPIGetItemsByIdRemoteimagesRequest {
	r.limit = &limit
	return r
}

// Optional. The image provider to use
func (r RemoteImageServiceAPIGetItemsByIdRemoteimagesRequest) ProviderName(providerName string) RemoteImageServiceAPIGetItemsByIdRemoteimagesRequest {
	r.providerName = &providerName
	return r
}

// Optional.
func (r RemoteImageServiceAPIGetItemsByIdRemoteimagesRequest) IncludeAllLanguages(includeAllLanguages bool) RemoteImageServiceAPIGetItemsByIdRemoteimagesRequest {
	r.includeAllLanguages = &includeAllLanguages
	return r
}

func (r RemoteImageServiceAPIGetItemsByIdRemoteimagesRequest) Execute() (*ModelRemoteImageResult, *http.Response, error) {
	return r.ApiService.GetItemsByIdRemoteimagesExecute(r)
}

/*
GetItemsByIdRemoteimages Gets available remote images for an item

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Item Id
 @return RemoteImageServiceAPIGetItemsByIdRemoteimagesRequest
*/
func (a *RemoteImageServiceAPIService) GetItemsByIdRemoteimages(ctx context.Context, id string) RemoteImageServiceAPIGetItemsByIdRemoteimagesRequest {
	return RemoteImageServiceAPIGetItemsByIdRemoteimagesRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ModelRemoteImageResult
func (a *RemoteImageServiceAPIService) GetItemsByIdRemoteimagesExecute(r RemoteImageServiceAPIGetItemsByIdRemoteimagesRequest) (*ModelRemoteImageResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ModelRemoteImageResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RemoteImageServiceAPIService.GetItemsByIdRemoteimages")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Items/{Id}/RemoteImages"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Type", r.type_, "")
	}
	if r.startIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "StartIndex", r.startIndex, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Limit", r.limit, "")
	}
	if r.providerName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ProviderName", r.providerName, "")
	}
	if r.includeAllLanguages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IncludeAllLanguages", r.includeAllLanguages, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RemoteImageServiceAPIGetItemsByIdRemoteimagesProvidersRequest struct {
	ctx context.Context
	ApiService *RemoteImageServiceAPIService
	id string
}

func (r RemoteImageServiceAPIGetItemsByIdRemoteimagesProvidersRequest) Execute() ([]ModelImageProviderInfo, *http.Response, error) {
	return r.ApiService.GetItemsByIdRemoteimagesProvidersExecute(r)
}

/*
GetItemsByIdRemoteimagesProviders Gets available remote image providers for an item

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Item Id
 @return RemoteImageServiceAPIGetItemsByIdRemoteimagesProvidersRequest
*/
func (a *RemoteImageServiceAPIService) GetItemsByIdRemoteimagesProviders(ctx context.Context, id string) RemoteImageServiceAPIGetItemsByIdRemoteimagesProvidersRequest {
	return RemoteImageServiceAPIGetItemsByIdRemoteimagesProvidersRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return []ModelImageProviderInfo
func (a *RemoteImageServiceAPIService) GetItemsByIdRemoteimagesProvidersExecute(r RemoteImageServiceAPIGetItemsByIdRemoteimagesProvidersRequest) ([]ModelImageProviderInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ModelImageProviderInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RemoteImageServiceAPIService.GetItemsByIdRemoteimagesProviders")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Items/{Id}/RemoteImages/Providers"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RemoteImageServiceAPIPostItemsByIdRemoteimagesDownloadRequest struct {
	ctx context.Context
	ApiService *RemoteImageServiceAPIService
	id string
	type_ *ModelImageType
	providerName *string
	imageUrl *string
}

// The image type
func (r RemoteImageServiceAPIPostItemsByIdRemoteimagesDownloadRequest) Type_(type_ ModelImageType) RemoteImageServiceAPIPostItemsByIdRemoteimagesDownloadRequest {
	r.type_ = &type_
	return r
}

// The image provider
func (r RemoteImageServiceAPIPostItemsByIdRemoteimagesDownloadRequest) ProviderName(providerName string) RemoteImageServiceAPIPostItemsByIdRemoteimagesDownloadRequest {
	r.providerName = &providerName
	return r
}

// The image url
func (r RemoteImageServiceAPIPostItemsByIdRemoteimagesDownloadRequest) ImageUrl(imageUrl string) RemoteImageServiceAPIPostItemsByIdRemoteimagesDownloadRequest {
	r.imageUrl = &imageUrl
	return r
}

func (r RemoteImageServiceAPIPostItemsByIdRemoteimagesDownloadRequest) Execute() (*http.Response, error) {
	return r.ApiService.PostItemsByIdRemoteimagesDownloadExecute(r)
}

/*
PostItemsByIdRemoteimagesDownload Downloads a remote image for an item

Requires authentication as administrator

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Item Id
 @return RemoteImageServiceAPIPostItemsByIdRemoteimagesDownloadRequest
*/
func (a *RemoteImageServiceAPIService) PostItemsByIdRemoteimagesDownload(ctx context.Context, id string) RemoteImageServiceAPIPostItemsByIdRemoteimagesDownloadRequest {
	return RemoteImageServiceAPIPostItemsByIdRemoteimagesDownloadRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *RemoteImageServiceAPIService) PostItemsByIdRemoteimagesDownloadExecute(r RemoteImageServiceAPIPostItemsByIdRemoteimagesDownloadRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RemoteImageServiceAPIService.PostItemsByIdRemoteimagesDownload")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Items/{Id}/RemoteImages/Download"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.type_ == nil {
		return nil, reportError("type_ is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "Type", r.type_, "")
	if r.providerName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ProviderName", r.providerName, "")
	}
	if r.imageUrl != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ImageUrl", r.imageUrl, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
