/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// PlaylistServiceAPIService PlaylistServiceAPI service
type PlaylistServiceAPIService service

type PlaylistServiceAPIDeletePlaylistsByIdItemsRequest struct {
	ctx context.Context
	ApiService *PlaylistServiceAPIService
	id string
	entryIds *string
}

func (r PlaylistServiceAPIDeletePlaylistsByIdItemsRequest) EntryIds(entryIds string) PlaylistServiceAPIDeletePlaylistsByIdItemsRequest {
	r.entryIds = &entryIds
	return r
}

func (r PlaylistServiceAPIDeletePlaylistsByIdItemsRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeletePlaylistsByIdItemsExecute(r)
}

/*
DeletePlaylistsByIdItems Removes items from a playlist

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return PlaylistServiceAPIDeletePlaylistsByIdItemsRequest
*/
func (a *PlaylistServiceAPIService) DeletePlaylistsByIdItems(ctx context.Context, id string) PlaylistServiceAPIDeletePlaylistsByIdItemsRequest {
	return PlaylistServiceAPIDeletePlaylistsByIdItemsRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *PlaylistServiceAPIService) DeletePlaylistsByIdItemsExecute(r PlaylistServiceAPIDeletePlaylistsByIdItemsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PlaylistServiceAPIService.DeletePlaylistsByIdItems")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Playlists/{Id}/Items"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.entryIds == nil {
		return nil, reportError("entryIds is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "EntryIds", r.entryIds, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type PlaylistServiceAPIGetPlaylistsByIdAddtoplaylistinfoRequest struct {
	ctx context.Context
	ApiService *PlaylistServiceAPIService
	ids *string
	id string
	userId *string
}

// Item id, comma delimited
func (r PlaylistServiceAPIGetPlaylistsByIdAddtoplaylistinfoRequest) Ids(ids string) PlaylistServiceAPIGetPlaylistsByIdAddtoplaylistinfoRequest {
	r.ids = &ids
	return r
}

// User Id
func (r PlaylistServiceAPIGetPlaylistsByIdAddtoplaylistinfoRequest) UserId(userId string) PlaylistServiceAPIGetPlaylistsByIdAddtoplaylistinfoRequest {
	r.userId = &userId
	return r
}

func (r PlaylistServiceAPIGetPlaylistsByIdAddtoplaylistinfoRequest) Execute() (interface{}, *http.Response, error) {
	return r.ApiService.GetPlaylistsByIdAddtoplaylistinfoExecute(r)
}

/*
GetPlaylistsByIdAddtoplaylistinfo Gets add to playlist info

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return PlaylistServiceAPIGetPlaylistsByIdAddtoplaylistinfoRequest
*/
func (a *PlaylistServiceAPIService) GetPlaylistsByIdAddtoplaylistinfo(ctx context.Context, id string) PlaylistServiceAPIGetPlaylistsByIdAddtoplaylistinfoRequest {
	return PlaylistServiceAPIGetPlaylistsByIdAddtoplaylistinfoRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return interface{}
func (a *PlaylistServiceAPIService) GetPlaylistsByIdAddtoplaylistinfoExecute(r PlaylistServiceAPIGetPlaylistsByIdAddtoplaylistinfoRequest) (interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PlaylistServiceAPIService.GetPlaylistsByIdAddtoplaylistinfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Playlists/{Id}/AddToPlaylistInfo"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.ids == nil {
		return localVarReturnValue, nil, reportError("ids is required and must be specified")
	}

	if r.userId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "UserId", r.userId, "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "Ids", r.ids, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type PlaylistServiceAPIGetPlaylistsByIdItemsRequest struct {
	ctx context.Context
	ApiService *PlaylistServiceAPIService
	id string
	userId *string
	startIndex *int32
	limit *int32
	fields *string
	enableImages *bool
	enableUserData *bool
	imageTypeLimit *int32
	enableImageTypes *string
}

// User Id
func (r PlaylistServiceAPIGetPlaylistsByIdItemsRequest) UserId(userId string) PlaylistServiceAPIGetPlaylistsByIdItemsRequest {
	r.userId = &userId
	return r
}

// Optional. The record index to start at. All items with a lower index will be dropped from the results.
func (r PlaylistServiceAPIGetPlaylistsByIdItemsRequest) StartIndex(startIndex int32) PlaylistServiceAPIGetPlaylistsByIdItemsRequest {
	r.startIndex = &startIndex
	return r
}

// Optional. The maximum number of records to return
func (r PlaylistServiceAPIGetPlaylistsByIdItemsRequest) Limit(limit int32) PlaylistServiceAPIGetPlaylistsByIdItemsRequest {
	r.limit = &limit
	return r
}

// Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines
func (r PlaylistServiceAPIGetPlaylistsByIdItemsRequest) Fields(fields string) PlaylistServiceAPIGetPlaylistsByIdItemsRequest {
	r.fields = &fields
	return r
}

// Optional, include image information in output
func (r PlaylistServiceAPIGetPlaylistsByIdItemsRequest) EnableImages(enableImages bool) PlaylistServiceAPIGetPlaylistsByIdItemsRequest {
	r.enableImages = &enableImages
	return r
}

// Optional, include user data
func (r PlaylistServiceAPIGetPlaylistsByIdItemsRequest) EnableUserData(enableUserData bool) PlaylistServiceAPIGetPlaylistsByIdItemsRequest {
	r.enableUserData = &enableUserData
	return r
}

// Optional, the max number of images to return, per image type
func (r PlaylistServiceAPIGetPlaylistsByIdItemsRequest) ImageTypeLimit(imageTypeLimit int32) PlaylistServiceAPIGetPlaylistsByIdItemsRequest {
	r.imageTypeLimit = &imageTypeLimit
	return r
}

// Optional. The image types to include in the output.
func (r PlaylistServiceAPIGetPlaylistsByIdItemsRequest) EnableImageTypes(enableImageTypes string) PlaylistServiceAPIGetPlaylistsByIdItemsRequest {
	r.enableImageTypes = &enableImageTypes
	return r
}

func (r PlaylistServiceAPIGetPlaylistsByIdItemsRequest) Execute() (*ModelQueryResultBaseItemDto, *http.Response, error) {
	return r.ApiService.GetPlaylistsByIdItemsExecute(r)
}

/*
GetPlaylistsByIdItems Gets the original items of a playlist

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return PlaylistServiceAPIGetPlaylistsByIdItemsRequest
*/
func (a *PlaylistServiceAPIService) GetPlaylistsByIdItems(ctx context.Context, id string) PlaylistServiceAPIGetPlaylistsByIdItemsRequest {
	return PlaylistServiceAPIGetPlaylistsByIdItemsRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ModelQueryResultBaseItemDto
func (a *PlaylistServiceAPIService) GetPlaylistsByIdItemsExecute(r PlaylistServiceAPIGetPlaylistsByIdItemsRequest) (*ModelQueryResultBaseItemDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ModelQueryResultBaseItemDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PlaylistServiceAPIService.GetPlaylistsByIdItems")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Playlists/{Id}/Items"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.userId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "UserId", r.userId, "")
	}
	if r.startIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "StartIndex", r.startIndex, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Limit", r.limit, "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Fields", r.fields, "")
	}
	if r.enableImages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImages", r.enableImages, "")
	}
	if r.enableUserData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableUserData", r.enableUserData, "")
	}
	if r.imageTypeLimit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ImageTypeLimit", r.imageTypeLimit, "")
	}
	if r.enableImageTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImageTypes", r.enableImageTypes, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type PlaylistServiceAPIPostPlaylistsRequest struct {
	ctx context.Context
	ApiService *PlaylistServiceAPIService
	name *string
	ids *string
	mediaType *string
}

// The name of the new playlist.
func (r PlaylistServiceAPIPostPlaylistsRequest) Name(name string) PlaylistServiceAPIPostPlaylistsRequest {
	r.name = &name
	return r
}

// Item Ids to add to the playlist
func (r PlaylistServiceAPIPostPlaylistsRequest) Ids(ids string) PlaylistServiceAPIPostPlaylistsRequest {
	r.ids = &ids
	return r
}

// The playlist media type
func (r PlaylistServiceAPIPostPlaylistsRequest) MediaType(mediaType string) PlaylistServiceAPIPostPlaylistsRequest {
	r.mediaType = &mediaType
	return r
}

func (r PlaylistServiceAPIPostPlaylistsRequest) Execute() (*ModelPlaylistsPlaylistCreationResult, *http.Response, error) {
	return r.ApiService.PostPlaylistsExecute(r)
}

/*
PostPlaylists Creates a new playlist

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return PlaylistServiceAPIPostPlaylistsRequest
*/
func (a *PlaylistServiceAPIService) PostPlaylists(ctx context.Context) PlaylistServiceAPIPostPlaylistsRequest {
	return PlaylistServiceAPIPostPlaylistsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ModelPlaylistsPlaylistCreationResult
func (a *PlaylistServiceAPIService) PostPlaylistsExecute(r PlaylistServiceAPIPostPlaylistsRequest) (*ModelPlaylistsPlaylistCreationResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ModelPlaylistsPlaylistCreationResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PlaylistServiceAPIService.PostPlaylists")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Playlists"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Name", r.name, "")
	}
	if r.ids != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Ids", r.ids, "")
	}
	if r.mediaType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "MediaType", r.mediaType, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type PlaylistServiceAPIPostPlaylistsByIdItemsRequest struct {
	ctx context.Context
	ApiService *PlaylistServiceAPIService
	ids *string
	id string
	userId *string
}

// Item id, comma delimited
func (r PlaylistServiceAPIPostPlaylistsByIdItemsRequest) Ids(ids string) PlaylistServiceAPIPostPlaylistsByIdItemsRequest {
	r.ids = &ids
	return r
}

// User Id
func (r PlaylistServiceAPIPostPlaylistsByIdItemsRequest) UserId(userId string) PlaylistServiceAPIPostPlaylistsByIdItemsRequest {
	r.userId = &userId
	return r
}

func (r PlaylistServiceAPIPostPlaylistsByIdItemsRequest) Execute() (*ModelPlaylistsAddToPlaylistResult, *http.Response, error) {
	return r.ApiService.PostPlaylistsByIdItemsExecute(r)
}

/*
PostPlaylistsByIdItems Adds items to a playlist

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return PlaylistServiceAPIPostPlaylistsByIdItemsRequest
*/
func (a *PlaylistServiceAPIService) PostPlaylistsByIdItems(ctx context.Context, id string) PlaylistServiceAPIPostPlaylistsByIdItemsRequest {
	return PlaylistServiceAPIPostPlaylistsByIdItemsRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ModelPlaylistsAddToPlaylistResult
func (a *PlaylistServiceAPIService) PostPlaylistsByIdItemsExecute(r PlaylistServiceAPIPostPlaylistsByIdItemsRequest) (*ModelPlaylistsAddToPlaylistResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ModelPlaylistsAddToPlaylistResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PlaylistServiceAPIService.PostPlaylistsByIdItems")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Playlists/{Id}/Items"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.ids == nil {
		return localVarReturnValue, nil, reportError("ids is required and must be specified")
	}

	if r.userId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "UserId", r.userId, "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "Ids", r.ids, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type PlaylistServiceAPIPostPlaylistsByIdItemsByItemidMoveByNewindexRequest struct {
	ctx context.Context
	ApiService *PlaylistServiceAPIService
	itemId int64
	id string
	newIndex int32
}

func (r PlaylistServiceAPIPostPlaylistsByIdItemsByItemidMoveByNewindexRequest) Execute() (*http.Response, error) {
	return r.ApiService.PostPlaylistsByIdItemsByItemidMoveByNewindexExecute(r)
}

/*
PostPlaylistsByIdItemsByItemidMoveByNewindex Moves a playlist item

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param itemId ItemId
 @param id
 @param newIndex NewIndex
 @return PlaylistServiceAPIPostPlaylistsByIdItemsByItemidMoveByNewindexRequest
*/
func (a *PlaylistServiceAPIService) PostPlaylistsByIdItemsByItemidMoveByNewindex(ctx context.Context, itemId int64, id string, newIndex int32) PlaylistServiceAPIPostPlaylistsByIdItemsByItemidMoveByNewindexRequest {
	return PlaylistServiceAPIPostPlaylistsByIdItemsByItemidMoveByNewindexRequest{
		ApiService: a,
		ctx: ctx,
		itemId: itemId,
		id: id,
		newIndex: newIndex,
	}
}

// Execute executes the request
func (a *PlaylistServiceAPIService) PostPlaylistsByIdItemsByItemidMoveByNewindexExecute(r PlaylistServiceAPIPostPlaylistsByIdItemsByItemidMoveByNewindexRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PlaylistServiceAPIService.PostPlaylistsByIdItemsByItemidMoveByNewindex")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Playlists/{Id}/Items/{ItemId}/Move/{NewIndex}"
	localVarPath = strings.Replace(localVarPath, "{"+"ItemId"+"}", url.PathEscape(parameterValueToString(r.itemId, "itemId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"NewIndex"+"}", url.PathEscape(parameterValueToString(r.newIndex, "newIndex")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type PlaylistServiceAPIPostPlaylistsByIdItemsDeleteRequest struct {
	ctx context.Context
	ApiService *PlaylistServiceAPIService
	id string
	entryIds *string
}

func (r PlaylistServiceAPIPostPlaylistsByIdItemsDeleteRequest) EntryIds(entryIds string) PlaylistServiceAPIPostPlaylistsByIdItemsDeleteRequest {
	r.entryIds = &entryIds
	return r
}

func (r PlaylistServiceAPIPostPlaylistsByIdItemsDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.PostPlaylistsByIdItemsDeleteExecute(r)
}

/*
PostPlaylistsByIdItemsDelete Removes items from a playlist

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return PlaylistServiceAPIPostPlaylistsByIdItemsDeleteRequest
*/
func (a *PlaylistServiceAPIService) PostPlaylistsByIdItemsDelete(ctx context.Context, id string) PlaylistServiceAPIPostPlaylistsByIdItemsDeleteRequest {
	return PlaylistServiceAPIPostPlaylistsByIdItemsDeleteRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *PlaylistServiceAPIService) PostPlaylistsByIdItemsDeleteExecute(r PlaylistServiceAPIPostPlaylistsByIdItemsDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PlaylistServiceAPIService.PostPlaylistsByIdItemsDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Playlists/{Id}/Items/Delete"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.entryIds == nil {
		return nil, reportError("entryIds is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "EntryIds", r.entryIds, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
