/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"encoding/json"
)

// checks if the ModelLibraryLibraryOptionsResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelLibraryLibraryOptionsResult{}

// ModelLibraryLibraryOptionsResult struct for ModelLibraryLibraryOptionsResult
type ModelLibraryLibraryOptionsResult struct {
	MetadataSavers []ModelLibraryLibraryOptionInfo `json:"MetadataSavers,omitempty"`
	MetadataReaders []ModelLibraryLibraryOptionInfo `json:"MetadataReaders,omitempty"`
	SubtitleFetchers []ModelLibraryLibraryOptionInfo `json:"SubtitleFetchers,omitempty"`
	LyricsFetchers []ModelLibraryLibraryOptionInfo `json:"LyricsFetchers,omitempty"`
	TypeOptions []ModelLibraryLibraryTypeOptions `json:"TypeOptions,omitempty"`
}

// NewModelLibraryLibraryOptionsResult instantiates a new ModelLibraryLibraryOptionsResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelLibraryLibraryOptionsResult() *ModelLibraryLibraryOptionsResult {
	this := ModelLibraryLibraryOptionsResult{}
	return &this
}

// NewModelLibraryLibraryOptionsResultWithDefaults instantiates a new ModelLibraryLibraryOptionsResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelLibraryLibraryOptionsResultWithDefaults() *ModelLibraryLibraryOptionsResult {
	this := ModelLibraryLibraryOptionsResult{}
	return &this
}

// GetMetadataSavers returns the MetadataSavers field value if set, zero value otherwise.
func (o *ModelLibraryLibraryOptionsResult) GetMetadataSavers() []ModelLibraryLibraryOptionInfo {
	if o == nil || IsNil(o.MetadataSavers) {
		var ret []ModelLibraryLibraryOptionInfo
		return ret
	}
	return o.MetadataSavers
}

// GetMetadataSaversOk returns a tuple with the MetadataSavers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelLibraryLibraryOptionsResult) GetMetadataSaversOk() ([]ModelLibraryLibraryOptionInfo, bool) {
	if o == nil || IsNil(o.MetadataSavers) {
		return nil, false
	}
	return o.MetadataSavers, true
}

// HasMetadataSavers returns a boolean if a field has been set.
func (o *ModelLibraryLibraryOptionsResult) HasMetadataSavers() bool {
	if o != nil && !IsNil(o.MetadataSavers) {
		return true
	}

	return false
}

// SetMetadataSavers gets a reference to the given []ModelLibraryLibraryOptionInfo and assigns it to the MetadataSavers field.
func (o *ModelLibraryLibraryOptionsResult) SetMetadataSavers(v []ModelLibraryLibraryOptionInfo) {
	o.MetadataSavers = v
}

// GetMetadataReaders returns the MetadataReaders field value if set, zero value otherwise.
func (o *ModelLibraryLibraryOptionsResult) GetMetadataReaders() []ModelLibraryLibraryOptionInfo {
	if o == nil || IsNil(o.MetadataReaders) {
		var ret []ModelLibraryLibraryOptionInfo
		return ret
	}
	return o.MetadataReaders
}

// GetMetadataReadersOk returns a tuple with the MetadataReaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelLibraryLibraryOptionsResult) GetMetadataReadersOk() ([]ModelLibraryLibraryOptionInfo, bool) {
	if o == nil || IsNil(o.MetadataReaders) {
		return nil, false
	}
	return o.MetadataReaders, true
}

// HasMetadataReaders returns a boolean if a field has been set.
func (o *ModelLibraryLibraryOptionsResult) HasMetadataReaders() bool {
	if o != nil && !IsNil(o.MetadataReaders) {
		return true
	}

	return false
}

// SetMetadataReaders gets a reference to the given []ModelLibraryLibraryOptionInfo and assigns it to the MetadataReaders field.
func (o *ModelLibraryLibraryOptionsResult) SetMetadataReaders(v []ModelLibraryLibraryOptionInfo) {
	o.MetadataReaders = v
}

// GetSubtitleFetchers returns the SubtitleFetchers field value if set, zero value otherwise.
func (o *ModelLibraryLibraryOptionsResult) GetSubtitleFetchers() []ModelLibraryLibraryOptionInfo {
	if o == nil || IsNil(o.SubtitleFetchers) {
		var ret []ModelLibraryLibraryOptionInfo
		return ret
	}
	return o.SubtitleFetchers
}

// GetSubtitleFetchersOk returns a tuple with the SubtitleFetchers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelLibraryLibraryOptionsResult) GetSubtitleFetchersOk() ([]ModelLibraryLibraryOptionInfo, bool) {
	if o == nil || IsNil(o.SubtitleFetchers) {
		return nil, false
	}
	return o.SubtitleFetchers, true
}

// HasSubtitleFetchers returns a boolean if a field has been set.
func (o *ModelLibraryLibraryOptionsResult) HasSubtitleFetchers() bool {
	if o != nil && !IsNil(o.SubtitleFetchers) {
		return true
	}

	return false
}

// SetSubtitleFetchers gets a reference to the given []ModelLibraryLibraryOptionInfo and assigns it to the SubtitleFetchers field.
func (o *ModelLibraryLibraryOptionsResult) SetSubtitleFetchers(v []ModelLibraryLibraryOptionInfo) {
	o.SubtitleFetchers = v
}

// GetLyricsFetchers returns the LyricsFetchers field value if set, zero value otherwise.
func (o *ModelLibraryLibraryOptionsResult) GetLyricsFetchers() []ModelLibraryLibraryOptionInfo {
	if o == nil || IsNil(o.LyricsFetchers) {
		var ret []ModelLibraryLibraryOptionInfo
		return ret
	}
	return o.LyricsFetchers
}

// GetLyricsFetchersOk returns a tuple with the LyricsFetchers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelLibraryLibraryOptionsResult) GetLyricsFetchersOk() ([]ModelLibraryLibraryOptionInfo, bool) {
	if o == nil || IsNil(o.LyricsFetchers) {
		return nil, false
	}
	return o.LyricsFetchers, true
}

// HasLyricsFetchers returns a boolean if a field has been set.
func (o *ModelLibraryLibraryOptionsResult) HasLyricsFetchers() bool {
	if o != nil && !IsNil(o.LyricsFetchers) {
		return true
	}

	return false
}

// SetLyricsFetchers gets a reference to the given []ModelLibraryLibraryOptionInfo and assigns it to the LyricsFetchers field.
func (o *ModelLibraryLibraryOptionsResult) SetLyricsFetchers(v []ModelLibraryLibraryOptionInfo) {
	o.LyricsFetchers = v
}

// GetTypeOptions returns the TypeOptions field value if set, zero value otherwise.
func (o *ModelLibraryLibraryOptionsResult) GetTypeOptions() []ModelLibraryLibraryTypeOptions {
	if o == nil || IsNil(o.TypeOptions) {
		var ret []ModelLibraryLibraryTypeOptions
		return ret
	}
	return o.TypeOptions
}

// GetTypeOptionsOk returns a tuple with the TypeOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelLibraryLibraryOptionsResult) GetTypeOptionsOk() ([]ModelLibraryLibraryTypeOptions, bool) {
	if o == nil || IsNil(o.TypeOptions) {
		return nil, false
	}
	return o.TypeOptions, true
}

// HasTypeOptions returns a boolean if a field has been set.
func (o *ModelLibraryLibraryOptionsResult) HasTypeOptions() bool {
	if o != nil && !IsNil(o.TypeOptions) {
		return true
	}

	return false
}

// SetTypeOptions gets a reference to the given []ModelLibraryLibraryTypeOptions and assigns it to the TypeOptions field.
func (o *ModelLibraryLibraryOptionsResult) SetTypeOptions(v []ModelLibraryLibraryTypeOptions) {
	o.TypeOptions = v
}

func (o ModelLibraryLibraryOptionsResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelLibraryLibraryOptionsResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MetadataSavers) {
		toSerialize["MetadataSavers"] = o.MetadataSavers
	}
	if !IsNil(o.MetadataReaders) {
		toSerialize["MetadataReaders"] = o.MetadataReaders
	}
	if !IsNil(o.SubtitleFetchers) {
		toSerialize["SubtitleFetchers"] = o.SubtitleFetchers
	}
	if !IsNil(o.LyricsFetchers) {
		toSerialize["LyricsFetchers"] = o.LyricsFetchers
	}
	if !IsNil(o.TypeOptions) {
		toSerialize["TypeOptions"] = o.TypeOptions
	}
	return toSerialize, nil
}

type NullableModelLibraryLibraryOptionsResult struct {
	value *ModelLibraryLibraryOptionsResult
	isSet bool
}

func (v NullableModelLibraryLibraryOptionsResult) Get() *ModelLibraryLibraryOptionsResult {
	return v.value
}

func (v *NullableModelLibraryLibraryOptionsResult) Set(val *ModelLibraryLibraryOptionsResult) {
	v.value = val
	v.isSet = true
}

func (v NullableModelLibraryLibraryOptionsResult) IsSet() bool {
	return v.isSet
}

func (v *NullableModelLibraryLibraryOptionsResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelLibraryLibraryOptionsResult(val *ModelLibraryLibraryOptionsResult) *NullableModelLibraryLibraryOptionsResult {
	return &NullableModelLibraryLibraryOptionsResult{value: val, isSet: true}
}

func (v NullableModelLibraryLibraryOptionsResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelLibraryLibraryOptionsResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


