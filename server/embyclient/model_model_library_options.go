/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"encoding/json"
)

// checks if the ModelLibraryOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelLibraryOptions{}

// ModelLibraryOptions struct for ModelLibraryOptions
type ModelLibraryOptions struct {
	EnableArchiveMediaFiles *bool `json:"EnableArchiveMediaFiles,omitempty"`
	EnablePhotos *bool `json:"EnablePhotos,omitempty"`
	EnableRealtimeMonitor *bool `json:"EnableRealtimeMonitor,omitempty"`
	EnableMarkerDetection *bool `json:"EnableMarkerDetection,omitempty"`
	EnableMarkerDetectionDuringLibraryScan *bool `json:"EnableMarkerDetectionDuringLibraryScan,omitempty"`
	IntroDetectionFingerprintLength *int32 `json:"IntroDetectionFingerprintLength,omitempty"`
	EnableChapterImageExtraction *bool `json:"EnableChapterImageExtraction,omitempty"`
	ExtractChapterImagesDuringLibraryScan *bool `json:"ExtractChapterImagesDuringLibraryScan,omitempty"`
	DownloadImagesInAdvance *bool `json:"DownloadImagesInAdvance,omitempty"`
	PathInfos []ModelMediaPathInfo `json:"PathInfos,omitempty"`
	IgnoreHiddenFiles *bool `json:"IgnoreHiddenFiles,omitempty"`
	IgnoreFileExtensions []string `json:"IgnoreFileExtensions,omitempty"`
	SaveLocalMetadata *bool `json:"SaveLocalMetadata,omitempty"`
	SaveMetadataHidden *bool `json:"SaveMetadataHidden,omitempty"`
	SaveLocalThumbnailSets *bool `json:"SaveLocalThumbnailSets,omitempty"`
	ImportPlaylists *bool `json:"ImportPlaylists,omitempty"`
	EnableAutomaticSeriesGrouping *bool `json:"EnableAutomaticSeriesGrouping,omitempty"`
	ShareEmbeddedMusicAlbumImages *bool `json:"ShareEmbeddedMusicAlbumImages,omitempty"`
	EnableEmbeddedTitles *bool `json:"EnableEmbeddedTitles,omitempty"`
	EnableAudioResume *bool `json:"EnableAudioResume,omitempty"`
	AutoGenerateChapters *bool `json:"AutoGenerateChapters,omitempty"`
	AutomaticRefreshIntervalDays *int32 `json:"AutomaticRefreshIntervalDays,omitempty"`
	PlaceholderMetadataRefreshIntervalDays *int32 `json:"PlaceholderMetadataRefreshIntervalDays,omitempty"`
	PreferredMetadataLanguage *string `json:"PreferredMetadataLanguage,omitempty"`
	PreferredImageLanguage *string `json:"PreferredImageLanguage,omitempty"`
	ContentType *string `json:"ContentType,omitempty"`
	MetadataCountryCode *string `json:"MetadataCountryCode,omitempty"`
	MetadataSavers []string `json:"MetadataSavers,omitempty"`
	DisabledLocalMetadataReaders []string `json:"DisabledLocalMetadataReaders,omitempty"`
	LocalMetadataReaderOrder []string `json:"LocalMetadataReaderOrder,omitempty"`
	DisabledLyricsFetchers []string `json:"DisabledLyricsFetchers,omitempty"`
	SaveLyricsWithMedia *bool `json:"SaveLyricsWithMedia,omitempty"`
	LyricsDownloadMaxAgeDays *int32 `json:"LyricsDownloadMaxAgeDays,omitempty"`
	LyricsFetcherOrder []string `json:"LyricsFetcherOrder,omitempty"`
	LyricsDownloadLanguages []string `json:"LyricsDownloadLanguages,omitempty"`
	DisabledSubtitleFetchers []string `json:"DisabledSubtitleFetchers,omitempty"`
	SubtitleFetcherOrder []string `json:"SubtitleFetcherOrder,omitempty"`
	SkipSubtitlesIfEmbeddedSubtitlesPresent *bool `json:"SkipSubtitlesIfEmbeddedSubtitlesPresent,omitempty"`
	SkipSubtitlesIfAudioTrackMatches *bool `json:"SkipSubtitlesIfAudioTrackMatches,omitempty"`
	SubtitleDownloadLanguages []string `json:"SubtitleDownloadLanguages,omitempty"`
	SubtitleDownloadMaxAgeDays *int32 `json:"SubtitleDownloadMaxAgeDays,omitempty"`
	RequirePerfectSubtitleMatch *bool `json:"RequirePerfectSubtitleMatch,omitempty"`
	SaveSubtitlesWithMedia *bool `json:"SaveSubtitlesWithMedia,omitempty"`
	ForcedSubtitlesOnly *bool `json:"ForcedSubtitlesOnly,omitempty"`
	HearingImpairedSubtitlesOnly *bool `json:"HearingImpairedSubtitlesOnly,omitempty"`
	TypeOptions []ModelTypeOptions `json:"TypeOptions,omitempty"`
	CollapseSingleItemFolders *bool `json:"CollapseSingleItemFolders,omitempty"`
	EnableAdultMetadata *bool `json:"EnableAdultMetadata,omitempty"`
	ImportCollections *bool `json:"ImportCollections,omitempty"`
	MinCollectionItems *int32 `json:"MinCollectionItems,omitempty"`
	MusicFolderStructure *string `json:"MusicFolderStructure,omitempty"`
	MinResumePct *int32 `json:"MinResumePct,omitempty"`
	MaxResumePct *int32 `json:"MaxResumePct,omitempty"`
	MinResumeDurationSeconds *int32 `json:"MinResumeDurationSeconds,omitempty"`
	ThumbnailImagesIntervalSeconds *int32 `json:"ThumbnailImagesIntervalSeconds,omitempty"`
	SampleIgnoreSize *int32 `json:"SampleIgnoreSize,omitempty"`
}

// NewModelLibraryOptions instantiates a new ModelLibraryOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelLibraryOptions() *ModelLibraryOptions {
	this := ModelLibraryOptions{}
	return &this
}

// NewModelLibraryOptionsWithDefaults instantiates a new ModelLibraryOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelLibraryOptionsWithDefaults() *ModelLibraryOptions {
	this := ModelLibraryOptions{}
	return &this
}

// GetEnableArchiveMediaFiles returns the EnableArchiveMediaFiles field value if set, zero value otherwise.
func (o *ModelLibraryOptions) GetEnableArchiveMediaFiles() bool {
	if o == nil || IsNil(o.EnableArchiveMediaFiles) {
		var ret bool
		return ret
	}
	return *o.EnableArchiveMediaFiles
}

// GetEnableArchiveMediaFilesOk returns a tuple with the EnableArchiveMediaFiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelLibraryOptions) GetEnableArchiveMediaFilesOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableArchiveMediaFiles) {
		return nil, false
	}
	return o.EnableArchiveMediaFiles, true
}

// HasEnableArchiveMediaFiles returns a boolean if a field has been set.
func (o *ModelLibraryOptions) HasEnableArchiveMediaFiles() bool {
	if o != nil && !IsNil(o.EnableArchiveMediaFiles) {
		return true
	}

	return false
}

// SetEnableArchiveMediaFiles gets a reference to the given bool and assigns it to the EnableArchiveMediaFiles field.
func (o *ModelLibraryOptions) SetEnableArchiveMediaFiles(v bool) {
	o.EnableArchiveMediaFiles = &v
}

// GetEnablePhotos returns the EnablePhotos field value if set, zero value otherwise.
func (o *ModelLibraryOptions) GetEnablePhotos() bool {
	if o == nil || IsNil(o.EnablePhotos) {
		var ret bool
		return ret
	}
	return *o.EnablePhotos
}

// GetEnablePhotosOk returns a tuple with the EnablePhotos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelLibraryOptions) GetEnablePhotosOk() (*bool, bool) {
	if o == nil || IsNil(o.EnablePhotos) {
		return nil, false
	}
	return o.EnablePhotos, true
}

// HasEnablePhotos returns a boolean if a field has been set.
func (o *ModelLibraryOptions) HasEnablePhotos() bool {
	if o != nil && !IsNil(o.EnablePhotos) {
		return true
	}

	return false
}

// SetEnablePhotos gets a reference to the given bool and assigns it to the EnablePhotos field.
func (o *ModelLibraryOptions) SetEnablePhotos(v bool) {
	o.EnablePhotos = &v
}

// GetEnableRealtimeMonitor returns the EnableRealtimeMonitor field value if set, zero value otherwise.
func (o *ModelLibraryOptions) GetEnableRealtimeMonitor() bool {
	if o == nil || IsNil(o.EnableRealtimeMonitor) {
		var ret bool
		return ret
	}
	return *o.EnableRealtimeMonitor
}

// GetEnableRealtimeMonitorOk returns a tuple with the EnableRealtimeMonitor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelLibraryOptions) GetEnableRealtimeMonitorOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableRealtimeMonitor) {
		return nil, false
	}
	return o.EnableRealtimeMonitor, true
}

// HasEnableRealtimeMonitor returns a boolean if a field has been set.
func (o *ModelLibraryOptions) HasEnableRealtimeMonitor() bool {
	if o != nil && !IsNil(o.EnableRealtimeMonitor) {
		return true
	}

	return false
}

// SetEnableRealtimeMonitor gets a reference to the given bool and assigns it to the EnableRealtimeMonitor field.
func (o *ModelLibraryOptions) SetEnableRealtimeMonitor(v bool) {
	o.EnableRealtimeMonitor = &v
}

// GetEnableMarkerDetection returns the EnableMarkerDetection field value if set, zero value otherwise.
func (o *ModelLibraryOptions) GetEnableMarkerDetection() bool {
	if o == nil || IsNil(o.EnableMarkerDetection) {
		var ret bool
		return ret
	}
	return *o.EnableMarkerDetection
}

// GetEnableMarkerDetectionOk returns a tuple with the EnableMarkerDetection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelLibraryOptions) GetEnableMarkerDetectionOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableMarkerDetection) {
		return nil, false
	}
	return o.EnableMarkerDetection, true
}

// HasEnableMarkerDetection returns a boolean if a field has been set.
func (o *ModelLibraryOptions) HasEnableMarkerDetection() bool {
	if o != nil && !IsNil(o.EnableMarkerDetection) {
		return true
	}

	return false
}

// SetEnableMarkerDetection gets a reference to the given bool and assigns it to the EnableMarkerDetection field.
func (o *ModelLibraryOptions) SetEnableMarkerDetection(v bool) {
	o.EnableMarkerDetection = &v
}

// GetEnableMarkerDetectionDuringLibraryScan returns the EnableMarkerDetectionDuringLibraryScan field value if set, zero value otherwise.
func (o *ModelLibraryOptions) GetEnableMarkerDetectionDuringLibraryScan() bool {
	if o == nil || IsNil(o.EnableMarkerDetectionDuringLibraryScan) {
		var ret bool
		return ret
	}
	return *o.EnableMarkerDetectionDuringLibraryScan
}

// GetEnableMarkerDetectionDuringLibraryScanOk returns a tuple with the EnableMarkerDetectionDuringLibraryScan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelLibraryOptions) GetEnableMarkerDetectionDuringLibraryScanOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableMarkerDetectionDuringLibraryScan) {
		return nil, false
	}
	return o.EnableMarkerDetectionDuringLibraryScan, true
}

// HasEnableMarkerDetectionDuringLibraryScan returns a boolean if a field has been set.
func (o *ModelLibraryOptions) HasEnableMarkerDetectionDuringLibraryScan() bool {
	if o != nil && !IsNil(o.EnableMarkerDetectionDuringLibraryScan) {
		return true
	}

	return false
}

// SetEnableMarkerDetectionDuringLibraryScan gets a reference to the given bool and assigns it to the EnableMarkerDetectionDuringLibraryScan field.
func (o *ModelLibraryOptions) SetEnableMarkerDetectionDuringLibraryScan(v bool) {
	o.EnableMarkerDetectionDuringLibraryScan = &v
}

// GetIntroDetectionFingerprintLength returns the IntroDetectionFingerprintLength field value if set, zero value otherwise.
func (o *ModelLibraryOptions) GetIntroDetectionFingerprintLength() int32 {
	if o == nil || IsNil(o.IntroDetectionFingerprintLength) {
		var ret int32
		return ret
	}
	return *o.IntroDetectionFingerprintLength
}

// GetIntroDetectionFingerprintLengthOk returns a tuple with the IntroDetectionFingerprintLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelLibraryOptions) GetIntroDetectionFingerprintLengthOk() (*int32, bool) {
	if o == nil || IsNil(o.IntroDetectionFingerprintLength) {
		return nil, false
	}
	return o.IntroDetectionFingerprintLength, true
}

// HasIntroDetectionFingerprintLength returns a boolean if a field has been set.
func (o *ModelLibraryOptions) HasIntroDetectionFingerprintLength() bool {
	if o != nil && !IsNil(o.IntroDetectionFingerprintLength) {
		return true
	}

	return false
}

// SetIntroDetectionFingerprintLength gets a reference to the given int32 and assigns it to the IntroDetectionFingerprintLength field.
func (o *ModelLibraryOptions) SetIntroDetectionFingerprintLength(v int32) {
	o.IntroDetectionFingerprintLength = &v
}

// GetEnableChapterImageExtraction returns the EnableChapterImageExtraction field value if set, zero value otherwise.
func (o *ModelLibraryOptions) GetEnableChapterImageExtraction() bool {
	if o == nil || IsNil(o.EnableChapterImageExtraction) {
		var ret bool
		return ret
	}
	return *o.EnableChapterImageExtraction
}

// GetEnableChapterImageExtractionOk returns a tuple with the EnableChapterImageExtraction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelLibraryOptions) GetEnableChapterImageExtractionOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableChapterImageExtraction) {
		return nil, false
	}
	return o.EnableChapterImageExtraction, true
}

// HasEnableChapterImageExtraction returns a boolean if a field has been set.
func (o *ModelLibraryOptions) HasEnableChapterImageExtraction() bool {
	if o != nil && !IsNil(o.EnableChapterImageExtraction) {
		return true
	}

	return false
}

// SetEnableChapterImageExtraction gets a reference to the given bool and assigns it to the EnableChapterImageExtraction field.
func (o *ModelLibraryOptions) SetEnableChapterImageExtraction(v bool) {
	o.EnableChapterImageExtraction = &v
}

// GetExtractChapterImagesDuringLibraryScan returns the ExtractChapterImagesDuringLibraryScan field value if set, zero value otherwise.
func (o *ModelLibraryOptions) GetExtractChapterImagesDuringLibraryScan() bool {
	if o == nil || IsNil(o.ExtractChapterImagesDuringLibraryScan) {
		var ret bool
		return ret
	}
	return *o.ExtractChapterImagesDuringLibraryScan
}

// GetExtractChapterImagesDuringLibraryScanOk returns a tuple with the ExtractChapterImagesDuringLibraryScan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelLibraryOptions) GetExtractChapterImagesDuringLibraryScanOk() (*bool, bool) {
	if o == nil || IsNil(o.ExtractChapterImagesDuringLibraryScan) {
		return nil, false
	}
	return o.ExtractChapterImagesDuringLibraryScan, true
}

// HasExtractChapterImagesDuringLibraryScan returns a boolean if a field has been set.
func (o *ModelLibraryOptions) HasExtractChapterImagesDuringLibraryScan() bool {
	if o != nil && !IsNil(o.ExtractChapterImagesDuringLibraryScan) {
		return true
	}

	return false
}

// SetExtractChapterImagesDuringLibraryScan gets a reference to the given bool and assigns it to the ExtractChapterImagesDuringLibraryScan field.
func (o *ModelLibraryOptions) SetExtractChapterImagesDuringLibraryScan(v bool) {
	o.ExtractChapterImagesDuringLibraryScan = &v
}

// GetDownloadImagesInAdvance returns the DownloadImagesInAdvance field value if set, zero value otherwise.
func (o *ModelLibraryOptions) GetDownloadImagesInAdvance() bool {
	if o == nil || IsNil(o.DownloadImagesInAdvance) {
		var ret bool
		return ret
	}
	return *o.DownloadImagesInAdvance
}

// GetDownloadImagesInAdvanceOk returns a tuple with the DownloadImagesInAdvance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelLibraryOptions) GetDownloadImagesInAdvanceOk() (*bool, bool) {
	if o == nil || IsNil(o.DownloadImagesInAdvance) {
		return nil, false
	}
	return o.DownloadImagesInAdvance, true
}

// HasDownloadImagesInAdvance returns a boolean if a field has been set.
func (o *ModelLibraryOptions) HasDownloadImagesInAdvance() bool {
	if o != nil && !IsNil(o.DownloadImagesInAdvance) {
		return true
	}

	return false
}

// SetDownloadImagesInAdvance gets a reference to the given bool and assigns it to the DownloadImagesInAdvance field.
func (o *ModelLibraryOptions) SetDownloadImagesInAdvance(v bool) {
	o.DownloadImagesInAdvance = &v
}

// GetPathInfos returns the PathInfos field value if set, zero value otherwise.
func (o *ModelLibraryOptions) GetPathInfos() []ModelMediaPathInfo {
	if o == nil || IsNil(o.PathInfos) {
		var ret []ModelMediaPathInfo
		return ret
	}
	return o.PathInfos
}

// GetPathInfosOk returns a tuple with the PathInfos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelLibraryOptions) GetPathInfosOk() ([]ModelMediaPathInfo, bool) {
	if o == nil || IsNil(o.PathInfos) {
		return nil, false
	}
	return o.PathInfos, true
}

// HasPathInfos returns a boolean if a field has been set.
func (o *ModelLibraryOptions) HasPathInfos() bool {
	if o != nil && !IsNil(o.PathInfos) {
		return true
	}

	return false
}

// SetPathInfos gets a reference to the given []ModelMediaPathInfo and assigns it to the PathInfos field.
func (o *ModelLibraryOptions) SetPathInfos(v []ModelMediaPathInfo) {
	o.PathInfos = v
}

// GetIgnoreHiddenFiles returns the IgnoreHiddenFiles field value if set, zero value otherwise.
func (o *ModelLibraryOptions) GetIgnoreHiddenFiles() bool {
	if o == nil || IsNil(o.IgnoreHiddenFiles) {
		var ret bool
		return ret
	}
	return *o.IgnoreHiddenFiles
}

// GetIgnoreHiddenFilesOk returns a tuple with the IgnoreHiddenFiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelLibraryOptions) GetIgnoreHiddenFilesOk() (*bool, bool) {
	if o == nil || IsNil(o.IgnoreHiddenFiles) {
		return nil, false
	}
	return o.IgnoreHiddenFiles, true
}

// HasIgnoreHiddenFiles returns a boolean if a field has been set.
func (o *ModelLibraryOptions) HasIgnoreHiddenFiles() bool {
	if o != nil && !IsNil(o.IgnoreHiddenFiles) {
		return true
	}

	return false
}

// SetIgnoreHiddenFiles gets a reference to the given bool and assigns it to the IgnoreHiddenFiles field.
func (o *ModelLibraryOptions) SetIgnoreHiddenFiles(v bool) {
	o.IgnoreHiddenFiles = &v
}

// GetIgnoreFileExtensions returns the IgnoreFileExtensions field value if set, zero value otherwise.
func (o *ModelLibraryOptions) GetIgnoreFileExtensions() []string {
	if o == nil || IsNil(o.IgnoreFileExtensions) {
		var ret []string
		return ret
	}
	return o.IgnoreFileExtensions
}

// GetIgnoreFileExtensionsOk returns a tuple with the IgnoreFileExtensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelLibraryOptions) GetIgnoreFileExtensionsOk() ([]string, bool) {
	if o == nil || IsNil(o.IgnoreFileExtensions) {
		return nil, false
	}
	return o.IgnoreFileExtensions, true
}

// HasIgnoreFileExtensions returns a boolean if a field has been set.
func (o *ModelLibraryOptions) HasIgnoreFileExtensions() bool {
	if o != nil && !IsNil(o.IgnoreFileExtensions) {
		return true
	}

	return false
}

// SetIgnoreFileExtensions gets a reference to the given []string and assigns it to the IgnoreFileExtensions field.
func (o *ModelLibraryOptions) SetIgnoreFileExtensions(v []string) {
	o.IgnoreFileExtensions = v
}

// GetSaveLocalMetadata returns the SaveLocalMetadata field value if set, zero value otherwise.
func (o *ModelLibraryOptions) GetSaveLocalMetadata() bool {
	if o == nil || IsNil(o.SaveLocalMetadata) {
		var ret bool
		return ret
	}
	return *o.SaveLocalMetadata
}

// GetSaveLocalMetadataOk returns a tuple with the SaveLocalMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelLibraryOptions) GetSaveLocalMetadataOk() (*bool, bool) {
	if o == nil || IsNil(o.SaveLocalMetadata) {
		return nil, false
	}
	return o.SaveLocalMetadata, true
}

// HasSaveLocalMetadata returns a boolean if a field has been set.
func (o *ModelLibraryOptions) HasSaveLocalMetadata() bool {
	if o != nil && !IsNil(o.SaveLocalMetadata) {
		return true
	}

	return false
}

// SetSaveLocalMetadata gets a reference to the given bool and assigns it to the SaveLocalMetadata field.
func (o *ModelLibraryOptions) SetSaveLocalMetadata(v bool) {
	o.SaveLocalMetadata = &v
}

// GetSaveMetadataHidden returns the SaveMetadataHidden field value if set, zero value otherwise.
func (o *ModelLibraryOptions) GetSaveMetadataHidden() bool {
	if o == nil || IsNil(o.SaveMetadataHidden) {
		var ret bool
		return ret
	}
	return *o.SaveMetadataHidden
}

// GetSaveMetadataHiddenOk returns a tuple with the SaveMetadataHidden field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelLibraryOptions) GetSaveMetadataHiddenOk() (*bool, bool) {
	if o == nil || IsNil(o.SaveMetadataHidden) {
		return nil, false
	}
	return o.SaveMetadataHidden, true
}

// HasSaveMetadataHidden returns a boolean if a field has been set.
func (o *ModelLibraryOptions) HasSaveMetadataHidden() bool {
	if o != nil && !IsNil(o.SaveMetadataHidden) {
		return true
	}

	return false
}

// SetSaveMetadataHidden gets a reference to the given bool and assigns it to the SaveMetadataHidden field.
func (o *ModelLibraryOptions) SetSaveMetadataHidden(v bool) {
	o.SaveMetadataHidden = &v
}

// GetSaveLocalThumbnailSets returns the SaveLocalThumbnailSets field value if set, zero value otherwise.
func (o *ModelLibraryOptions) GetSaveLocalThumbnailSets() bool {
	if o == nil || IsNil(o.SaveLocalThumbnailSets) {
		var ret bool
		return ret
	}
	return *o.SaveLocalThumbnailSets
}

// GetSaveLocalThumbnailSetsOk returns a tuple with the SaveLocalThumbnailSets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelLibraryOptions) GetSaveLocalThumbnailSetsOk() (*bool, bool) {
	if o == nil || IsNil(o.SaveLocalThumbnailSets) {
		return nil, false
	}
	return o.SaveLocalThumbnailSets, true
}

// HasSaveLocalThumbnailSets returns a boolean if a field has been set.
func (o *ModelLibraryOptions) HasSaveLocalThumbnailSets() bool {
	if o != nil && !IsNil(o.SaveLocalThumbnailSets) {
		return true
	}

	return false
}

// SetSaveLocalThumbnailSets gets a reference to the given bool and assigns it to the SaveLocalThumbnailSets field.
func (o *ModelLibraryOptions) SetSaveLocalThumbnailSets(v bool) {
	o.SaveLocalThumbnailSets = &v
}

// GetImportPlaylists returns the ImportPlaylists field value if set, zero value otherwise.
func (o *ModelLibraryOptions) GetImportPlaylists() bool {
	if o == nil || IsNil(o.ImportPlaylists) {
		var ret bool
		return ret
	}
	return *o.ImportPlaylists
}

// GetImportPlaylistsOk returns a tuple with the ImportPlaylists field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelLibraryOptions) GetImportPlaylistsOk() (*bool, bool) {
	if o == nil || IsNil(o.ImportPlaylists) {
		return nil, false
	}
	return o.ImportPlaylists, true
}

// HasImportPlaylists returns a boolean if a field has been set.
func (o *ModelLibraryOptions) HasImportPlaylists() bool {
	if o != nil && !IsNil(o.ImportPlaylists) {
		return true
	}

	return false
}

// SetImportPlaylists gets a reference to the given bool and assigns it to the ImportPlaylists field.
func (o *ModelLibraryOptions) SetImportPlaylists(v bool) {
	o.ImportPlaylists = &v
}

// GetEnableAutomaticSeriesGrouping returns the EnableAutomaticSeriesGrouping field value if set, zero value otherwise.
func (o *ModelLibraryOptions) GetEnableAutomaticSeriesGrouping() bool {
	if o == nil || IsNil(o.EnableAutomaticSeriesGrouping) {
		var ret bool
		return ret
	}
	return *o.EnableAutomaticSeriesGrouping
}

// GetEnableAutomaticSeriesGroupingOk returns a tuple with the EnableAutomaticSeriesGrouping field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelLibraryOptions) GetEnableAutomaticSeriesGroupingOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableAutomaticSeriesGrouping) {
		return nil, false
	}
	return o.EnableAutomaticSeriesGrouping, true
}

// HasEnableAutomaticSeriesGrouping returns a boolean if a field has been set.
func (o *ModelLibraryOptions) HasEnableAutomaticSeriesGrouping() bool {
	if o != nil && !IsNil(o.EnableAutomaticSeriesGrouping) {
		return true
	}

	return false
}

// SetEnableAutomaticSeriesGrouping gets a reference to the given bool and assigns it to the EnableAutomaticSeriesGrouping field.
func (o *ModelLibraryOptions) SetEnableAutomaticSeriesGrouping(v bool) {
	o.EnableAutomaticSeriesGrouping = &v
}

// GetShareEmbeddedMusicAlbumImages returns the ShareEmbeddedMusicAlbumImages field value if set, zero value otherwise.
func (o *ModelLibraryOptions) GetShareEmbeddedMusicAlbumImages() bool {
	if o == nil || IsNil(o.ShareEmbeddedMusicAlbumImages) {
		var ret bool
		return ret
	}
	return *o.ShareEmbeddedMusicAlbumImages
}

// GetShareEmbeddedMusicAlbumImagesOk returns a tuple with the ShareEmbeddedMusicAlbumImages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelLibraryOptions) GetShareEmbeddedMusicAlbumImagesOk() (*bool, bool) {
	if o == nil || IsNil(o.ShareEmbeddedMusicAlbumImages) {
		return nil, false
	}
	return o.ShareEmbeddedMusicAlbumImages, true
}

// HasShareEmbeddedMusicAlbumImages returns a boolean if a field has been set.
func (o *ModelLibraryOptions) HasShareEmbeddedMusicAlbumImages() bool {
	if o != nil && !IsNil(o.ShareEmbeddedMusicAlbumImages) {
		return true
	}

	return false
}

// SetShareEmbeddedMusicAlbumImages gets a reference to the given bool and assigns it to the ShareEmbeddedMusicAlbumImages field.
func (o *ModelLibraryOptions) SetShareEmbeddedMusicAlbumImages(v bool) {
	o.ShareEmbeddedMusicAlbumImages = &v
}

// GetEnableEmbeddedTitles returns the EnableEmbeddedTitles field value if set, zero value otherwise.
func (o *ModelLibraryOptions) GetEnableEmbeddedTitles() bool {
	if o == nil || IsNil(o.EnableEmbeddedTitles) {
		var ret bool
		return ret
	}
	return *o.EnableEmbeddedTitles
}

// GetEnableEmbeddedTitlesOk returns a tuple with the EnableEmbeddedTitles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelLibraryOptions) GetEnableEmbeddedTitlesOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableEmbeddedTitles) {
		return nil, false
	}
	return o.EnableEmbeddedTitles, true
}

// HasEnableEmbeddedTitles returns a boolean if a field has been set.
func (o *ModelLibraryOptions) HasEnableEmbeddedTitles() bool {
	if o != nil && !IsNil(o.EnableEmbeddedTitles) {
		return true
	}

	return false
}

// SetEnableEmbeddedTitles gets a reference to the given bool and assigns it to the EnableEmbeddedTitles field.
func (o *ModelLibraryOptions) SetEnableEmbeddedTitles(v bool) {
	o.EnableEmbeddedTitles = &v
}

// GetEnableAudioResume returns the EnableAudioResume field value if set, zero value otherwise.
func (o *ModelLibraryOptions) GetEnableAudioResume() bool {
	if o == nil || IsNil(o.EnableAudioResume) {
		var ret bool
		return ret
	}
	return *o.EnableAudioResume
}

// GetEnableAudioResumeOk returns a tuple with the EnableAudioResume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelLibraryOptions) GetEnableAudioResumeOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableAudioResume) {
		return nil, false
	}
	return o.EnableAudioResume, true
}

// HasEnableAudioResume returns a boolean if a field has been set.
func (o *ModelLibraryOptions) HasEnableAudioResume() bool {
	if o != nil && !IsNil(o.EnableAudioResume) {
		return true
	}

	return false
}

// SetEnableAudioResume gets a reference to the given bool and assigns it to the EnableAudioResume field.
func (o *ModelLibraryOptions) SetEnableAudioResume(v bool) {
	o.EnableAudioResume = &v
}

// GetAutoGenerateChapters returns the AutoGenerateChapters field value if set, zero value otherwise.
func (o *ModelLibraryOptions) GetAutoGenerateChapters() bool {
	if o == nil || IsNil(o.AutoGenerateChapters) {
		var ret bool
		return ret
	}
	return *o.AutoGenerateChapters
}

// GetAutoGenerateChaptersOk returns a tuple with the AutoGenerateChapters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelLibraryOptions) GetAutoGenerateChaptersOk() (*bool, bool) {
	if o == nil || IsNil(o.AutoGenerateChapters) {
		return nil, false
	}
	return o.AutoGenerateChapters, true
}

// HasAutoGenerateChapters returns a boolean if a field has been set.
func (o *ModelLibraryOptions) HasAutoGenerateChapters() bool {
	if o != nil && !IsNil(o.AutoGenerateChapters) {
		return true
	}

	return false
}

// SetAutoGenerateChapters gets a reference to the given bool and assigns it to the AutoGenerateChapters field.
func (o *ModelLibraryOptions) SetAutoGenerateChapters(v bool) {
	o.AutoGenerateChapters = &v
}

// GetAutomaticRefreshIntervalDays returns the AutomaticRefreshIntervalDays field value if set, zero value otherwise.
func (o *ModelLibraryOptions) GetAutomaticRefreshIntervalDays() int32 {
	if o == nil || IsNil(o.AutomaticRefreshIntervalDays) {
		var ret int32
		return ret
	}
	return *o.AutomaticRefreshIntervalDays
}

// GetAutomaticRefreshIntervalDaysOk returns a tuple with the AutomaticRefreshIntervalDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelLibraryOptions) GetAutomaticRefreshIntervalDaysOk() (*int32, bool) {
	if o == nil || IsNil(o.AutomaticRefreshIntervalDays) {
		return nil, false
	}
	return o.AutomaticRefreshIntervalDays, true
}

// HasAutomaticRefreshIntervalDays returns a boolean if a field has been set.
func (o *ModelLibraryOptions) HasAutomaticRefreshIntervalDays() bool {
	if o != nil && !IsNil(o.AutomaticRefreshIntervalDays) {
		return true
	}

	return false
}

// SetAutomaticRefreshIntervalDays gets a reference to the given int32 and assigns it to the AutomaticRefreshIntervalDays field.
func (o *ModelLibraryOptions) SetAutomaticRefreshIntervalDays(v int32) {
	o.AutomaticRefreshIntervalDays = &v
}

// GetPlaceholderMetadataRefreshIntervalDays returns the PlaceholderMetadataRefreshIntervalDays field value if set, zero value otherwise.
func (o *ModelLibraryOptions) GetPlaceholderMetadataRefreshIntervalDays() int32 {
	if o == nil || IsNil(o.PlaceholderMetadataRefreshIntervalDays) {
		var ret int32
		return ret
	}
	return *o.PlaceholderMetadataRefreshIntervalDays
}

// GetPlaceholderMetadataRefreshIntervalDaysOk returns a tuple with the PlaceholderMetadataRefreshIntervalDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelLibraryOptions) GetPlaceholderMetadataRefreshIntervalDaysOk() (*int32, bool) {
	if o == nil || IsNil(o.PlaceholderMetadataRefreshIntervalDays) {
		return nil, false
	}
	return o.PlaceholderMetadataRefreshIntervalDays, true
}

// HasPlaceholderMetadataRefreshIntervalDays returns a boolean if a field has been set.
func (o *ModelLibraryOptions) HasPlaceholderMetadataRefreshIntervalDays() bool {
	if o != nil && !IsNil(o.PlaceholderMetadataRefreshIntervalDays) {
		return true
	}

	return false
}

// SetPlaceholderMetadataRefreshIntervalDays gets a reference to the given int32 and assigns it to the PlaceholderMetadataRefreshIntervalDays field.
func (o *ModelLibraryOptions) SetPlaceholderMetadataRefreshIntervalDays(v int32) {
	o.PlaceholderMetadataRefreshIntervalDays = &v
}

// GetPreferredMetadataLanguage returns the PreferredMetadataLanguage field value if set, zero value otherwise.
func (o *ModelLibraryOptions) GetPreferredMetadataLanguage() string {
	if o == nil || IsNil(o.PreferredMetadataLanguage) {
		var ret string
		return ret
	}
	return *o.PreferredMetadataLanguage
}

// GetPreferredMetadataLanguageOk returns a tuple with the PreferredMetadataLanguage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelLibraryOptions) GetPreferredMetadataLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.PreferredMetadataLanguage) {
		return nil, false
	}
	return o.PreferredMetadataLanguage, true
}

// HasPreferredMetadataLanguage returns a boolean if a field has been set.
func (o *ModelLibraryOptions) HasPreferredMetadataLanguage() bool {
	if o != nil && !IsNil(o.PreferredMetadataLanguage) {
		return true
	}

	return false
}

// SetPreferredMetadataLanguage gets a reference to the given string and assigns it to the PreferredMetadataLanguage field.
func (o *ModelLibraryOptions) SetPreferredMetadataLanguage(v string) {
	o.PreferredMetadataLanguage = &v
}

// GetPreferredImageLanguage returns the PreferredImageLanguage field value if set, zero value otherwise.
func (o *ModelLibraryOptions) GetPreferredImageLanguage() string {
	if o == nil || IsNil(o.PreferredImageLanguage) {
		var ret string
		return ret
	}
	return *o.PreferredImageLanguage
}

// GetPreferredImageLanguageOk returns a tuple with the PreferredImageLanguage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelLibraryOptions) GetPreferredImageLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.PreferredImageLanguage) {
		return nil, false
	}
	return o.PreferredImageLanguage, true
}

// HasPreferredImageLanguage returns a boolean if a field has been set.
func (o *ModelLibraryOptions) HasPreferredImageLanguage() bool {
	if o != nil && !IsNil(o.PreferredImageLanguage) {
		return true
	}

	return false
}

// SetPreferredImageLanguage gets a reference to the given string and assigns it to the PreferredImageLanguage field.
func (o *ModelLibraryOptions) SetPreferredImageLanguage(v string) {
	o.PreferredImageLanguage = &v
}

// GetContentType returns the ContentType field value if set, zero value otherwise.
func (o *ModelLibraryOptions) GetContentType() string {
	if o == nil || IsNil(o.ContentType) {
		var ret string
		return ret
	}
	return *o.ContentType
}

// GetContentTypeOk returns a tuple with the ContentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelLibraryOptions) GetContentTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ContentType) {
		return nil, false
	}
	return o.ContentType, true
}

// HasContentType returns a boolean if a field has been set.
func (o *ModelLibraryOptions) HasContentType() bool {
	if o != nil && !IsNil(o.ContentType) {
		return true
	}

	return false
}

// SetContentType gets a reference to the given string and assigns it to the ContentType field.
func (o *ModelLibraryOptions) SetContentType(v string) {
	o.ContentType = &v
}

// GetMetadataCountryCode returns the MetadataCountryCode field value if set, zero value otherwise.
func (o *ModelLibraryOptions) GetMetadataCountryCode() string {
	if o == nil || IsNil(o.MetadataCountryCode) {
		var ret string
		return ret
	}
	return *o.MetadataCountryCode
}

// GetMetadataCountryCodeOk returns a tuple with the MetadataCountryCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelLibraryOptions) GetMetadataCountryCodeOk() (*string, bool) {
	if o == nil || IsNil(o.MetadataCountryCode) {
		return nil, false
	}
	return o.MetadataCountryCode, true
}

// HasMetadataCountryCode returns a boolean if a field has been set.
func (o *ModelLibraryOptions) HasMetadataCountryCode() bool {
	if o != nil && !IsNil(o.MetadataCountryCode) {
		return true
	}

	return false
}

// SetMetadataCountryCode gets a reference to the given string and assigns it to the MetadataCountryCode field.
func (o *ModelLibraryOptions) SetMetadataCountryCode(v string) {
	o.MetadataCountryCode = &v
}

// GetMetadataSavers returns the MetadataSavers field value if set, zero value otherwise.
func (o *ModelLibraryOptions) GetMetadataSavers() []string {
	if o == nil || IsNil(o.MetadataSavers) {
		var ret []string
		return ret
	}
	return o.MetadataSavers
}

// GetMetadataSaversOk returns a tuple with the MetadataSavers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelLibraryOptions) GetMetadataSaversOk() ([]string, bool) {
	if o == nil || IsNil(o.MetadataSavers) {
		return nil, false
	}
	return o.MetadataSavers, true
}

// HasMetadataSavers returns a boolean if a field has been set.
func (o *ModelLibraryOptions) HasMetadataSavers() bool {
	if o != nil && !IsNil(o.MetadataSavers) {
		return true
	}

	return false
}

// SetMetadataSavers gets a reference to the given []string and assigns it to the MetadataSavers field.
func (o *ModelLibraryOptions) SetMetadataSavers(v []string) {
	o.MetadataSavers = v
}

// GetDisabledLocalMetadataReaders returns the DisabledLocalMetadataReaders field value if set, zero value otherwise.
func (o *ModelLibraryOptions) GetDisabledLocalMetadataReaders() []string {
	if o == nil || IsNil(o.DisabledLocalMetadataReaders) {
		var ret []string
		return ret
	}
	return o.DisabledLocalMetadataReaders
}

// GetDisabledLocalMetadataReadersOk returns a tuple with the DisabledLocalMetadataReaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelLibraryOptions) GetDisabledLocalMetadataReadersOk() ([]string, bool) {
	if o == nil || IsNil(o.DisabledLocalMetadataReaders) {
		return nil, false
	}
	return o.DisabledLocalMetadataReaders, true
}

// HasDisabledLocalMetadataReaders returns a boolean if a field has been set.
func (o *ModelLibraryOptions) HasDisabledLocalMetadataReaders() bool {
	if o != nil && !IsNil(o.DisabledLocalMetadataReaders) {
		return true
	}

	return false
}

// SetDisabledLocalMetadataReaders gets a reference to the given []string and assigns it to the DisabledLocalMetadataReaders field.
func (o *ModelLibraryOptions) SetDisabledLocalMetadataReaders(v []string) {
	o.DisabledLocalMetadataReaders = v
}

// GetLocalMetadataReaderOrder returns the LocalMetadataReaderOrder field value if set, zero value otherwise.
func (o *ModelLibraryOptions) GetLocalMetadataReaderOrder() []string {
	if o == nil || IsNil(o.LocalMetadataReaderOrder) {
		var ret []string
		return ret
	}
	return o.LocalMetadataReaderOrder
}

// GetLocalMetadataReaderOrderOk returns a tuple with the LocalMetadataReaderOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelLibraryOptions) GetLocalMetadataReaderOrderOk() ([]string, bool) {
	if o == nil || IsNil(o.LocalMetadataReaderOrder) {
		return nil, false
	}
	return o.LocalMetadataReaderOrder, true
}

// HasLocalMetadataReaderOrder returns a boolean if a field has been set.
func (o *ModelLibraryOptions) HasLocalMetadataReaderOrder() bool {
	if o != nil && !IsNil(o.LocalMetadataReaderOrder) {
		return true
	}

	return false
}

// SetLocalMetadataReaderOrder gets a reference to the given []string and assigns it to the LocalMetadataReaderOrder field.
func (o *ModelLibraryOptions) SetLocalMetadataReaderOrder(v []string) {
	o.LocalMetadataReaderOrder = v
}

// GetDisabledLyricsFetchers returns the DisabledLyricsFetchers field value if set, zero value otherwise.
func (o *ModelLibraryOptions) GetDisabledLyricsFetchers() []string {
	if o == nil || IsNil(o.DisabledLyricsFetchers) {
		var ret []string
		return ret
	}
	return o.DisabledLyricsFetchers
}

// GetDisabledLyricsFetchersOk returns a tuple with the DisabledLyricsFetchers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelLibraryOptions) GetDisabledLyricsFetchersOk() ([]string, bool) {
	if o == nil || IsNil(o.DisabledLyricsFetchers) {
		return nil, false
	}
	return o.DisabledLyricsFetchers, true
}

// HasDisabledLyricsFetchers returns a boolean if a field has been set.
func (o *ModelLibraryOptions) HasDisabledLyricsFetchers() bool {
	if o != nil && !IsNil(o.DisabledLyricsFetchers) {
		return true
	}

	return false
}

// SetDisabledLyricsFetchers gets a reference to the given []string and assigns it to the DisabledLyricsFetchers field.
func (o *ModelLibraryOptions) SetDisabledLyricsFetchers(v []string) {
	o.DisabledLyricsFetchers = v
}

// GetSaveLyricsWithMedia returns the SaveLyricsWithMedia field value if set, zero value otherwise.
func (o *ModelLibraryOptions) GetSaveLyricsWithMedia() bool {
	if o == nil || IsNil(o.SaveLyricsWithMedia) {
		var ret bool
		return ret
	}
	return *o.SaveLyricsWithMedia
}

// GetSaveLyricsWithMediaOk returns a tuple with the SaveLyricsWithMedia field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelLibraryOptions) GetSaveLyricsWithMediaOk() (*bool, bool) {
	if o == nil || IsNil(o.SaveLyricsWithMedia) {
		return nil, false
	}
	return o.SaveLyricsWithMedia, true
}

// HasSaveLyricsWithMedia returns a boolean if a field has been set.
func (o *ModelLibraryOptions) HasSaveLyricsWithMedia() bool {
	if o != nil && !IsNil(o.SaveLyricsWithMedia) {
		return true
	}

	return false
}

// SetSaveLyricsWithMedia gets a reference to the given bool and assigns it to the SaveLyricsWithMedia field.
func (o *ModelLibraryOptions) SetSaveLyricsWithMedia(v bool) {
	o.SaveLyricsWithMedia = &v
}

// GetLyricsDownloadMaxAgeDays returns the LyricsDownloadMaxAgeDays field value if set, zero value otherwise.
func (o *ModelLibraryOptions) GetLyricsDownloadMaxAgeDays() int32 {
	if o == nil || IsNil(o.LyricsDownloadMaxAgeDays) {
		var ret int32
		return ret
	}
	return *o.LyricsDownloadMaxAgeDays
}

// GetLyricsDownloadMaxAgeDaysOk returns a tuple with the LyricsDownloadMaxAgeDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelLibraryOptions) GetLyricsDownloadMaxAgeDaysOk() (*int32, bool) {
	if o == nil || IsNil(o.LyricsDownloadMaxAgeDays) {
		return nil, false
	}
	return o.LyricsDownloadMaxAgeDays, true
}

// HasLyricsDownloadMaxAgeDays returns a boolean if a field has been set.
func (o *ModelLibraryOptions) HasLyricsDownloadMaxAgeDays() bool {
	if o != nil && !IsNil(o.LyricsDownloadMaxAgeDays) {
		return true
	}

	return false
}

// SetLyricsDownloadMaxAgeDays gets a reference to the given int32 and assigns it to the LyricsDownloadMaxAgeDays field.
func (o *ModelLibraryOptions) SetLyricsDownloadMaxAgeDays(v int32) {
	o.LyricsDownloadMaxAgeDays = &v
}

// GetLyricsFetcherOrder returns the LyricsFetcherOrder field value if set, zero value otherwise.
func (o *ModelLibraryOptions) GetLyricsFetcherOrder() []string {
	if o == nil || IsNil(o.LyricsFetcherOrder) {
		var ret []string
		return ret
	}
	return o.LyricsFetcherOrder
}

// GetLyricsFetcherOrderOk returns a tuple with the LyricsFetcherOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelLibraryOptions) GetLyricsFetcherOrderOk() ([]string, bool) {
	if o == nil || IsNil(o.LyricsFetcherOrder) {
		return nil, false
	}
	return o.LyricsFetcherOrder, true
}

// HasLyricsFetcherOrder returns a boolean if a field has been set.
func (o *ModelLibraryOptions) HasLyricsFetcherOrder() bool {
	if o != nil && !IsNil(o.LyricsFetcherOrder) {
		return true
	}

	return false
}

// SetLyricsFetcherOrder gets a reference to the given []string and assigns it to the LyricsFetcherOrder field.
func (o *ModelLibraryOptions) SetLyricsFetcherOrder(v []string) {
	o.LyricsFetcherOrder = v
}

// GetLyricsDownloadLanguages returns the LyricsDownloadLanguages field value if set, zero value otherwise.
func (o *ModelLibraryOptions) GetLyricsDownloadLanguages() []string {
	if o == nil || IsNil(o.LyricsDownloadLanguages) {
		var ret []string
		return ret
	}
	return o.LyricsDownloadLanguages
}

// GetLyricsDownloadLanguagesOk returns a tuple with the LyricsDownloadLanguages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelLibraryOptions) GetLyricsDownloadLanguagesOk() ([]string, bool) {
	if o == nil || IsNil(o.LyricsDownloadLanguages) {
		return nil, false
	}
	return o.LyricsDownloadLanguages, true
}

// HasLyricsDownloadLanguages returns a boolean if a field has been set.
func (o *ModelLibraryOptions) HasLyricsDownloadLanguages() bool {
	if o != nil && !IsNil(o.LyricsDownloadLanguages) {
		return true
	}

	return false
}

// SetLyricsDownloadLanguages gets a reference to the given []string and assigns it to the LyricsDownloadLanguages field.
func (o *ModelLibraryOptions) SetLyricsDownloadLanguages(v []string) {
	o.LyricsDownloadLanguages = v
}

// GetDisabledSubtitleFetchers returns the DisabledSubtitleFetchers field value if set, zero value otherwise.
func (o *ModelLibraryOptions) GetDisabledSubtitleFetchers() []string {
	if o == nil || IsNil(o.DisabledSubtitleFetchers) {
		var ret []string
		return ret
	}
	return o.DisabledSubtitleFetchers
}

// GetDisabledSubtitleFetchersOk returns a tuple with the DisabledSubtitleFetchers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelLibraryOptions) GetDisabledSubtitleFetchersOk() ([]string, bool) {
	if o == nil || IsNil(o.DisabledSubtitleFetchers) {
		return nil, false
	}
	return o.DisabledSubtitleFetchers, true
}

// HasDisabledSubtitleFetchers returns a boolean if a field has been set.
func (o *ModelLibraryOptions) HasDisabledSubtitleFetchers() bool {
	if o != nil && !IsNil(o.DisabledSubtitleFetchers) {
		return true
	}

	return false
}

// SetDisabledSubtitleFetchers gets a reference to the given []string and assigns it to the DisabledSubtitleFetchers field.
func (o *ModelLibraryOptions) SetDisabledSubtitleFetchers(v []string) {
	o.DisabledSubtitleFetchers = v
}

// GetSubtitleFetcherOrder returns the SubtitleFetcherOrder field value if set, zero value otherwise.
func (o *ModelLibraryOptions) GetSubtitleFetcherOrder() []string {
	if o == nil || IsNil(o.SubtitleFetcherOrder) {
		var ret []string
		return ret
	}
	return o.SubtitleFetcherOrder
}

// GetSubtitleFetcherOrderOk returns a tuple with the SubtitleFetcherOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelLibraryOptions) GetSubtitleFetcherOrderOk() ([]string, bool) {
	if o == nil || IsNil(o.SubtitleFetcherOrder) {
		return nil, false
	}
	return o.SubtitleFetcherOrder, true
}

// HasSubtitleFetcherOrder returns a boolean if a field has been set.
func (o *ModelLibraryOptions) HasSubtitleFetcherOrder() bool {
	if o != nil && !IsNil(o.SubtitleFetcherOrder) {
		return true
	}

	return false
}

// SetSubtitleFetcherOrder gets a reference to the given []string and assigns it to the SubtitleFetcherOrder field.
func (o *ModelLibraryOptions) SetSubtitleFetcherOrder(v []string) {
	o.SubtitleFetcherOrder = v
}

// GetSkipSubtitlesIfEmbeddedSubtitlesPresent returns the SkipSubtitlesIfEmbeddedSubtitlesPresent field value if set, zero value otherwise.
func (o *ModelLibraryOptions) GetSkipSubtitlesIfEmbeddedSubtitlesPresent() bool {
	if o == nil || IsNil(o.SkipSubtitlesIfEmbeddedSubtitlesPresent) {
		var ret bool
		return ret
	}
	return *o.SkipSubtitlesIfEmbeddedSubtitlesPresent
}

// GetSkipSubtitlesIfEmbeddedSubtitlesPresentOk returns a tuple with the SkipSubtitlesIfEmbeddedSubtitlesPresent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelLibraryOptions) GetSkipSubtitlesIfEmbeddedSubtitlesPresentOk() (*bool, bool) {
	if o == nil || IsNil(o.SkipSubtitlesIfEmbeddedSubtitlesPresent) {
		return nil, false
	}
	return o.SkipSubtitlesIfEmbeddedSubtitlesPresent, true
}

// HasSkipSubtitlesIfEmbeddedSubtitlesPresent returns a boolean if a field has been set.
func (o *ModelLibraryOptions) HasSkipSubtitlesIfEmbeddedSubtitlesPresent() bool {
	if o != nil && !IsNil(o.SkipSubtitlesIfEmbeddedSubtitlesPresent) {
		return true
	}

	return false
}

// SetSkipSubtitlesIfEmbeddedSubtitlesPresent gets a reference to the given bool and assigns it to the SkipSubtitlesIfEmbeddedSubtitlesPresent field.
func (o *ModelLibraryOptions) SetSkipSubtitlesIfEmbeddedSubtitlesPresent(v bool) {
	o.SkipSubtitlesIfEmbeddedSubtitlesPresent = &v
}

// GetSkipSubtitlesIfAudioTrackMatches returns the SkipSubtitlesIfAudioTrackMatches field value if set, zero value otherwise.
func (o *ModelLibraryOptions) GetSkipSubtitlesIfAudioTrackMatches() bool {
	if o == nil || IsNil(o.SkipSubtitlesIfAudioTrackMatches) {
		var ret bool
		return ret
	}
	return *o.SkipSubtitlesIfAudioTrackMatches
}

// GetSkipSubtitlesIfAudioTrackMatchesOk returns a tuple with the SkipSubtitlesIfAudioTrackMatches field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelLibraryOptions) GetSkipSubtitlesIfAudioTrackMatchesOk() (*bool, bool) {
	if o == nil || IsNil(o.SkipSubtitlesIfAudioTrackMatches) {
		return nil, false
	}
	return o.SkipSubtitlesIfAudioTrackMatches, true
}

// HasSkipSubtitlesIfAudioTrackMatches returns a boolean if a field has been set.
func (o *ModelLibraryOptions) HasSkipSubtitlesIfAudioTrackMatches() bool {
	if o != nil && !IsNil(o.SkipSubtitlesIfAudioTrackMatches) {
		return true
	}

	return false
}

// SetSkipSubtitlesIfAudioTrackMatches gets a reference to the given bool and assigns it to the SkipSubtitlesIfAudioTrackMatches field.
func (o *ModelLibraryOptions) SetSkipSubtitlesIfAudioTrackMatches(v bool) {
	o.SkipSubtitlesIfAudioTrackMatches = &v
}

// GetSubtitleDownloadLanguages returns the SubtitleDownloadLanguages field value if set, zero value otherwise.
func (o *ModelLibraryOptions) GetSubtitleDownloadLanguages() []string {
	if o == nil || IsNil(o.SubtitleDownloadLanguages) {
		var ret []string
		return ret
	}
	return o.SubtitleDownloadLanguages
}

// GetSubtitleDownloadLanguagesOk returns a tuple with the SubtitleDownloadLanguages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelLibraryOptions) GetSubtitleDownloadLanguagesOk() ([]string, bool) {
	if o == nil || IsNil(o.SubtitleDownloadLanguages) {
		return nil, false
	}
	return o.SubtitleDownloadLanguages, true
}

// HasSubtitleDownloadLanguages returns a boolean if a field has been set.
func (o *ModelLibraryOptions) HasSubtitleDownloadLanguages() bool {
	if o != nil && !IsNil(o.SubtitleDownloadLanguages) {
		return true
	}

	return false
}

// SetSubtitleDownloadLanguages gets a reference to the given []string and assigns it to the SubtitleDownloadLanguages field.
func (o *ModelLibraryOptions) SetSubtitleDownloadLanguages(v []string) {
	o.SubtitleDownloadLanguages = v
}

// GetSubtitleDownloadMaxAgeDays returns the SubtitleDownloadMaxAgeDays field value if set, zero value otherwise.
func (o *ModelLibraryOptions) GetSubtitleDownloadMaxAgeDays() int32 {
	if o == nil || IsNil(o.SubtitleDownloadMaxAgeDays) {
		var ret int32
		return ret
	}
	return *o.SubtitleDownloadMaxAgeDays
}

// GetSubtitleDownloadMaxAgeDaysOk returns a tuple with the SubtitleDownloadMaxAgeDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelLibraryOptions) GetSubtitleDownloadMaxAgeDaysOk() (*int32, bool) {
	if o == nil || IsNil(o.SubtitleDownloadMaxAgeDays) {
		return nil, false
	}
	return o.SubtitleDownloadMaxAgeDays, true
}

// HasSubtitleDownloadMaxAgeDays returns a boolean if a field has been set.
func (o *ModelLibraryOptions) HasSubtitleDownloadMaxAgeDays() bool {
	if o != nil && !IsNil(o.SubtitleDownloadMaxAgeDays) {
		return true
	}

	return false
}

// SetSubtitleDownloadMaxAgeDays gets a reference to the given int32 and assigns it to the SubtitleDownloadMaxAgeDays field.
func (o *ModelLibraryOptions) SetSubtitleDownloadMaxAgeDays(v int32) {
	o.SubtitleDownloadMaxAgeDays = &v
}

// GetRequirePerfectSubtitleMatch returns the RequirePerfectSubtitleMatch field value if set, zero value otherwise.
func (o *ModelLibraryOptions) GetRequirePerfectSubtitleMatch() bool {
	if o == nil || IsNil(o.RequirePerfectSubtitleMatch) {
		var ret bool
		return ret
	}
	return *o.RequirePerfectSubtitleMatch
}

// GetRequirePerfectSubtitleMatchOk returns a tuple with the RequirePerfectSubtitleMatch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelLibraryOptions) GetRequirePerfectSubtitleMatchOk() (*bool, bool) {
	if o == nil || IsNil(o.RequirePerfectSubtitleMatch) {
		return nil, false
	}
	return o.RequirePerfectSubtitleMatch, true
}

// HasRequirePerfectSubtitleMatch returns a boolean if a field has been set.
func (o *ModelLibraryOptions) HasRequirePerfectSubtitleMatch() bool {
	if o != nil && !IsNil(o.RequirePerfectSubtitleMatch) {
		return true
	}

	return false
}

// SetRequirePerfectSubtitleMatch gets a reference to the given bool and assigns it to the RequirePerfectSubtitleMatch field.
func (o *ModelLibraryOptions) SetRequirePerfectSubtitleMatch(v bool) {
	o.RequirePerfectSubtitleMatch = &v
}

// GetSaveSubtitlesWithMedia returns the SaveSubtitlesWithMedia field value if set, zero value otherwise.
func (o *ModelLibraryOptions) GetSaveSubtitlesWithMedia() bool {
	if o == nil || IsNil(o.SaveSubtitlesWithMedia) {
		var ret bool
		return ret
	}
	return *o.SaveSubtitlesWithMedia
}

// GetSaveSubtitlesWithMediaOk returns a tuple with the SaveSubtitlesWithMedia field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelLibraryOptions) GetSaveSubtitlesWithMediaOk() (*bool, bool) {
	if o == nil || IsNil(o.SaveSubtitlesWithMedia) {
		return nil, false
	}
	return o.SaveSubtitlesWithMedia, true
}

// HasSaveSubtitlesWithMedia returns a boolean if a field has been set.
func (o *ModelLibraryOptions) HasSaveSubtitlesWithMedia() bool {
	if o != nil && !IsNil(o.SaveSubtitlesWithMedia) {
		return true
	}

	return false
}

// SetSaveSubtitlesWithMedia gets a reference to the given bool and assigns it to the SaveSubtitlesWithMedia field.
func (o *ModelLibraryOptions) SetSaveSubtitlesWithMedia(v bool) {
	o.SaveSubtitlesWithMedia = &v
}

// GetForcedSubtitlesOnly returns the ForcedSubtitlesOnly field value if set, zero value otherwise.
func (o *ModelLibraryOptions) GetForcedSubtitlesOnly() bool {
	if o == nil || IsNil(o.ForcedSubtitlesOnly) {
		var ret bool
		return ret
	}
	return *o.ForcedSubtitlesOnly
}

// GetForcedSubtitlesOnlyOk returns a tuple with the ForcedSubtitlesOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelLibraryOptions) GetForcedSubtitlesOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.ForcedSubtitlesOnly) {
		return nil, false
	}
	return o.ForcedSubtitlesOnly, true
}

// HasForcedSubtitlesOnly returns a boolean if a field has been set.
func (o *ModelLibraryOptions) HasForcedSubtitlesOnly() bool {
	if o != nil && !IsNil(o.ForcedSubtitlesOnly) {
		return true
	}

	return false
}

// SetForcedSubtitlesOnly gets a reference to the given bool and assigns it to the ForcedSubtitlesOnly field.
func (o *ModelLibraryOptions) SetForcedSubtitlesOnly(v bool) {
	o.ForcedSubtitlesOnly = &v
}

// GetHearingImpairedSubtitlesOnly returns the HearingImpairedSubtitlesOnly field value if set, zero value otherwise.
func (o *ModelLibraryOptions) GetHearingImpairedSubtitlesOnly() bool {
	if o == nil || IsNil(o.HearingImpairedSubtitlesOnly) {
		var ret bool
		return ret
	}
	return *o.HearingImpairedSubtitlesOnly
}

// GetHearingImpairedSubtitlesOnlyOk returns a tuple with the HearingImpairedSubtitlesOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelLibraryOptions) GetHearingImpairedSubtitlesOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.HearingImpairedSubtitlesOnly) {
		return nil, false
	}
	return o.HearingImpairedSubtitlesOnly, true
}

// HasHearingImpairedSubtitlesOnly returns a boolean if a field has been set.
func (o *ModelLibraryOptions) HasHearingImpairedSubtitlesOnly() bool {
	if o != nil && !IsNil(o.HearingImpairedSubtitlesOnly) {
		return true
	}

	return false
}

// SetHearingImpairedSubtitlesOnly gets a reference to the given bool and assigns it to the HearingImpairedSubtitlesOnly field.
func (o *ModelLibraryOptions) SetHearingImpairedSubtitlesOnly(v bool) {
	o.HearingImpairedSubtitlesOnly = &v
}

// GetTypeOptions returns the TypeOptions field value if set, zero value otherwise.
func (o *ModelLibraryOptions) GetTypeOptions() []ModelTypeOptions {
	if o == nil || IsNil(o.TypeOptions) {
		var ret []ModelTypeOptions
		return ret
	}
	return o.TypeOptions
}

// GetTypeOptionsOk returns a tuple with the TypeOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelLibraryOptions) GetTypeOptionsOk() ([]ModelTypeOptions, bool) {
	if o == nil || IsNil(o.TypeOptions) {
		return nil, false
	}
	return o.TypeOptions, true
}

// HasTypeOptions returns a boolean if a field has been set.
func (o *ModelLibraryOptions) HasTypeOptions() bool {
	if o != nil && !IsNil(o.TypeOptions) {
		return true
	}

	return false
}

// SetTypeOptions gets a reference to the given []ModelTypeOptions and assigns it to the TypeOptions field.
func (o *ModelLibraryOptions) SetTypeOptions(v []ModelTypeOptions) {
	o.TypeOptions = v
}

// GetCollapseSingleItemFolders returns the CollapseSingleItemFolders field value if set, zero value otherwise.
func (o *ModelLibraryOptions) GetCollapseSingleItemFolders() bool {
	if o == nil || IsNil(o.CollapseSingleItemFolders) {
		var ret bool
		return ret
	}
	return *o.CollapseSingleItemFolders
}

// GetCollapseSingleItemFoldersOk returns a tuple with the CollapseSingleItemFolders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelLibraryOptions) GetCollapseSingleItemFoldersOk() (*bool, bool) {
	if o == nil || IsNil(o.CollapseSingleItemFolders) {
		return nil, false
	}
	return o.CollapseSingleItemFolders, true
}

// HasCollapseSingleItemFolders returns a boolean if a field has been set.
func (o *ModelLibraryOptions) HasCollapseSingleItemFolders() bool {
	if o != nil && !IsNil(o.CollapseSingleItemFolders) {
		return true
	}

	return false
}

// SetCollapseSingleItemFolders gets a reference to the given bool and assigns it to the CollapseSingleItemFolders field.
func (o *ModelLibraryOptions) SetCollapseSingleItemFolders(v bool) {
	o.CollapseSingleItemFolders = &v
}

// GetEnableAdultMetadata returns the EnableAdultMetadata field value if set, zero value otherwise.
func (o *ModelLibraryOptions) GetEnableAdultMetadata() bool {
	if o == nil || IsNil(o.EnableAdultMetadata) {
		var ret bool
		return ret
	}
	return *o.EnableAdultMetadata
}

// GetEnableAdultMetadataOk returns a tuple with the EnableAdultMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelLibraryOptions) GetEnableAdultMetadataOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableAdultMetadata) {
		return nil, false
	}
	return o.EnableAdultMetadata, true
}

// HasEnableAdultMetadata returns a boolean if a field has been set.
func (o *ModelLibraryOptions) HasEnableAdultMetadata() bool {
	if o != nil && !IsNil(o.EnableAdultMetadata) {
		return true
	}

	return false
}

// SetEnableAdultMetadata gets a reference to the given bool and assigns it to the EnableAdultMetadata field.
func (o *ModelLibraryOptions) SetEnableAdultMetadata(v bool) {
	o.EnableAdultMetadata = &v
}

// GetImportCollections returns the ImportCollections field value if set, zero value otherwise.
func (o *ModelLibraryOptions) GetImportCollections() bool {
	if o == nil || IsNil(o.ImportCollections) {
		var ret bool
		return ret
	}
	return *o.ImportCollections
}

// GetImportCollectionsOk returns a tuple with the ImportCollections field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelLibraryOptions) GetImportCollectionsOk() (*bool, bool) {
	if o == nil || IsNil(o.ImportCollections) {
		return nil, false
	}
	return o.ImportCollections, true
}

// HasImportCollections returns a boolean if a field has been set.
func (o *ModelLibraryOptions) HasImportCollections() bool {
	if o != nil && !IsNil(o.ImportCollections) {
		return true
	}

	return false
}

// SetImportCollections gets a reference to the given bool and assigns it to the ImportCollections field.
func (o *ModelLibraryOptions) SetImportCollections(v bool) {
	o.ImportCollections = &v
}

// GetMinCollectionItems returns the MinCollectionItems field value if set, zero value otherwise.
func (o *ModelLibraryOptions) GetMinCollectionItems() int32 {
	if o == nil || IsNil(o.MinCollectionItems) {
		var ret int32
		return ret
	}
	return *o.MinCollectionItems
}

// GetMinCollectionItemsOk returns a tuple with the MinCollectionItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelLibraryOptions) GetMinCollectionItemsOk() (*int32, bool) {
	if o == nil || IsNil(o.MinCollectionItems) {
		return nil, false
	}
	return o.MinCollectionItems, true
}

// HasMinCollectionItems returns a boolean if a field has been set.
func (o *ModelLibraryOptions) HasMinCollectionItems() bool {
	if o != nil && !IsNil(o.MinCollectionItems) {
		return true
	}

	return false
}

// SetMinCollectionItems gets a reference to the given int32 and assigns it to the MinCollectionItems field.
func (o *ModelLibraryOptions) SetMinCollectionItems(v int32) {
	o.MinCollectionItems = &v
}

// GetMusicFolderStructure returns the MusicFolderStructure field value if set, zero value otherwise.
func (o *ModelLibraryOptions) GetMusicFolderStructure() string {
	if o == nil || IsNil(o.MusicFolderStructure) {
		var ret string
		return ret
	}
	return *o.MusicFolderStructure
}

// GetMusicFolderStructureOk returns a tuple with the MusicFolderStructure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelLibraryOptions) GetMusicFolderStructureOk() (*string, bool) {
	if o == nil || IsNil(o.MusicFolderStructure) {
		return nil, false
	}
	return o.MusicFolderStructure, true
}

// HasMusicFolderStructure returns a boolean if a field has been set.
func (o *ModelLibraryOptions) HasMusicFolderStructure() bool {
	if o != nil && !IsNil(o.MusicFolderStructure) {
		return true
	}

	return false
}

// SetMusicFolderStructure gets a reference to the given string and assigns it to the MusicFolderStructure field.
func (o *ModelLibraryOptions) SetMusicFolderStructure(v string) {
	o.MusicFolderStructure = &v
}

// GetMinResumePct returns the MinResumePct field value if set, zero value otherwise.
func (o *ModelLibraryOptions) GetMinResumePct() int32 {
	if o == nil || IsNil(o.MinResumePct) {
		var ret int32
		return ret
	}
	return *o.MinResumePct
}

// GetMinResumePctOk returns a tuple with the MinResumePct field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelLibraryOptions) GetMinResumePctOk() (*int32, bool) {
	if o == nil || IsNil(o.MinResumePct) {
		return nil, false
	}
	return o.MinResumePct, true
}

// HasMinResumePct returns a boolean if a field has been set.
func (o *ModelLibraryOptions) HasMinResumePct() bool {
	if o != nil && !IsNil(o.MinResumePct) {
		return true
	}

	return false
}

// SetMinResumePct gets a reference to the given int32 and assigns it to the MinResumePct field.
func (o *ModelLibraryOptions) SetMinResumePct(v int32) {
	o.MinResumePct = &v
}

// GetMaxResumePct returns the MaxResumePct field value if set, zero value otherwise.
func (o *ModelLibraryOptions) GetMaxResumePct() int32 {
	if o == nil || IsNil(o.MaxResumePct) {
		var ret int32
		return ret
	}
	return *o.MaxResumePct
}

// GetMaxResumePctOk returns a tuple with the MaxResumePct field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelLibraryOptions) GetMaxResumePctOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxResumePct) {
		return nil, false
	}
	return o.MaxResumePct, true
}

// HasMaxResumePct returns a boolean if a field has been set.
func (o *ModelLibraryOptions) HasMaxResumePct() bool {
	if o != nil && !IsNil(o.MaxResumePct) {
		return true
	}

	return false
}

// SetMaxResumePct gets a reference to the given int32 and assigns it to the MaxResumePct field.
func (o *ModelLibraryOptions) SetMaxResumePct(v int32) {
	o.MaxResumePct = &v
}

// GetMinResumeDurationSeconds returns the MinResumeDurationSeconds field value if set, zero value otherwise.
func (o *ModelLibraryOptions) GetMinResumeDurationSeconds() int32 {
	if o == nil || IsNil(o.MinResumeDurationSeconds) {
		var ret int32
		return ret
	}
	return *o.MinResumeDurationSeconds
}

// GetMinResumeDurationSecondsOk returns a tuple with the MinResumeDurationSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelLibraryOptions) GetMinResumeDurationSecondsOk() (*int32, bool) {
	if o == nil || IsNil(o.MinResumeDurationSeconds) {
		return nil, false
	}
	return o.MinResumeDurationSeconds, true
}

// HasMinResumeDurationSeconds returns a boolean if a field has been set.
func (o *ModelLibraryOptions) HasMinResumeDurationSeconds() bool {
	if o != nil && !IsNil(o.MinResumeDurationSeconds) {
		return true
	}

	return false
}

// SetMinResumeDurationSeconds gets a reference to the given int32 and assigns it to the MinResumeDurationSeconds field.
func (o *ModelLibraryOptions) SetMinResumeDurationSeconds(v int32) {
	o.MinResumeDurationSeconds = &v
}

// GetThumbnailImagesIntervalSeconds returns the ThumbnailImagesIntervalSeconds field value if set, zero value otherwise.
func (o *ModelLibraryOptions) GetThumbnailImagesIntervalSeconds() int32 {
	if o == nil || IsNil(o.ThumbnailImagesIntervalSeconds) {
		var ret int32
		return ret
	}
	return *o.ThumbnailImagesIntervalSeconds
}

// GetThumbnailImagesIntervalSecondsOk returns a tuple with the ThumbnailImagesIntervalSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelLibraryOptions) GetThumbnailImagesIntervalSecondsOk() (*int32, bool) {
	if o == nil || IsNil(o.ThumbnailImagesIntervalSeconds) {
		return nil, false
	}
	return o.ThumbnailImagesIntervalSeconds, true
}

// HasThumbnailImagesIntervalSeconds returns a boolean if a field has been set.
func (o *ModelLibraryOptions) HasThumbnailImagesIntervalSeconds() bool {
	if o != nil && !IsNil(o.ThumbnailImagesIntervalSeconds) {
		return true
	}

	return false
}

// SetThumbnailImagesIntervalSeconds gets a reference to the given int32 and assigns it to the ThumbnailImagesIntervalSeconds field.
func (o *ModelLibraryOptions) SetThumbnailImagesIntervalSeconds(v int32) {
	o.ThumbnailImagesIntervalSeconds = &v
}

// GetSampleIgnoreSize returns the SampleIgnoreSize field value if set, zero value otherwise.
func (o *ModelLibraryOptions) GetSampleIgnoreSize() int32 {
	if o == nil || IsNil(o.SampleIgnoreSize) {
		var ret int32
		return ret
	}
	return *o.SampleIgnoreSize
}

// GetSampleIgnoreSizeOk returns a tuple with the SampleIgnoreSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelLibraryOptions) GetSampleIgnoreSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.SampleIgnoreSize) {
		return nil, false
	}
	return o.SampleIgnoreSize, true
}

// HasSampleIgnoreSize returns a boolean if a field has been set.
func (o *ModelLibraryOptions) HasSampleIgnoreSize() bool {
	if o != nil && !IsNil(o.SampleIgnoreSize) {
		return true
	}

	return false
}

// SetSampleIgnoreSize gets a reference to the given int32 and assigns it to the SampleIgnoreSize field.
func (o *ModelLibraryOptions) SetSampleIgnoreSize(v int32) {
	o.SampleIgnoreSize = &v
}

func (o ModelLibraryOptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelLibraryOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EnableArchiveMediaFiles) {
		toSerialize["EnableArchiveMediaFiles"] = o.EnableArchiveMediaFiles
	}
	if !IsNil(o.EnablePhotos) {
		toSerialize["EnablePhotos"] = o.EnablePhotos
	}
	if !IsNil(o.EnableRealtimeMonitor) {
		toSerialize["EnableRealtimeMonitor"] = o.EnableRealtimeMonitor
	}
	if !IsNil(o.EnableMarkerDetection) {
		toSerialize["EnableMarkerDetection"] = o.EnableMarkerDetection
	}
	if !IsNil(o.EnableMarkerDetectionDuringLibraryScan) {
		toSerialize["EnableMarkerDetectionDuringLibraryScan"] = o.EnableMarkerDetectionDuringLibraryScan
	}
	if !IsNil(o.IntroDetectionFingerprintLength) {
		toSerialize["IntroDetectionFingerprintLength"] = o.IntroDetectionFingerprintLength
	}
	if !IsNil(o.EnableChapterImageExtraction) {
		toSerialize["EnableChapterImageExtraction"] = o.EnableChapterImageExtraction
	}
	if !IsNil(o.ExtractChapterImagesDuringLibraryScan) {
		toSerialize["ExtractChapterImagesDuringLibraryScan"] = o.ExtractChapterImagesDuringLibraryScan
	}
	if !IsNil(o.DownloadImagesInAdvance) {
		toSerialize["DownloadImagesInAdvance"] = o.DownloadImagesInAdvance
	}
	if !IsNil(o.PathInfos) {
		toSerialize["PathInfos"] = o.PathInfos
	}
	if !IsNil(o.IgnoreHiddenFiles) {
		toSerialize["IgnoreHiddenFiles"] = o.IgnoreHiddenFiles
	}
	if !IsNil(o.IgnoreFileExtensions) {
		toSerialize["IgnoreFileExtensions"] = o.IgnoreFileExtensions
	}
	if !IsNil(o.SaveLocalMetadata) {
		toSerialize["SaveLocalMetadata"] = o.SaveLocalMetadata
	}
	if !IsNil(o.SaveMetadataHidden) {
		toSerialize["SaveMetadataHidden"] = o.SaveMetadataHidden
	}
	if !IsNil(o.SaveLocalThumbnailSets) {
		toSerialize["SaveLocalThumbnailSets"] = o.SaveLocalThumbnailSets
	}
	if !IsNil(o.ImportPlaylists) {
		toSerialize["ImportPlaylists"] = o.ImportPlaylists
	}
	if !IsNil(o.EnableAutomaticSeriesGrouping) {
		toSerialize["EnableAutomaticSeriesGrouping"] = o.EnableAutomaticSeriesGrouping
	}
	if !IsNil(o.ShareEmbeddedMusicAlbumImages) {
		toSerialize["ShareEmbeddedMusicAlbumImages"] = o.ShareEmbeddedMusicAlbumImages
	}
	if !IsNil(o.EnableEmbeddedTitles) {
		toSerialize["EnableEmbeddedTitles"] = o.EnableEmbeddedTitles
	}
	if !IsNil(o.EnableAudioResume) {
		toSerialize["EnableAudioResume"] = o.EnableAudioResume
	}
	if !IsNil(o.AutoGenerateChapters) {
		toSerialize["AutoGenerateChapters"] = o.AutoGenerateChapters
	}
	if !IsNil(o.AutomaticRefreshIntervalDays) {
		toSerialize["AutomaticRefreshIntervalDays"] = o.AutomaticRefreshIntervalDays
	}
	if !IsNil(o.PlaceholderMetadataRefreshIntervalDays) {
		toSerialize["PlaceholderMetadataRefreshIntervalDays"] = o.PlaceholderMetadataRefreshIntervalDays
	}
	if !IsNil(o.PreferredMetadataLanguage) {
		toSerialize["PreferredMetadataLanguage"] = o.PreferredMetadataLanguage
	}
	if !IsNil(o.PreferredImageLanguage) {
		toSerialize["PreferredImageLanguage"] = o.PreferredImageLanguage
	}
	if !IsNil(o.ContentType) {
		toSerialize["ContentType"] = o.ContentType
	}
	if !IsNil(o.MetadataCountryCode) {
		toSerialize["MetadataCountryCode"] = o.MetadataCountryCode
	}
	if !IsNil(o.MetadataSavers) {
		toSerialize["MetadataSavers"] = o.MetadataSavers
	}
	if !IsNil(o.DisabledLocalMetadataReaders) {
		toSerialize["DisabledLocalMetadataReaders"] = o.DisabledLocalMetadataReaders
	}
	if !IsNil(o.LocalMetadataReaderOrder) {
		toSerialize["LocalMetadataReaderOrder"] = o.LocalMetadataReaderOrder
	}
	if !IsNil(o.DisabledLyricsFetchers) {
		toSerialize["DisabledLyricsFetchers"] = o.DisabledLyricsFetchers
	}
	if !IsNil(o.SaveLyricsWithMedia) {
		toSerialize["SaveLyricsWithMedia"] = o.SaveLyricsWithMedia
	}
	if !IsNil(o.LyricsDownloadMaxAgeDays) {
		toSerialize["LyricsDownloadMaxAgeDays"] = o.LyricsDownloadMaxAgeDays
	}
	if !IsNil(o.LyricsFetcherOrder) {
		toSerialize["LyricsFetcherOrder"] = o.LyricsFetcherOrder
	}
	if !IsNil(o.LyricsDownloadLanguages) {
		toSerialize["LyricsDownloadLanguages"] = o.LyricsDownloadLanguages
	}
	if !IsNil(o.DisabledSubtitleFetchers) {
		toSerialize["DisabledSubtitleFetchers"] = o.DisabledSubtitleFetchers
	}
	if !IsNil(o.SubtitleFetcherOrder) {
		toSerialize["SubtitleFetcherOrder"] = o.SubtitleFetcherOrder
	}
	if !IsNil(o.SkipSubtitlesIfEmbeddedSubtitlesPresent) {
		toSerialize["SkipSubtitlesIfEmbeddedSubtitlesPresent"] = o.SkipSubtitlesIfEmbeddedSubtitlesPresent
	}
	if !IsNil(o.SkipSubtitlesIfAudioTrackMatches) {
		toSerialize["SkipSubtitlesIfAudioTrackMatches"] = o.SkipSubtitlesIfAudioTrackMatches
	}
	if !IsNil(o.SubtitleDownloadLanguages) {
		toSerialize["SubtitleDownloadLanguages"] = o.SubtitleDownloadLanguages
	}
	if !IsNil(o.SubtitleDownloadMaxAgeDays) {
		toSerialize["SubtitleDownloadMaxAgeDays"] = o.SubtitleDownloadMaxAgeDays
	}
	if !IsNil(o.RequirePerfectSubtitleMatch) {
		toSerialize["RequirePerfectSubtitleMatch"] = o.RequirePerfectSubtitleMatch
	}
	if !IsNil(o.SaveSubtitlesWithMedia) {
		toSerialize["SaveSubtitlesWithMedia"] = o.SaveSubtitlesWithMedia
	}
	if !IsNil(o.ForcedSubtitlesOnly) {
		toSerialize["ForcedSubtitlesOnly"] = o.ForcedSubtitlesOnly
	}
	if !IsNil(o.HearingImpairedSubtitlesOnly) {
		toSerialize["HearingImpairedSubtitlesOnly"] = o.HearingImpairedSubtitlesOnly
	}
	if !IsNil(o.TypeOptions) {
		toSerialize["TypeOptions"] = o.TypeOptions
	}
	if !IsNil(o.CollapseSingleItemFolders) {
		toSerialize["CollapseSingleItemFolders"] = o.CollapseSingleItemFolders
	}
	if !IsNil(o.EnableAdultMetadata) {
		toSerialize["EnableAdultMetadata"] = o.EnableAdultMetadata
	}
	if !IsNil(o.ImportCollections) {
		toSerialize["ImportCollections"] = o.ImportCollections
	}
	if !IsNil(o.MinCollectionItems) {
		toSerialize["MinCollectionItems"] = o.MinCollectionItems
	}
	if !IsNil(o.MusicFolderStructure) {
		toSerialize["MusicFolderStructure"] = o.MusicFolderStructure
	}
	if !IsNil(o.MinResumePct) {
		toSerialize["MinResumePct"] = o.MinResumePct
	}
	if !IsNil(o.MaxResumePct) {
		toSerialize["MaxResumePct"] = o.MaxResumePct
	}
	if !IsNil(o.MinResumeDurationSeconds) {
		toSerialize["MinResumeDurationSeconds"] = o.MinResumeDurationSeconds
	}
	if !IsNil(o.ThumbnailImagesIntervalSeconds) {
		toSerialize["ThumbnailImagesIntervalSeconds"] = o.ThumbnailImagesIntervalSeconds
	}
	if !IsNil(o.SampleIgnoreSize) {
		toSerialize["SampleIgnoreSize"] = o.SampleIgnoreSize
	}
	return toSerialize, nil
}

type NullableModelLibraryOptions struct {
	value *ModelLibraryOptions
	isSet bool
}

func (v NullableModelLibraryOptions) Get() *ModelLibraryOptions {
	return v.value
}

func (v *NullableModelLibraryOptions) Set(val *ModelLibraryOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableModelLibraryOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableModelLibraryOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelLibraryOptions(val *ModelLibraryOptions) *NullableModelLibraryOptions {
	return &NullableModelLibraryOptions{value: val, isSet: true}
}

func (v NullableModelLibraryOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelLibraryOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


