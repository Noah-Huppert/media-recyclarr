/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"encoding/json"
	"fmt"
)

// ModelItemFileType the model 'ModelItemFileType'
type ModelItemFileType string

// List of ItemFileType
const (
	MODELITEMFILETYPE_MEDIA ModelItemFileType = "Media"
	MODELITEMFILETYPE_IMAGE ModelItemFileType = "Image"
	MODELITEMFILETYPE_SUBTITLES ModelItemFileType = "Subtitles"
)

// All allowed values of ModelItemFileType enum
var AllowedModelItemFileTypeEnumValues = []ModelItemFileType{
	"Media",
	"Image",
	"Subtitles",
}

func (v *ModelItemFileType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ModelItemFileType(value)
	for _, existing := range AllowedModelItemFileTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ModelItemFileType", value)
}

// NewModelItemFileTypeFromValue returns a pointer to a valid ModelItemFileType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewModelItemFileTypeFromValue(v string) (*ModelItemFileType, error) {
	ev := ModelItemFileType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ModelItemFileType: valid values are %v", v, AllowedModelItemFileTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ModelItemFileType) IsValid() bool {
	for _, existing := range AllowedModelItemFileTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ItemFileType value
func (v ModelItemFileType) Ptr() *ModelItemFileType {
	return &v
}

type NullableModelItemFileType struct {
	value *ModelItemFileType
	isSet bool
}

func (v NullableModelItemFileType) Get() *ModelItemFileType {
	return v.value
}

func (v *NullableModelItemFileType) Set(val *ModelItemFileType) {
	v.value = val
	v.isSet = true
}

func (v NullableModelItemFileType) IsSet() bool {
	return v.isSet
}

func (v *NullableModelItemFileType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelItemFileType(val *ModelItemFileType) *NullableModelItemFileType {
	return &NullableModelItemFileType{value: val, isSet: true}
}

func (v NullableModelItemFileType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelItemFileType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

