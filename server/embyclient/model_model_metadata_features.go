/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"encoding/json"
	"fmt"
)

// ModelMetadataFeatures the model 'ModelMetadataFeatures'
type ModelMetadataFeatures string

// List of MetadataFeatures
const (
	MODELMETADATAFEATURES_COLLECTIONS ModelMetadataFeatures = "Collections"
	MODELMETADATAFEATURES_ADULT ModelMetadataFeatures = "Adult"
	MODELMETADATAFEATURES_REQUIRED_SETUP ModelMetadataFeatures = "RequiredSetup"
)

// All allowed values of ModelMetadataFeatures enum
var AllowedModelMetadataFeaturesEnumValues = []ModelMetadataFeatures{
	"Collections",
	"Adult",
	"RequiredSetup",
}

func (v *ModelMetadataFeatures) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ModelMetadataFeatures(value)
	for _, existing := range AllowedModelMetadataFeaturesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ModelMetadataFeatures", value)
}

// NewModelMetadataFeaturesFromValue returns a pointer to a valid ModelMetadataFeatures
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewModelMetadataFeaturesFromValue(v string) (*ModelMetadataFeatures, error) {
	ev := ModelMetadataFeatures(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ModelMetadataFeatures: valid values are %v", v, AllowedModelMetadataFeaturesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ModelMetadataFeatures) IsValid() bool {
	for _, existing := range AllowedModelMetadataFeaturesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MetadataFeatures value
func (v ModelMetadataFeatures) Ptr() *ModelMetadataFeatures {
	return &v
}

type NullableModelMetadataFeatures struct {
	value *ModelMetadataFeatures
	isSet bool
}

func (v NullableModelMetadataFeatures) Get() *ModelMetadataFeatures {
	return v.value
}

func (v *NullableModelMetadataFeatures) Set(val *ModelMetadataFeatures) {
	v.value = val
	v.isSet = true
}

func (v NullableModelMetadataFeatures) IsSet() bool {
	return v.isSet
}

func (v *NullableModelMetadataFeatures) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelMetadataFeatures(val *ModelMetadataFeatures) *NullableModelMetadataFeatures {
	return &NullableModelMetadataFeatures{value: val, isSet: true}
}

func (v NullableModelMetadataFeatures) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelMetadataFeatures) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

