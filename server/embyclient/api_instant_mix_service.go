/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// InstantMixServiceAPIService InstantMixServiceAPI service
type InstantMixServiceAPIService service

type InstantMixServiceAPIGetAlbumsByIdInstantmixRequest struct {
	ctx context.Context
	ApiService *InstantMixServiceAPIService
	id string
	includeItemTypes *string
	enableImages *bool
	enableUserData *bool
	imageTypeLimit *int32
	enableImageTypes *string
	userId *string
	limit *int32
	fields *string
}

// Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
func (r InstantMixServiceAPIGetAlbumsByIdInstantmixRequest) IncludeItemTypes(includeItemTypes string) InstantMixServiceAPIGetAlbumsByIdInstantmixRequest {
	r.includeItemTypes = &includeItemTypes
	return r
}

// Optional, include image information in output
func (r InstantMixServiceAPIGetAlbumsByIdInstantmixRequest) EnableImages(enableImages bool) InstantMixServiceAPIGetAlbumsByIdInstantmixRequest {
	r.enableImages = &enableImages
	return r
}

// Optional, include user data
func (r InstantMixServiceAPIGetAlbumsByIdInstantmixRequest) EnableUserData(enableUserData bool) InstantMixServiceAPIGetAlbumsByIdInstantmixRequest {
	r.enableUserData = &enableUserData
	return r
}

// Optional, the max number of images to return, per image type
func (r InstantMixServiceAPIGetAlbumsByIdInstantmixRequest) ImageTypeLimit(imageTypeLimit int32) InstantMixServiceAPIGetAlbumsByIdInstantmixRequest {
	r.imageTypeLimit = &imageTypeLimit
	return r
}

// Optional. The image types to include in the output.
func (r InstantMixServiceAPIGetAlbumsByIdInstantmixRequest) EnableImageTypes(enableImageTypes string) InstantMixServiceAPIGetAlbumsByIdInstantmixRequest {
	r.enableImageTypes = &enableImageTypes
	return r
}

// Optional. Filter by user id, and attach user data
func (r InstantMixServiceAPIGetAlbumsByIdInstantmixRequest) UserId(userId string) InstantMixServiceAPIGetAlbumsByIdInstantmixRequest {
	r.userId = &userId
	return r
}

// Optional. The maximum number of records to return
func (r InstantMixServiceAPIGetAlbumsByIdInstantmixRequest) Limit(limit int32) InstantMixServiceAPIGetAlbumsByIdInstantmixRequest {
	r.limit = &limit
	return r
}

// Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls
func (r InstantMixServiceAPIGetAlbumsByIdInstantmixRequest) Fields(fields string) InstantMixServiceAPIGetAlbumsByIdInstantmixRequest {
	r.fields = &fields
	return r
}

func (r InstantMixServiceAPIGetAlbumsByIdInstantmixRequest) Execute() (*ModelQueryResultBaseItemDto, *http.Response, error) {
	return r.ApiService.GetAlbumsByIdInstantmixExecute(r)
}

/*
GetAlbumsByIdInstantmix Creates an instant playlist based on a given album

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Item Id
 @return InstantMixServiceAPIGetAlbumsByIdInstantmixRequest
*/
func (a *InstantMixServiceAPIService) GetAlbumsByIdInstantmix(ctx context.Context, id string) InstantMixServiceAPIGetAlbumsByIdInstantmixRequest {
	return InstantMixServiceAPIGetAlbumsByIdInstantmixRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ModelQueryResultBaseItemDto
func (a *InstantMixServiceAPIService) GetAlbumsByIdInstantmixExecute(r InstantMixServiceAPIGetAlbumsByIdInstantmixRequest) (*ModelQueryResultBaseItemDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ModelQueryResultBaseItemDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InstantMixServiceAPIService.GetAlbumsByIdInstantmix")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Albums/{Id}/InstantMix"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.includeItemTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IncludeItemTypes", r.includeItemTypes, "")
	}
	if r.enableImages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImages", r.enableImages, "")
	}
	if r.enableUserData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableUserData", r.enableUserData, "")
	}
	if r.imageTypeLimit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ImageTypeLimit", r.imageTypeLimit, "")
	}
	if r.enableImageTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImageTypes", r.enableImageTypes, "")
	}
	if r.userId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "UserId", r.userId, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Limit", r.limit, "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Fields", r.fields, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type InstantMixServiceAPIGetArtistsInstantmixRequest struct {
	ctx context.Context
	ApiService *InstantMixServiceAPIService
	includeItemTypes *string
	enableImages *bool
	enableUserData *bool
	imageTypeLimit *int32
	enableImageTypes *string
	userId *string
	limit *int32
	fields *string
}

// Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
func (r InstantMixServiceAPIGetArtistsInstantmixRequest) IncludeItemTypes(includeItemTypes string) InstantMixServiceAPIGetArtistsInstantmixRequest {
	r.includeItemTypes = &includeItemTypes
	return r
}

// Optional, include image information in output
func (r InstantMixServiceAPIGetArtistsInstantmixRequest) EnableImages(enableImages bool) InstantMixServiceAPIGetArtistsInstantmixRequest {
	r.enableImages = &enableImages
	return r
}

// Optional, include user data
func (r InstantMixServiceAPIGetArtistsInstantmixRequest) EnableUserData(enableUserData bool) InstantMixServiceAPIGetArtistsInstantmixRequest {
	r.enableUserData = &enableUserData
	return r
}

// Optional, the max number of images to return, per image type
func (r InstantMixServiceAPIGetArtistsInstantmixRequest) ImageTypeLimit(imageTypeLimit int32) InstantMixServiceAPIGetArtistsInstantmixRequest {
	r.imageTypeLimit = &imageTypeLimit
	return r
}

// Optional. The image types to include in the output.
func (r InstantMixServiceAPIGetArtistsInstantmixRequest) EnableImageTypes(enableImageTypes string) InstantMixServiceAPIGetArtistsInstantmixRequest {
	r.enableImageTypes = &enableImageTypes
	return r
}

// Optional. Filter by user id, and attach user data
func (r InstantMixServiceAPIGetArtistsInstantmixRequest) UserId(userId string) InstantMixServiceAPIGetArtistsInstantmixRequest {
	r.userId = &userId
	return r
}

// Optional. The maximum number of records to return
func (r InstantMixServiceAPIGetArtistsInstantmixRequest) Limit(limit int32) InstantMixServiceAPIGetArtistsInstantmixRequest {
	r.limit = &limit
	return r
}

// Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls
func (r InstantMixServiceAPIGetArtistsInstantmixRequest) Fields(fields string) InstantMixServiceAPIGetArtistsInstantmixRequest {
	r.fields = &fields
	return r
}

func (r InstantMixServiceAPIGetArtistsInstantmixRequest) Execute() (*ModelQueryResultBaseItemDto, *http.Response, error) {
	return r.ApiService.GetArtistsInstantmixExecute(r)
}

/*
GetArtistsInstantmix Creates an instant playlist based on a given artist

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return InstantMixServiceAPIGetArtistsInstantmixRequest
*/
func (a *InstantMixServiceAPIService) GetArtistsInstantmix(ctx context.Context) InstantMixServiceAPIGetArtistsInstantmixRequest {
	return InstantMixServiceAPIGetArtistsInstantmixRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ModelQueryResultBaseItemDto
func (a *InstantMixServiceAPIService) GetArtistsInstantmixExecute(r InstantMixServiceAPIGetArtistsInstantmixRequest) (*ModelQueryResultBaseItemDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ModelQueryResultBaseItemDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InstantMixServiceAPIService.GetArtistsInstantmix")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Artists/InstantMix"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.includeItemTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IncludeItemTypes", r.includeItemTypes, "")
	}
	if r.enableImages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImages", r.enableImages, "")
	}
	if r.enableUserData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableUserData", r.enableUserData, "")
	}
	if r.imageTypeLimit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ImageTypeLimit", r.imageTypeLimit, "")
	}
	if r.enableImageTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImageTypes", r.enableImageTypes, "")
	}
	if r.userId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "UserId", r.userId, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Limit", r.limit, "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Fields", r.fields, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type InstantMixServiceAPIGetAudiobooksNextupRequest struct {
	ctx context.Context
	ApiService *InstantMixServiceAPIService
	userId *string
	startIndex *int32
	limit *int32
	fields *string
	albumId *string
	parentId *string
	enableImages *bool
	imageTypeLimit *int32
	enableImageTypes *string
	enableUserData *bool
}

// User Id
func (r InstantMixServiceAPIGetAudiobooksNextupRequest) UserId(userId string) InstantMixServiceAPIGetAudiobooksNextupRequest {
	r.userId = &userId
	return r
}

// Optional. The record index to start at. All items with a lower index will be dropped from the results.
func (r InstantMixServiceAPIGetAudiobooksNextupRequest) StartIndex(startIndex int32) InstantMixServiceAPIGetAudiobooksNextupRequest {
	r.startIndex = &startIndex
	return r
}

// Optional. The maximum number of records to return
func (r InstantMixServiceAPIGetAudiobooksNextupRequest) Limit(limit int32) InstantMixServiceAPIGetAudiobooksNextupRequest {
	r.limit = &limit
	return r
}

// Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls
func (r InstantMixServiceAPIGetAudiobooksNextupRequest) Fields(fields string) InstantMixServiceAPIGetAudiobooksNextupRequest {
	r.fields = &fields
	return r
}

// Optional. Filter by series id
func (r InstantMixServiceAPIGetAudiobooksNextupRequest) AlbumId(albumId string) InstantMixServiceAPIGetAudiobooksNextupRequest {
	r.albumId = &albumId
	return r
}

// Specify this to localize the search to a specific item or folder. Omit to use the root
func (r InstantMixServiceAPIGetAudiobooksNextupRequest) ParentId(parentId string) InstantMixServiceAPIGetAudiobooksNextupRequest {
	r.parentId = &parentId
	return r
}

// Optional, include image information in output
func (r InstantMixServiceAPIGetAudiobooksNextupRequest) EnableImages(enableImages bool) InstantMixServiceAPIGetAudiobooksNextupRequest {
	r.enableImages = &enableImages
	return r
}

// Optional, the max number of images to return, per image type
func (r InstantMixServiceAPIGetAudiobooksNextupRequest) ImageTypeLimit(imageTypeLimit int32) InstantMixServiceAPIGetAudiobooksNextupRequest {
	r.imageTypeLimit = &imageTypeLimit
	return r
}

// Optional. The image types to include in the output.
func (r InstantMixServiceAPIGetAudiobooksNextupRequest) EnableImageTypes(enableImageTypes string) InstantMixServiceAPIGetAudiobooksNextupRequest {
	r.enableImageTypes = &enableImageTypes
	return r
}

// Optional, include user data
func (r InstantMixServiceAPIGetAudiobooksNextupRequest) EnableUserData(enableUserData bool) InstantMixServiceAPIGetAudiobooksNextupRequest {
	r.enableUserData = &enableUserData
	return r
}

func (r InstantMixServiceAPIGetAudiobooksNextupRequest) Execute() (*ModelQueryResultBaseItemDto, *http.Response, error) {
	return r.ApiService.GetAudiobooksNextupExecute(r)
}

/*
GetAudiobooksNextup Gets a list of next up episodes

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return InstantMixServiceAPIGetAudiobooksNextupRequest
*/
func (a *InstantMixServiceAPIService) GetAudiobooksNextup(ctx context.Context) InstantMixServiceAPIGetAudiobooksNextupRequest {
	return InstantMixServiceAPIGetAudiobooksNextupRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ModelQueryResultBaseItemDto
func (a *InstantMixServiceAPIService) GetAudiobooksNextupExecute(r InstantMixServiceAPIGetAudiobooksNextupRequest) (*ModelQueryResultBaseItemDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ModelQueryResultBaseItemDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InstantMixServiceAPIService.GetAudiobooksNextup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/AudioBooks/NextUp"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.userId == nil {
		return localVarReturnValue, nil, reportError("userId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "UserId", r.userId, "")
	if r.startIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "StartIndex", r.startIndex, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Limit", r.limit, "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Fields", r.fields, "")
	}
	if r.albumId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AlbumId", r.albumId, "")
	}
	if r.parentId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ParentId", r.parentId, "")
	}
	if r.enableImages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImages", r.enableImages, "")
	}
	if r.imageTypeLimit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ImageTypeLimit", r.imageTypeLimit, "")
	}
	if r.enableImageTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImageTypes", r.enableImageTypes, "")
	}
	if r.enableUserData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableUserData", r.enableUserData, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type InstantMixServiceAPIGetItemsByIdInstantmixRequest struct {
	ctx context.Context
	ApiService *InstantMixServiceAPIService
	id string
	includeItemTypes *string
	enableImages *bool
	enableUserData *bool
	imageTypeLimit *int32
	enableImageTypes *string
	userId *string
	limit *int32
	fields *string
}

// Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
func (r InstantMixServiceAPIGetItemsByIdInstantmixRequest) IncludeItemTypes(includeItemTypes string) InstantMixServiceAPIGetItemsByIdInstantmixRequest {
	r.includeItemTypes = &includeItemTypes
	return r
}

// Optional, include image information in output
func (r InstantMixServiceAPIGetItemsByIdInstantmixRequest) EnableImages(enableImages bool) InstantMixServiceAPIGetItemsByIdInstantmixRequest {
	r.enableImages = &enableImages
	return r
}

// Optional, include user data
func (r InstantMixServiceAPIGetItemsByIdInstantmixRequest) EnableUserData(enableUserData bool) InstantMixServiceAPIGetItemsByIdInstantmixRequest {
	r.enableUserData = &enableUserData
	return r
}

// Optional, the max number of images to return, per image type
func (r InstantMixServiceAPIGetItemsByIdInstantmixRequest) ImageTypeLimit(imageTypeLimit int32) InstantMixServiceAPIGetItemsByIdInstantmixRequest {
	r.imageTypeLimit = &imageTypeLimit
	return r
}

// Optional. The image types to include in the output.
func (r InstantMixServiceAPIGetItemsByIdInstantmixRequest) EnableImageTypes(enableImageTypes string) InstantMixServiceAPIGetItemsByIdInstantmixRequest {
	r.enableImageTypes = &enableImageTypes
	return r
}

// Optional. Filter by user id, and attach user data
func (r InstantMixServiceAPIGetItemsByIdInstantmixRequest) UserId(userId string) InstantMixServiceAPIGetItemsByIdInstantmixRequest {
	r.userId = &userId
	return r
}

// Optional. The maximum number of records to return
func (r InstantMixServiceAPIGetItemsByIdInstantmixRequest) Limit(limit int32) InstantMixServiceAPIGetItemsByIdInstantmixRequest {
	r.limit = &limit
	return r
}

// Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls
func (r InstantMixServiceAPIGetItemsByIdInstantmixRequest) Fields(fields string) InstantMixServiceAPIGetItemsByIdInstantmixRequest {
	r.fields = &fields
	return r
}

func (r InstantMixServiceAPIGetItemsByIdInstantmixRequest) Execute() (*ModelQueryResultBaseItemDto, *http.Response, error) {
	return r.ApiService.GetItemsByIdInstantmixExecute(r)
}

/*
GetItemsByIdInstantmix Creates an instant playlist based on a given item

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Item Id
 @return InstantMixServiceAPIGetItemsByIdInstantmixRequest
*/
func (a *InstantMixServiceAPIService) GetItemsByIdInstantmix(ctx context.Context, id string) InstantMixServiceAPIGetItemsByIdInstantmixRequest {
	return InstantMixServiceAPIGetItemsByIdInstantmixRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ModelQueryResultBaseItemDto
func (a *InstantMixServiceAPIService) GetItemsByIdInstantmixExecute(r InstantMixServiceAPIGetItemsByIdInstantmixRequest) (*ModelQueryResultBaseItemDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ModelQueryResultBaseItemDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InstantMixServiceAPIService.GetItemsByIdInstantmix")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Items/{Id}/InstantMix"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.includeItemTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IncludeItemTypes", r.includeItemTypes, "")
	}
	if r.enableImages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImages", r.enableImages, "")
	}
	if r.enableUserData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableUserData", r.enableUserData, "")
	}
	if r.imageTypeLimit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ImageTypeLimit", r.imageTypeLimit, "")
	}
	if r.enableImageTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImageTypes", r.enableImageTypes, "")
	}
	if r.userId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "UserId", r.userId, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Limit", r.limit, "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Fields", r.fields, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type InstantMixServiceAPIGetMusicgenresByNameInstantmixRequest struct {
	ctx context.Context
	ApiService *InstantMixServiceAPIService
	name string
	includeItemTypes *string
	enableImages *bool
	enableUserData *bool
	imageTypeLimit *int32
	enableImageTypes *string
	userId *string
	limit *int32
	fields *string
}

// Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
func (r InstantMixServiceAPIGetMusicgenresByNameInstantmixRequest) IncludeItemTypes(includeItemTypes string) InstantMixServiceAPIGetMusicgenresByNameInstantmixRequest {
	r.includeItemTypes = &includeItemTypes
	return r
}

// Optional, include image information in output
func (r InstantMixServiceAPIGetMusicgenresByNameInstantmixRequest) EnableImages(enableImages bool) InstantMixServiceAPIGetMusicgenresByNameInstantmixRequest {
	r.enableImages = &enableImages
	return r
}

// Optional, include user data
func (r InstantMixServiceAPIGetMusicgenresByNameInstantmixRequest) EnableUserData(enableUserData bool) InstantMixServiceAPIGetMusicgenresByNameInstantmixRequest {
	r.enableUserData = &enableUserData
	return r
}

// Optional, the max number of images to return, per image type
func (r InstantMixServiceAPIGetMusicgenresByNameInstantmixRequest) ImageTypeLimit(imageTypeLimit int32) InstantMixServiceAPIGetMusicgenresByNameInstantmixRequest {
	r.imageTypeLimit = &imageTypeLimit
	return r
}

// Optional. The image types to include in the output.
func (r InstantMixServiceAPIGetMusicgenresByNameInstantmixRequest) EnableImageTypes(enableImageTypes string) InstantMixServiceAPIGetMusicgenresByNameInstantmixRequest {
	r.enableImageTypes = &enableImageTypes
	return r
}

// Optional. Filter by user id, and attach user data
func (r InstantMixServiceAPIGetMusicgenresByNameInstantmixRequest) UserId(userId string) InstantMixServiceAPIGetMusicgenresByNameInstantmixRequest {
	r.userId = &userId
	return r
}

// Optional. The maximum number of records to return
func (r InstantMixServiceAPIGetMusicgenresByNameInstantmixRequest) Limit(limit int32) InstantMixServiceAPIGetMusicgenresByNameInstantmixRequest {
	r.limit = &limit
	return r
}

// Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls
func (r InstantMixServiceAPIGetMusicgenresByNameInstantmixRequest) Fields(fields string) InstantMixServiceAPIGetMusicgenresByNameInstantmixRequest {
	r.fields = &fields
	return r
}

func (r InstantMixServiceAPIGetMusicgenresByNameInstantmixRequest) Execute() (*ModelQueryResultBaseItemDto, *http.Response, error) {
	return r.ApiService.GetMusicgenresByNameInstantmixExecute(r)
}

/*
GetMusicgenresByNameInstantmix Creates an instant playlist based on a music genre

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name The genre name
 @return InstantMixServiceAPIGetMusicgenresByNameInstantmixRequest
*/
func (a *InstantMixServiceAPIService) GetMusicgenresByNameInstantmix(ctx context.Context, name string) InstantMixServiceAPIGetMusicgenresByNameInstantmixRequest {
	return InstantMixServiceAPIGetMusicgenresByNameInstantmixRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return ModelQueryResultBaseItemDto
func (a *InstantMixServiceAPIService) GetMusicgenresByNameInstantmixExecute(r InstantMixServiceAPIGetMusicgenresByNameInstantmixRequest) (*ModelQueryResultBaseItemDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ModelQueryResultBaseItemDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InstantMixServiceAPIService.GetMusicgenresByNameInstantmix")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/MusicGenres/{Name}/InstantMix"
	localVarPath = strings.Replace(localVarPath, "{"+"Name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.includeItemTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IncludeItemTypes", r.includeItemTypes, "")
	}
	if r.enableImages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImages", r.enableImages, "")
	}
	if r.enableUserData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableUserData", r.enableUserData, "")
	}
	if r.imageTypeLimit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ImageTypeLimit", r.imageTypeLimit, "")
	}
	if r.enableImageTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImageTypes", r.enableImageTypes, "")
	}
	if r.userId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "UserId", r.userId, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Limit", r.limit, "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Fields", r.fields, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type InstantMixServiceAPIGetMusicgenresInstantmixRequest struct {
	ctx context.Context
	ApiService *InstantMixServiceAPIService
	includeItemTypes *string
	enableImages *bool
	enableUserData *bool
	imageTypeLimit *int32
	enableImageTypes *string
	userId *string
	limit *int32
	fields *string
}

// Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
func (r InstantMixServiceAPIGetMusicgenresInstantmixRequest) IncludeItemTypes(includeItemTypes string) InstantMixServiceAPIGetMusicgenresInstantmixRequest {
	r.includeItemTypes = &includeItemTypes
	return r
}

// Optional, include image information in output
func (r InstantMixServiceAPIGetMusicgenresInstantmixRequest) EnableImages(enableImages bool) InstantMixServiceAPIGetMusicgenresInstantmixRequest {
	r.enableImages = &enableImages
	return r
}

// Optional, include user data
func (r InstantMixServiceAPIGetMusicgenresInstantmixRequest) EnableUserData(enableUserData bool) InstantMixServiceAPIGetMusicgenresInstantmixRequest {
	r.enableUserData = &enableUserData
	return r
}

// Optional, the max number of images to return, per image type
func (r InstantMixServiceAPIGetMusicgenresInstantmixRequest) ImageTypeLimit(imageTypeLimit int32) InstantMixServiceAPIGetMusicgenresInstantmixRequest {
	r.imageTypeLimit = &imageTypeLimit
	return r
}

// Optional. The image types to include in the output.
func (r InstantMixServiceAPIGetMusicgenresInstantmixRequest) EnableImageTypes(enableImageTypes string) InstantMixServiceAPIGetMusicgenresInstantmixRequest {
	r.enableImageTypes = &enableImageTypes
	return r
}

// Optional. Filter by user id, and attach user data
func (r InstantMixServiceAPIGetMusicgenresInstantmixRequest) UserId(userId string) InstantMixServiceAPIGetMusicgenresInstantmixRequest {
	r.userId = &userId
	return r
}

// Optional. The maximum number of records to return
func (r InstantMixServiceAPIGetMusicgenresInstantmixRequest) Limit(limit int32) InstantMixServiceAPIGetMusicgenresInstantmixRequest {
	r.limit = &limit
	return r
}

// Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls
func (r InstantMixServiceAPIGetMusicgenresInstantmixRequest) Fields(fields string) InstantMixServiceAPIGetMusicgenresInstantmixRequest {
	r.fields = &fields
	return r
}

func (r InstantMixServiceAPIGetMusicgenresInstantmixRequest) Execute() (*ModelQueryResultBaseItemDto, *http.Response, error) {
	return r.ApiService.GetMusicgenresInstantmixExecute(r)
}

/*
GetMusicgenresInstantmix Creates an instant playlist based on a music genre

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return InstantMixServiceAPIGetMusicgenresInstantmixRequest
*/
func (a *InstantMixServiceAPIService) GetMusicgenresInstantmix(ctx context.Context) InstantMixServiceAPIGetMusicgenresInstantmixRequest {
	return InstantMixServiceAPIGetMusicgenresInstantmixRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ModelQueryResultBaseItemDto
func (a *InstantMixServiceAPIService) GetMusicgenresInstantmixExecute(r InstantMixServiceAPIGetMusicgenresInstantmixRequest) (*ModelQueryResultBaseItemDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ModelQueryResultBaseItemDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InstantMixServiceAPIService.GetMusicgenresInstantmix")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/MusicGenres/InstantMix"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.includeItemTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IncludeItemTypes", r.includeItemTypes, "")
	}
	if r.enableImages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImages", r.enableImages, "")
	}
	if r.enableUserData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableUserData", r.enableUserData, "")
	}
	if r.imageTypeLimit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ImageTypeLimit", r.imageTypeLimit, "")
	}
	if r.enableImageTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImageTypes", r.enableImageTypes, "")
	}
	if r.userId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "UserId", r.userId, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Limit", r.limit, "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Fields", r.fields, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type InstantMixServiceAPIGetPlaylistsByIdInstantmixRequest struct {
	ctx context.Context
	ApiService *InstantMixServiceAPIService
	id string
	includeItemTypes *string
	enableImages *bool
	enableUserData *bool
	imageTypeLimit *int32
	enableImageTypes *string
	userId *string
	limit *int32
	fields *string
}

// Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
func (r InstantMixServiceAPIGetPlaylistsByIdInstantmixRequest) IncludeItemTypes(includeItemTypes string) InstantMixServiceAPIGetPlaylistsByIdInstantmixRequest {
	r.includeItemTypes = &includeItemTypes
	return r
}

// Optional, include image information in output
func (r InstantMixServiceAPIGetPlaylistsByIdInstantmixRequest) EnableImages(enableImages bool) InstantMixServiceAPIGetPlaylistsByIdInstantmixRequest {
	r.enableImages = &enableImages
	return r
}

// Optional, include user data
func (r InstantMixServiceAPIGetPlaylistsByIdInstantmixRequest) EnableUserData(enableUserData bool) InstantMixServiceAPIGetPlaylistsByIdInstantmixRequest {
	r.enableUserData = &enableUserData
	return r
}

// Optional, the max number of images to return, per image type
func (r InstantMixServiceAPIGetPlaylistsByIdInstantmixRequest) ImageTypeLimit(imageTypeLimit int32) InstantMixServiceAPIGetPlaylistsByIdInstantmixRequest {
	r.imageTypeLimit = &imageTypeLimit
	return r
}

// Optional. The image types to include in the output.
func (r InstantMixServiceAPIGetPlaylistsByIdInstantmixRequest) EnableImageTypes(enableImageTypes string) InstantMixServiceAPIGetPlaylistsByIdInstantmixRequest {
	r.enableImageTypes = &enableImageTypes
	return r
}

// Optional. Filter by user id, and attach user data
func (r InstantMixServiceAPIGetPlaylistsByIdInstantmixRequest) UserId(userId string) InstantMixServiceAPIGetPlaylistsByIdInstantmixRequest {
	r.userId = &userId
	return r
}

// Optional. The maximum number of records to return
func (r InstantMixServiceAPIGetPlaylistsByIdInstantmixRequest) Limit(limit int32) InstantMixServiceAPIGetPlaylistsByIdInstantmixRequest {
	r.limit = &limit
	return r
}

// Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls
func (r InstantMixServiceAPIGetPlaylistsByIdInstantmixRequest) Fields(fields string) InstantMixServiceAPIGetPlaylistsByIdInstantmixRequest {
	r.fields = &fields
	return r
}

func (r InstantMixServiceAPIGetPlaylistsByIdInstantmixRequest) Execute() (*ModelQueryResultBaseItemDto, *http.Response, error) {
	return r.ApiService.GetPlaylistsByIdInstantmixExecute(r)
}

/*
GetPlaylistsByIdInstantmix Creates an instant playlist based on a given playlist

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Item Id
 @return InstantMixServiceAPIGetPlaylistsByIdInstantmixRequest
*/
func (a *InstantMixServiceAPIService) GetPlaylistsByIdInstantmix(ctx context.Context, id string) InstantMixServiceAPIGetPlaylistsByIdInstantmixRequest {
	return InstantMixServiceAPIGetPlaylistsByIdInstantmixRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ModelQueryResultBaseItemDto
func (a *InstantMixServiceAPIService) GetPlaylistsByIdInstantmixExecute(r InstantMixServiceAPIGetPlaylistsByIdInstantmixRequest) (*ModelQueryResultBaseItemDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ModelQueryResultBaseItemDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InstantMixServiceAPIService.GetPlaylistsByIdInstantmix")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Playlists/{Id}/InstantMix"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.includeItemTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IncludeItemTypes", r.includeItemTypes, "")
	}
	if r.enableImages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImages", r.enableImages, "")
	}
	if r.enableUserData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableUserData", r.enableUserData, "")
	}
	if r.imageTypeLimit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ImageTypeLimit", r.imageTypeLimit, "")
	}
	if r.enableImageTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImageTypes", r.enableImageTypes, "")
	}
	if r.userId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "UserId", r.userId, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Limit", r.limit, "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Fields", r.fields, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type InstantMixServiceAPIGetSongsByIdInstantmixRequest struct {
	ctx context.Context
	ApiService *InstantMixServiceAPIService
	id string
	includeItemTypes *string
	enableImages *bool
	enableUserData *bool
	imageTypeLimit *int32
	enableImageTypes *string
	userId *string
	limit *int32
	fields *string
}

// Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimeted.
func (r InstantMixServiceAPIGetSongsByIdInstantmixRequest) IncludeItemTypes(includeItemTypes string) InstantMixServiceAPIGetSongsByIdInstantmixRequest {
	r.includeItemTypes = &includeItemTypes
	return r
}

// Optional, include image information in output
func (r InstantMixServiceAPIGetSongsByIdInstantmixRequest) EnableImages(enableImages bool) InstantMixServiceAPIGetSongsByIdInstantmixRequest {
	r.enableImages = &enableImages
	return r
}

// Optional, include user data
func (r InstantMixServiceAPIGetSongsByIdInstantmixRequest) EnableUserData(enableUserData bool) InstantMixServiceAPIGetSongsByIdInstantmixRequest {
	r.enableUserData = &enableUserData
	return r
}

// Optional, the max number of images to return, per image type
func (r InstantMixServiceAPIGetSongsByIdInstantmixRequest) ImageTypeLimit(imageTypeLimit int32) InstantMixServiceAPIGetSongsByIdInstantmixRequest {
	r.imageTypeLimit = &imageTypeLimit
	return r
}

// Optional. The image types to include in the output.
func (r InstantMixServiceAPIGetSongsByIdInstantmixRequest) EnableImageTypes(enableImageTypes string) InstantMixServiceAPIGetSongsByIdInstantmixRequest {
	r.enableImageTypes = &enableImageTypes
	return r
}

// Optional. Filter by user id, and attach user data
func (r InstantMixServiceAPIGetSongsByIdInstantmixRequest) UserId(userId string) InstantMixServiceAPIGetSongsByIdInstantmixRequest {
	r.userId = &userId
	return r
}

// Optional. The maximum number of records to return
func (r InstantMixServiceAPIGetSongsByIdInstantmixRequest) Limit(limit int32) InstantMixServiceAPIGetSongsByIdInstantmixRequest {
	r.limit = &limit
	return r
}

// Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimeted. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines, TrailerUrls
func (r InstantMixServiceAPIGetSongsByIdInstantmixRequest) Fields(fields string) InstantMixServiceAPIGetSongsByIdInstantmixRequest {
	r.fields = &fields
	return r
}

func (r InstantMixServiceAPIGetSongsByIdInstantmixRequest) Execute() (*ModelQueryResultBaseItemDto, *http.Response, error) {
	return r.ApiService.GetSongsByIdInstantmixExecute(r)
}

/*
GetSongsByIdInstantmix Creates an instant playlist based on a given song

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Item Id
 @return InstantMixServiceAPIGetSongsByIdInstantmixRequest
*/
func (a *InstantMixServiceAPIService) GetSongsByIdInstantmix(ctx context.Context, id string) InstantMixServiceAPIGetSongsByIdInstantmixRequest {
	return InstantMixServiceAPIGetSongsByIdInstantmixRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ModelQueryResultBaseItemDto
func (a *InstantMixServiceAPIService) GetSongsByIdInstantmixExecute(r InstantMixServiceAPIGetSongsByIdInstantmixRequest) (*ModelQueryResultBaseItemDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ModelQueryResultBaseItemDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InstantMixServiceAPIService.GetSongsByIdInstantmix")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Songs/{Id}/InstantMix"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.includeItemTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IncludeItemTypes", r.includeItemTypes, "")
	}
	if r.enableImages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImages", r.enableImages, "")
	}
	if r.enableUserData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableUserData", r.enableUserData, "")
	}
	if r.imageTypeLimit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ImageTypeLimit", r.imageTypeLimit, "")
	}
	if r.enableImageTypes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "EnableImageTypes", r.enableImageTypes, "")
	}
	if r.userId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "UserId", r.userId, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Limit", r.limit, "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Fields", r.fields, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
