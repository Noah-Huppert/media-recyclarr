/*
Emby Server REST API (BETA)

Testing ImageServiceAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package embyclient

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/Noah-Huppert/media-recyclarr/embyclient"
)

func Test_embyclient_ImageServiceAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ImageServiceAPIService DeleteItemsByIdImagesByType", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var type_ ModelImageType

		httpRes, err := apiClient.ImageServiceAPI.DeleteItemsByIdImagesByType(context.Background(), id, type_).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageServiceAPIService DeleteItemsByIdImagesByTypeByIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var type_ ModelImageType
		var index int32

		httpRes, err := apiClient.ImageServiceAPI.DeleteItemsByIdImagesByTypeByIndex(context.Background(), id, type_, index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageServiceAPIService DeleteUsersByIdImagesByType", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var type_ ModelImageType

		httpRes, err := apiClient.ImageServiceAPI.DeleteUsersByIdImagesByType(context.Background(), id, type_).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageServiceAPIService DeleteUsersByIdImagesByTypeByIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var type_ ModelImageType
		var index int32

		httpRes, err := apiClient.ImageServiceAPI.DeleteUsersByIdImagesByTypeByIndex(context.Background(), id, type_, index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageServiceAPIService GetArtistsByNameImagesByType", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string
		var type_ ModelImageType

		httpRes, err := apiClient.ImageServiceAPI.GetArtistsByNameImagesByType(context.Background(), name, type_).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageServiceAPIService GetArtistsByNameImagesByTypeByIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string
		var type_ ModelImageType
		var index int32

		httpRes, err := apiClient.ImageServiceAPI.GetArtistsByNameImagesByTypeByIndex(context.Background(), name, type_, index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageServiceAPIService GetGamegenresByNameImagesByType", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string
		var type_ ModelImageType

		httpRes, err := apiClient.ImageServiceAPI.GetGamegenresByNameImagesByType(context.Background(), name, type_).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageServiceAPIService GetGamegenresByNameImagesByTypeByIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string
		var type_ ModelImageType
		var index int32

		httpRes, err := apiClient.ImageServiceAPI.GetGamegenresByNameImagesByTypeByIndex(context.Background(), name, type_, index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageServiceAPIService GetGenresByNameImagesByType", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string
		var type_ ModelImageType

		httpRes, err := apiClient.ImageServiceAPI.GetGenresByNameImagesByType(context.Background(), name, type_).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageServiceAPIService GetGenresByNameImagesByTypeByIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string
		var type_ ModelImageType
		var index int32

		httpRes, err := apiClient.ImageServiceAPI.GetGenresByNameImagesByTypeByIndex(context.Background(), name, type_, index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageServiceAPIService GetItemsByIdImages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.ImageServiceAPI.GetItemsByIdImages(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageServiceAPIService GetItemsByIdImagesByType", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var type_ ModelImageType

		httpRes, err := apiClient.ImageServiceAPI.GetItemsByIdImagesByType(context.Background(), id, type_).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageServiceAPIService GetItemsByIdImagesByTypeByIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var type_ ModelImageType
		var index int32

		httpRes, err := apiClient.ImageServiceAPI.GetItemsByIdImagesByTypeByIndex(context.Background(), id, type_, index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageServiceAPIService GetItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var percentPlayed int32
		var unPlayedCount int32
		var id string
		var maxWidth int32
		var maxHeight int32
		var tag string
		var format string
		var type_ ModelImageType
		var index int32

		httpRes, err := apiClient.ImageServiceAPI.GetItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount(context.Background(), percentPlayed, unPlayedCount, id, maxWidth, maxHeight, tag, format, type_, index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageServiceAPIService GetMusicgenresByNameImagesByType", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string
		var type_ ModelImageType

		httpRes, err := apiClient.ImageServiceAPI.GetMusicgenresByNameImagesByType(context.Background(), name, type_).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageServiceAPIService GetMusicgenresByNameImagesByTypeByIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string
		var type_ ModelImageType
		var index int32

		httpRes, err := apiClient.ImageServiceAPI.GetMusicgenresByNameImagesByTypeByIndex(context.Background(), name, type_, index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageServiceAPIService GetPersonsByNameImagesByType", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string
		var type_ ModelImageType

		httpRes, err := apiClient.ImageServiceAPI.GetPersonsByNameImagesByType(context.Background(), name, type_).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageServiceAPIService GetPersonsByNameImagesByTypeByIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string
		var type_ ModelImageType
		var index int32

		httpRes, err := apiClient.ImageServiceAPI.GetPersonsByNameImagesByTypeByIndex(context.Background(), name, type_, index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageServiceAPIService GetStudiosByNameImagesByType", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string
		var type_ ModelImageType

		httpRes, err := apiClient.ImageServiceAPI.GetStudiosByNameImagesByType(context.Background(), name, type_).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageServiceAPIService GetStudiosByNameImagesByTypeByIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string
		var type_ ModelImageType
		var index int32

		httpRes, err := apiClient.ImageServiceAPI.GetStudiosByNameImagesByTypeByIndex(context.Background(), name, type_, index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageServiceAPIService GetUsersByIdImagesByType", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var type_ ModelImageType

		httpRes, err := apiClient.ImageServiceAPI.GetUsersByIdImagesByType(context.Background(), id, type_).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageServiceAPIService GetUsersByIdImagesByTypeByIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var type_ ModelImageType
		var index int32

		httpRes, err := apiClient.ImageServiceAPI.GetUsersByIdImagesByTypeByIndex(context.Background(), id, type_, index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageServiceAPIService HeadArtistsByNameImagesByType", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string
		var type_ ModelImageType

		httpRes, err := apiClient.ImageServiceAPI.HeadArtistsByNameImagesByType(context.Background(), name, type_).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageServiceAPIService HeadArtistsByNameImagesByTypeByIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string
		var type_ ModelImageType
		var index int32

		httpRes, err := apiClient.ImageServiceAPI.HeadArtistsByNameImagesByTypeByIndex(context.Background(), name, type_, index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageServiceAPIService HeadGamegenresByNameImagesByType", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string
		var type_ ModelImageType

		httpRes, err := apiClient.ImageServiceAPI.HeadGamegenresByNameImagesByType(context.Background(), name, type_).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageServiceAPIService HeadGamegenresByNameImagesByTypeByIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string
		var type_ ModelImageType
		var index int32

		httpRes, err := apiClient.ImageServiceAPI.HeadGamegenresByNameImagesByTypeByIndex(context.Background(), name, type_, index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageServiceAPIService HeadGenresByNameImagesByType", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string
		var type_ ModelImageType

		httpRes, err := apiClient.ImageServiceAPI.HeadGenresByNameImagesByType(context.Background(), name, type_).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageServiceAPIService HeadGenresByNameImagesByTypeByIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string
		var type_ ModelImageType
		var index int32

		httpRes, err := apiClient.ImageServiceAPI.HeadGenresByNameImagesByTypeByIndex(context.Background(), name, type_, index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageServiceAPIService HeadItemsByIdImagesByType", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var type_ ModelImageType

		httpRes, err := apiClient.ImageServiceAPI.HeadItemsByIdImagesByType(context.Background(), id, type_).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageServiceAPIService HeadItemsByIdImagesByTypeByIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var type_ ModelImageType
		var index int32

		httpRes, err := apiClient.ImageServiceAPI.HeadItemsByIdImagesByTypeByIndex(context.Background(), id, type_, index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageServiceAPIService HeadItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var percentPlayed int32
		var unPlayedCount int32
		var id string
		var maxWidth int32
		var maxHeight int32
		var tag string
		var format string
		var type_ ModelImageType
		var index int32

		httpRes, err := apiClient.ImageServiceAPI.HeadItemsByIdImagesByTypeByIndexByTagByFormatByMaxwidthByMaxheightByPercentplayedByUnplayedcount(context.Background(), percentPlayed, unPlayedCount, id, maxWidth, maxHeight, tag, format, type_, index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageServiceAPIService HeadMusicgenresByNameImagesByType", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string
		var type_ ModelImageType

		httpRes, err := apiClient.ImageServiceAPI.HeadMusicgenresByNameImagesByType(context.Background(), name, type_).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageServiceAPIService HeadMusicgenresByNameImagesByTypeByIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string
		var type_ ModelImageType
		var index int32

		httpRes, err := apiClient.ImageServiceAPI.HeadMusicgenresByNameImagesByTypeByIndex(context.Background(), name, type_, index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageServiceAPIService HeadPersonsByNameImagesByType", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string
		var type_ ModelImageType

		httpRes, err := apiClient.ImageServiceAPI.HeadPersonsByNameImagesByType(context.Background(), name, type_).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageServiceAPIService HeadPersonsByNameImagesByTypeByIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string
		var type_ ModelImageType
		var index int32

		httpRes, err := apiClient.ImageServiceAPI.HeadPersonsByNameImagesByTypeByIndex(context.Background(), name, type_, index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageServiceAPIService HeadStudiosByNameImagesByType", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string
		var type_ ModelImageType

		httpRes, err := apiClient.ImageServiceAPI.HeadStudiosByNameImagesByType(context.Background(), name, type_).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageServiceAPIService HeadStudiosByNameImagesByTypeByIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string
		var type_ ModelImageType
		var index int32

		httpRes, err := apiClient.ImageServiceAPI.HeadStudiosByNameImagesByTypeByIndex(context.Background(), name, type_, index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageServiceAPIService HeadUsersByIdImagesByType", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var type_ ModelImageType

		httpRes, err := apiClient.ImageServiceAPI.HeadUsersByIdImagesByType(context.Background(), id, type_).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageServiceAPIService HeadUsersByIdImagesByTypeByIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var type_ ModelImageType
		var index int32

		httpRes, err := apiClient.ImageServiceAPI.HeadUsersByIdImagesByTypeByIndex(context.Background(), id, type_, index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageServiceAPIService PostItemsByIdImagesByType", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var type_ ModelImageType

		httpRes, err := apiClient.ImageServiceAPI.PostItemsByIdImagesByType(context.Background(), id, type_).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageServiceAPIService PostItemsByIdImagesByTypeByIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var type_ ModelImageType
		var index int32

		httpRes, err := apiClient.ImageServiceAPI.PostItemsByIdImagesByTypeByIndex(context.Background(), id, type_, index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageServiceAPIService PostItemsByIdImagesByTypeByIndexDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var type_ ModelImageType
		var index int32

		httpRes, err := apiClient.ImageServiceAPI.PostItemsByIdImagesByTypeByIndexDelete(context.Background(), id, type_, index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageServiceAPIService PostItemsByIdImagesByTypeByIndexIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var type_ ModelImageType
		var index int32

		httpRes, err := apiClient.ImageServiceAPI.PostItemsByIdImagesByTypeByIndexIndex(context.Background(), id, type_, index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageServiceAPIService PostItemsByIdImagesByTypeByIndexUrl", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var type_ ModelImageType
		var index int32

		httpRes, err := apiClient.ImageServiceAPI.PostItemsByIdImagesByTypeByIndexUrl(context.Background(), id, type_, index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageServiceAPIService PostItemsByIdImagesByTypeDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var type_ ModelImageType

		httpRes, err := apiClient.ImageServiceAPI.PostItemsByIdImagesByTypeDelete(context.Background(), id, type_).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageServiceAPIService PostUsersByIdImagesByType", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var type_ ModelImageType

		httpRes, err := apiClient.ImageServiceAPI.PostUsersByIdImagesByType(context.Background(), id, type_).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageServiceAPIService PostUsersByIdImagesByTypeByIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var type_ ModelImageType
		var index int32

		httpRes, err := apiClient.ImageServiceAPI.PostUsersByIdImagesByTypeByIndex(context.Background(), id, type_, index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageServiceAPIService PostUsersByIdImagesByTypeByIndexDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var type_ ModelImageType
		var index int32

		httpRes, err := apiClient.ImageServiceAPI.PostUsersByIdImagesByTypeByIndexDelete(context.Background(), id, type_, index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ImageServiceAPIService PostUsersByIdImagesByTypeDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var type_ ModelImageType

		httpRes, err := apiClient.ImageServiceAPI.PostUsersByIdImagesByTypeDelete(context.Background(), id, type_).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
