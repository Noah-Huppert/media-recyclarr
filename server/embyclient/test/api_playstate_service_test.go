/*
Emby Server REST API (BETA)

Testing PlaystateServiceAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package embyclient

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/Noah-Huppert/media-recyclarr/embyclient"
)

func Test_embyclient_PlaystateServiceAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test PlaystateServiceAPIService DeleteUsersByUseridPlayeditemsById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId string
		var id string

		resp, httpRes, err := apiClient.PlaystateServiceAPI.DeleteUsersByUseridPlayeditemsById(context.Background(), userId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PlaystateServiceAPIService DeleteUsersByUseridPlayingitemsById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId string
		var id string

		httpRes, err := apiClient.PlaystateServiceAPI.DeleteUsersByUseridPlayingitemsById(context.Background(), userId, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PlaystateServiceAPIService PostSessionsPlaying", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.PlaystateServiceAPI.PostSessionsPlaying(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PlaystateServiceAPIService PostSessionsPlayingPing", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.PlaystateServiceAPI.PostSessionsPlayingPing(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PlaystateServiceAPIService PostSessionsPlayingProgress", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.PlaystateServiceAPI.PostSessionsPlayingProgress(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PlaystateServiceAPIService PostSessionsPlayingStopped", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.PlaystateServiceAPI.PostSessionsPlayingStopped(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PlaystateServiceAPIService PostUsersByUseridItemsByItemidUserdata", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId string
		var itemId string

		httpRes, err := apiClient.PlaystateServiceAPI.PostUsersByUseridItemsByItemidUserdata(context.Background(), userId, itemId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PlaystateServiceAPIService PostUsersByUseridPlayeditemsById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId string
		var id string

		resp, httpRes, err := apiClient.PlaystateServiceAPI.PostUsersByUseridPlayeditemsById(context.Background(), userId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PlaystateServiceAPIService PostUsersByUseridPlayeditemsByIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId string
		var id string

		resp, httpRes, err := apiClient.PlaystateServiceAPI.PostUsersByUseridPlayeditemsByIdDelete(context.Background(), userId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PlaystateServiceAPIService PostUsersByUseridPlayingitemsById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId string
		var id string

		httpRes, err := apiClient.PlaystateServiceAPI.PostUsersByUseridPlayingitemsById(context.Background(), userId, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PlaystateServiceAPIService PostUsersByUseridPlayingitemsByIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId string
		var id string

		httpRes, err := apiClient.PlaystateServiceAPI.PostUsersByUseridPlayingitemsByIdDelete(context.Background(), userId, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PlaystateServiceAPIService PostUsersByUseridPlayingitemsByIdProgress", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId string
		var id string

		httpRes, err := apiClient.PlaystateServiceAPI.PostUsersByUseridPlayingitemsByIdProgress(context.Background(), userId, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
