/*
Emby Server REST API (BETA)

Testing UserServiceAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package embyclient

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/Noah-Huppert/media-recyclarr/embyclient"
)

func Test_embyclient_UserServiceAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test UserServiceAPIService DeleteUsersById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.UserServiceAPI.DeleteUsersById(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserServiceAPIService DeleteUsersByIdTrackselectionsByTracktype", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var trackType string

		httpRes, err := apiClient.UserServiceAPI.DeleteUsersByIdTrackselectionsByTracktype(context.Background(), id, trackType).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserServiceAPIService GetUsersById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.UserServiceAPI.GetUsersById(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserServiceAPIService GetUsersByUseridTypedsettingsByKey", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var key string
		var userId string

		httpRes, err := apiClient.UserServiceAPI.GetUsersByUseridTypedsettingsByKey(context.Background(), key, userId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserServiceAPIService GetUsersPrefixes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.UserServiceAPI.GetUsersPrefixes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserServiceAPIService GetUsersPublic", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.UserServiceAPI.GetUsersPublic(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserServiceAPIService GetUsersQuery", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.UserServiceAPI.GetUsersQuery(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserServiceAPIService PostUsersAuthenticatebyname", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.UserServiceAPI.PostUsersAuthenticatebyname(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserServiceAPIService PostUsersById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.UserServiceAPI.PostUsersById(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserServiceAPIService PostUsersByIdAuthenticate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.UserServiceAPI.PostUsersByIdAuthenticate(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserServiceAPIService PostUsersByIdConfiguration", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.UserServiceAPI.PostUsersByIdConfiguration(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserServiceAPIService PostUsersByIdConfigurationPartial", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.UserServiceAPI.PostUsersByIdConfigurationPartial(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserServiceAPIService PostUsersByIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.UserServiceAPI.PostUsersByIdDelete(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserServiceAPIService PostUsersByIdPassword", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.UserServiceAPI.PostUsersByIdPassword(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserServiceAPIService PostUsersByIdPolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.UserServiceAPI.PostUsersByIdPolicy(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserServiceAPIService PostUsersByIdTrackselectionsByTracktypeDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var trackType string

		httpRes, err := apiClient.UserServiceAPI.PostUsersByIdTrackselectionsByTracktypeDelete(context.Background(), id, trackType).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserServiceAPIService PostUsersByUseridTypedsettingsByKey", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId string
		var key string

		httpRes, err := apiClient.UserServiceAPI.PostUsersByUseridTypedsettingsByKey(context.Background(), userId, key).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserServiceAPIService PostUsersForgotpassword", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.UserServiceAPI.PostUsersForgotpassword(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserServiceAPIService PostUsersForgotpasswordPin", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.UserServiceAPI.PostUsersForgotpasswordPin(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserServiceAPIService PostUsersNew", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.UserServiceAPI.PostUsersNew(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
