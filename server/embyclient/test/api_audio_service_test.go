/*
Emby Server REST API (BETA)

Testing AudioServiceAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package embyclient

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/Noah-Huppert/media-recyclarr/embyclient"
)

func Test_embyclient_AudioServiceAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test AudioServiceAPIService GetAudioByIdByStreamfilename", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var streamFileName string
		var id string

		httpRes, err := apiClient.AudioServiceAPI.GetAudioByIdByStreamfilename(context.Background(), streamFileName, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AudioServiceAPIService GetAudioByIdStream", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.AudioServiceAPI.GetAudioByIdStream(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AudioServiceAPIService GetAudioByIdStreamByContainer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var container string

		httpRes, err := apiClient.AudioServiceAPI.GetAudioByIdStreamByContainer(context.Background(), id, container).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AudioServiceAPIService HeadAudioByIdByStreamfilename", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var streamFileName string
		var id string

		httpRes, err := apiClient.AudioServiceAPI.HeadAudioByIdByStreamfilename(context.Background(), streamFileName, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AudioServiceAPIService HeadAudioByIdStream", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.AudioServiceAPI.HeadAudioByIdStream(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AudioServiceAPIService HeadAudioByIdStreamByContainer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var container string

		httpRes, err := apiClient.AudioServiceAPI.HeadAudioByIdStreamByContainer(context.Background(), id, container).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
