/*
Emby Server REST API (BETA)

Testing SubtitleServiceAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package embyclient

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/Noah-Huppert/media-recyclarr/embyclient"
)

func Test_embyclient_SubtitleServiceAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test SubtitleServiceAPIService DeleteItemsByIdSubtitlesByIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var index int32

		httpRes, err := apiClient.SubtitleServiceAPI.DeleteItemsByIdSubtitlesByIndex(context.Background(), id, index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SubtitleServiceAPIService DeleteVideosByIdSubtitlesByIndex", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var index int32

		httpRes, err := apiClient.SubtitleServiceAPI.DeleteVideosByIdSubtitlesByIndex(context.Background(), id, index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SubtitleServiceAPIService GetItemsByIdByMediasourceidSubtitlesByIndexByStartpositionticksStreamByFormat", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var mediaSourceId string
		var index int32
		var format string
		var startPositionTicks int64

		httpRes, err := apiClient.SubtitleServiceAPI.GetItemsByIdByMediasourceidSubtitlesByIndexByStartpositionticksStreamByFormat(context.Background(), id, mediaSourceId, index, format, startPositionTicks).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SubtitleServiceAPIService GetItemsByIdByMediasourceidSubtitlesByIndexStreamByFormat", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var mediaSourceId string
		var index int32
		var format string

		httpRes, err := apiClient.SubtitleServiceAPI.GetItemsByIdByMediasourceidSubtitlesByIndexStreamByFormat(context.Background(), id, mediaSourceId, index, format).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SubtitleServiceAPIService GetItemsByIdRemotesearchSubtitlesByLanguage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var language string

		resp, httpRes, err := apiClient.SubtitleServiceAPI.GetItemsByIdRemotesearchSubtitlesByLanguage(context.Background(), id, language).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SubtitleServiceAPIService GetProvidersSubtitlesSubtitlesById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.SubtitleServiceAPI.GetProvidersSubtitlesSubtitlesById(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SubtitleServiceAPIService GetVideosByIdByMediasourceidSubtitlesByIndexByStartpositionticksStreamByFormat", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var mediaSourceId string
		var index int32
		var format string
		var startPositionTicks int64

		httpRes, err := apiClient.SubtitleServiceAPI.GetVideosByIdByMediasourceidSubtitlesByIndexByStartpositionticksStreamByFormat(context.Background(), id, mediaSourceId, index, format, startPositionTicks).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SubtitleServiceAPIService GetVideosByIdByMediasourceidSubtitlesByIndexStreamByFormat", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var mediaSourceId string
		var index int32
		var format string

		httpRes, err := apiClient.SubtitleServiceAPI.GetVideosByIdByMediasourceidSubtitlesByIndexStreamByFormat(context.Background(), id, mediaSourceId, index, format).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SubtitleServiceAPIService PostItemsByIdRemotesearchSubtitlesBySubtitleid", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var subtitleId string

		resp, httpRes, err := apiClient.SubtitleServiceAPI.PostItemsByIdRemotesearchSubtitlesBySubtitleid(context.Background(), id, subtitleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SubtitleServiceAPIService PostItemsByIdSubtitlesByIndexDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var index int32

		httpRes, err := apiClient.SubtitleServiceAPI.PostItemsByIdSubtitlesByIndexDelete(context.Background(), id, index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SubtitleServiceAPIService PostVideosByIdSubtitlesByIndexDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var index int32

		httpRes, err := apiClient.SubtitleServiceAPI.PostVideosByIdSubtitlesByIndexDelete(context.Background(), id, index).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
