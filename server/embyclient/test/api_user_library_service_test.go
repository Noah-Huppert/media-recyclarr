/*
Emby Server REST API (BETA)

Testing UserLibraryServiceAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package embyclient

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/Noah-Huppert/media-recyclarr/embyclient"
)

func Test_embyclient_UserLibraryServiceAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test UserLibraryServiceAPIService DeleteUsersByUseridFavoriteitemsById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId string
		var id string

		resp, httpRes, err := apiClient.UserLibraryServiceAPI.DeleteUsersByUseridFavoriteitemsById(context.Background(), userId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserLibraryServiceAPIService DeleteUsersByUseridItemsByIdRating", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId string
		var id string

		resp, httpRes, err := apiClient.UserLibraryServiceAPI.DeleteUsersByUseridItemsByIdRating(context.Background(), userId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserLibraryServiceAPIService GetLivetvProgramsById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.UserLibraryServiceAPI.GetLivetvProgramsById(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserLibraryServiceAPIService GetUsersByUseridItemsById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId string
		var id string

		resp, httpRes, err := apiClient.UserLibraryServiceAPI.GetUsersByUseridItemsById(context.Background(), userId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserLibraryServiceAPIService GetUsersByUseridItemsByIdIntros", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId string
		var id string

		resp, httpRes, err := apiClient.UserLibraryServiceAPI.GetUsersByUseridItemsByIdIntros(context.Background(), userId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserLibraryServiceAPIService GetUsersByUseridItemsByIdLocaltrailers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId string
		var id string

		resp, httpRes, err := apiClient.UserLibraryServiceAPI.GetUsersByUseridItemsByIdLocaltrailers(context.Background(), userId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserLibraryServiceAPIService GetUsersByUseridItemsByIdSpecialfeatures", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId string
		var id string

		resp, httpRes, err := apiClient.UserLibraryServiceAPI.GetUsersByUseridItemsByIdSpecialfeatures(context.Background(), userId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserLibraryServiceAPIService GetUsersByUseridItemsLatest", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId string

		resp, httpRes, err := apiClient.UserLibraryServiceAPI.GetUsersByUseridItemsLatest(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserLibraryServiceAPIService GetUsersByUseridItemsRoot", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId string

		resp, httpRes, err := apiClient.UserLibraryServiceAPI.GetUsersByUseridItemsRoot(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserLibraryServiceAPIService GetVideosByIdAdditionalparts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.UserLibraryServiceAPI.GetVideosByIdAdditionalparts(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserLibraryServiceAPIService PostItemsByIdMakeprivate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.UserLibraryServiceAPI.PostItemsByIdMakeprivate(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserLibraryServiceAPIService PostItemsByIdMakepublic", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.UserLibraryServiceAPI.PostItemsByIdMakepublic(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserLibraryServiceAPIService PostUsersByUseridFavoriteitemsById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId string
		var id string

		resp, httpRes, err := apiClient.UserLibraryServiceAPI.PostUsersByUseridFavoriteitemsById(context.Background(), userId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserLibraryServiceAPIService PostUsersByUseridFavoriteitemsByIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId string
		var id string

		resp, httpRes, err := apiClient.UserLibraryServiceAPI.PostUsersByUseridFavoriteitemsByIdDelete(context.Background(), userId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserLibraryServiceAPIService PostUsersByUseridItemsByIdHidefromresume", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId string
		var id string

		resp, httpRes, err := apiClient.UserLibraryServiceAPI.PostUsersByUseridItemsByIdHidefromresume(context.Background(), userId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserLibraryServiceAPIService PostUsersByUseridItemsByIdRating", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId string
		var id string

		resp, httpRes, err := apiClient.UserLibraryServiceAPI.PostUsersByUseridItemsByIdRating(context.Background(), userId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserLibraryServiceAPIService PostUsersByUseridItemsByIdRatingDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId string
		var id string

		resp, httpRes, err := apiClient.UserLibraryServiceAPI.PostUsersByUseridItemsByIdRatingDelete(context.Background(), userId, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
