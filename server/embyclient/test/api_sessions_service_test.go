/*
Emby Server REST API (BETA)

Testing SessionsServiceAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package embyclient

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/Noah-Huppert/media-recyclarr/embyclient"
)

func Test_embyclient_SessionsServiceAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test SessionsServiceAPIService DeleteAuthKeysByKey", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var key string

		httpRes, err := apiClient.SessionsServiceAPI.DeleteAuthKeysByKey(context.Background(), key).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SessionsServiceAPIService DeleteSessionsByIdUsersByUserid", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var userId string

		httpRes, err := apiClient.SessionsServiceAPI.DeleteSessionsByIdUsersByUserid(context.Background(), id, userId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SessionsServiceAPIService GetAuthKeys", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.SessionsServiceAPI.GetAuthKeys(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SessionsServiceAPIService GetAuthProviders", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SessionsServiceAPI.GetAuthProviders(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SessionsServiceAPIService GetSessions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SessionsServiceAPI.GetSessions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SessionsServiceAPIService GetSessionsPlayqueue", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SessionsServiceAPI.GetSessionsPlayqueue(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SessionsServiceAPIService PostAuthKeys", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.SessionsServiceAPI.PostAuthKeys(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SessionsServiceAPIService PostAuthKeysByKeyDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var key string

		httpRes, err := apiClient.SessionsServiceAPI.PostAuthKeysByKeyDelete(context.Background(), key).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SessionsServiceAPIService PostSessionsByIdCommand", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.SessionsServiceAPI.PostSessionsByIdCommand(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SessionsServiceAPIService PostSessionsByIdCommandByCommand", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var command string

		httpRes, err := apiClient.SessionsServiceAPI.PostSessionsByIdCommandByCommand(context.Background(), id, command).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SessionsServiceAPIService PostSessionsByIdMessage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.SessionsServiceAPI.PostSessionsByIdMessage(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SessionsServiceAPIService PostSessionsByIdPlaying", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.SessionsServiceAPI.PostSessionsByIdPlaying(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SessionsServiceAPIService PostSessionsByIdPlayingByCommand", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var command ModelPlaystateCommand

		httpRes, err := apiClient.SessionsServiceAPI.PostSessionsByIdPlayingByCommand(context.Background(), id, command).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SessionsServiceAPIService PostSessionsByIdSystemByCommand", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var command string

		httpRes, err := apiClient.SessionsServiceAPI.PostSessionsByIdSystemByCommand(context.Background(), id, command).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SessionsServiceAPIService PostSessionsByIdUsersByUserid", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var userId string

		httpRes, err := apiClient.SessionsServiceAPI.PostSessionsByIdUsersByUserid(context.Background(), id, userId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SessionsServiceAPIService PostSessionsByIdUsersByUseridDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var userId string

		httpRes, err := apiClient.SessionsServiceAPI.PostSessionsByIdUsersByUseridDelete(context.Background(), id, userId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SessionsServiceAPIService PostSessionsByIdViewing", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.SessionsServiceAPI.PostSessionsByIdViewing(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SessionsServiceAPIService PostSessionsCapabilities", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.SessionsServiceAPI.PostSessionsCapabilities(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SessionsServiceAPIService PostSessionsCapabilitiesFull", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.SessionsServiceAPI.PostSessionsCapabilitiesFull(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SessionsServiceAPIService PostSessionsLogout", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.SessionsServiceAPI.PostSessionsLogout(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
