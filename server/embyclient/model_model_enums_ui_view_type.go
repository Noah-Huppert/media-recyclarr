/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"encoding/json"
	"fmt"
)

// ModelEnumsUIViewType the model 'ModelEnumsUIViewType'
type ModelEnumsUIViewType string

// List of Enums.UIViewType
const (
	MODELENUMSUIVIEWTYPE_REGULAR_PAGE ModelEnumsUIViewType = "RegularPage"
	MODELENUMSUIVIEWTYPE_DIALOG ModelEnumsUIViewType = "Dialog"
	MODELENUMSUIVIEWTYPE_WIZARD ModelEnumsUIViewType = "Wizard"
)

// All allowed values of ModelEnumsUIViewType enum
var AllowedModelEnumsUIViewTypeEnumValues = []ModelEnumsUIViewType{
	"RegularPage",
	"Dialog",
	"Wizard",
}

func (v *ModelEnumsUIViewType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ModelEnumsUIViewType(value)
	for _, existing := range AllowedModelEnumsUIViewTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ModelEnumsUIViewType", value)
}

// NewModelEnumsUIViewTypeFromValue returns a pointer to a valid ModelEnumsUIViewType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewModelEnumsUIViewTypeFromValue(v string) (*ModelEnumsUIViewType, error) {
	ev := ModelEnumsUIViewType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ModelEnumsUIViewType: valid values are %v", v, AllowedModelEnumsUIViewTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ModelEnumsUIViewType) IsValid() bool {
	for _, existing := range AllowedModelEnumsUIViewTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enums.UIViewType value
func (v ModelEnumsUIViewType) Ptr() *ModelEnumsUIViewType {
	return &v
}

type NullableModelEnumsUIViewType struct {
	value *ModelEnumsUIViewType
	isSet bool
}

func (v NullableModelEnumsUIViewType) Get() *ModelEnumsUIViewType {
	return v.value
}

func (v *NullableModelEnumsUIViewType) Set(val *ModelEnumsUIViewType) {
	v.value = val
	v.isSet = true
}

func (v NullableModelEnumsUIViewType) IsSet() bool {
	return v.isSet
}

func (v *NullableModelEnumsUIViewType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelEnumsUIViewType(val *ModelEnumsUIViewType) *NullableModelEnumsUIViewType {
	return &NullableModelEnumsUIViewType{value: val, isSet: true}
}

func (v NullableModelEnumsUIViewType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelEnumsUIViewType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

