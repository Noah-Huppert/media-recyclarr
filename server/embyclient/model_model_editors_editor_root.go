/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"encoding/json"
)

// checks if the ModelEditorsEditorRoot type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelEditorsEditorRoot{}

// ModelEditorsEditorRoot struct for ModelEditorsEditorRoot
type ModelEditorsEditorRoot struct {
	PropertyConditions []ModelConditionsPropertyCondition `json:"PropertyConditions,omitempty"`
	PostbackActions []ModelActionsPostbackAction `json:"PostbackActions,omitempty"`
	TitleButton *ModelEditorsEditorButtonItem `json:"TitleButton,omitempty"`
	EditorItems []ModelEditorsEditorBase `json:"EditorItems,omitempty"`
	EditorType *ModelCommonEditorTypes `json:"EditorType,omitempty"`
	Name *string `json:"Name,omitempty"`
	Id *string `json:"Id,omitempty"`
	AllowEmpty *bool `json:"AllowEmpty,omitempty"`
	IsReadOnly *bool `json:"IsReadOnly,omitempty"`
	IsAdvanced *bool `json:"IsAdvanced,omitempty"`
	DisplayName *string `json:"DisplayName,omitempty"`
	Description *string `json:"Description,omitempty"`
	ParentId *string `json:"ParentId,omitempty"`
}

// NewModelEditorsEditorRoot instantiates a new ModelEditorsEditorRoot object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelEditorsEditorRoot() *ModelEditorsEditorRoot {
	this := ModelEditorsEditorRoot{}
	return &this
}

// NewModelEditorsEditorRootWithDefaults instantiates a new ModelEditorsEditorRoot object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelEditorsEditorRootWithDefaults() *ModelEditorsEditorRoot {
	this := ModelEditorsEditorRoot{}
	return &this
}

// GetPropertyConditions returns the PropertyConditions field value if set, zero value otherwise.
func (o *ModelEditorsEditorRoot) GetPropertyConditions() []ModelConditionsPropertyCondition {
	if o == nil || IsNil(o.PropertyConditions) {
		var ret []ModelConditionsPropertyCondition
		return ret
	}
	return o.PropertyConditions
}

// GetPropertyConditionsOk returns a tuple with the PropertyConditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelEditorsEditorRoot) GetPropertyConditionsOk() ([]ModelConditionsPropertyCondition, bool) {
	if o == nil || IsNil(o.PropertyConditions) {
		return nil, false
	}
	return o.PropertyConditions, true
}

// HasPropertyConditions returns a boolean if a field has been set.
func (o *ModelEditorsEditorRoot) HasPropertyConditions() bool {
	if o != nil && !IsNil(o.PropertyConditions) {
		return true
	}

	return false
}

// SetPropertyConditions gets a reference to the given []ModelConditionsPropertyCondition and assigns it to the PropertyConditions field.
func (o *ModelEditorsEditorRoot) SetPropertyConditions(v []ModelConditionsPropertyCondition) {
	o.PropertyConditions = v
}

// GetPostbackActions returns the PostbackActions field value if set, zero value otherwise.
func (o *ModelEditorsEditorRoot) GetPostbackActions() []ModelActionsPostbackAction {
	if o == nil || IsNil(o.PostbackActions) {
		var ret []ModelActionsPostbackAction
		return ret
	}
	return o.PostbackActions
}

// GetPostbackActionsOk returns a tuple with the PostbackActions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelEditorsEditorRoot) GetPostbackActionsOk() ([]ModelActionsPostbackAction, bool) {
	if o == nil || IsNil(o.PostbackActions) {
		return nil, false
	}
	return o.PostbackActions, true
}

// HasPostbackActions returns a boolean if a field has been set.
func (o *ModelEditorsEditorRoot) HasPostbackActions() bool {
	if o != nil && !IsNil(o.PostbackActions) {
		return true
	}

	return false
}

// SetPostbackActions gets a reference to the given []ModelActionsPostbackAction and assigns it to the PostbackActions field.
func (o *ModelEditorsEditorRoot) SetPostbackActions(v []ModelActionsPostbackAction) {
	o.PostbackActions = v
}

// GetTitleButton returns the TitleButton field value if set, zero value otherwise.
func (o *ModelEditorsEditorRoot) GetTitleButton() ModelEditorsEditorButtonItem {
	if o == nil || IsNil(o.TitleButton) {
		var ret ModelEditorsEditorButtonItem
		return ret
	}
	return *o.TitleButton
}

// GetTitleButtonOk returns a tuple with the TitleButton field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelEditorsEditorRoot) GetTitleButtonOk() (*ModelEditorsEditorButtonItem, bool) {
	if o == nil || IsNil(o.TitleButton) {
		return nil, false
	}
	return o.TitleButton, true
}

// HasTitleButton returns a boolean if a field has been set.
func (o *ModelEditorsEditorRoot) HasTitleButton() bool {
	if o != nil && !IsNil(o.TitleButton) {
		return true
	}

	return false
}

// SetTitleButton gets a reference to the given ModelEditorsEditorButtonItem and assigns it to the TitleButton field.
func (o *ModelEditorsEditorRoot) SetTitleButton(v ModelEditorsEditorButtonItem) {
	o.TitleButton = &v
}

// GetEditorItems returns the EditorItems field value if set, zero value otherwise.
func (o *ModelEditorsEditorRoot) GetEditorItems() []ModelEditorsEditorBase {
	if o == nil || IsNil(o.EditorItems) {
		var ret []ModelEditorsEditorBase
		return ret
	}
	return o.EditorItems
}

// GetEditorItemsOk returns a tuple with the EditorItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelEditorsEditorRoot) GetEditorItemsOk() ([]ModelEditorsEditorBase, bool) {
	if o == nil || IsNil(o.EditorItems) {
		return nil, false
	}
	return o.EditorItems, true
}

// HasEditorItems returns a boolean if a field has been set.
func (o *ModelEditorsEditorRoot) HasEditorItems() bool {
	if o != nil && !IsNil(o.EditorItems) {
		return true
	}

	return false
}

// SetEditorItems gets a reference to the given []ModelEditorsEditorBase and assigns it to the EditorItems field.
func (o *ModelEditorsEditorRoot) SetEditorItems(v []ModelEditorsEditorBase) {
	o.EditorItems = v
}

// GetEditorType returns the EditorType field value if set, zero value otherwise.
func (o *ModelEditorsEditorRoot) GetEditorType() ModelCommonEditorTypes {
	if o == nil || IsNil(o.EditorType) {
		var ret ModelCommonEditorTypes
		return ret
	}
	return *o.EditorType
}

// GetEditorTypeOk returns a tuple with the EditorType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelEditorsEditorRoot) GetEditorTypeOk() (*ModelCommonEditorTypes, bool) {
	if o == nil || IsNil(o.EditorType) {
		return nil, false
	}
	return o.EditorType, true
}

// HasEditorType returns a boolean if a field has been set.
func (o *ModelEditorsEditorRoot) HasEditorType() bool {
	if o != nil && !IsNil(o.EditorType) {
		return true
	}

	return false
}

// SetEditorType gets a reference to the given ModelCommonEditorTypes and assigns it to the EditorType field.
func (o *ModelEditorsEditorRoot) SetEditorType(v ModelCommonEditorTypes) {
	o.EditorType = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ModelEditorsEditorRoot) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelEditorsEditorRoot) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ModelEditorsEditorRoot) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ModelEditorsEditorRoot) SetName(v string) {
	o.Name = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ModelEditorsEditorRoot) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelEditorsEditorRoot) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ModelEditorsEditorRoot) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ModelEditorsEditorRoot) SetId(v string) {
	o.Id = &v
}

// GetAllowEmpty returns the AllowEmpty field value if set, zero value otherwise.
func (o *ModelEditorsEditorRoot) GetAllowEmpty() bool {
	if o == nil || IsNil(o.AllowEmpty) {
		var ret bool
		return ret
	}
	return *o.AllowEmpty
}

// GetAllowEmptyOk returns a tuple with the AllowEmpty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelEditorsEditorRoot) GetAllowEmptyOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowEmpty) {
		return nil, false
	}
	return o.AllowEmpty, true
}

// HasAllowEmpty returns a boolean if a field has been set.
func (o *ModelEditorsEditorRoot) HasAllowEmpty() bool {
	if o != nil && !IsNil(o.AllowEmpty) {
		return true
	}

	return false
}

// SetAllowEmpty gets a reference to the given bool and assigns it to the AllowEmpty field.
func (o *ModelEditorsEditorRoot) SetAllowEmpty(v bool) {
	o.AllowEmpty = &v
}

// GetIsReadOnly returns the IsReadOnly field value if set, zero value otherwise.
func (o *ModelEditorsEditorRoot) GetIsReadOnly() bool {
	if o == nil || IsNil(o.IsReadOnly) {
		var ret bool
		return ret
	}
	return *o.IsReadOnly
}

// GetIsReadOnlyOk returns a tuple with the IsReadOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelEditorsEditorRoot) GetIsReadOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.IsReadOnly) {
		return nil, false
	}
	return o.IsReadOnly, true
}

// HasIsReadOnly returns a boolean if a field has been set.
func (o *ModelEditorsEditorRoot) HasIsReadOnly() bool {
	if o != nil && !IsNil(o.IsReadOnly) {
		return true
	}

	return false
}

// SetIsReadOnly gets a reference to the given bool and assigns it to the IsReadOnly field.
func (o *ModelEditorsEditorRoot) SetIsReadOnly(v bool) {
	o.IsReadOnly = &v
}

// GetIsAdvanced returns the IsAdvanced field value if set, zero value otherwise.
func (o *ModelEditorsEditorRoot) GetIsAdvanced() bool {
	if o == nil || IsNil(o.IsAdvanced) {
		var ret bool
		return ret
	}
	return *o.IsAdvanced
}

// GetIsAdvancedOk returns a tuple with the IsAdvanced field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelEditorsEditorRoot) GetIsAdvancedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsAdvanced) {
		return nil, false
	}
	return o.IsAdvanced, true
}

// HasIsAdvanced returns a boolean if a field has been set.
func (o *ModelEditorsEditorRoot) HasIsAdvanced() bool {
	if o != nil && !IsNil(o.IsAdvanced) {
		return true
	}

	return false
}

// SetIsAdvanced gets a reference to the given bool and assigns it to the IsAdvanced field.
func (o *ModelEditorsEditorRoot) SetIsAdvanced(v bool) {
	o.IsAdvanced = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *ModelEditorsEditorRoot) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelEditorsEditorRoot) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *ModelEditorsEditorRoot) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *ModelEditorsEditorRoot) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ModelEditorsEditorRoot) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelEditorsEditorRoot) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ModelEditorsEditorRoot) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ModelEditorsEditorRoot) SetDescription(v string) {
	o.Description = &v
}

// GetParentId returns the ParentId field value if set, zero value otherwise.
func (o *ModelEditorsEditorRoot) GetParentId() string {
	if o == nil || IsNil(o.ParentId) {
		var ret string
		return ret
	}
	return *o.ParentId
}

// GetParentIdOk returns a tuple with the ParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelEditorsEditorRoot) GetParentIdOk() (*string, bool) {
	if o == nil || IsNil(o.ParentId) {
		return nil, false
	}
	return o.ParentId, true
}

// HasParentId returns a boolean if a field has been set.
func (o *ModelEditorsEditorRoot) HasParentId() bool {
	if o != nil && !IsNil(o.ParentId) {
		return true
	}

	return false
}

// SetParentId gets a reference to the given string and assigns it to the ParentId field.
func (o *ModelEditorsEditorRoot) SetParentId(v string) {
	o.ParentId = &v
}

func (o ModelEditorsEditorRoot) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelEditorsEditorRoot) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PropertyConditions) {
		toSerialize["PropertyConditions"] = o.PropertyConditions
	}
	if !IsNil(o.PostbackActions) {
		toSerialize["PostbackActions"] = o.PostbackActions
	}
	if !IsNil(o.TitleButton) {
		toSerialize["TitleButton"] = o.TitleButton
	}
	if !IsNil(o.EditorItems) {
		toSerialize["EditorItems"] = o.EditorItems
	}
	if !IsNil(o.EditorType) {
		toSerialize["EditorType"] = o.EditorType
	}
	if !IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if !IsNil(o.Id) {
		toSerialize["Id"] = o.Id
	}
	if !IsNil(o.AllowEmpty) {
		toSerialize["AllowEmpty"] = o.AllowEmpty
	}
	if !IsNil(o.IsReadOnly) {
		toSerialize["IsReadOnly"] = o.IsReadOnly
	}
	if !IsNil(o.IsAdvanced) {
		toSerialize["IsAdvanced"] = o.IsAdvanced
	}
	if !IsNil(o.DisplayName) {
		toSerialize["DisplayName"] = o.DisplayName
	}
	if !IsNil(o.Description) {
		toSerialize["Description"] = o.Description
	}
	if !IsNil(o.ParentId) {
		toSerialize["ParentId"] = o.ParentId
	}
	return toSerialize, nil
}

type NullableModelEditorsEditorRoot struct {
	value *ModelEditorsEditorRoot
	isSet bool
}

func (v NullableModelEditorsEditorRoot) Get() *ModelEditorsEditorRoot {
	return v.value
}

func (v *NullableModelEditorsEditorRoot) Set(val *ModelEditorsEditorRoot) {
	v.value = val
	v.isSet = true
}

func (v NullableModelEditorsEditorRoot) IsSet() bool {
	return v.isSet
}

func (v *NullableModelEditorsEditorRoot) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelEditorsEditorRoot(val *ModelEditorsEditorRoot) *NullableModelEditorsEditorRoot {
	return &NullableModelEditorsEditorRoot{value: val, isSet: true}
}

func (v NullableModelEditorsEditorRoot) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelEditorsEditorRoot) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


