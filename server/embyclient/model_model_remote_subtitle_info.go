/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"encoding/json"
	"time"
)

// checks if the ModelRemoteSubtitleInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelRemoteSubtitleInfo{}

// ModelRemoteSubtitleInfo struct for ModelRemoteSubtitleInfo
type ModelRemoteSubtitleInfo struct {
	// Use language instead to return the language specified by the subtitle provider
	// Deprecated
	ThreeLetterISOLanguageName *string `json:"ThreeLetterISOLanguageName,omitempty"`
	Id *string `json:"Id,omitempty"`
	ProviderName *string `json:"ProviderName,omitempty"`
	Name *string `json:"Name,omitempty"`
	Format *string `json:"Format,omitempty"`
	Author *string `json:"Author,omitempty"`
	Comment *string `json:"Comment,omitempty"`
	DateCreated NullableTime `json:"DateCreated,omitempty"`
	CommunityRating NullableFloat32 `json:"CommunityRating,omitempty"`
	DownloadCount NullableInt32 `json:"DownloadCount,omitempty"`
	IsHashMatch NullableBool `json:"IsHashMatch,omitempty"`
	IsForced NullableBool `json:"IsForced,omitempty"`
	Language *string `json:"Language,omitempty"`
}

// NewModelRemoteSubtitleInfo instantiates a new ModelRemoteSubtitleInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelRemoteSubtitleInfo() *ModelRemoteSubtitleInfo {
	this := ModelRemoteSubtitleInfo{}
	return &this
}

// NewModelRemoteSubtitleInfoWithDefaults instantiates a new ModelRemoteSubtitleInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelRemoteSubtitleInfoWithDefaults() *ModelRemoteSubtitleInfo {
	this := ModelRemoteSubtitleInfo{}
	return &this
}

// GetThreeLetterISOLanguageName returns the ThreeLetterISOLanguageName field value if set, zero value otherwise.
// Deprecated
func (o *ModelRemoteSubtitleInfo) GetThreeLetterISOLanguageName() string {
	if o == nil || IsNil(o.ThreeLetterISOLanguageName) {
		var ret string
		return ret
	}
	return *o.ThreeLetterISOLanguageName
}

// GetThreeLetterISOLanguageNameOk returns a tuple with the ThreeLetterISOLanguageName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *ModelRemoteSubtitleInfo) GetThreeLetterISOLanguageNameOk() (*string, bool) {
	if o == nil || IsNil(o.ThreeLetterISOLanguageName) {
		return nil, false
	}
	return o.ThreeLetterISOLanguageName, true
}

// HasThreeLetterISOLanguageName returns a boolean if a field has been set.
func (o *ModelRemoteSubtitleInfo) HasThreeLetterISOLanguageName() bool {
	if o != nil && !IsNil(o.ThreeLetterISOLanguageName) {
		return true
	}

	return false
}

// SetThreeLetterISOLanguageName gets a reference to the given string and assigns it to the ThreeLetterISOLanguageName field.
// Deprecated
func (o *ModelRemoteSubtitleInfo) SetThreeLetterISOLanguageName(v string) {
	o.ThreeLetterISOLanguageName = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ModelRemoteSubtitleInfo) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelRemoteSubtitleInfo) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ModelRemoteSubtitleInfo) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ModelRemoteSubtitleInfo) SetId(v string) {
	o.Id = &v
}

// GetProviderName returns the ProviderName field value if set, zero value otherwise.
func (o *ModelRemoteSubtitleInfo) GetProviderName() string {
	if o == nil || IsNil(o.ProviderName) {
		var ret string
		return ret
	}
	return *o.ProviderName
}

// GetProviderNameOk returns a tuple with the ProviderName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelRemoteSubtitleInfo) GetProviderNameOk() (*string, bool) {
	if o == nil || IsNil(o.ProviderName) {
		return nil, false
	}
	return o.ProviderName, true
}

// HasProviderName returns a boolean if a field has been set.
func (o *ModelRemoteSubtitleInfo) HasProviderName() bool {
	if o != nil && !IsNil(o.ProviderName) {
		return true
	}

	return false
}

// SetProviderName gets a reference to the given string and assigns it to the ProviderName field.
func (o *ModelRemoteSubtitleInfo) SetProviderName(v string) {
	o.ProviderName = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ModelRemoteSubtitleInfo) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelRemoteSubtitleInfo) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ModelRemoteSubtitleInfo) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ModelRemoteSubtitleInfo) SetName(v string) {
	o.Name = &v
}

// GetFormat returns the Format field value if set, zero value otherwise.
func (o *ModelRemoteSubtitleInfo) GetFormat() string {
	if o == nil || IsNil(o.Format) {
		var ret string
		return ret
	}
	return *o.Format
}

// GetFormatOk returns a tuple with the Format field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelRemoteSubtitleInfo) GetFormatOk() (*string, bool) {
	if o == nil || IsNil(o.Format) {
		return nil, false
	}
	return o.Format, true
}

// HasFormat returns a boolean if a field has been set.
func (o *ModelRemoteSubtitleInfo) HasFormat() bool {
	if o != nil && !IsNil(o.Format) {
		return true
	}

	return false
}

// SetFormat gets a reference to the given string and assigns it to the Format field.
func (o *ModelRemoteSubtitleInfo) SetFormat(v string) {
	o.Format = &v
}

// GetAuthor returns the Author field value if set, zero value otherwise.
func (o *ModelRemoteSubtitleInfo) GetAuthor() string {
	if o == nil || IsNil(o.Author) {
		var ret string
		return ret
	}
	return *o.Author
}

// GetAuthorOk returns a tuple with the Author field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelRemoteSubtitleInfo) GetAuthorOk() (*string, bool) {
	if o == nil || IsNil(o.Author) {
		return nil, false
	}
	return o.Author, true
}

// HasAuthor returns a boolean if a field has been set.
func (o *ModelRemoteSubtitleInfo) HasAuthor() bool {
	if o != nil && !IsNil(o.Author) {
		return true
	}

	return false
}

// SetAuthor gets a reference to the given string and assigns it to the Author field.
func (o *ModelRemoteSubtitleInfo) SetAuthor(v string) {
	o.Author = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *ModelRemoteSubtitleInfo) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelRemoteSubtitleInfo) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *ModelRemoteSubtitleInfo) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *ModelRemoteSubtitleInfo) SetComment(v string) {
	o.Comment = &v
}

// GetDateCreated returns the DateCreated field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ModelRemoteSubtitleInfo) GetDateCreated() time.Time {
	if o == nil || IsNil(o.DateCreated.Get()) {
		var ret time.Time
		return ret
	}
	return *o.DateCreated.Get()
}

// GetDateCreatedOk returns a tuple with the DateCreated field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelRemoteSubtitleInfo) GetDateCreatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.DateCreated.Get(), o.DateCreated.IsSet()
}

// HasDateCreated returns a boolean if a field has been set.
func (o *ModelRemoteSubtitleInfo) HasDateCreated() bool {
	if o != nil && o.DateCreated.IsSet() {
		return true
	}

	return false
}

// SetDateCreated gets a reference to the given NullableTime and assigns it to the DateCreated field.
func (o *ModelRemoteSubtitleInfo) SetDateCreated(v time.Time) {
	o.DateCreated.Set(&v)
}
// SetDateCreatedNil sets the value for DateCreated to be an explicit nil
func (o *ModelRemoteSubtitleInfo) SetDateCreatedNil() {
	o.DateCreated.Set(nil)
}

// UnsetDateCreated ensures that no value is present for DateCreated, not even an explicit nil
func (o *ModelRemoteSubtitleInfo) UnsetDateCreated() {
	o.DateCreated.Unset()
}

// GetCommunityRating returns the CommunityRating field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ModelRemoteSubtitleInfo) GetCommunityRating() float32 {
	if o == nil || IsNil(o.CommunityRating.Get()) {
		var ret float32
		return ret
	}
	return *o.CommunityRating.Get()
}

// GetCommunityRatingOk returns a tuple with the CommunityRating field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelRemoteSubtitleInfo) GetCommunityRatingOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.CommunityRating.Get(), o.CommunityRating.IsSet()
}

// HasCommunityRating returns a boolean if a field has been set.
func (o *ModelRemoteSubtitleInfo) HasCommunityRating() bool {
	if o != nil && o.CommunityRating.IsSet() {
		return true
	}

	return false
}

// SetCommunityRating gets a reference to the given NullableFloat32 and assigns it to the CommunityRating field.
func (o *ModelRemoteSubtitleInfo) SetCommunityRating(v float32) {
	o.CommunityRating.Set(&v)
}
// SetCommunityRatingNil sets the value for CommunityRating to be an explicit nil
func (o *ModelRemoteSubtitleInfo) SetCommunityRatingNil() {
	o.CommunityRating.Set(nil)
}

// UnsetCommunityRating ensures that no value is present for CommunityRating, not even an explicit nil
func (o *ModelRemoteSubtitleInfo) UnsetCommunityRating() {
	o.CommunityRating.Unset()
}

// GetDownloadCount returns the DownloadCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ModelRemoteSubtitleInfo) GetDownloadCount() int32 {
	if o == nil || IsNil(o.DownloadCount.Get()) {
		var ret int32
		return ret
	}
	return *o.DownloadCount.Get()
}

// GetDownloadCountOk returns a tuple with the DownloadCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelRemoteSubtitleInfo) GetDownloadCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.DownloadCount.Get(), o.DownloadCount.IsSet()
}

// HasDownloadCount returns a boolean if a field has been set.
func (o *ModelRemoteSubtitleInfo) HasDownloadCount() bool {
	if o != nil && o.DownloadCount.IsSet() {
		return true
	}

	return false
}

// SetDownloadCount gets a reference to the given NullableInt32 and assigns it to the DownloadCount field.
func (o *ModelRemoteSubtitleInfo) SetDownloadCount(v int32) {
	o.DownloadCount.Set(&v)
}
// SetDownloadCountNil sets the value for DownloadCount to be an explicit nil
func (o *ModelRemoteSubtitleInfo) SetDownloadCountNil() {
	o.DownloadCount.Set(nil)
}

// UnsetDownloadCount ensures that no value is present for DownloadCount, not even an explicit nil
func (o *ModelRemoteSubtitleInfo) UnsetDownloadCount() {
	o.DownloadCount.Unset()
}

// GetIsHashMatch returns the IsHashMatch field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ModelRemoteSubtitleInfo) GetIsHashMatch() bool {
	if o == nil || IsNil(o.IsHashMatch.Get()) {
		var ret bool
		return ret
	}
	return *o.IsHashMatch.Get()
}

// GetIsHashMatchOk returns a tuple with the IsHashMatch field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelRemoteSubtitleInfo) GetIsHashMatchOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsHashMatch.Get(), o.IsHashMatch.IsSet()
}

// HasIsHashMatch returns a boolean if a field has been set.
func (o *ModelRemoteSubtitleInfo) HasIsHashMatch() bool {
	if o != nil && o.IsHashMatch.IsSet() {
		return true
	}

	return false
}

// SetIsHashMatch gets a reference to the given NullableBool and assigns it to the IsHashMatch field.
func (o *ModelRemoteSubtitleInfo) SetIsHashMatch(v bool) {
	o.IsHashMatch.Set(&v)
}
// SetIsHashMatchNil sets the value for IsHashMatch to be an explicit nil
func (o *ModelRemoteSubtitleInfo) SetIsHashMatchNil() {
	o.IsHashMatch.Set(nil)
}

// UnsetIsHashMatch ensures that no value is present for IsHashMatch, not even an explicit nil
func (o *ModelRemoteSubtitleInfo) UnsetIsHashMatch() {
	o.IsHashMatch.Unset()
}

// GetIsForced returns the IsForced field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ModelRemoteSubtitleInfo) GetIsForced() bool {
	if o == nil || IsNil(o.IsForced.Get()) {
		var ret bool
		return ret
	}
	return *o.IsForced.Get()
}

// GetIsForcedOk returns a tuple with the IsForced field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelRemoteSubtitleInfo) GetIsForcedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsForced.Get(), o.IsForced.IsSet()
}

// HasIsForced returns a boolean if a field has been set.
func (o *ModelRemoteSubtitleInfo) HasIsForced() bool {
	if o != nil && o.IsForced.IsSet() {
		return true
	}

	return false
}

// SetIsForced gets a reference to the given NullableBool and assigns it to the IsForced field.
func (o *ModelRemoteSubtitleInfo) SetIsForced(v bool) {
	o.IsForced.Set(&v)
}
// SetIsForcedNil sets the value for IsForced to be an explicit nil
func (o *ModelRemoteSubtitleInfo) SetIsForcedNil() {
	o.IsForced.Set(nil)
}

// UnsetIsForced ensures that no value is present for IsForced, not even an explicit nil
func (o *ModelRemoteSubtitleInfo) UnsetIsForced() {
	o.IsForced.Unset()
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *ModelRemoteSubtitleInfo) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelRemoteSubtitleInfo) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *ModelRemoteSubtitleInfo) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *ModelRemoteSubtitleInfo) SetLanguage(v string) {
	o.Language = &v
}

func (o ModelRemoteSubtitleInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelRemoteSubtitleInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ThreeLetterISOLanguageName) {
		toSerialize["ThreeLetterISOLanguageName"] = o.ThreeLetterISOLanguageName
	}
	if !IsNil(o.Id) {
		toSerialize["Id"] = o.Id
	}
	if !IsNil(o.ProviderName) {
		toSerialize["ProviderName"] = o.ProviderName
	}
	if !IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if !IsNil(o.Format) {
		toSerialize["Format"] = o.Format
	}
	if !IsNil(o.Author) {
		toSerialize["Author"] = o.Author
	}
	if !IsNil(o.Comment) {
		toSerialize["Comment"] = o.Comment
	}
	if o.DateCreated.IsSet() {
		toSerialize["DateCreated"] = o.DateCreated.Get()
	}
	if o.CommunityRating.IsSet() {
		toSerialize["CommunityRating"] = o.CommunityRating.Get()
	}
	if o.DownloadCount.IsSet() {
		toSerialize["DownloadCount"] = o.DownloadCount.Get()
	}
	if o.IsHashMatch.IsSet() {
		toSerialize["IsHashMatch"] = o.IsHashMatch.Get()
	}
	if o.IsForced.IsSet() {
		toSerialize["IsForced"] = o.IsForced.Get()
	}
	if !IsNil(o.Language) {
		toSerialize["Language"] = o.Language
	}
	return toSerialize, nil
}

type NullableModelRemoteSubtitleInfo struct {
	value *ModelRemoteSubtitleInfo
	isSet bool
}

func (v NullableModelRemoteSubtitleInfo) Get() *ModelRemoteSubtitleInfo {
	return v.value
}

func (v *NullableModelRemoteSubtitleInfo) Set(val *ModelRemoteSubtitleInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableModelRemoteSubtitleInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableModelRemoteSubtitleInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelRemoteSubtitleInfo(val *ModelRemoteSubtitleInfo) *NullableModelRemoteSubtitleInfo {
	return &NullableModelRemoteSubtitleInfo{value: val, isSet: true}
}

func (v NullableModelRemoteSubtitleInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelRemoteSubtitleInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


