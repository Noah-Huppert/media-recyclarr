/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"encoding/json"
)

// checks if the ModelContainerProfile type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelContainerProfile{}

// ModelContainerProfile struct for ModelContainerProfile
type ModelContainerProfile struct {
	Type *ModelDlnaProfileType `json:"Type,omitempty"`
	Conditions []ModelProfileCondition `json:"Conditions,omitempty"`
	Container *string `json:"Container,omitempty"`
}

// NewModelContainerProfile instantiates a new ModelContainerProfile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelContainerProfile() *ModelContainerProfile {
	this := ModelContainerProfile{}
	return &this
}

// NewModelContainerProfileWithDefaults instantiates a new ModelContainerProfile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelContainerProfileWithDefaults() *ModelContainerProfile {
	this := ModelContainerProfile{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ModelContainerProfile) GetType() ModelDlnaProfileType {
	if o == nil || IsNil(o.Type) {
		var ret ModelDlnaProfileType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelContainerProfile) GetTypeOk() (*ModelDlnaProfileType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ModelContainerProfile) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given ModelDlnaProfileType and assigns it to the Type field.
func (o *ModelContainerProfile) SetType(v ModelDlnaProfileType) {
	o.Type = &v
}

// GetConditions returns the Conditions field value if set, zero value otherwise.
func (o *ModelContainerProfile) GetConditions() []ModelProfileCondition {
	if o == nil || IsNil(o.Conditions) {
		var ret []ModelProfileCondition
		return ret
	}
	return o.Conditions
}

// GetConditionsOk returns a tuple with the Conditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelContainerProfile) GetConditionsOk() ([]ModelProfileCondition, bool) {
	if o == nil || IsNil(o.Conditions) {
		return nil, false
	}
	return o.Conditions, true
}

// HasConditions returns a boolean if a field has been set.
func (o *ModelContainerProfile) HasConditions() bool {
	if o != nil && !IsNil(o.Conditions) {
		return true
	}

	return false
}

// SetConditions gets a reference to the given []ModelProfileCondition and assigns it to the Conditions field.
func (o *ModelContainerProfile) SetConditions(v []ModelProfileCondition) {
	o.Conditions = v
}

// GetContainer returns the Container field value if set, zero value otherwise.
func (o *ModelContainerProfile) GetContainer() string {
	if o == nil || IsNil(o.Container) {
		var ret string
		return ret
	}
	return *o.Container
}

// GetContainerOk returns a tuple with the Container field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelContainerProfile) GetContainerOk() (*string, bool) {
	if o == nil || IsNil(o.Container) {
		return nil, false
	}
	return o.Container, true
}

// HasContainer returns a boolean if a field has been set.
func (o *ModelContainerProfile) HasContainer() bool {
	if o != nil && !IsNil(o.Container) {
		return true
	}

	return false
}

// SetContainer gets a reference to the given string and assigns it to the Container field.
func (o *ModelContainerProfile) SetContainer(v string) {
	o.Container = &v
}

func (o ModelContainerProfile) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelContainerProfile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["Type"] = o.Type
	}
	if !IsNil(o.Conditions) {
		toSerialize["Conditions"] = o.Conditions
	}
	if !IsNil(o.Container) {
		toSerialize["Container"] = o.Container
	}
	return toSerialize, nil
}

type NullableModelContainerProfile struct {
	value *ModelContainerProfile
	isSet bool
}

func (v NullableModelContainerProfile) Get() *ModelContainerProfile {
	return v.value
}

func (v *NullableModelContainerProfile) Set(val *ModelContainerProfile) {
	v.value = val
	v.isSet = true
}

func (v NullableModelContainerProfile) IsSet() bool {
	return v.isSet
}

func (v *NullableModelContainerProfile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelContainerProfile(val *ModelContainerProfile) *NullableModelContainerProfile {
	return &NullableModelContainerProfile{value: val, isSet: true}
}

func (v NullableModelContainerProfile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelContainerProfile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


