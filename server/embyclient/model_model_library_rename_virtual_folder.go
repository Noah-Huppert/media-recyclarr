/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"encoding/json"
)

// checks if the ModelLibraryRenameVirtualFolder type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelLibraryRenameVirtualFolder{}

// ModelLibraryRenameVirtualFolder struct for ModelLibraryRenameVirtualFolder
type ModelLibraryRenameVirtualFolder struct {
	Id *string `json:"Id,omitempty"`
	NewName *string `json:"NewName,omitempty"`
}

// NewModelLibraryRenameVirtualFolder instantiates a new ModelLibraryRenameVirtualFolder object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelLibraryRenameVirtualFolder() *ModelLibraryRenameVirtualFolder {
	this := ModelLibraryRenameVirtualFolder{}
	return &this
}

// NewModelLibraryRenameVirtualFolderWithDefaults instantiates a new ModelLibraryRenameVirtualFolder object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelLibraryRenameVirtualFolderWithDefaults() *ModelLibraryRenameVirtualFolder {
	this := ModelLibraryRenameVirtualFolder{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ModelLibraryRenameVirtualFolder) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelLibraryRenameVirtualFolder) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ModelLibraryRenameVirtualFolder) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ModelLibraryRenameVirtualFolder) SetId(v string) {
	o.Id = &v
}

// GetNewName returns the NewName field value if set, zero value otherwise.
func (o *ModelLibraryRenameVirtualFolder) GetNewName() string {
	if o == nil || IsNil(o.NewName) {
		var ret string
		return ret
	}
	return *o.NewName
}

// GetNewNameOk returns a tuple with the NewName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelLibraryRenameVirtualFolder) GetNewNameOk() (*string, bool) {
	if o == nil || IsNil(o.NewName) {
		return nil, false
	}
	return o.NewName, true
}

// HasNewName returns a boolean if a field has been set.
func (o *ModelLibraryRenameVirtualFolder) HasNewName() bool {
	if o != nil && !IsNil(o.NewName) {
		return true
	}

	return false
}

// SetNewName gets a reference to the given string and assigns it to the NewName field.
func (o *ModelLibraryRenameVirtualFolder) SetNewName(v string) {
	o.NewName = &v
}

func (o ModelLibraryRenameVirtualFolder) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelLibraryRenameVirtualFolder) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["Id"] = o.Id
	}
	if !IsNil(o.NewName) {
		toSerialize["NewName"] = o.NewName
	}
	return toSerialize, nil
}

type NullableModelLibraryRenameVirtualFolder struct {
	value *ModelLibraryRenameVirtualFolder
	isSet bool
}

func (v NullableModelLibraryRenameVirtualFolder) Get() *ModelLibraryRenameVirtualFolder {
	return v.value
}

func (v *NullableModelLibraryRenameVirtualFolder) Set(val *ModelLibraryRenameVirtualFolder) {
	v.value = val
	v.isSet = true
}

func (v NullableModelLibraryRenameVirtualFolder) IsSet() bool {
	return v.isSet
}

func (v *NullableModelLibraryRenameVirtualFolder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelLibraryRenameVirtualFolder(val *ModelLibraryRenameVirtualFolder) *NullableModelLibraryRenameVirtualFolder {
	return &NullableModelLibraryRenameVirtualFolder{value: val, isSet: true}
}

func (v NullableModelLibraryRenameVirtualFolder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelLibraryRenameVirtualFolder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


