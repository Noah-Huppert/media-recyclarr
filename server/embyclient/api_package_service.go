/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// PackageServiceAPIService PackageServiceAPI service
type PackageServiceAPIService service

type PackageServiceAPIDeletePackagesInstallingByIdRequest struct {
	ctx context.Context
	ApiService *PackageServiceAPIService
	id string
}

func (r PackageServiceAPIDeletePackagesInstallingByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeletePackagesInstallingByIdExecute(r)
}

/*
DeletePackagesInstallingById Cancels a package installation

Requires authentication as administrator

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Installation Id
 @return PackageServiceAPIDeletePackagesInstallingByIdRequest
*/
func (a *PackageServiceAPIService) DeletePackagesInstallingById(ctx context.Context, id string) PackageServiceAPIDeletePackagesInstallingByIdRequest {
	return PackageServiceAPIDeletePackagesInstallingByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *PackageServiceAPIService) DeletePackagesInstallingByIdExecute(r PackageServiceAPIDeletePackagesInstallingByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PackageServiceAPIService.DeletePackagesInstallingById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Packages/Installing/{Id}"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type PackageServiceAPIGetPackagesRequest struct {
	ctx context.Context
	ApiService *PackageServiceAPIService
	packageType *string
	targetSystems *string
	isPremium *bool
	isAdult *bool
}

// Optional package type filter (System/UserInstalled)
func (r PackageServiceAPIGetPackagesRequest) PackageType(packageType string) PackageServiceAPIGetPackagesRequest {
	r.packageType = &packageType
	return r
}

// Optional. Filter by target system type. Allows multiple, comma delimited.
func (r PackageServiceAPIGetPackagesRequest) TargetSystems(targetSystems string) PackageServiceAPIGetPackagesRequest {
	r.targetSystems = &targetSystems
	return r
}

// Optional. Filter by premium status
func (r PackageServiceAPIGetPackagesRequest) IsPremium(isPremium bool) PackageServiceAPIGetPackagesRequest {
	r.isPremium = &isPremium
	return r
}

// Optional. Filter by package that contain adult content.
func (r PackageServiceAPIGetPackagesRequest) IsAdult(isAdult bool) PackageServiceAPIGetPackagesRequest {
	r.isAdult = &isAdult
	return r
}

func (r PackageServiceAPIGetPackagesRequest) Execute() ([]ModelPackageInfo, *http.Response, error) {
	return r.ApiService.GetPackagesExecute(r)
}

/*
GetPackages Gets available packages

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return PackageServiceAPIGetPackagesRequest
*/
func (a *PackageServiceAPIService) GetPackages(ctx context.Context) PackageServiceAPIGetPackagesRequest {
	return PackageServiceAPIGetPackagesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ModelPackageInfo
func (a *PackageServiceAPIService) GetPackagesExecute(r PackageServiceAPIGetPackagesRequest) ([]ModelPackageInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ModelPackageInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PackageServiceAPIService.GetPackages")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Packages"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.packageType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "PackageType", r.packageType, "")
	}
	if r.targetSystems != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "TargetSystems", r.targetSystems, "")
	}
	if r.isPremium != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IsPremium", r.isPremium, "")
	}
	if r.isAdult != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "IsAdult", r.isAdult, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type PackageServiceAPIGetPackagesByNameRequest struct {
	ctx context.Context
	ApiService *PackageServiceAPIService
	name string
	assemblyGuid *string
}

// The guid of the associated assembly
func (r PackageServiceAPIGetPackagesByNameRequest) AssemblyGuid(assemblyGuid string) PackageServiceAPIGetPackagesByNameRequest {
	r.assemblyGuid = &assemblyGuid
	return r
}

func (r PackageServiceAPIGetPackagesByNameRequest) Execute() (*ModelPackageInfo, *http.Response, error) {
	return r.ApiService.GetPackagesByNameExecute(r)
}

/*
GetPackagesByName Gets a package, by name or assembly guid

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name The name of the package
 @return PackageServiceAPIGetPackagesByNameRequest
*/
func (a *PackageServiceAPIService) GetPackagesByName(ctx context.Context, name string) PackageServiceAPIGetPackagesByNameRequest {
	return PackageServiceAPIGetPackagesByNameRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
//  @return ModelPackageInfo
func (a *PackageServiceAPIService) GetPackagesByNameExecute(r PackageServiceAPIGetPackagesByNameRequest) (*ModelPackageInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ModelPackageInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PackageServiceAPIService.GetPackagesByName")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Packages/{Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"Name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.assemblyGuid != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AssemblyGuid", r.assemblyGuid, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type PackageServiceAPIGetPackagesUpdatesRequest struct {
	ctx context.Context
	ApiService *PackageServiceAPIService
	packageType *string
}

// Package type filter (System/UserInstalled)
func (r PackageServiceAPIGetPackagesUpdatesRequest) PackageType(packageType string) PackageServiceAPIGetPackagesUpdatesRequest {
	r.packageType = &packageType
	return r
}

func (r PackageServiceAPIGetPackagesUpdatesRequest) Execute() ([]ModelPackageVersionInfo, *http.Response, error) {
	return r.ApiService.GetPackagesUpdatesExecute(r)
}

/*
GetPackagesUpdates Gets available package updates for currently installed packages

Requires authentication as administrator

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return PackageServiceAPIGetPackagesUpdatesRequest
*/
func (a *PackageServiceAPIService) GetPackagesUpdates(ctx context.Context) PackageServiceAPIGetPackagesUpdatesRequest {
	return PackageServiceAPIGetPackagesUpdatesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ModelPackageVersionInfo
func (a *PackageServiceAPIService) GetPackagesUpdatesExecute(r PackageServiceAPIGetPackagesUpdatesRequest) ([]ModelPackageVersionInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ModelPackageVersionInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PackageServiceAPIService.GetPackagesUpdates")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Packages/Updates"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.packageType == nil {
		return localVarReturnValue, nil, reportError("packageType is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "PackageType", r.packageType, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type PackageServiceAPIPostPackagesInstalledByNameRequest struct {
	ctx context.Context
	ApiService *PackageServiceAPIService
	name string
	assemblyGuid *string
	version *string
	updateClass *ModelPackageVersionClass
}

// Guid of the associated assembly
func (r PackageServiceAPIPostPackagesInstalledByNameRequest) AssemblyGuid(assemblyGuid string) PackageServiceAPIPostPackagesInstalledByNameRequest {
	r.assemblyGuid = &assemblyGuid
	return r
}

// Optional version. Defaults to latest version.
func (r PackageServiceAPIPostPackagesInstalledByNameRequest) Version(version string) PackageServiceAPIPostPackagesInstalledByNameRequest {
	r.version = &version
	return r
}

// Optional update class (Dev, Beta, Release). Defaults to Release.
func (r PackageServiceAPIPostPackagesInstalledByNameRequest) UpdateClass(updateClass ModelPackageVersionClass) PackageServiceAPIPostPackagesInstalledByNameRequest {
	r.updateClass = &updateClass
	return r
}

func (r PackageServiceAPIPostPackagesInstalledByNameRequest) Execute() (*http.Response, error) {
	return r.ApiService.PostPackagesInstalledByNameExecute(r)
}

/*
PostPackagesInstalledByName Installs a package

Requires authentication as administrator

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param name Package name
 @return PackageServiceAPIPostPackagesInstalledByNameRequest
*/
func (a *PackageServiceAPIService) PostPackagesInstalledByName(ctx context.Context, name string) PackageServiceAPIPostPackagesInstalledByNameRequest {
	return PackageServiceAPIPostPackagesInstalledByNameRequest{
		ApiService: a,
		ctx: ctx,
		name: name,
	}
}

// Execute executes the request
func (a *PackageServiceAPIService) PostPackagesInstalledByNameExecute(r PackageServiceAPIPostPackagesInstalledByNameRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PackageServiceAPIService.PostPackagesInstalledByName")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Packages/Installed/{Name}"
	localVarPath = strings.Replace(localVarPath, "{"+"Name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.assemblyGuid != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "AssemblyGuid", r.assemblyGuid, "")
	}
	if r.version != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Version", r.version, "")
	}
	if r.updateClass != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "UpdateClass", r.updateClass, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type PackageServiceAPIPostPackagesInstallingByIdDeleteRequest struct {
	ctx context.Context
	ApiService *PackageServiceAPIService
	id string
}

func (r PackageServiceAPIPostPackagesInstallingByIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.PostPackagesInstallingByIdDeleteExecute(r)
}

/*
PostPackagesInstallingByIdDelete Cancels a package installation

Requires authentication as administrator

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Installation Id
 @return PackageServiceAPIPostPackagesInstallingByIdDeleteRequest
*/
func (a *PackageServiceAPIService) PostPackagesInstallingByIdDelete(ctx context.Context, id string) PackageServiceAPIPostPackagesInstallingByIdDeleteRequest {
	return PackageServiceAPIPostPackagesInstallingByIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *PackageServiceAPIService) PostPackagesInstallingByIdDeleteExecute(r PackageServiceAPIPostPackagesInstallingByIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PackageServiceAPIService.PostPackagesInstallingByIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Packages/Installing/{Id}/Delete"
	localVarPath = strings.Replace(localVarPath, "{"+"Id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
