/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"encoding/json"
	"fmt"
)

// ModelFeatureType the model 'ModelFeatureType'
type ModelFeatureType string

// List of FeatureType
const (
	MODELFEATURETYPE_SYSTEM ModelFeatureType = "System"
	MODELFEATURETYPE_USER ModelFeatureType = "User"
)

// All allowed values of ModelFeatureType enum
var AllowedModelFeatureTypeEnumValues = []ModelFeatureType{
	"System",
	"User",
}

func (v *ModelFeatureType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ModelFeatureType(value)
	for _, existing := range AllowedModelFeatureTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ModelFeatureType", value)
}

// NewModelFeatureTypeFromValue returns a pointer to a valid ModelFeatureType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewModelFeatureTypeFromValue(v string) (*ModelFeatureType, error) {
	ev := ModelFeatureType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ModelFeatureType: valid values are %v", v, AllowedModelFeatureTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ModelFeatureType) IsValid() bool {
	for _, existing := range AllowedModelFeatureTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FeatureType value
func (v ModelFeatureType) Ptr() *ModelFeatureType {
	return &v
}

type NullableModelFeatureType struct {
	value *ModelFeatureType
	isSet bool
}

func (v NullableModelFeatureType) Get() *ModelFeatureType {
	return v.value
}

func (v *NullableModelFeatureType) Set(val *ModelFeatureType) {
	v.value = val
	v.isSet = true
}

func (v NullableModelFeatureType) IsSet() bool {
	return v.isSet
}

func (v *NullableModelFeatureType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelFeatureType(val *ModelFeatureType) *NullableModelFeatureType {
	return &NullableModelFeatureType{value: val, isSet: true}
}

func (v NullableModelFeatureType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelFeatureType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

