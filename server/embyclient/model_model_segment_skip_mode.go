/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"encoding/json"
	"fmt"
)

// ModelSegmentSkipMode the model 'ModelSegmentSkipMode'
type ModelSegmentSkipMode string

// List of SegmentSkipMode
const (
	MODELSEGMENTSKIPMODE_SHOW_BUTTON ModelSegmentSkipMode = "ShowButton"
	MODELSEGMENTSKIPMODE_AUTO_SKIP ModelSegmentSkipMode = "AutoSkip"
	MODELSEGMENTSKIPMODE_NONE ModelSegmentSkipMode = "None"
)

// All allowed values of ModelSegmentSkipMode enum
var AllowedModelSegmentSkipModeEnumValues = []ModelSegmentSkipMode{
	"ShowButton",
	"AutoSkip",
	"None",
}

func (v *ModelSegmentSkipMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ModelSegmentSkipMode(value)
	for _, existing := range AllowedModelSegmentSkipModeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ModelSegmentSkipMode", value)
}

// NewModelSegmentSkipModeFromValue returns a pointer to a valid ModelSegmentSkipMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewModelSegmentSkipModeFromValue(v string) (*ModelSegmentSkipMode, error) {
	ev := ModelSegmentSkipMode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ModelSegmentSkipMode: valid values are %v", v, AllowedModelSegmentSkipModeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ModelSegmentSkipMode) IsValid() bool {
	for _, existing := range AllowedModelSegmentSkipModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SegmentSkipMode value
func (v ModelSegmentSkipMode) Ptr() *ModelSegmentSkipMode {
	return &v
}

type NullableModelSegmentSkipMode struct {
	value *ModelSegmentSkipMode
	isSet bool
}

func (v NullableModelSegmentSkipMode) Get() *ModelSegmentSkipMode {
	return v.value
}

func (v *NullableModelSegmentSkipMode) Set(val *ModelSegmentSkipMode) {
	v.value = val
	v.isSet = true
}

func (v NullableModelSegmentSkipMode) IsSet() bool {
	return v.isSet
}

func (v *NullableModelSegmentSkipMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelSegmentSkipMode(val *ModelSegmentSkipMode) *NullableModelSegmentSkipMode {
	return &NullableModelSegmentSkipMode{value: val, isSet: true}
}

func (v NullableModelSegmentSkipMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelSegmentSkipMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

