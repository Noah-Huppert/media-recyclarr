/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"encoding/json"
	"fmt"
)

// ModelLibraryUserCopyOptions the model 'ModelLibraryUserCopyOptions'
type ModelLibraryUserCopyOptions string

// List of Library.UserCopyOptions
const (
	MODELLIBRARYUSERCOPYOPTIONS_USER_POLICY ModelLibraryUserCopyOptions = "UserPolicy"
	MODELLIBRARYUSERCOPYOPTIONS_USER_CONFIGURATION ModelLibraryUserCopyOptions = "UserConfiguration"
)

// All allowed values of ModelLibraryUserCopyOptions enum
var AllowedModelLibraryUserCopyOptionsEnumValues = []ModelLibraryUserCopyOptions{
	"UserPolicy",
	"UserConfiguration",
}

func (v *ModelLibraryUserCopyOptions) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ModelLibraryUserCopyOptions(value)
	for _, existing := range AllowedModelLibraryUserCopyOptionsEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ModelLibraryUserCopyOptions", value)
}

// NewModelLibraryUserCopyOptionsFromValue returns a pointer to a valid ModelLibraryUserCopyOptions
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewModelLibraryUserCopyOptionsFromValue(v string) (*ModelLibraryUserCopyOptions, error) {
	ev := ModelLibraryUserCopyOptions(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ModelLibraryUserCopyOptions: valid values are %v", v, AllowedModelLibraryUserCopyOptionsEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ModelLibraryUserCopyOptions) IsValid() bool {
	for _, existing := range AllowedModelLibraryUserCopyOptionsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Library.UserCopyOptions value
func (v ModelLibraryUserCopyOptions) Ptr() *ModelLibraryUserCopyOptions {
	return &v
}

type NullableModelLibraryUserCopyOptions struct {
	value *ModelLibraryUserCopyOptions
	isSet bool
}

func (v NullableModelLibraryUserCopyOptions) Get() *ModelLibraryUserCopyOptions {
	return v.value
}

func (v *NullableModelLibraryUserCopyOptions) Set(val *ModelLibraryUserCopyOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableModelLibraryUserCopyOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableModelLibraryUserCopyOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelLibraryUserCopyOptions(val *ModelLibraryUserCopyOptions) *NullableModelLibraryUserCopyOptions {
	return &NullableModelLibraryUserCopyOptions{value: val, isSet: true}
}

func (v NullableModelLibraryUserCopyOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelLibraryUserCopyOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

