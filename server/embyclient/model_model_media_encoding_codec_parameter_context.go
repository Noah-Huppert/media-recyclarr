/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"encoding/json"
	"fmt"
)

// ModelMediaEncodingCodecParameterContext the model 'ModelMediaEncodingCodecParameterContext'
type ModelMediaEncodingCodecParameterContext string

// List of MediaEncoding.CodecParameterContext
const (
	MODELMEDIAENCODINGCODECPARAMETERCONTEXT_PLAYBACK ModelMediaEncodingCodecParameterContext = "Playback"
	MODELMEDIAENCODINGCODECPARAMETERCONTEXT_CONVERSION ModelMediaEncodingCodecParameterContext = "Conversion"
)

// All allowed values of ModelMediaEncodingCodecParameterContext enum
var AllowedModelMediaEncodingCodecParameterContextEnumValues = []ModelMediaEncodingCodecParameterContext{
	"Playback",
	"Conversion",
}

func (v *ModelMediaEncodingCodecParameterContext) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ModelMediaEncodingCodecParameterContext(value)
	for _, existing := range AllowedModelMediaEncodingCodecParameterContextEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ModelMediaEncodingCodecParameterContext", value)
}

// NewModelMediaEncodingCodecParameterContextFromValue returns a pointer to a valid ModelMediaEncodingCodecParameterContext
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewModelMediaEncodingCodecParameterContextFromValue(v string) (*ModelMediaEncodingCodecParameterContext, error) {
	ev := ModelMediaEncodingCodecParameterContext(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ModelMediaEncodingCodecParameterContext: valid values are %v", v, AllowedModelMediaEncodingCodecParameterContextEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ModelMediaEncodingCodecParameterContext) IsValid() bool {
	for _, existing := range AllowedModelMediaEncodingCodecParameterContextEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MediaEncoding.CodecParameterContext value
func (v ModelMediaEncodingCodecParameterContext) Ptr() *ModelMediaEncodingCodecParameterContext {
	return &v
}

type NullableModelMediaEncodingCodecParameterContext struct {
	value *ModelMediaEncodingCodecParameterContext
	isSet bool
}

func (v NullableModelMediaEncodingCodecParameterContext) Get() *ModelMediaEncodingCodecParameterContext {
	return v.value
}

func (v *NullableModelMediaEncodingCodecParameterContext) Set(val *ModelMediaEncodingCodecParameterContext) {
	v.value = val
	v.isSet = true
}

func (v NullableModelMediaEncodingCodecParameterContext) IsSet() bool {
	return v.isSet
}

func (v *NullableModelMediaEncodingCodecParameterContext) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelMediaEncodingCodecParameterContext(val *ModelMediaEncodingCodecParameterContext) *NullableModelMediaEncodingCodecParameterContext {
	return &NullableModelMediaEncodingCodecParameterContext{value: val, isSet: true}
}

func (v NullableModelMediaEncodingCodecParameterContext) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelMediaEncodingCodecParameterContext) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

