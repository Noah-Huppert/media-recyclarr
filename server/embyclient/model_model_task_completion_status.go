/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"encoding/json"
	"fmt"
)

// ModelTaskCompletionStatus the model 'ModelTaskCompletionStatus'
type ModelTaskCompletionStatus string

// List of TaskCompletionStatus
const (
	MODELTASKCOMPLETIONSTATUS_COMPLETED ModelTaskCompletionStatus = "Completed"
	MODELTASKCOMPLETIONSTATUS_FAILED ModelTaskCompletionStatus = "Failed"
	MODELTASKCOMPLETIONSTATUS_CANCELLED ModelTaskCompletionStatus = "Cancelled"
	MODELTASKCOMPLETIONSTATUS_ABORTED ModelTaskCompletionStatus = "Aborted"
)

// All allowed values of ModelTaskCompletionStatus enum
var AllowedModelTaskCompletionStatusEnumValues = []ModelTaskCompletionStatus{
	"Completed",
	"Failed",
	"Cancelled",
	"Aborted",
}

func (v *ModelTaskCompletionStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ModelTaskCompletionStatus(value)
	for _, existing := range AllowedModelTaskCompletionStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ModelTaskCompletionStatus", value)
}

// NewModelTaskCompletionStatusFromValue returns a pointer to a valid ModelTaskCompletionStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewModelTaskCompletionStatusFromValue(v string) (*ModelTaskCompletionStatus, error) {
	ev := ModelTaskCompletionStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ModelTaskCompletionStatus: valid values are %v", v, AllowedModelTaskCompletionStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ModelTaskCompletionStatus) IsValid() bool {
	for _, existing := range AllowedModelTaskCompletionStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TaskCompletionStatus value
func (v ModelTaskCompletionStatus) Ptr() *ModelTaskCompletionStatus {
	return &v
}

type NullableModelTaskCompletionStatus struct {
	value *ModelTaskCompletionStatus
	isSet bool
}

func (v NullableModelTaskCompletionStatus) Get() *ModelTaskCompletionStatus {
	return v.value
}

func (v *NullableModelTaskCompletionStatus) Set(val *ModelTaskCompletionStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableModelTaskCompletionStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableModelTaskCompletionStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelTaskCompletionStatus(val *ModelTaskCompletionStatus) *NullableModelTaskCompletionStatus {
	return &NullableModelTaskCompletionStatus{value: val, isSet: true}
}

func (v NullableModelTaskCompletionStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelTaskCompletionStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

