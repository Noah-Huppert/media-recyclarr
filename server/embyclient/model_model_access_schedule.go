/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"encoding/json"
)

// checks if the ModelAccessSchedule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelAccessSchedule{}

// ModelAccessSchedule struct for ModelAccessSchedule
type ModelAccessSchedule struct {
	DayOfWeek *ModelDynamicDayOfWeek `json:"DayOfWeek,omitempty"`
	StartHour *float64 `json:"StartHour,omitempty"`
	EndHour *float64 `json:"EndHour,omitempty"`
}

// NewModelAccessSchedule instantiates a new ModelAccessSchedule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelAccessSchedule() *ModelAccessSchedule {
	this := ModelAccessSchedule{}
	return &this
}

// NewModelAccessScheduleWithDefaults instantiates a new ModelAccessSchedule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelAccessScheduleWithDefaults() *ModelAccessSchedule {
	this := ModelAccessSchedule{}
	return &this
}

// GetDayOfWeek returns the DayOfWeek field value if set, zero value otherwise.
func (o *ModelAccessSchedule) GetDayOfWeek() ModelDynamicDayOfWeek {
	if o == nil || IsNil(o.DayOfWeek) {
		var ret ModelDynamicDayOfWeek
		return ret
	}
	return *o.DayOfWeek
}

// GetDayOfWeekOk returns a tuple with the DayOfWeek field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelAccessSchedule) GetDayOfWeekOk() (*ModelDynamicDayOfWeek, bool) {
	if o == nil || IsNil(o.DayOfWeek) {
		return nil, false
	}
	return o.DayOfWeek, true
}

// HasDayOfWeek returns a boolean if a field has been set.
func (o *ModelAccessSchedule) HasDayOfWeek() bool {
	if o != nil && !IsNil(o.DayOfWeek) {
		return true
	}

	return false
}

// SetDayOfWeek gets a reference to the given ModelDynamicDayOfWeek and assigns it to the DayOfWeek field.
func (o *ModelAccessSchedule) SetDayOfWeek(v ModelDynamicDayOfWeek) {
	o.DayOfWeek = &v
}

// GetStartHour returns the StartHour field value if set, zero value otherwise.
func (o *ModelAccessSchedule) GetStartHour() float64 {
	if o == nil || IsNil(o.StartHour) {
		var ret float64
		return ret
	}
	return *o.StartHour
}

// GetStartHourOk returns a tuple with the StartHour field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelAccessSchedule) GetStartHourOk() (*float64, bool) {
	if o == nil || IsNil(o.StartHour) {
		return nil, false
	}
	return o.StartHour, true
}

// HasStartHour returns a boolean if a field has been set.
func (o *ModelAccessSchedule) HasStartHour() bool {
	if o != nil && !IsNil(o.StartHour) {
		return true
	}

	return false
}

// SetStartHour gets a reference to the given float64 and assigns it to the StartHour field.
func (o *ModelAccessSchedule) SetStartHour(v float64) {
	o.StartHour = &v
}

// GetEndHour returns the EndHour field value if set, zero value otherwise.
func (o *ModelAccessSchedule) GetEndHour() float64 {
	if o == nil || IsNil(o.EndHour) {
		var ret float64
		return ret
	}
	return *o.EndHour
}

// GetEndHourOk returns a tuple with the EndHour field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelAccessSchedule) GetEndHourOk() (*float64, bool) {
	if o == nil || IsNil(o.EndHour) {
		return nil, false
	}
	return o.EndHour, true
}

// HasEndHour returns a boolean if a field has been set.
func (o *ModelAccessSchedule) HasEndHour() bool {
	if o != nil && !IsNil(o.EndHour) {
		return true
	}

	return false
}

// SetEndHour gets a reference to the given float64 and assigns it to the EndHour field.
func (o *ModelAccessSchedule) SetEndHour(v float64) {
	o.EndHour = &v
}

func (o ModelAccessSchedule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelAccessSchedule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DayOfWeek) {
		toSerialize["DayOfWeek"] = o.DayOfWeek
	}
	if !IsNil(o.StartHour) {
		toSerialize["StartHour"] = o.StartHour
	}
	if !IsNil(o.EndHour) {
		toSerialize["EndHour"] = o.EndHour
	}
	return toSerialize, nil
}

type NullableModelAccessSchedule struct {
	value *ModelAccessSchedule
	isSet bool
}

func (v NullableModelAccessSchedule) Get() *ModelAccessSchedule {
	return v.value
}

func (v *NullableModelAccessSchedule) Set(val *ModelAccessSchedule) {
	v.value = val
	v.isSet = true
}

func (v NullableModelAccessSchedule) IsSet() bool {
	return v.isSet
}

func (v *NullableModelAccessSchedule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelAccessSchedule(val *ModelAccessSchedule) *NullableModelAccessSchedule {
	return &NullableModelAccessSchedule{value: val, isSet: true}
}

func (v NullableModelAccessSchedule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelAccessSchedule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


