/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"encoding/json"
	"fmt"
)

// ModelSubtitlePlaybackMode the model 'ModelSubtitlePlaybackMode'
type ModelSubtitlePlaybackMode string

// List of SubtitlePlaybackMode
const (
	MODELSUBTITLEPLAYBACKMODE_DEFAULT ModelSubtitlePlaybackMode = "Default"
	MODELSUBTITLEPLAYBACKMODE_ALWAYS ModelSubtitlePlaybackMode = "Always"
	MODELSUBTITLEPLAYBACKMODE_ONLY_FORCED ModelSubtitlePlaybackMode = "OnlyForced"
	MODELSUBTITLEPLAYBACKMODE_NONE ModelSubtitlePlaybackMode = "None"
	MODELSUBTITLEPLAYBACKMODE_SMART ModelSubtitlePlaybackMode = "Smart"
)

// All allowed values of ModelSubtitlePlaybackMode enum
var AllowedModelSubtitlePlaybackModeEnumValues = []ModelSubtitlePlaybackMode{
	"Default",
	"Always",
	"OnlyForced",
	"None",
	"Smart",
}

func (v *ModelSubtitlePlaybackMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ModelSubtitlePlaybackMode(value)
	for _, existing := range AllowedModelSubtitlePlaybackModeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ModelSubtitlePlaybackMode", value)
}

// NewModelSubtitlePlaybackModeFromValue returns a pointer to a valid ModelSubtitlePlaybackMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewModelSubtitlePlaybackModeFromValue(v string) (*ModelSubtitlePlaybackMode, error) {
	ev := ModelSubtitlePlaybackMode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ModelSubtitlePlaybackMode: valid values are %v", v, AllowedModelSubtitlePlaybackModeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ModelSubtitlePlaybackMode) IsValid() bool {
	for _, existing := range AllowedModelSubtitlePlaybackModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SubtitlePlaybackMode value
func (v ModelSubtitlePlaybackMode) Ptr() *ModelSubtitlePlaybackMode {
	return &v
}

type NullableModelSubtitlePlaybackMode struct {
	value *ModelSubtitlePlaybackMode
	isSet bool
}

func (v NullableModelSubtitlePlaybackMode) Get() *ModelSubtitlePlaybackMode {
	return v.value
}

func (v *NullableModelSubtitlePlaybackMode) Set(val *ModelSubtitlePlaybackMode) {
	v.value = val
	v.isSet = true
}

func (v NullableModelSubtitlePlaybackMode) IsSet() bool {
	return v.isSet
}

func (v *NullableModelSubtitlePlaybackMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelSubtitlePlaybackMode(val *ModelSubtitlePlaybackMode) *NullableModelSubtitlePlaybackMode {
	return &NullableModelSubtitlePlaybackMode{value: val, isSet: true}
}

func (v NullableModelSubtitlePlaybackMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelSubtitlePlaybackMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

