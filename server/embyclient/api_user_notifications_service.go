/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// UserNotificationsServiceAPIService UserNotificationsServiceAPI service
type UserNotificationsServiceAPIService service

type UserNotificationsServiceAPIGetNotificationsServicesDefaultsRequest struct {
	ctx context.Context
	ApiService *UserNotificationsServiceAPIService
}

func (r UserNotificationsServiceAPIGetNotificationsServicesDefaultsRequest) Execute() (*ModelUserNotificationInfo, *http.Response, error) {
	return r.ApiService.GetNotificationsServicesDefaultsExecute(r)
}

/*
GetNotificationsServicesDefaults Gets default notification info

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return UserNotificationsServiceAPIGetNotificationsServicesDefaultsRequest
*/
func (a *UserNotificationsServiceAPIService) GetNotificationsServicesDefaults(ctx context.Context) UserNotificationsServiceAPIGetNotificationsServicesDefaultsRequest {
	return UserNotificationsServiceAPIGetNotificationsServicesDefaultsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ModelUserNotificationInfo
func (a *UserNotificationsServiceAPIService) GetNotificationsServicesDefaultsExecute(r UserNotificationsServiceAPIGetNotificationsServicesDefaultsRequest) (*ModelUserNotificationInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ModelUserNotificationInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserNotificationsServiceAPIService.GetNotificationsServicesDefaults")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Notifications/Services/Defaults"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type UserNotificationsServiceAPIPostNotificationsServicesTestRequest struct {
	ctx context.Context
	ApiService *UserNotificationsServiceAPIService
	modelUserNotificationInfo *ModelUserNotificationInfo
}

// UserNotificationInfo: 
func (r UserNotificationsServiceAPIPostNotificationsServicesTestRequest) ModelUserNotificationInfo(modelUserNotificationInfo ModelUserNotificationInfo) UserNotificationsServiceAPIPostNotificationsServicesTestRequest {
	r.modelUserNotificationInfo = &modelUserNotificationInfo
	return r
}

func (r UserNotificationsServiceAPIPostNotificationsServicesTestRequest) Execute() (*http.Response, error) {
	return r.ApiService.PostNotificationsServicesTestExecute(r)
}

/*
PostNotificationsServicesTest Sends a test notification

Requires authentication as user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return UserNotificationsServiceAPIPostNotificationsServicesTestRequest
*/
func (a *UserNotificationsServiceAPIService) PostNotificationsServicesTest(ctx context.Context) UserNotificationsServiceAPIPostNotificationsServicesTestRequest {
	return UserNotificationsServiceAPIPostNotificationsServicesTestRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *UserNotificationsServiceAPIService) PostNotificationsServicesTestExecute(r UserNotificationsServiceAPIPostNotificationsServicesTestRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserNotificationsServiceAPIService.PostNotificationsServicesTest")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/Notifications/Services/Test"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.modelUserNotificationInfo == nil {
		return nil, reportError("modelUserNotificationInfo is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.modelUserNotificationInfo
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apikeyauth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api_key", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
