/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"encoding/json"
)

// checks if the ModelTaskInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelTaskInfo{}

// ModelTaskInfo struct for ModelTaskInfo
type ModelTaskInfo struct {
	Name *string `json:"Name,omitempty"`
	State *ModelTaskState `json:"State,omitempty"`
	CurrentProgressPercentage NullableFloat64 `json:"CurrentProgressPercentage,omitempty"`
	Id *string `json:"Id,omitempty"`
	LastExecutionResult *ModelTaskResult `json:"LastExecutionResult,omitempty"`
	Triggers []ModelTaskTriggerInfo `json:"Triggers,omitempty"`
	Description *string `json:"Description,omitempty"`
	Category *string `json:"Category,omitempty"`
	IsHidden *bool `json:"IsHidden,omitempty"`
	Key *string `json:"Key,omitempty"`
}

// NewModelTaskInfo instantiates a new ModelTaskInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelTaskInfo() *ModelTaskInfo {
	this := ModelTaskInfo{}
	return &this
}

// NewModelTaskInfoWithDefaults instantiates a new ModelTaskInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelTaskInfoWithDefaults() *ModelTaskInfo {
	this := ModelTaskInfo{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ModelTaskInfo) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelTaskInfo) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ModelTaskInfo) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ModelTaskInfo) SetName(v string) {
	o.Name = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *ModelTaskInfo) GetState() ModelTaskState {
	if o == nil || IsNil(o.State) {
		var ret ModelTaskState
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelTaskInfo) GetStateOk() (*ModelTaskState, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *ModelTaskInfo) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given ModelTaskState and assigns it to the State field.
func (o *ModelTaskInfo) SetState(v ModelTaskState) {
	o.State = &v
}

// GetCurrentProgressPercentage returns the CurrentProgressPercentage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ModelTaskInfo) GetCurrentProgressPercentage() float64 {
	if o == nil || IsNil(o.CurrentProgressPercentage.Get()) {
		var ret float64
		return ret
	}
	return *o.CurrentProgressPercentage.Get()
}

// GetCurrentProgressPercentageOk returns a tuple with the CurrentProgressPercentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelTaskInfo) GetCurrentProgressPercentageOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.CurrentProgressPercentage.Get(), o.CurrentProgressPercentage.IsSet()
}

// HasCurrentProgressPercentage returns a boolean if a field has been set.
func (o *ModelTaskInfo) HasCurrentProgressPercentage() bool {
	if o != nil && o.CurrentProgressPercentage.IsSet() {
		return true
	}

	return false
}

// SetCurrentProgressPercentage gets a reference to the given NullableFloat64 and assigns it to the CurrentProgressPercentage field.
func (o *ModelTaskInfo) SetCurrentProgressPercentage(v float64) {
	o.CurrentProgressPercentage.Set(&v)
}
// SetCurrentProgressPercentageNil sets the value for CurrentProgressPercentage to be an explicit nil
func (o *ModelTaskInfo) SetCurrentProgressPercentageNil() {
	o.CurrentProgressPercentage.Set(nil)
}

// UnsetCurrentProgressPercentage ensures that no value is present for CurrentProgressPercentage, not even an explicit nil
func (o *ModelTaskInfo) UnsetCurrentProgressPercentage() {
	o.CurrentProgressPercentage.Unset()
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ModelTaskInfo) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelTaskInfo) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ModelTaskInfo) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ModelTaskInfo) SetId(v string) {
	o.Id = &v
}

// GetLastExecutionResult returns the LastExecutionResult field value if set, zero value otherwise.
func (o *ModelTaskInfo) GetLastExecutionResult() ModelTaskResult {
	if o == nil || IsNil(o.LastExecutionResult) {
		var ret ModelTaskResult
		return ret
	}
	return *o.LastExecutionResult
}

// GetLastExecutionResultOk returns a tuple with the LastExecutionResult field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelTaskInfo) GetLastExecutionResultOk() (*ModelTaskResult, bool) {
	if o == nil || IsNil(o.LastExecutionResult) {
		return nil, false
	}
	return o.LastExecutionResult, true
}

// HasLastExecutionResult returns a boolean if a field has been set.
func (o *ModelTaskInfo) HasLastExecutionResult() bool {
	if o != nil && !IsNil(o.LastExecutionResult) {
		return true
	}

	return false
}

// SetLastExecutionResult gets a reference to the given ModelTaskResult and assigns it to the LastExecutionResult field.
func (o *ModelTaskInfo) SetLastExecutionResult(v ModelTaskResult) {
	o.LastExecutionResult = &v
}

// GetTriggers returns the Triggers field value if set, zero value otherwise.
func (o *ModelTaskInfo) GetTriggers() []ModelTaskTriggerInfo {
	if o == nil || IsNil(o.Triggers) {
		var ret []ModelTaskTriggerInfo
		return ret
	}
	return o.Triggers
}

// GetTriggersOk returns a tuple with the Triggers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelTaskInfo) GetTriggersOk() ([]ModelTaskTriggerInfo, bool) {
	if o == nil || IsNil(o.Triggers) {
		return nil, false
	}
	return o.Triggers, true
}

// HasTriggers returns a boolean if a field has been set.
func (o *ModelTaskInfo) HasTriggers() bool {
	if o != nil && !IsNil(o.Triggers) {
		return true
	}

	return false
}

// SetTriggers gets a reference to the given []ModelTaskTriggerInfo and assigns it to the Triggers field.
func (o *ModelTaskInfo) SetTriggers(v []ModelTaskTriggerInfo) {
	o.Triggers = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ModelTaskInfo) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelTaskInfo) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ModelTaskInfo) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ModelTaskInfo) SetDescription(v string) {
	o.Description = &v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *ModelTaskInfo) GetCategory() string {
	if o == nil || IsNil(o.Category) {
		var ret string
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelTaskInfo) GetCategoryOk() (*string, bool) {
	if o == nil || IsNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *ModelTaskInfo) HasCategory() bool {
	if o != nil && !IsNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given string and assigns it to the Category field.
func (o *ModelTaskInfo) SetCategory(v string) {
	o.Category = &v
}

// GetIsHidden returns the IsHidden field value if set, zero value otherwise.
func (o *ModelTaskInfo) GetIsHidden() bool {
	if o == nil || IsNil(o.IsHidden) {
		var ret bool
		return ret
	}
	return *o.IsHidden
}

// GetIsHiddenOk returns a tuple with the IsHidden field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelTaskInfo) GetIsHiddenOk() (*bool, bool) {
	if o == nil || IsNil(o.IsHidden) {
		return nil, false
	}
	return o.IsHidden, true
}

// HasIsHidden returns a boolean if a field has been set.
func (o *ModelTaskInfo) HasIsHidden() bool {
	if o != nil && !IsNil(o.IsHidden) {
		return true
	}

	return false
}

// SetIsHidden gets a reference to the given bool and assigns it to the IsHidden field.
func (o *ModelTaskInfo) SetIsHidden(v bool) {
	o.IsHidden = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *ModelTaskInfo) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelTaskInfo) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *ModelTaskInfo) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *ModelTaskInfo) SetKey(v string) {
	o.Key = &v
}

func (o ModelTaskInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelTaskInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if !IsNil(o.State) {
		toSerialize["State"] = o.State
	}
	if o.CurrentProgressPercentage.IsSet() {
		toSerialize["CurrentProgressPercentage"] = o.CurrentProgressPercentage.Get()
	}
	if !IsNil(o.Id) {
		toSerialize["Id"] = o.Id
	}
	if !IsNil(o.LastExecutionResult) {
		toSerialize["LastExecutionResult"] = o.LastExecutionResult
	}
	if !IsNil(o.Triggers) {
		toSerialize["Triggers"] = o.Triggers
	}
	if !IsNil(o.Description) {
		toSerialize["Description"] = o.Description
	}
	if !IsNil(o.Category) {
		toSerialize["Category"] = o.Category
	}
	if !IsNil(o.IsHidden) {
		toSerialize["IsHidden"] = o.IsHidden
	}
	if !IsNil(o.Key) {
		toSerialize["Key"] = o.Key
	}
	return toSerialize, nil
}

type NullableModelTaskInfo struct {
	value *ModelTaskInfo
	isSet bool
}

func (v NullableModelTaskInfo) Get() *ModelTaskInfo {
	return v.value
}

func (v *NullableModelTaskInfo) Set(val *ModelTaskInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableModelTaskInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableModelTaskInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelTaskInfo(val *ModelTaskInfo) *NullableModelTaskInfo {
	return &NullableModelTaskInfo{value: val, isSet: true}
}

func (v NullableModelTaskInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelTaskInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


