/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"encoding/json"
	"fmt"
)

// ModelPackageVersionClass the model 'ModelPackageVersionClass'
type ModelPackageVersionClass string

// List of PackageVersionClass
const (
	MODELPACKAGEVERSIONCLASS_RELEASE ModelPackageVersionClass = "Release"
	MODELPACKAGEVERSIONCLASS_BETA ModelPackageVersionClass = "Beta"
	MODELPACKAGEVERSIONCLASS_DEV ModelPackageVersionClass = "Dev"
)

// All allowed values of ModelPackageVersionClass enum
var AllowedModelPackageVersionClassEnumValues = []ModelPackageVersionClass{
	"Release",
	"Beta",
	"Dev",
}

func (v *ModelPackageVersionClass) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ModelPackageVersionClass(value)
	for _, existing := range AllowedModelPackageVersionClassEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ModelPackageVersionClass", value)
}

// NewModelPackageVersionClassFromValue returns a pointer to a valid ModelPackageVersionClass
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewModelPackageVersionClassFromValue(v string) (*ModelPackageVersionClass, error) {
	ev := ModelPackageVersionClass(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ModelPackageVersionClass: valid values are %v", v, AllowedModelPackageVersionClassEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ModelPackageVersionClass) IsValid() bool {
	for _, existing := range AllowedModelPackageVersionClassEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PackageVersionClass value
func (v ModelPackageVersionClass) Ptr() *ModelPackageVersionClass {
	return &v
}

type NullableModelPackageVersionClass struct {
	value *ModelPackageVersionClass
	isSet bool
}

func (v NullableModelPackageVersionClass) Get() *ModelPackageVersionClass {
	return v.value
}

func (v *NullableModelPackageVersionClass) Set(val *ModelPackageVersionClass) {
	v.value = val
	v.isSet = true
}

func (v NullableModelPackageVersionClass) IsSet() bool {
	return v.isSet
}

func (v *NullableModelPackageVersionClass) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelPackageVersionClass(val *ModelPackageVersionClass) *NullableModelPackageVersionClass {
	return &NullableModelPackageVersionClass{value: val, isSet: true}
}

func (v NullableModelPackageVersionClass) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelPackageVersionClass) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

