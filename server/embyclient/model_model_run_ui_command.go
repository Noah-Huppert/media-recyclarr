/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"encoding/json"
)

// checks if the ModelRunUICommand type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelRunUICommand{}

// ModelRunUICommand struct for ModelRunUICommand
type ModelRunUICommand struct {
	PageId *string `json:"PageId,omitempty"`
	CommandId *string `json:"CommandId,omitempty"`
	Data *string `json:"Data,omitempty"`
	ItemId *string `json:"ItemId,omitempty"`
	ClientLocale *string `json:"ClientLocale,omitempty"`
}

// NewModelRunUICommand instantiates a new ModelRunUICommand object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelRunUICommand() *ModelRunUICommand {
	this := ModelRunUICommand{}
	return &this
}

// NewModelRunUICommandWithDefaults instantiates a new ModelRunUICommand object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelRunUICommandWithDefaults() *ModelRunUICommand {
	this := ModelRunUICommand{}
	return &this
}

// GetPageId returns the PageId field value if set, zero value otherwise.
func (o *ModelRunUICommand) GetPageId() string {
	if o == nil || IsNil(o.PageId) {
		var ret string
		return ret
	}
	return *o.PageId
}

// GetPageIdOk returns a tuple with the PageId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelRunUICommand) GetPageIdOk() (*string, bool) {
	if o == nil || IsNil(o.PageId) {
		return nil, false
	}
	return o.PageId, true
}

// HasPageId returns a boolean if a field has been set.
func (o *ModelRunUICommand) HasPageId() bool {
	if o != nil && !IsNil(o.PageId) {
		return true
	}

	return false
}

// SetPageId gets a reference to the given string and assigns it to the PageId field.
func (o *ModelRunUICommand) SetPageId(v string) {
	o.PageId = &v
}

// GetCommandId returns the CommandId field value if set, zero value otherwise.
func (o *ModelRunUICommand) GetCommandId() string {
	if o == nil || IsNil(o.CommandId) {
		var ret string
		return ret
	}
	return *o.CommandId
}

// GetCommandIdOk returns a tuple with the CommandId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelRunUICommand) GetCommandIdOk() (*string, bool) {
	if o == nil || IsNil(o.CommandId) {
		return nil, false
	}
	return o.CommandId, true
}

// HasCommandId returns a boolean if a field has been set.
func (o *ModelRunUICommand) HasCommandId() bool {
	if o != nil && !IsNil(o.CommandId) {
		return true
	}

	return false
}

// SetCommandId gets a reference to the given string and assigns it to the CommandId field.
func (o *ModelRunUICommand) SetCommandId(v string) {
	o.CommandId = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *ModelRunUICommand) GetData() string {
	if o == nil || IsNil(o.Data) {
		var ret string
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelRunUICommand) GetDataOk() (*string, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *ModelRunUICommand) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given string and assigns it to the Data field.
func (o *ModelRunUICommand) SetData(v string) {
	o.Data = &v
}

// GetItemId returns the ItemId field value if set, zero value otherwise.
func (o *ModelRunUICommand) GetItemId() string {
	if o == nil || IsNil(o.ItemId) {
		var ret string
		return ret
	}
	return *o.ItemId
}

// GetItemIdOk returns a tuple with the ItemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelRunUICommand) GetItemIdOk() (*string, bool) {
	if o == nil || IsNil(o.ItemId) {
		return nil, false
	}
	return o.ItemId, true
}

// HasItemId returns a boolean if a field has been set.
func (o *ModelRunUICommand) HasItemId() bool {
	if o != nil && !IsNil(o.ItemId) {
		return true
	}

	return false
}

// SetItemId gets a reference to the given string and assigns it to the ItemId field.
func (o *ModelRunUICommand) SetItemId(v string) {
	o.ItemId = &v
}

// GetClientLocale returns the ClientLocale field value if set, zero value otherwise.
func (o *ModelRunUICommand) GetClientLocale() string {
	if o == nil || IsNil(o.ClientLocale) {
		var ret string
		return ret
	}
	return *o.ClientLocale
}

// GetClientLocaleOk returns a tuple with the ClientLocale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelRunUICommand) GetClientLocaleOk() (*string, bool) {
	if o == nil || IsNil(o.ClientLocale) {
		return nil, false
	}
	return o.ClientLocale, true
}

// HasClientLocale returns a boolean if a field has been set.
func (o *ModelRunUICommand) HasClientLocale() bool {
	if o != nil && !IsNil(o.ClientLocale) {
		return true
	}

	return false
}

// SetClientLocale gets a reference to the given string and assigns it to the ClientLocale field.
func (o *ModelRunUICommand) SetClientLocale(v string) {
	o.ClientLocale = &v
}

func (o ModelRunUICommand) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelRunUICommand) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PageId) {
		toSerialize["PageId"] = o.PageId
	}
	if !IsNil(o.CommandId) {
		toSerialize["CommandId"] = o.CommandId
	}
	if !IsNil(o.Data) {
		toSerialize["Data"] = o.Data
	}
	if !IsNil(o.ItemId) {
		toSerialize["ItemId"] = o.ItemId
	}
	if !IsNil(o.ClientLocale) {
		toSerialize["ClientLocale"] = o.ClientLocale
	}
	return toSerialize, nil
}

type NullableModelRunUICommand struct {
	value *ModelRunUICommand
	isSet bool
}

func (v NullableModelRunUICommand) Get() *ModelRunUICommand {
	return v.value
}

func (v *NullableModelRunUICommand) Set(val *ModelRunUICommand) {
	v.value = val
	v.isSet = true
}

func (v NullableModelRunUICommand) IsSet() bool {
	return v.isSet
}

func (v *NullableModelRunUICommand) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelRunUICommand(val *ModelRunUICommand) *NullableModelRunUICommand {
	return &NullableModelRunUICommand{value: val, isSet: true}
}

func (v NullableModelRunUICommand) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelRunUICommand) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


