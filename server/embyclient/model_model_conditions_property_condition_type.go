/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"encoding/json"
	"fmt"
)

// ModelConditionsPropertyConditionType the model 'ModelConditionsPropertyConditionType'
type ModelConditionsPropertyConditionType string

// List of Conditions.PropertyConditionType
const (
	MODELCONDITIONSPROPERTYCONDITIONTYPE_VISIBLE ModelConditionsPropertyConditionType = "Visible"
	MODELCONDITIONSPROPERTYCONDITIONTYPE_ENABLED ModelConditionsPropertyConditionType = "Enabled"
)

// All allowed values of ModelConditionsPropertyConditionType enum
var AllowedModelConditionsPropertyConditionTypeEnumValues = []ModelConditionsPropertyConditionType{
	"Visible",
	"Enabled",
}

func (v *ModelConditionsPropertyConditionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ModelConditionsPropertyConditionType(value)
	for _, existing := range AllowedModelConditionsPropertyConditionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ModelConditionsPropertyConditionType", value)
}

// NewModelConditionsPropertyConditionTypeFromValue returns a pointer to a valid ModelConditionsPropertyConditionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewModelConditionsPropertyConditionTypeFromValue(v string) (*ModelConditionsPropertyConditionType, error) {
	ev := ModelConditionsPropertyConditionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ModelConditionsPropertyConditionType: valid values are %v", v, AllowedModelConditionsPropertyConditionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ModelConditionsPropertyConditionType) IsValid() bool {
	for _, existing := range AllowedModelConditionsPropertyConditionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Conditions.PropertyConditionType value
func (v ModelConditionsPropertyConditionType) Ptr() *ModelConditionsPropertyConditionType {
	return &v
}

type NullableModelConditionsPropertyConditionType struct {
	value *ModelConditionsPropertyConditionType
	isSet bool
}

func (v NullableModelConditionsPropertyConditionType) Get() *ModelConditionsPropertyConditionType {
	return v.value
}

func (v *NullableModelConditionsPropertyConditionType) Set(val *ModelConditionsPropertyConditionType) {
	v.value = val
	v.isSet = true
}

func (v NullableModelConditionsPropertyConditionType) IsSet() bool {
	return v.isSet
}

func (v *NullableModelConditionsPropertyConditionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelConditionsPropertyConditionType(val *ModelConditionsPropertyConditionType) *NullableModelConditionsPropertyConditionType {
	return &NullableModelConditionsPropertyConditionType{value: val, isSet: true}
}

func (v NullableModelConditionsPropertyConditionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelConditionsPropertyConditionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

