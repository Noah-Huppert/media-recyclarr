/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"encoding/json"
	"fmt"
)

// ModelPlaystateCommand the model 'ModelPlaystateCommand'
type ModelPlaystateCommand string

// List of PlaystateCommand
const (
	MODELPLAYSTATECOMMAND_STOP ModelPlaystateCommand = "Stop"
	MODELPLAYSTATECOMMAND_PAUSE ModelPlaystateCommand = "Pause"
	MODELPLAYSTATECOMMAND_UNPAUSE ModelPlaystateCommand = "Unpause"
	MODELPLAYSTATECOMMAND_NEXT_TRACK ModelPlaystateCommand = "NextTrack"
	MODELPLAYSTATECOMMAND_PREVIOUS_TRACK ModelPlaystateCommand = "PreviousTrack"
	MODELPLAYSTATECOMMAND_SEEK ModelPlaystateCommand = "Seek"
	MODELPLAYSTATECOMMAND_REWIND ModelPlaystateCommand = "Rewind"
	MODELPLAYSTATECOMMAND_FAST_FORWARD ModelPlaystateCommand = "FastForward"
	MODELPLAYSTATECOMMAND_PLAY_PAUSE ModelPlaystateCommand = "PlayPause"
	MODELPLAYSTATECOMMAND_SEEK_RELATIVE ModelPlaystateCommand = "SeekRelative"
)

// All allowed values of ModelPlaystateCommand enum
var AllowedModelPlaystateCommandEnumValues = []ModelPlaystateCommand{
	"Stop",
	"Pause",
	"Unpause",
	"NextTrack",
	"PreviousTrack",
	"Seek",
	"Rewind",
	"FastForward",
	"PlayPause",
	"SeekRelative",
}

func (v *ModelPlaystateCommand) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ModelPlaystateCommand(value)
	for _, existing := range AllowedModelPlaystateCommandEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ModelPlaystateCommand", value)
}

// NewModelPlaystateCommandFromValue returns a pointer to a valid ModelPlaystateCommand
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewModelPlaystateCommandFromValue(v string) (*ModelPlaystateCommand, error) {
	ev := ModelPlaystateCommand(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ModelPlaystateCommand: valid values are %v", v, AllowedModelPlaystateCommandEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ModelPlaystateCommand) IsValid() bool {
	for _, existing := range AllowedModelPlaystateCommandEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PlaystateCommand value
func (v ModelPlaystateCommand) Ptr() *ModelPlaystateCommand {
	return &v
}

type NullableModelPlaystateCommand struct {
	value *ModelPlaystateCommand
	isSet bool
}

func (v NullableModelPlaystateCommand) Get() *ModelPlaystateCommand {
	return v.value
}

func (v *NullableModelPlaystateCommand) Set(val *ModelPlaystateCommand) {
	v.value = val
	v.isSet = true
}

func (v NullableModelPlaystateCommand) IsSet() bool {
	return v.isSet
}

func (v *NullableModelPlaystateCommand) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelPlaystateCommand(val *ModelPlaystateCommand) *NullableModelPlaystateCommand {
	return &NullableModelPlaystateCommand{value: val, isSet: true}
}

func (v NullableModelPlaystateCommand) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelPlaystateCommand) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

