/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"encoding/json"
	"fmt"
)

// ModelMarkerType the model 'ModelMarkerType'
type ModelMarkerType string

// List of MarkerType
const (
	MODELMARKERTYPE_CHAPTER ModelMarkerType = "Chapter"
	MODELMARKERTYPE_INTRO_START ModelMarkerType = "IntroStart"
	MODELMARKERTYPE_INTRO_END ModelMarkerType = "IntroEnd"
	MODELMARKERTYPE_CREDITS_START ModelMarkerType = "CreditsStart"
)

// All allowed values of ModelMarkerType enum
var AllowedModelMarkerTypeEnumValues = []ModelMarkerType{
	"Chapter",
	"IntroStart",
	"IntroEnd",
	"CreditsStart",
}

func (v *ModelMarkerType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ModelMarkerType(value)
	for _, existing := range AllowedModelMarkerTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ModelMarkerType", value)
}

// NewModelMarkerTypeFromValue returns a pointer to a valid ModelMarkerType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewModelMarkerTypeFromValue(v string) (*ModelMarkerType, error) {
	ev := ModelMarkerType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ModelMarkerType: valid values are %v", v, AllowedModelMarkerTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ModelMarkerType) IsValid() bool {
	for _, existing := range AllowedModelMarkerTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MarkerType value
func (v ModelMarkerType) Ptr() *ModelMarkerType {
	return &v
}

type NullableModelMarkerType struct {
	value *ModelMarkerType
	isSet bool
}

func (v NullableModelMarkerType) Get() *ModelMarkerType {
	return v.value
}

func (v *NullableModelMarkerType) Set(val *ModelMarkerType) {
	v.value = val
	v.isSet = true
}

func (v NullableModelMarkerType) IsSet() bool {
	return v.isSet
}

func (v *NullableModelMarkerType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelMarkerType(val *ModelMarkerType) *NullableModelMarkerType {
	return &NullableModelMarkerType{value: val, isSet: true}
}

func (v NullableModelMarkerType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelMarkerType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

