/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"encoding/json"
	"fmt"
)

// ModelPersonType the model 'ModelPersonType'
type ModelPersonType string

// List of PersonType
const (
	MODELPERSONTYPE_ACTOR ModelPersonType = "Actor"
	MODELPERSONTYPE_DIRECTOR ModelPersonType = "Director"
	MODELPERSONTYPE_WRITER ModelPersonType = "Writer"
	MODELPERSONTYPE_PRODUCER ModelPersonType = "Producer"
	MODELPERSONTYPE_GUEST_STAR ModelPersonType = "GuestStar"
	MODELPERSONTYPE_COMPOSER ModelPersonType = "Composer"
	MODELPERSONTYPE_CONDUCTOR ModelPersonType = "Conductor"
	MODELPERSONTYPE_LYRICIST ModelPersonType = "Lyricist"
)

// All allowed values of ModelPersonType enum
var AllowedModelPersonTypeEnumValues = []ModelPersonType{
	"Actor",
	"Director",
	"Writer",
	"Producer",
	"GuestStar",
	"Composer",
	"Conductor",
	"Lyricist",
}

func (v *ModelPersonType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ModelPersonType(value)
	for _, existing := range AllowedModelPersonTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ModelPersonType", value)
}

// NewModelPersonTypeFromValue returns a pointer to a valid ModelPersonType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewModelPersonTypeFromValue(v string) (*ModelPersonType, error) {
	ev := ModelPersonType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ModelPersonType: valid values are %v", v, AllowedModelPersonTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ModelPersonType) IsValid() bool {
	for _, existing := range AllowedModelPersonTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PersonType value
func (v ModelPersonType) Ptr() *ModelPersonType {
	return &v
}

type NullableModelPersonType struct {
	value *ModelPersonType
	isSet bool
}

func (v NullableModelPersonType) Get() *ModelPersonType {
	return v.value
}

func (v *NullableModelPersonType) Set(val *ModelPersonType) {
	v.value = val
	v.isSet = true
}

func (v NullableModelPersonType) IsSet() bool {
	return v.isSet
}

func (v *NullableModelPersonType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelPersonType(val *ModelPersonType) *NullableModelPersonType {
	return &NullableModelPersonType{value: val, isSet: true}
}

func (v NullableModelPersonType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelPersonType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

