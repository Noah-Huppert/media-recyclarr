/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"encoding/json"
	"fmt"
)

// ModelLiveTvKeywordType the model 'ModelLiveTvKeywordType'
type ModelLiveTvKeywordType string

// List of LiveTv.KeywordType
const (
	MODELLIVETVKEYWORDTYPE_NAME ModelLiveTvKeywordType = "Name"
	MODELLIVETVKEYWORDTYPE_EPISODE_TITLE ModelLiveTvKeywordType = "EpisodeTitle"
	MODELLIVETVKEYWORDTYPE_OVERVIEW ModelLiveTvKeywordType = "Overview"
	MODELLIVETVKEYWORDTYPE_ACTOR ModelLiveTvKeywordType = "Actor"
	MODELLIVETVKEYWORDTYPE_DIRECTOR ModelLiveTvKeywordType = "Director"
)

// All allowed values of ModelLiveTvKeywordType enum
var AllowedModelLiveTvKeywordTypeEnumValues = []ModelLiveTvKeywordType{
	"Name",
	"EpisodeTitle",
	"Overview",
	"Actor",
	"Director",
}

func (v *ModelLiveTvKeywordType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ModelLiveTvKeywordType(value)
	for _, existing := range AllowedModelLiveTvKeywordTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ModelLiveTvKeywordType", value)
}

// NewModelLiveTvKeywordTypeFromValue returns a pointer to a valid ModelLiveTvKeywordType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewModelLiveTvKeywordTypeFromValue(v string) (*ModelLiveTvKeywordType, error) {
	ev := ModelLiveTvKeywordType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ModelLiveTvKeywordType: valid values are %v", v, AllowedModelLiveTvKeywordTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ModelLiveTvKeywordType) IsValid() bool {
	for _, existing := range AllowedModelLiveTvKeywordTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LiveTv.KeywordType value
func (v ModelLiveTvKeywordType) Ptr() *ModelLiveTvKeywordType {
	return &v
}

type NullableModelLiveTvKeywordType struct {
	value *ModelLiveTvKeywordType
	isSet bool
}

func (v NullableModelLiveTvKeywordType) Get() *ModelLiveTvKeywordType {
	return v.value
}

func (v *NullableModelLiveTvKeywordType) Set(val *ModelLiveTvKeywordType) {
	v.value = val
	v.isSet = true
}

func (v NullableModelLiveTvKeywordType) IsSet() bool {
	return v.isSet
}

func (v *NullableModelLiveTvKeywordType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelLiveTvKeywordType(val *ModelLiveTvKeywordType) *NullableModelLiveTvKeywordType {
	return &NullableModelLiveTvKeywordType{value: val, isSet: true}
}

func (v NullableModelLiveTvKeywordType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelLiveTvKeywordType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

