/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"encoding/json"
	"fmt"
)

// ModelLiveTvChannelType the model 'ModelLiveTvChannelType'
type ModelLiveTvChannelType string

// List of LiveTv.ChannelType
const (
	MODELLIVETVCHANNELTYPE_TV ModelLiveTvChannelType = "TV"
	MODELLIVETVCHANNELTYPE_RADIO ModelLiveTvChannelType = "Radio"
)

// All allowed values of ModelLiveTvChannelType enum
var AllowedModelLiveTvChannelTypeEnumValues = []ModelLiveTvChannelType{
	"TV",
	"Radio",
}

func (v *ModelLiveTvChannelType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ModelLiveTvChannelType(value)
	for _, existing := range AllowedModelLiveTvChannelTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ModelLiveTvChannelType", value)
}

// NewModelLiveTvChannelTypeFromValue returns a pointer to a valid ModelLiveTvChannelType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewModelLiveTvChannelTypeFromValue(v string) (*ModelLiveTvChannelType, error) {
	ev := ModelLiveTvChannelType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ModelLiveTvChannelType: valid values are %v", v, AllowedModelLiveTvChannelTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ModelLiveTvChannelType) IsValid() bool {
	for _, existing := range AllowedModelLiveTvChannelTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LiveTv.ChannelType value
func (v ModelLiveTvChannelType) Ptr() *ModelLiveTvChannelType {
	return &v
}

type NullableModelLiveTvChannelType struct {
	value *ModelLiveTvChannelType
	isSet bool
}

func (v NullableModelLiveTvChannelType) Get() *ModelLiveTvChannelType {
	return v.value
}

func (v *NullableModelLiveTvChannelType) Set(val *ModelLiveTvChannelType) {
	v.value = val
	v.isSet = true
}

func (v NullableModelLiveTvChannelType) IsSet() bool {
	return v.isSet
}

func (v *NullableModelLiveTvChannelType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelLiveTvChannelType(val *ModelLiveTvChannelType) *NullableModelLiveTvChannelType {
	return &NullableModelLiveTvChannelType{value: val, isSet: true}
}

func (v NullableModelLiveTvChannelType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelLiveTvChannelType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

