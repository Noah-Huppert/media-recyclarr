/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"encoding/json"
	"fmt"
)

// ModelSystemEvent the model 'ModelSystemEvent'
type ModelSystemEvent string

// List of SystemEvent
const (
	MODELSYSTEMEVENT_WAKE_FROM_SLEEP ModelSystemEvent = "WakeFromSleep"
	MODELSYSTEMEVENT_DISPLAY_CONFIGURATION_CHANGE ModelSystemEvent = "DisplayConfigurationChange"
	MODELSYSTEMEVENT_NETWORK_CHANGE ModelSystemEvent = "NetworkChange"
)

// All allowed values of ModelSystemEvent enum
var AllowedModelSystemEventEnumValues = []ModelSystemEvent{
	"WakeFromSleep",
	"DisplayConfigurationChange",
	"NetworkChange",
}

func (v *ModelSystemEvent) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ModelSystemEvent(value)
	for _, existing := range AllowedModelSystemEventEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ModelSystemEvent", value)
}

// NewModelSystemEventFromValue returns a pointer to a valid ModelSystemEvent
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewModelSystemEventFromValue(v string) (*ModelSystemEvent, error) {
	ev := ModelSystemEvent(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ModelSystemEvent: valid values are %v", v, AllowedModelSystemEventEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ModelSystemEvent) IsValid() bool {
	for _, existing := range AllowedModelSystemEventEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SystemEvent value
func (v ModelSystemEvent) Ptr() *ModelSystemEvent {
	return &v
}

type NullableModelSystemEvent struct {
	value *ModelSystemEvent
	isSet bool
}

func (v NullableModelSystemEvent) Get() *ModelSystemEvent {
	return v.value
}

func (v *NullableModelSystemEvent) Set(val *ModelSystemEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableModelSystemEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableModelSystemEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelSystemEvent(val *ModelSystemEvent) *NullableModelSystemEvent {
	return &NullableModelSystemEvent{value: val, isSet: true}
}

func (v NullableModelSystemEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelSystemEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

