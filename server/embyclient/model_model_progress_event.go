/*
Emby Server REST API (BETA)

Explore the Emby Server API

API version: 4.8.0.61
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package embyclient

import (
	"encoding/json"
	"fmt"
)

// ModelProgressEvent the model 'ModelProgressEvent'
type ModelProgressEvent string

// List of ProgressEvent
const (
	MODELPROGRESSEVENT_TIME_UPDATE ModelProgressEvent = "TimeUpdate"
	MODELPROGRESSEVENT_PAUSE ModelProgressEvent = "Pause"
	MODELPROGRESSEVENT_UNPAUSE ModelProgressEvent = "Unpause"
	MODELPROGRESSEVENT_VOLUME_CHANGE ModelProgressEvent = "VolumeChange"
	MODELPROGRESSEVENT_REPEAT_MODE_CHANGE ModelProgressEvent = "RepeatModeChange"
	MODELPROGRESSEVENT_AUDIO_TRACK_CHANGE ModelProgressEvent = "AudioTrackChange"
	MODELPROGRESSEVENT_SUBTITLE_TRACK_CHANGE ModelProgressEvent = "SubtitleTrackChange"
	MODELPROGRESSEVENT_PLAYLIST_ITEM_MOVE ModelProgressEvent = "PlaylistItemMove"
	MODELPROGRESSEVENT_PLAYLIST_ITEM_REMOVE ModelProgressEvent = "PlaylistItemRemove"
	MODELPROGRESSEVENT_PLAYLIST_ITEM_ADD ModelProgressEvent = "PlaylistItemAdd"
	MODELPROGRESSEVENT_QUALITY_CHANGE ModelProgressEvent = "QualityChange"
	MODELPROGRESSEVENT_STATE_CHANGE ModelProgressEvent = "StateChange"
	MODELPROGRESSEVENT_SUBTITLE_OFFSET_CHANGE ModelProgressEvent = "SubtitleOffsetChange"
	MODELPROGRESSEVENT_PLAYBACK_RATE_CHANGE ModelProgressEvent = "PlaybackRateChange"
)

// All allowed values of ModelProgressEvent enum
var AllowedModelProgressEventEnumValues = []ModelProgressEvent{
	"TimeUpdate",
	"Pause",
	"Unpause",
	"VolumeChange",
	"RepeatModeChange",
	"AudioTrackChange",
	"SubtitleTrackChange",
	"PlaylistItemMove",
	"PlaylistItemRemove",
	"PlaylistItemAdd",
	"QualityChange",
	"StateChange",
	"SubtitleOffsetChange",
	"PlaybackRateChange",
}

func (v *ModelProgressEvent) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ModelProgressEvent(value)
	for _, existing := range AllowedModelProgressEventEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ModelProgressEvent", value)
}

// NewModelProgressEventFromValue returns a pointer to a valid ModelProgressEvent
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewModelProgressEventFromValue(v string) (*ModelProgressEvent, error) {
	ev := ModelProgressEvent(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ModelProgressEvent: valid values are %v", v, AllowedModelProgressEventEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ModelProgressEvent) IsValid() bool {
	for _, existing := range AllowedModelProgressEventEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ProgressEvent value
func (v ModelProgressEvent) Ptr() *ModelProgressEvent {
	return &v
}

type NullableModelProgressEvent struct {
	value *ModelProgressEvent
	isSet bool
}

func (v NullableModelProgressEvent) Get() *ModelProgressEvent {
	return v.value
}

func (v *NullableModelProgressEvent) Set(val *ModelProgressEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableModelProgressEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableModelProgressEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelProgressEvent(val *ModelProgressEvent) *NullableModelProgressEvent {
	return &NullableModelProgressEvent{value: val, isSet: true}
}

func (v NullableModelProgressEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelProgressEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

