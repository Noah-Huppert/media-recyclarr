/*
Overseerr API

This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jellyseerrclient

import (
	"encoding/json"
)

// checks if the JellyfinSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JellyfinSettings{}

// JellyfinSettings struct for JellyfinSettings
type JellyfinSettings struct {
	Name *string `json:"name,omitempty"`
	Hostname *string `json:"hostname,omitempty"`
	ExternalHostname *string `json:"externalHostname,omitempty"`
	JellyfinForgotPasswordUrl *string `json:"jellyfinForgotPasswordUrl,omitempty"`
	AdminUser *string `json:"adminUser,omitempty"`
	AdminPass *string `json:"adminPass,omitempty"`
	Libraries []JellyfinLibrary `json:"libraries,omitempty"`
	ServerID *string `json:"serverID,omitempty"`
}

// NewJellyfinSettings instantiates a new JellyfinSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJellyfinSettings() *JellyfinSettings {
	this := JellyfinSettings{}
	return &this
}

// NewJellyfinSettingsWithDefaults instantiates a new JellyfinSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJellyfinSettingsWithDefaults() *JellyfinSettings {
	this := JellyfinSettings{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *JellyfinSettings) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinSettings) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *JellyfinSettings) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *JellyfinSettings) SetName(v string) {
	o.Name = &v
}

// GetHostname returns the Hostname field value if set, zero value otherwise.
func (o *JellyfinSettings) GetHostname() string {
	if o == nil || IsNil(o.Hostname) {
		var ret string
		return ret
	}
	return *o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinSettings) GetHostnameOk() (*string, bool) {
	if o == nil || IsNil(o.Hostname) {
		return nil, false
	}
	return o.Hostname, true
}

// HasHostname returns a boolean if a field has been set.
func (o *JellyfinSettings) HasHostname() bool {
	if o != nil && !IsNil(o.Hostname) {
		return true
	}

	return false
}

// SetHostname gets a reference to the given string and assigns it to the Hostname field.
func (o *JellyfinSettings) SetHostname(v string) {
	o.Hostname = &v
}

// GetExternalHostname returns the ExternalHostname field value if set, zero value otherwise.
func (o *JellyfinSettings) GetExternalHostname() string {
	if o == nil || IsNil(o.ExternalHostname) {
		var ret string
		return ret
	}
	return *o.ExternalHostname
}

// GetExternalHostnameOk returns a tuple with the ExternalHostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinSettings) GetExternalHostnameOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalHostname) {
		return nil, false
	}
	return o.ExternalHostname, true
}

// HasExternalHostname returns a boolean if a field has been set.
func (o *JellyfinSettings) HasExternalHostname() bool {
	if o != nil && !IsNil(o.ExternalHostname) {
		return true
	}

	return false
}

// SetExternalHostname gets a reference to the given string and assigns it to the ExternalHostname field.
func (o *JellyfinSettings) SetExternalHostname(v string) {
	o.ExternalHostname = &v
}

// GetJellyfinForgotPasswordUrl returns the JellyfinForgotPasswordUrl field value if set, zero value otherwise.
func (o *JellyfinSettings) GetJellyfinForgotPasswordUrl() string {
	if o == nil || IsNil(o.JellyfinForgotPasswordUrl) {
		var ret string
		return ret
	}
	return *o.JellyfinForgotPasswordUrl
}

// GetJellyfinForgotPasswordUrlOk returns a tuple with the JellyfinForgotPasswordUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinSettings) GetJellyfinForgotPasswordUrlOk() (*string, bool) {
	if o == nil || IsNil(o.JellyfinForgotPasswordUrl) {
		return nil, false
	}
	return o.JellyfinForgotPasswordUrl, true
}

// HasJellyfinForgotPasswordUrl returns a boolean if a field has been set.
func (o *JellyfinSettings) HasJellyfinForgotPasswordUrl() bool {
	if o != nil && !IsNil(o.JellyfinForgotPasswordUrl) {
		return true
	}

	return false
}

// SetJellyfinForgotPasswordUrl gets a reference to the given string and assigns it to the JellyfinForgotPasswordUrl field.
func (o *JellyfinSettings) SetJellyfinForgotPasswordUrl(v string) {
	o.JellyfinForgotPasswordUrl = &v
}

// GetAdminUser returns the AdminUser field value if set, zero value otherwise.
func (o *JellyfinSettings) GetAdminUser() string {
	if o == nil || IsNil(o.AdminUser) {
		var ret string
		return ret
	}
	return *o.AdminUser
}

// GetAdminUserOk returns a tuple with the AdminUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinSettings) GetAdminUserOk() (*string, bool) {
	if o == nil || IsNil(o.AdminUser) {
		return nil, false
	}
	return o.AdminUser, true
}

// HasAdminUser returns a boolean if a field has been set.
func (o *JellyfinSettings) HasAdminUser() bool {
	if o != nil && !IsNil(o.AdminUser) {
		return true
	}

	return false
}

// SetAdminUser gets a reference to the given string and assigns it to the AdminUser field.
func (o *JellyfinSettings) SetAdminUser(v string) {
	o.AdminUser = &v
}

// GetAdminPass returns the AdminPass field value if set, zero value otherwise.
func (o *JellyfinSettings) GetAdminPass() string {
	if o == nil || IsNil(o.AdminPass) {
		var ret string
		return ret
	}
	return *o.AdminPass
}

// GetAdminPassOk returns a tuple with the AdminPass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinSettings) GetAdminPassOk() (*string, bool) {
	if o == nil || IsNil(o.AdminPass) {
		return nil, false
	}
	return o.AdminPass, true
}

// HasAdminPass returns a boolean if a field has been set.
func (o *JellyfinSettings) HasAdminPass() bool {
	if o != nil && !IsNil(o.AdminPass) {
		return true
	}

	return false
}

// SetAdminPass gets a reference to the given string and assigns it to the AdminPass field.
func (o *JellyfinSettings) SetAdminPass(v string) {
	o.AdminPass = &v
}

// GetLibraries returns the Libraries field value if set, zero value otherwise.
func (o *JellyfinSettings) GetLibraries() []JellyfinLibrary {
	if o == nil || IsNil(o.Libraries) {
		var ret []JellyfinLibrary
		return ret
	}
	return o.Libraries
}

// GetLibrariesOk returns a tuple with the Libraries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinSettings) GetLibrariesOk() ([]JellyfinLibrary, bool) {
	if o == nil || IsNil(o.Libraries) {
		return nil, false
	}
	return o.Libraries, true
}

// HasLibraries returns a boolean if a field has been set.
func (o *JellyfinSettings) HasLibraries() bool {
	if o != nil && !IsNil(o.Libraries) {
		return true
	}

	return false
}

// SetLibraries gets a reference to the given []JellyfinLibrary and assigns it to the Libraries field.
func (o *JellyfinSettings) SetLibraries(v []JellyfinLibrary) {
	o.Libraries = v
}

// GetServerID returns the ServerID field value if set, zero value otherwise.
func (o *JellyfinSettings) GetServerID() string {
	if o == nil || IsNil(o.ServerID) {
		var ret string
		return ret
	}
	return *o.ServerID
}

// GetServerIDOk returns a tuple with the ServerID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JellyfinSettings) GetServerIDOk() (*string, bool) {
	if o == nil || IsNil(o.ServerID) {
		return nil, false
	}
	return o.ServerID, true
}

// HasServerID returns a boolean if a field has been set.
func (o *JellyfinSettings) HasServerID() bool {
	if o != nil && !IsNil(o.ServerID) {
		return true
	}

	return false
}

// SetServerID gets a reference to the given string and assigns it to the ServerID field.
func (o *JellyfinSettings) SetServerID(v string) {
	o.ServerID = &v
}

func (o JellyfinSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JellyfinSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Hostname) {
		toSerialize["hostname"] = o.Hostname
	}
	if !IsNil(o.ExternalHostname) {
		toSerialize["externalHostname"] = o.ExternalHostname
	}
	if !IsNil(o.JellyfinForgotPasswordUrl) {
		toSerialize["jellyfinForgotPasswordUrl"] = o.JellyfinForgotPasswordUrl
	}
	if !IsNil(o.AdminUser) {
		toSerialize["adminUser"] = o.AdminUser
	}
	if !IsNil(o.AdminPass) {
		toSerialize["adminPass"] = o.AdminPass
	}
	if !IsNil(o.Libraries) {
		toSerialize["libraries"] = o.Libraries
	}
	if !IsNil(o.ServerID) {
		toSerialize["serverID"] = o.ServerID
	}
	return toSerialize, nil
}

type NullableJellyfinSettings struct {
	value *JellyfinSettings
	isSet bool
}

func (v NullableJellyfinSettings) Get() *JellyfinSettings {
	return v.value
}

func (v *NullableJellyfinSettings) Set(val *JellyfinSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableJellyfinSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableJellyfinSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJellyfinSettings(val *JellyfinSettings) *NullableJellyfinSettings {
	return &NullableJellyfinSettings{value: val, isSet: true}
}

func (v NullableJellyfinSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJellyfinSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


