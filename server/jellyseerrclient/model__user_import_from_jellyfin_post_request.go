/*
Overseerr API

This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jellyseerrclient

import (
	"encoding/json"
)

// checks if the UserImportFromJellyfinPostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserImportFromJellyfinPostRequest{}

// UserImportFromJellyfinPostRequest struct for UserImportFromJellyfinPostRequest
type UserImportFromJellyfinPostRequest struct {
	JellyfinIds []string `json:"jellyfinIds,omitempty"`
}

// NewUserImportFromJellyfinPostRequest instantiates a new UserImportFromJellyfinPostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserImportFromJellyfinPostRequest() *UserImportFromJellyfinPostRequest {
	this := UserImportFromJellyfinPostRequest{}
	return &this
}

// NewUserImportFromJellyfinPostRequestWithDefaults instantiates a new UserImportFromJellyfinPostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserImportFromJellyfinPostRequestWithDefaults() *UserImportFromJellyfinPostRequest {
	this := UserImportFromJellyfinPostRequest{}
	return &this
}

// GetJellyfinIds returns the JellyfinIds field value if set, zero value otherwise.
func (o *UserImportFromJellyfinPostRequest) GetJellyfinIds() []string {
	if o == nil || IsNil(o.JellyfinIds) {
		var ret []string
		return ret
	}
	return o.JellyfinIds
}

// GetJellyfinIdsOk returns a tuple with the JellyfinIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserImportFromJellyfinPostRequest) GetJellyfinIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.JellyfinIds) {
		return nil, false
	}
	return o.JellyfinIds, true
}

// HasJellyfinIds returns a boolean if a field has been set.
func (o *UserImportFromJellyfinPostRequest) HasJellyfinIds() bool {
	if o != nil && !IsNil(o.JellyfinIds) {
		return true
	}

	return false
}

// SetJellyfinIds gets a reference to the given []string and assigns it to the JellyfinIds field.
func (o *UserImportFromJellyfinPostRequest) SetJellyfinIds(v []string) {
	o.JellyfinIds = v
}

func (o UserImportFromJellyfinPostRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserImportFromJellyfinPostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.JellyfinIds) {
		toSerialize["jellyfinIds"] = o.JellyfinIds
	}
	return toSerialize, nil
}

type NullableUserImportFromJellyfinPostRequest struct {
	value *UserImportFromJellyfinPostRequest
	isSet bool
}

func (v NullableUserImportFromJellyfinPostRequest) Get() *UserImportFromJellyfinPostRequest {
	return v.value
}

func (v *NullableUserImportFromJellyfinPostRequest) Set(val *UserImportFromJellyfinPostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUserImportFromJellyfinPostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUserImportFromJellyfinPostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserImportFromJellyfinPostRequest(val *UserImportFromJellyfinPostRequest) *NullableUserImportFromJellyfinPostRequest {
	return &NullableUserImportFromJellyfinPostRequest{value: val, isSet: true}
}

func (v NullableUserImportFromJellyfinPostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserImportFromJellyfinPostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


