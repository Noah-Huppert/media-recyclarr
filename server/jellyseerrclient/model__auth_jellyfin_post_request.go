/*
Overseerr API

This is the documentation for the Overseerr API backend.  Two primary authentication methods are supported:  - **Cookie Authentication**: A valid sign-in to the `/auth/plex` or `/auth/local` will generate a valid authentication cookie. - **API Key Authentication**: Sign-in is also possible by passing an `X-Api-Key` header along with a valid API Key generated by Overseerr. 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package jellyseerrclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AuthJellyfinPostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuthJellyfinPostRequest{}

// AuthJellyfinPostRequest struct for AuthJellyfinPostRequest
type AuthJellyfinPostRequest struct {
	Username string `json:"username"`
	Password string `json:"password"`
	Hostname *string `json:"hostname,omitempty"`
	Email *string `json:"email,omitempty"`
}

type _AuthJellyfinPostRequest AuthJellyfinPostRequest

// NewAuthJellyfinPostRequest instantiates a new AuthJellyfinPostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthJellyfinPostRequest(username string, password string) *AuthJellyfinPostRequest {
	this := AuthJellyfinPostRequest{}
	this.Username = username
	this.Password = password
	return &this
}

// NewAuthJellyfinPostRequestWithDefaults instantiates a new AuthJellyfinPostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthJellyfinPostRequestWithDefaults() *AuthJellyfinPostRequest {
	this := AuthJellyfinPostRequest{}
	return &this
}

// GetUsername returns the Username field value
func (o *AuthJellyfinPostRequest) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *AuthJellyfinPostRequest) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *AuthJellyfinPostRequest) SetUsername(v string) {
	o.Username = v
}

// GetPassword returns the Password field value
func (o *AuthJellyfinPostRequest) GetPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *AuthJellyfinPostRequest) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *AuthJellyfinPostRequest) SetPassword(v string) {
	o.Password = v
}

// GetHostname returns the Hostname field value if set, zero value otherwise.
func (o *AuthJellyfinPostRequest) GetHostname() string {
	if o == nil || IsNil(o.Hostname) {
		var ret string
		return ret
	}
	return *o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthJellyfinPostRequest) GetHostnameOk() (*string, bool) {
	if o == nil || IsNil(o.Hostname) {
		return nil, false
	}
	return o.Hostname, true
}

// HasHostname returns a boolean if a field has been set.
func (o *AuthJellyfinPostRequest) HasHostname() bool {
	if o != nil && !IsNil(o.Hostname) {
		return true
	}

	return false
}

// SetHostname gets a reference to the given string and assigns it to the Hostname field.
func (o *AuthJellyfinPostRequest) SetHostname(v string) {
	o.Hostname = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *AuthJellyfinPostRequest) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthJellyfinPostRequest) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *AuthJellyfinPostRequest) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *AuthJellyfinPostRequest) SetEmail(v string) {
	o.Email = &v
}

func (o AuthJellyfinPostRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuthJellyfinPostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["username"] = o.Username
	toSerialize["password"] = o.Password
	if !IsNil(o.Hostname) {
		toSerialize["hostname"] = o.Hostname
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	return toSerialize, nil
}

func (o *AuthJellyfinPostRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"username",
		"password",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAuthJellyfinPostRequest := _AuthJellyfinPostRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAuthJellyfinPostRequest)

	if err != nil {
		return err
	}

	*o = AuthJellyfinPostRequest(varAuthJellyfinPostRequest)

	return err
}

type NullableAuthJellyfinPostRequest struct {
	value *AuthJellyfinPostRequest
	isSet bool
}

func (v NullableAuthJellyfinPostRequest) Get() *AuthJellyfinPostRequest {
	return v.value
}

func (v *NullableAuthJellyfinPostRequest) Set(val *AuthJellyfinPostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthJellyfinPostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthJellyfinPostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthJellyfinPostRequest(val *AuthJellyfinPostRequest) *NullableAuthJellyfinPostRequest {
	return &NullableAuthJellyfinPostRequest{value: val, isSet: true}
}

func (v NullableAuthJellyfinPostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthJellyfinPostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


